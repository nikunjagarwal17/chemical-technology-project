/* Generated by Cython 0.29.37 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "NPY_NO_DEPRECATED_API",
                "NPY_1_7_API_VERSION"
            ]
        ],
        "depends": [
            "C:\\Users\\nikun\\AppData\\Local\\Temp\\pip-build-env-2d2rtdxg\\overlay\\Lib\\site-packages\\numpy\\_core\\include\\numpy\\arrayobject.h",
            "C:\\Users\\nikun\\AppData\\Local\\Temp\\pip-build-env-2d2rtdxg\\overlay\\Lib\\site-packages\\numpy\\_core\\include\\numpy\\arrayscalars.h",
            "C:\\Users\\nikun\\AppData\\Local\\Temp\\pip-build-env-2d2rtdxg\\overlay\\Lib\\site-packages\\numpy\\_core\\include\\numpy\\ndarrayobject.h",
            "C:\\Users\\nikun\\AppData\\Local\\Temp\\pip-build-env-2d2rtdxg\\overlay\\Lib\\site-packages\\numpy\\_core\\include\\numpy\\ndarraytypes.h",
            "C:\\Users\\nikun\\AppData\\Local\\Temp\\pip-build-env-2d2rtdxg\\overlay\\Lib\\site-packages\\numpy\\_core\\include\\numpy\\ufuncobject.h",
            "C:\\Users\\nikun\\OneDrive\\Documents\\Chemical Technology Project\\project\\src\\core.h"
        ],
        "extra_compile_args": [
            "/std:c++17"
        ],
        "include_dirs": [
            "C:\\Users\\nikun\\OneDrive\\Documents\\Chemical Technology Project\\project\\src",
            "C:\\Users\\nikun\\AppData\\Local\\Temp\\pip-build-env-2d2rtdxg\\overlay\\Lib\\site-packages\\numpy\\_core\\include",
            "C:\\Users\\nikun\\OneDrive\\Documents\\Chemical Technology Project\\project\\pyroxa"
        ],
        "language": "c++",
        "library_dirs": [
            "C:\\Users\\nikun\\OneDrive\\Documents\\Chemical Technology Project\\project"
        ],
        "name": "pyroxa._pybindings",
        "sources": [
            "pyroxa/pybindings.pyx",
            "src/core.cpp"
        ]
    },
    "module_name": "pyroxa._pybindings"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_37"
#define CYTHON_HEX_VERSION 0x001D25F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS ((PY_VERSION_HEX >= 0x030600B1) && (PY_VERSION_HEX < 0x030C00A5))
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pyroxa___pybindings
#define __PYX_HAVE_API__pyroxa___pybindings
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "core.h"

    /* Using NumPy API declarations from "numpy/__init__.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif (defined(_Complex_I) && !defined(_MSC_VER))
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "stringsource",
  "pyroxa\\pybindings.pyx",
  "__init__.pxd",
  "type.pxd",
};

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":658
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":659
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":660
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * 
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":661
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_uint8      uint8_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":663
 * ctypedef npy_int64      int64_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":664
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":665
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * 
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":666
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_float32    float32_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":668
 * ctypedef npy_uint64     uint64_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":669
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":676
 * ctypedef double complex complex128_t
 * 
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":677
 * 
 * ctypedef npy_longlong   longlong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":679
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":680
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":682
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":683
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":684
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef float complex       cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< long double > __pyx_t_long_double_complex;
  #else
    typedef long double _Complex __pyx_t_long_double_complex;
  #endif
#else
    typedef struct { long double real, imag; } __pyx_t_long_double_complex;
#endif
static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double, long double);


/*--- Type declarations ---*/
struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics;
struct __pyx_obj_6pyroxa_11_pybindings_Reaction;
struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti;
struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor;
struct __pyx_obj_6pyroxa_11_pybindings_Reactor;
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation;
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr;
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis;
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr;
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution;
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr;
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr;
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr;

/* "pyroxa/pybindings.pyx":259
 * 
 * 
 * cdef class Thermodynamics:             # <<<<<<<<<<<<<<
 * 	cdef double cp
 * 
 */
struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics {
  PyObject_HEAD
  double cp;
};


/* "pyroxa/pybindings.pyx":272
 * 
 * 
 * cdef class Reaction:             # <<<<<<<<<<<<<<
 * 	cdef double kf
 * 	cdef double kr
 */
struct __pyx_obj_6pyroxa_11_pybindings_Reaction {
  PyObject_HEAD
  double kf;
  double kr;
};


/* "pyroxa/pybindings.pyx":284
 * 
 * 
 * cdef class ReactionMulti:             # <<<<<<<<<<<<<<
 * 	cdef double kf
 * 	cdef double kr
 */
struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pyroxa_11_pybindings_ReactionMulti *__pyx_vtab;
  double kf;
  double kr;
  PyObject *reactants;
  PyObject *products;
};


/* "pyroxa/pybindings.pyx":317
 * 
 * 
 * cdef class MultiReactor:             # <<<<<<<<<<<<<<
 * 	cdef list species
 * 	cdef list conc
 */
struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor *__pyx_vtab;
  PyObject *species;
  PyObject *conc;
  PyObject *reactions;
  double T;
};


/* "pyroxa/pybindings.pyx":368
 * 
 * 
 * cdef class Reactor:             # <<<<<<<<<<<<<<
 * 	cdef double kf
 * 	cdef double kr
 */
struct __pyx_obj_6pyroxa_11_pybindings_Reactor {
  PyObject_HEAD
  double kf;
  double kr;
  double A0;
  double B0;
  double time_span;
  double dt;
};


/* "pyroxa/pybindings.pyx":944
 * 		free(weight_c)
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):             # <<<<<<<<<<<<<<
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:
 */
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation {
  PyObject_HEAD
  PyObject *__pyx_v_mass_balance_list;
};


/* "pyroxa/pybindings.pyx":968
 * 			'is_conserved': result > 0,
 * 			'mass_balance': mass_balance_list,
 * 			'max_violation': max(abs(x) for x in mass_balance_list)             # <<<<<<<<<<<<<<
 * 		}
 * 	finally:
 */
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation *__pyx_outer_scope;
  PyObject *__pyx_v_x;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};


/* "pyroxa/pybindings.pyx":1303
 * 	return jacobian.tolist()
 * 
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):             # <<<<<<<<<<<<<<
 * 	"""Perform stability analysis around steady state"""
 * 	import numpy as np
 */
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis {
  PyObject_HEAD
  PyObject *__pyx_v_eigenvalues;
};


/* "pyroxa/pybindings.pyx":1314
 * 		eigenvalues.append(eigenval)
 * 
 * 	is_stable = all(ev < 0 for ev in eigenvalues)             # <<<<<<<<<<<<<<
 * 
 * 	return {
 */
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis *__pyx_outer_scope;
  PyObject *__pyx_v_ev;
};


/* "pyroxa/pybindings.pyx":1855
 * 		free(statistics_output)
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):             # <<<<<<<<<<<<<<
 * 	"""Calculate residence time distribution for tank series"""
 * 	import numpy as np
 */
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution {
  PyObject_HEAD
  PyObject *__pyx_v_flow_rates;
  PyObject *__pyx_v_mean_residence_times;
  PyObject *__pyx_v_n_tanks;
  PyObject *__pyx_v_volumes;
};


/* "pyroxa/pybindings.pyx":1869
 * 
 * 	# Overall mean residence time
 * 	total_volume = sum(volumes[i] for i in range(n_tanks))             # <<<<<<<<<<<<<<
 * 	total_flow = sum(flow_rates[i] for i in range(n_tanks))
 * 	overall_mean_tau = total_volume / total_flow if total_flow > 0 else 0.0
 */
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *__pyx_outer_scope;
  PyObject *__pyx_v_i;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "pyroxa/pybindings.pyx":1870
 * 	# Overall mean residence time
 * 	total_volume = sum(volumes[i] for i in range(n_tanks))
 * 	total_flow = sum(flow_rates[i] for i in range(n_tanks))             # <<<<<<<<<<<<<<
 * 	overall_mean_tau = total_volume / total_flow if total_flow > 0 else 0.0
 * 
 */
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *__pyx_outer_scope;
  PyObject *__pyx_v_i;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "pyroxa/pybindings.pyx":1874
 * 
 * 	# Calculate variance (assuming CSTR in series)
 * 	variance = sum(tau**2 for tau in mean_residence_times)             # <<<<<<<<<<<<<<
 * 
 * 	return {
 */
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *__pyx_outer_scope;
  PyObject *__pyx_v_tau;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};



/* "pyroxa/pybindings.pyx":284
 * 
 * 
 * cdef class ReactionMulti:             # <<<<<<<<<<<<<<
 * 	cdef double kf
 * 	cdef double kr
 */

struct __pyx_vtabstruct_6pyroxa_11_pybindings_ReactionMulti {
  double (*rate)(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pyroxa_11_pybindings_ReactionMulti *__pyx_vtabptr_6pyroxa_11_pybindings_ReactionMulti;


/* "pyroxa/pybindings.pyx":317
 * 
 * 
 * cdef class MultiReactor:             # <<<<<<<<<<<<<<
 * 	cdef list species
 * 	cdef list conc
 */

struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor {
  PyObject *(*_dcdt)(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor *__pyx_vtabptr_6pyroxa_11_pybindings_MultiReactor;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?\
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(Py_SIZE(x) >= 0) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_AddCObj(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_SubtractCObj(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_0_29_37
#define __PYX_HAVE_RT_ImportType_proto_0_29_37
#if __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_37(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_37(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_0_29_37 {
   __Pyx_ImportType_CheckSize_Error_0_29_37 = 0,
   __Pyx_ImportType_CheckSize_Warn_0_29_37 = 1,
   __Pyx_ImportType_CheckSize_Ignore_0_29_37 = 2
};
static PyTypeObject *__Pyx_ImportType_0_29_37(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_37 check_size);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_long__double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_long__double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_long__double(a, b) ((a)-(b))
    #define __Pyx_c_prod_long__double(a, b) ((a)*(b))
    #define __Pyx_c_quot_long__double(a, b) ((a)/(b))
    #define __Pyx_c_neg_long__double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_long__double(z) ((z)==(long double)0)
    #define __Pyx_c_conj_long__double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_long__double(z)     (::std::abs(z))
        #define __Pyx_c_pow_long__double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_long__double(z) ((z)==0)
    #define __Pyx_c_conj_long__double(z)    (conjl(z))
    #if 1
        #define __Pyx_c_abs_long__double(z)     (cabsl(z))
        #define __Pyx_c_pow_long__double(a, b)  (cpowl(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_sum_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_diff_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_prod_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_neg_long__double(__pyx_t_long_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_long__double(__pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_conj_long__double(__pyx_t_long_double_complex);
    #if 1
        static CYTHON_INLINE long double __Pyx_c_abs_long__double(__pyx_t_long_double_complex);
        static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_pow_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static double __pyx_f_6pyroxa_11_pybindings_13ReactionMulti_rate(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, PyObject *__pyx_v_conc, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6pyroxa_11_pybindings_12MultiReactor__dcdt(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, PyObject *__pyx_v_conc, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cython' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'pyroxa._pybindings' */
static PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics = 0;
static PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings_Reaction = 0;
static PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti = 0;
static PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings_MultiReactor = 0;
static PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings_Reactor = 0;
static PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation = 0;
static PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis = 0;
static PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution = 0;
static PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr = 0;
static PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr = 0;
static PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr = 0;
#define __Pyx_MODULE_NAME "pyroxa._pybindings"
extern int __pyx_module_is_main_pyroxa___pybindings;
int __pyx_module_is_main_pyroxa___pybindings = 0;

/* Implementation of 'pyroxa._pybindings' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_round;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_M[] = "M";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_P[] = "P";
static const char __pyx_k_R[] = "R";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_V[] = "V";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_A0[] = "A0";
static const char __pyx_k_B0[] = "B0";
static const char __pyx_k_Ea[] = "Ea";
static const char __pyx_k_Kd[] = "Kd";
static const char __pyx_k_Ki[] = "Ki";
static const char __pyx_k_Km[] = "Km";
static const char __pyx_k_Kp[] = "Kp";
static const char __pyx_k_Pc[] = "Pc";
static const char __pyx_k_Pr[] = "Pr";
static const char __pyx_k_Re[] = "Re";
static const char __pyx_k_Sc[] = "Sc";
static const char __pyx_k_Tc[] = "Tc";
static const char __pyx_k_cp[] = "cp";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_k1[] = "k1";
static const char __pyx_k_k2[] = "k2";
static const char __pyx_k_kf[] = "kf";
static const char __pyx_k_kr[] = "kr";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_nu[] = "nu";
static const char __pyx_k_A_c[] = "A_c";
static const char __pyx_k_B_c[] = "B_c";
static const char __pyx_k_C_c[] = "C_c";
static const char __pyx_k_K_A[] = "K_A";
static const char __pyx_k_K_B[] = "K_B";
static const char __pyx_k_b_c[] = "b_c";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_run[] = "run";
static const char __pyx_k_rxn[] = "rxn";
static const char __pyx_k_sim[] = "sim";
static const char __pyx_k_std[] = "std";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_tau[] = "tau";
static const char __pyx_k_x_c[] = "x_c";
static const char __pyx_k_Ea_f[] = "Ea_f";
static const char __pyx_k_Ea_r[] = "Ea_r";
static const char __pyx_k_Vmax[] = "Vmax";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_carr[] = "carr";
static const char __pyx_k_conc[] = "conc";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dcdt[] = "_dcdt";
static const char __pyx_k_dydt[] = "dydt";
static const char __pyx_k_kf_c[] = "kf_c";
static const char __pyx_k_kr_c[] = "kr_c";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_npts[] = "npts";
static const char __pyx_k_nseg[] = "nseg";
static const char __pyx_k_rate[] = "rate";
static const char __pyx_k_rxns[] = "rxns";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_spec[] = "spec";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_tarr[] = "tarr";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_traj[] = "traj";
static const char __pyx_k_A_inv[] = "A_inv";
static const char __pyx_k_A_out[] = "A_out";
static const char __pyx_k_B_out[] = "B_out";
static const char __pyx_k_C_out[] = "C_out";
static const char __pyx_k_T_ref[] = "T_ref";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_conc0[] = "conc0";
static const char __pyx_k_concs[] = "concs";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_exp_c[] = "exp_c";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_ndata[] = "ndata";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_omega[] = "omega";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_rates[] = "rates";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_sim_c[] = "sim_c";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_times[] = "times";
static const char __pyx_k_x_new[] = "x_new";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_A_list[] = "A_list";
static const char __pyx_k_B_list[] = "B_list";
static const char __pyx_k_C_list[] = "C_list";
static const char __pyx_k_Ea_f_c[] = "Ea_f_c";
static const char __pyx_k_Ea_r_c[] = "Ea_r_c";
static const char __pyx_k_bounds[] = "bounds";
static const char __pyx_k_coeffs[] = "coeffs";
static const char __pyx_k_conc_A[] = "conc_A";
static const char __pyx_k_conc_B[] = "conc_B";
static const char __pyx_k_conc_t[] = "conc_t";
static const char __pyx_k_cp_arr[] = "cp_arr";
static const char __pyx_k_ctypes[] = "ctypes";
static const char __pyx_k_data_c[] = "data_c";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_kf_arr[] = "kf_arr";
static const char __pyx_k_kf_out[] = "kf_out";
static const char __pyx_k_kf_ptr[] = "kf_ptr";
static const char __pyx_k_kf_ref[] = "kf_ref";
static const char __pyx_k_kf_std[] = "kf_std";
static const char __pyx_k_kr_arr[] = "kr_arr";
static const char __pyx_k_kr_out[] = "kr_out";
static const char __pyx_k_kr_ptr[] = "kr_ptr";
static const char __pyx_k_kr_ref[] = "kr_ref";
static const char __pyx_k_kr_std[] = "kr_std";
static const char __pyx_k_n_data[] = "n_data";
static const char __pyx_k_nsteps[] = "nsteps";
static const char __pyx_k_params[] = "params";
static const char __pyx_k_pred_c[] = "pred_c";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_setpts[] = "setpts";
static const char __pyx_k_tolist[] = "tolist";
static const char __pyx_k_volume[] = "volume";
static const char __pyx_k_x_data[] = "x_data";
static const char __pyx_k_y_data[] = "y_data";
static const char __pyx_k_A_inv_c[] = "A_inv_c";
static const char __pyx_k_Reactor[] = "Reactor";
static const char __pyx_k_c_conc0[] = "c_conc0";
static const char __pyx_k_delta_G[] = "delta_G";
static const char __pyx_k_density[] = "density";
static const char __pyx_k_entropy[] = "entropy";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_horizon[] = "horizon";
static const char __pyx_k_initial[] = "initial";
static const char __pyx_k_kf_mean[] = "kf_mean";
static const char __pyx_k_kr_mean[] = "kr_mean";
static const char __pyx_k_max_len[] = "max_len";
static const char __pyx_k_n_folds[] = "n_folds";
static const char __pyx_k_n_known[] = "n_known";
static const char __pyx_k_n_tanks[] = "n_tanks";
static const char __pyx_k_nparams[] = "nparams";
static const char __pyx_k_npoints[] = "npoints";
static const char __pyx_k_prod_nu[] = "prod_nu";
static const char __pyx_k_reac_nu[] = "reac_nu";
static const char __pyx_k_reactor[] = "reactor";
static const char __pyx_k_species[] = "species";
static const char __pyx_k_success[] = "success";
static const char __pyx_k_volumes[] = "volumes";
static const char __pyx_k_weights[] = "weights";
static const char __pyx_k_written[] = "written";
static const char __pyx_k_x_known[] = "x_known";
static const char __pyx_k_x_new_c[] = "x_new_c";
static const char __pyx_k_y_known[] = "y_known";
static const char __pyx_k_Reaction[] = "Reaction";
static const char __pyx_k_bubble_t[] = "bubble_t";
static const char __pyx_k_c_coeffs[] = "c_coeffs";
static const char __pyx_k_conc0_py[] = "conc0_py";
static const char __pyx_k_conc_arr[] = "conc_arr";
static const char __pyx_k_eigenval[] = "eigenval";
static const char __pyx_k_enthalpy[] = "enthalpy";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_jacobian[] = "jacobian";
static const char __pyx_k_kf_out_c[] = "kf_out_c";
static const char __pyx_k_kf_ref_c[] = "kf_ref_c";
static const char __pyx_k_kr_out_c[] = "kr_out_c";
static const char __pyx_k_kr_ref_c[] = "kr_ref_c";
static const char __pyx_k_max_list[] = "max_list";
static const char __pyx_k_min_list[] = "min_list";
static const char __pyx_k_n_params[] = "n_params";
static const char __pyx_k_n_points[] = "n_points";
static const char __pyx_k_nsamples[] = "nsamples";
static const char __pyx_k_nthreads[] = "nthreads";
static const char __pyx_k_params_c[] = "params_c";
static const char __pyx_k_porosity[] = "porosity";
static const char __pyx_k_pressure[] = "pressure";
static const char __pyx_k_prod_idx[] = "prod_idx";
static const char __pyx_k_prod_off[] = "prod_off";
static const char __pyx_k_products[] = "products";
static const char __pyx_k_reac_idx[] = "reac_idx";
static const char __pyx_k_reac_off[] = "reac_off";
static const char __pyx_k_reaction[] = "reaction";
static const char __pyx_k_setpoint[] = "setpoint";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_std_list[] = "std_list";
static const char __pyx_k_subarray[] = "subarray";
static const char __pyx_k_times_py[] = "times_py";
static const char __pyx_k_variance[] = "variance";
static const char __pyx_k_velocity[] = "velocity";
static const char __pyx_k_weight_c[] = "weight_c";
static const char __pyx_k_x_data_c[] = "x_data_c";
static const char __pyx_k_y_data_c[] = "y_data_c";
static const char __pyx_k_HAS_NUMPY[] = "_HAS_NUMPY";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_c_prod_nu[] = "c_prod_nu";
static const char __pyx_k_c_reac_nu[] = "c_reac_nu";
static const char __pyx_k_conc0_arr[] = "conc0_arr";
static const char __pyx_k_conc_traj[] = "conc_traj";
static const char __pyx_k_flow_rate[] = "flow_rate";
static const char __pyx_k_is_stable[] = "is_stable";
static const char __pyx_k_mean_list[] = "mean_list";
static const char __pyx_k_n_samples[] = "n_samples";
static const char __pyx_k_n_species[] = "n_species";
static const char __pyx_k_predicted[] = "predicted";
static const char __pyx_k_rates_arr[] = "rates_arr";
static const char __pyx_k_reactants[] = "reactants";
static const char __pyx_k_reactions[] = "reactions";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_setpoints[] = "setpoints";
static const char __pyx_k_time_span[] = "time_span";
static const char __pyx_k_time_step[] = "time_step";
static const char __pyx_k_times_buf[] = "times_buf";
static const char __pyx_k_times_out[] = "times_out";
static const char __pyx_k_tolerance[] = "tolerance";
static const char __pyx_k_viscosity[] = "viscosity";
static const char __pyx_k_x_known_c[] = "x_known_c";
static const char __pyx_k_y_known_c[] = "y_known_c";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_area_scale[] = "area_scale";
static const char __pyx_k_bed_height[] = "bed_height";
static const char __pyx_k_bed_length[] = "bed_length";
static const char __pyx_k_c_prod_idx[] = "c_prod_idx";
static const char __pyx_k_c_prod_off[] = "c_prod_off";
static const char __pyx_k_c_reac_idx[] = "c_reac_idx";
static const char __pyx_k_c_reac_off[] = "c_reac_off";
static const char __pyx_k_conversion[] = "conversion";
static const char __pyx_k_emulsion_t[] = "emulsion_t";
static const char __pyx_k_flow_rates[] = "flow_rates";
static const char __pyx_k_kf_std_arr[] = "kf_std_arr";
static const char __pyx_k_kr_std_arr[] = "kr_std_arr";
static const char __pyx_k_n_controls[] = "n_controls";
static const char __pyx_k_n_reactors[] = "n_reactors";
static const char __pyx_k_parameters[] = "parameters";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_reactor_id[] = "reactor_id";
static const char __pyx_k_statistics[] = "statistics";
static const char __pyx_k_times_list[] = "times_list";
static const char __pyx_k_tortuosity[] = "tortuosity";
static const char __pyx_k_total_flow[] = "total_flow";
static const char __pyx_k_total_prod[] = "total_prod";
static const char __pyx_k_total_reac[] = "total_reac";
static const char __pyx_k_x_new_list[] = "x_new_list";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_conc_matrix[] = "conc_matrix";
static const char __pyx_k_convergence[] = "convergence";
static const char __pyx_k_econ_coeffs[] = "econ_coeffs";
static const char __pyx_k_eigenvalues[] = "eigenvalues";
static const char __pyx_k_kf_mean_arr[] = "kf_mean_arr";
static const char __pyx_k_kr_mean_arr[] = "kr_mean_arr";
static const char __pyx_k_mixing_time[] = "mixing_time";
static const char __pyx_k_n_bootstrap[] = "n_bootstrap";
static const char __pyx_k_n_reactions[] = "n_reactions";
static const char __pyx_k_path_length[] = "path_length";
static const char __pyx_k_power_scale[] = "power_scale";
static const char __pyx_k_prod_nu_arr[] = "prod_nu_arr";
static const char __pyx_k_reac_nu_arr[] = "reac_nu_arr";
static const char __pyx_k_temp_factor[] = "temp_factor";
static const char __pyx_k_temperature[] = "temperature";
static const char __pyx_k_MultiReactor[] = "MultiReactor";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_bed_porosity[] = "bed_porosity";
static const char __pyx_k_distribution[] = "distribution";
static const char __pyx_k_effective_kd[] = "effective_kd";
static const char __pyx_k_experimental[] = "experimental";
static const char __pyx_k_gas_constant[] = "gas_constant";
static const char __pyx_k_gas_velocity[] = "gas_velocity";
static const char __pyx_k_is_conserved[] = "is_conserved";
static const char __pyx_k_length_scale[] = "length_scale";
static const char __pyx_k_mass_balance[] = "mass_balance";
static const char __pyx_k_pressure_out[] = "pressure_out";
static const char __pyx_k_prod_idx_arr[] = "prod_idx_arr";
static const char __pyx_k_prod_nu_list[] = "prod_nu_list";
static const char __pyx_k_prod_off_arr[] = "prod_off_arr";
static const char __pyx_k_py_entropy_c[] = "py_entropy_c";
static const char __pyx_k_reac_idx_arr[] = "reac_idx_arr";
static const char __pyx_k_reac_nu_list[] = "reac_nu_list";
static const char __pyx_k_reac_off_arr[] = "reac_off_arr";
static const char __pyx_k_scale_factor[] = "scale_factor";
static const char __pyx_k_steady_state[] = "steady_state";
static const char __pyx_k_total_volume[] = "total_volume";
static const char __pyx_k_var_params_c[] = "var_params_c";
static const char __pyx_k_ReactionMulti[] = "ReactionMulti";
static const char __pyx_k_bubble_matrix[] = "bubble_matrix";
static const char __pyx_k_conc_out_flat[] = "conc_out_flat";
static const char __pyx_k_concentration[] = "concentration";
static const char __pyx_k_current_state[] = "current_state";
static const char __pyx_k_heat_transfer[] = "heat_transfer";
static const char __pyx_k_integral_term[] = "integral_term";
static const char __pyx_k_mass_transfer[] = "mass_transfer";
static const char __pyx_k_max_violation[] = "max_violation";
static const char __pyx_k_param_samples[] = "param_samples";
static const char __pyx_k_poison_factor[] = "poison_factor";
static const char __pyx_k_pressure_drop[] = "pressure_drop";
static const char __pyx_k_prod_idx_list[] = "prod_idx_list";
static const char __pyx_k_py_enthalpy_c[] = "py_enthalpy_c";
static const char __pyx_k_quantum_yield[] = "quantum_yield";
static const char __pyx_k_reac_idx_list[] = "reac_idx_list";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_Thermodynamics[] = "Thermodynamics";
static const char __pyx_k_concentrations[] = "concentrations";
static const char __pyx_k_control_bounds[] = "control_bounds";
static const char __pyx_k_enthalpies_arr[] = "enthalpies_arr";
static const char __pyx_k_inhibitor_conc[] = "inhibitor_conc";
static const char __pyx_k_lab_conditions[] = "lab_conditions";
static const char __pyx_k_molecular_diff[] = "molecular_diff";
static const char __pyx_k_previous_error[] = "previous_error";
static const char __pyx_k_reaction_rates[] = "reaction_rates";
static const char __pyx_k_reactor_config[] = "reactor_config";
static const char __pyx_k_reactor_output[] = "reactor_output";
static const char __pyx_k_residence_time[] = "residence_time";
static const char __pyx_k_simulated_data[] = "simulated_data";
static const char __pyx_k_substrate_conc[] = "substrate_conc";
static const char __pyx_k_bubble_conc_out[] = "bubble_conc_out";
static const char __pyx_k_bubble_fraction[] = "bubble_fraction";
static const char __pyx_k_control_actions[] = "control_actions";
static const char __pyx_k_emulsion_matrix[] = "emulsion_matrix";
static const char __pyx_k_feed_conditions[] = "feed_conditions";
static const char __pyx_k_geometry_factor[] = "geometry_factor";
static const char __pyx_k_heat_capacities[] = "heat_capacities";
static const char __pyx_k_heat_generation[] = "heat_generation";
static const char __pyx_k_light_intensity[] = "light_intensity";
static const char __pyx_k_pre_exponential[] = "pre_exponential";
static const char __pyx_k_py_entropy_nasa[] = "py_entropy_nasa";
static const char __pyx_k_reactor_outputs[] = "reactor_outputs";
static const char __pyx_k_recommendations[] = "recommendations";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_catalyst_density[] = "catalyst_density";
static const char __pyx_k_control_strategy[] = "control_strategy";
static const char __pyx_k_current_activity[] = "current_activity";
static const char __pyx_k_flow_rate_adjust[] = "flow_rate_adjust";
static const char __pyx_k_initial_activity[] = "initial_activity";
static const char __pyx_k_lab_scale_volume[] = "lab_scale_volume";
static const char __pyx_k_mixing_intensity[] = "mixing_intensity";
static const char __pyx_k_optimal_controls[] = "optimal_controls";
static const char __pyx_k_optimal_settings[] = "optimal_settings";
static const char __pyx_k_overall_mean_tau[] = "overall_mean_tau";
static const char __pyx_k_pilot_conditions[] = "pilot_conditions";
static const char __pyx_k_predicted_profit[] = "predicted_profit";
static const char __pyx_k_process_variable[] = "process_variable";
static const char __pyx_k_py_calculate_aic[] = "py_calculate_aic";
static const char __pyx_k_py_enthalpy_nasa[] = "py_enthalpy_nasa";
static const char __pyx_k_py_matrix_invert[] = "py_matrix_invert";
static const char __pyx_k_reaction_network[] = "reaction_network";
static const char __pyx_k_variogram_params[] = "variogram_params";
static const char __pyx_k_Simulation_failed[] = "Simulation failed";
static const char __pyx_k_activation_energy[] = "activation_energy";
static const char __pyx_k_allocation_failed[] = "allocation failed";
static const char __pyx_k_deactivation_rate[] = "deactivation_rate";
static const char __pyx_k_emulsion_conc_out[] = "emulsion_conc_out";
static const char __pyx_k_experimental_data[] = "experimental_data";
static const char __pyx_k_mass_balance_list[] = "mass_balance_list";
static const char __pyx_k_mixing_efficiency[] = "mixing_efficiency";
static const char __pyx_k_particle_diameter[] = "particle_diameter";
static const char __pyx_k_pressure_out_list[] = "pressure_out_list";
static const char __pyx_k_py_arrhenius_rate[] = "py_arrhenius_rate";
static const char __pyx_k_py_calculate_rmse[] = "py_calculate_rmse";
static const char __pyx_k_py_mpc_controller[] = "py_mpc_controller";
static const char __pyx_k_py_pid_controller[] = "py_pid_controller";
static const char __pyx_k_statistics_output[] = "statistics_output";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_molar_absorptivity[] = "molar_absorptivity";
static const char __pyx_k_overall_conversion[] = "overall_conversion";
static const char __pyx_k_param_distribution[] = "param_distribution";
static const char __pyx_k_pilot_scale_volume[] = "pilot_scale_volume";
static const char __pyx_k_py_matrix_multiply[] = "py_matrix_multiply";
static const char __pyx_k_pyroxa__pybindings[] = "pyroxa._pybindings";
static const char __pyx_k_remaining_lifetime[] = "remaining_lifetime";
static const char __pyx_k_run_simulation_cpp[] = "run_simulation_cpp";
static const char __pyx_k_sensitivity_matrix[] = "sensitivity_matrix";
static const char __pyx_k_temperature_adjust[] = "temperature_adjust";
static const char __pyx_k_temperature_factor[] = "temperature_factor";
static const char __pyx_k_constriction_factor[] = "constriction_factor";
static const char __pyx_k_heat_generation_val[] = "heat_generation_val";
static const char __pyx_k_heat_transfer_coeff[] = "heat_transfer_coeff";
static const char __pyx_k_mean_residence_time[] = "mean_residence_time";
static const char __pyx_k_py_process_scale_up[] = "py_process_scale_up";
static const char __pyx_k_spec_must_be_a_dict[] = "spec must be a dict";
static const char __pyx_k_effectiveness_factor[] = "effectiveness_factor";
static const char __pyx_k_enthalpies_formation[] = "enthalpies_formation";
static const char __pyx_k_mean_residence_times[] = "mean_residence_times";
static const char __pyx_k_py_gibbs_free_energy[] = "py_gibbs_free_energy";
static const char __pyx_k_tank_residence_times[] = "tank_residence_times";
static const char __pyx_k_bubble_concentrations[] = "bubble_concentrations";
static const char __pyx_k_deactivation_constant[] = "deactivation_constant";
static const char __pyx_k_economic_coefficients[] = "economic_coefficients";
static const char __pyx_k_mixing_efficiency_out[] = "mixing_efficiency_out";
static const char __pyx_k_py_autocatalytic_rate[] = "py_autocatalytic_rate";
static const char __pyx_k_py_calculate_jacobian[] = "py_calculate_jacobian";
static const char __pyx_k_py_heat_capacity_nasa[] = "py_heat_capacity_nasa";
static const char __pyx_k_py_linear_interpolate[] = "py_linear_interpolate";
static const char __pyx_k_py_photochemical_rate[] = "py_photochemical_rate";
static const char __pyx_k_py_stability_analysis[] = "py_stability_analysis";
static const char __pyx_k_pyroxa_pybindings_pyx[] = "pyroxa\\pybindings.pyx";
static const char __pyx_k_current_concentrations[] = "current_concentrations";
static const char __pyx_k_dimensionless_variance[] = "dimensionless_variance";
static const char __pyx_k_parameter_distribution[] = "parameter_distribution";
static const char __pyx_k_py_calculate_r_squared[] = "py_calculate_r_squared";
static const char __pyx_k_py_pressure_drop_ergun[] = "py_pressure_drop_ergun";
static const char __pyx_k_py_simulate_packed_bed[] = "py_simulate_packed_bed";
static const char __pyx_k_py_solve_linear_system[] = "py_solve_linear_system";
static const char __pyx_k_emulsion_concentrations[] = "emulsion_concentrations";
static const char __pyx_k_partial_pressure_poison[] = "partial_pressure_poison";
static const char __pyx_k_py_equilibrium_constant[] = "py_equilibrium_constant";
static const char __pyx_k_py_fugacity_coefficient[] = "py_fugacity_coefficient";
static const char __pyx_k_Empty_concentration_data[] = "Empty concentration data";
static const char __pyx_k_py_bootstrap_uncertainty[] = "py_bootstrap_uncertainty";
static const char __pyx_k_py_calculate_sensitivity[] = "py_calculate_sensitivity";
static const char __pyx_k_py_effective_diffusivity[] = "py_effective_diffusivity";
static const char __pyx_k_py_kriging_interpolation[] = "py_kriging_interpolation";
static const char __pyx_k_py_michaelis_menten_rate[] = "py_michaelis_menten_rate";
static const char __pyx_k_A_must_be_a_square_matrix[] = "A must be a square matrix";
static const char __pyx_k_py_analytical_first_order[] = "py_analytical_first_order";
static const char __pyx_k_py_cross_validation_score[] = "py_cross_validation_score";
static const char __pyx_k_py_monte_carlo_simulation[] = "py_monte_carlo_simulation";
static const char __pyx_k_py_pressure_peng_robinson[] = "py_pressure_peng_robinson";
static const char __pyx_k_py_real_time_optimization[] = "py_real_time_optimization";
static const char __pyx_k_py_simulate_fluidized_bed[] = "py_simulate_fluidized_bed";
static const char __pyx_k_Inputs_must_be_2D_matrices[] = "Inputs must be 2D matrices";
static const char __pyx_k_py_check_mass_conservation[] = "py_check_mass_conservation";
static const char __pyx_k_allocation_failed_for_conc0[] = "allocation failed for conc0";
static const char __pyx_k_allocation_failed_for_kf_kr[] = "allocation failed for kf/kr";
static const char __pyx_k_py_calculate_energy_balance[] = "py_calculate_energy_balance";
static const char __pyx_k_py_calculate_rate_constants[] = "py_calculate_rate_constants";
static const char __pyx_k_py_cubic_spline_interpolate[] = "py_cubic_spline_interpolate";
static const char __pyx_k_Matrix_multiplication_failed[] = "Matrix multiplication failed";
static const char __pyx_k_Monitor_for_scale_up_effects[] = "Monitor for scale-up effects";
static const char __pyx_k_allocation_failed_for_coeffs[] = "allocation failed for coeffs";
static const char __pyx_k_py_heat_transfer_correlation[] = "py_heat_transfer_correlation";
static const char __pyx_k_py_langmuir_hinshelwood_rate[] = "py_langmuir_hinshelwood_rate";
static const char __pyx_k_py_mass_transfer_correlation[] = "py_mass_transfer_correlation";
static const char __pyx_k_Input_must_be_a_square_matrix[] = "Input must be a square matrix";
static const char __pyx_k_Monte_Carlo_simulation_failed[] = "Monte Carlo simulation failed";
static const char __pyx_k_py_simulate_homogeneous_batch[] = "py_simulate_homogeneous_batch";
static const char __pyx_k_allocation_failed_for_products[] = "allocation failed for products";
static const char __pyx_k_py_catalyst_deactivation_model[] = "py_catalyst_deactivation_model";
static const char __pyx_k_py_competitive_inhibition_rate[] = "py_competitive_inhibition_rate";
static const char __pyx_k_py_residence_time_distribution[] = "py_residence_time_distribution";
static const char __pyx_k_Analytical_first_order_solution[] = "Analytical first order solution failed";
static const char __pyx_k_allocation_failed_for_reactants[] = "allocation failed for reactants";
static const char __pyx_k_py_analytical_consecutive_first[] = "py_analytical_consecutive_first_order";
static const char __pyx_k_py_calculate_objective_function[] = "py_calculate_objective_function";
static const char __pyx_k_Analytical_consecutive_first_ord[] = "Analytical consecutive first order solution failed";
static const char __pyx_k_Analytical_reversible_first_orde[] = "Analytical reversible first order solution failed";
static const char __pyx_k_Consider_enhanced_mixing_at_larg[] = "Consider enhanced mixing at larger scale";
static const char __pyx_k_Energy_balance_calculation_faile[] = "Energy balance calculation failed";
static const char __pyx_k_Linear_system_solve_failed_matri[] = "Linear system solve failed (matrix may be singular)";
static const char __pyx_k_Matrix_dimensions_incompatible_f[] = "Matrix dimensions incompatible for multiplication";
static const char __pyx_k_Matrix_inversion_failed_matrix_m[] = "Matrix inversion failed (matrix may be singular)";
static const char __pyx_k_Verify_similar_residence_time_di[] = "Verify similar residence time distribution";
static const char __pyx_k_allocation_failed_for_output_buf[] = "allocation failed for output buffers";
static const char __pyx_k_b_must_be_a_vector_with_length_e[] = "b must be a vector with length equal to A's dimension";
static const char __pyx_k_multi_reactor_C_simulation_faile[] = "multi-reactor C++ simulation failed";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy__core_multiarray_failed_to[] = "numpy._core.multiarray failed to import";
static const char __pyx_k_numpy__core_umath_failed_to_impo[] = "numpy._core.umath failed to import";
static const char __pyx_k_py_analytical_reversible_first_o[] = "py_analytical_reversible_first_order";
static const char __pyx_k_py_check_mass_conservation_local[] = "py_check_mass_conservation.<locals>.genexpr";
static const char __pyx_k_py_residence_time_distribution_l[] = "py_residence_time_distribution.<locals>.genexpr";
static const char __pyx_k_py_simulate_multi_reactor_adapti[] = "py_simulate_multi_reactor_adaptive";
static const char __pyx_k_py_stability_analysis_locals_gen[] = "py_stability_analysis.<locals>.genexpr";
static const char __pyx_k_simulation_failed_or_insufficien[] = "simulation failed or insufficient buffer size";
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_u_A;
static PyObject *__pyx_n_s_A0;
static PyObject *__pyx_n_s_A_c;
static PyObject *__pyx_n_s_A_inv;
static PyObject *__pyx_n_s_A_inv_c;
static PyObject *__pyx_n_s_A_list;
static PyObject *__pyx_kp_u_A_must_be_a_square_matrix;
static PyObject *__pyx_n_s_A_out;
static PyObject *__pyx_kp_u_Analytical_consecutive_first_ord;
static PyObject *__pyx_kp_u_Analytical_first_order_solution;
static PyObject *__pyx_kp_u_Analytical_reversible_first_orde;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_n_u_B;
static PyObject *__pyx_n_s_B0;
static PyObject *__pyx_n_s_B_c;
static PyObject *__pyx_n_s_B_list;
static PyObject *__pyx_n_s_B_out;
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_n_u_C;
static PyObject *__pyx_n_s_C_c;
static PyObject *__pyx_n_s_C_list;
static PyObject *__pyx_n_s_C_out;
static PyObject *__pyx_kp_u_Consider_enhanced_mixing_at_larg;
static PyObject *__pyx_n_s_Ea;
static PyObject *__pyx_n_s_Ea_f;
static PyObject *__pyx_n_s_Ea_f_c;
static PyObject *__pyx_n_s_Ea_r;
static PyObject *__pyx_n_s_Ea_r_c;
static PyObject *__pyx_kp_u_Empty_concentration_data;
static PyObject *__pyx_kp_u_Energy_balance_calculation_faile;
static PyObject *__pyx_n_s_HAS_NUMPY;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_u_Input_must_be_a_square_matrix;
static PyObject *__pyx_kp_u_Inputs_must_be_2D_matrices;
static PyObject *__pyx_n_s_K_A;
static PyObject *__pyx_n_s_K_B;
static PyObject *__pyx_n_s_Kd;
static PyObject *__pyx_n_s_Ki;
static PyObject *__pyx_n_s_Km;
static PyObject *__pyx_n_s_Kp;
static PyObject *__pyx_kp_u_Linear_system_solve_failed_matri;
static PyObject *__pyx_n_s_M;
static PyObject *__pyx_kp_u_Matrix_dimensions_incompatible_f;
static PyObject *__pyx_kp_u_Matrix_inversion_failed_matrix_m;
static PyObject *__pyx_kp_u_Matrix_multiplication_failed;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_u_Monitor_for_scale_up_effects;
static PyObject *__pyx_kp_u_Monte_Carlo_simulation_failed;
static PyObject *__pyx_n_s_MultiReactor;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_n_s_P;
static PyObject *__pyx_n_s_Pc;
static PyObject *__pyx_n_s_Pr;
static PyObject *__pyx_n_s_R;
static PyObject *__pyx_n_s_Re;
static PyObject *__pyx_n_s_Reaction;
static PyObject *__pyx_n_s_ReactionMulti;
static PyObject *__pyx_n_s_Reactor;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_Sc;
static PyObject *__pyx_kp_u_Simulation_failed;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_n_s_T_ref;
static PyObject *__pyx_n_s_Tc;
static PyObject *__pyx_n_s_Thermodynamics;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_V;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u_Verify_similar_residence_time_di;
static PyObject *__pyx_n_s_Vmax;
static PyObject *__pyx_n_s_activation_energy;
static PyObject *__pyx_kp_u_allocation_failed;
static PyObject *__pyx_kp_u_allocation_failed_for_coeffs;
static PyObject *__pyx_kp_u_allocation_failed_for_conc0;
static PyObject *__pyx_kp_u_allocation_failed_for_kf_kr;
static PyObject *__pyx_kp_u_allocation_failed_for_output_buf;
static PyObject *__pyx_kp_u_allocation_failed_for_products;
static PyObject *__pyx_kp_u_allocation_failed_for_reactants;
static PyObject *__pyx_n_s_area_scale;
static PyObject *__pyx_n_u_area_scale;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_b_c;
static PyObject *__pyx_kp_u_b_must_be_a_vector_with_length_e;
static PyObject *__pyx_n_s_bed_height;
static PyObject *__pyx_n_s_bed_length;
static PyObject *__pyx_n_s_bed_porosity;
static PyObject *__pyx_n_s_bounds;
static PyObject *__pyx_n_s_bubble_conc_out;
static PyObject *__pyx_n_u_bubble_concentrations;
static PyObject *__pyx_n_s_bubble_fraction;
static PyObject *__pyx_n_s_bubble_matrix;
static PyObject *__pyx_n_s_bubble_t;
static PyObject *__pyx_n_s_c_coeffs;
static PyObject *__pyx_n_s_c_conc0;
static PyObject *__pyx_n_s_c_prod_idx;
static PyObject *__pyx_n_s_c_prod_nu;
static PyObject *__pyx_n_s_c_prod_off;
static PyObject *__pyx_n_s_c_reac_idx;
static PyObject *__pyx_n_s_c_reac_nu;
static PyObject *__pyx_n_s_c_reac_off;
static PyObject *__pyx_n_s_carr;
static PyObject *__pyx_n_s_catalyst_density;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_coeffs;
static PyObject *__pyx_n_s_conc;
static PyObject *__pyx_n_u_conc;
static PyObject *__pyx_n_s_conc0;
static PyObject *__pyx_n_s_conc0_arr;
static PyObject *__pyx_n_s_conc0_py;
static PyObject *__pyx_n_s_conc_A;
static PyObject *__pyx_n_s_conc_B;
static PyObject *__pyx_n_s_conc_arr;
static PyObject *__pyx_n_s_conc_matrix;
static PyObject *__pyx_n_s_conc_out_flat;
static PyObject *__pyx_n_s_conc_t;
static PyObject *__pyx_n_s_conc_traj;
static PyObject *__pyx_n_s_concentration;
static PyObject *__pyx_n_s_concentrations;
static PyObject *__pyx_n_u_concentrations;
static PyObject *__pyx_n_s_concs;
static PyObject *__pyx_n_s_constriction_factor;
static PyObject *__pyx_n_s_control_actions;
static PyObject *__pyx_n_u_control_actions;
static PyObject *__pyx_n_s_control_bounds;
static PyObject *__pyx_n_s_control_strategy;
static PyObject *__pyx_n_u_convergence;
static PyObject *__pyx_n_u_conversion;
static PyObject *__pyx_n_s_cp;
static PyObject *__pyx_n_s_cp_arr;
static PyObject *__pyx_n_s_ctypes;
static PyObject *__pyx_n_s_current_activity;
static PyObject *__pyx_n_u_current_activity;
static PyObject *__pyx_n_s_current_concentrations;
static PyObject *__pyx_n_s_current_state;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_data_c;
static PyObject *__pyx_n_s_dcdt;
static PyObject *__pyx_n_s_deactivation_constant;
static PyObject *__pyx_n_s_deactivation_rate;
static PyObject *__pyx_n_u_deactivation_rate;
static PyObject *__pyx_n_s_delta_G;
static PyObject *__pyx_n_s_density;
static PyObject *__pyx_n_u_dimensionless_variance;
static PyObject *__pyx_n_s_distribution;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dydt;
static PyObject *__pyx_n_s_econ_coeffs;
static PyObject *__pyx_n_s_economic_coefficients;
static PyObject *__pyx_n_s_effective_kd;
static PyObject *__pyx_n_s_effectiveness_factor;
static PyObject *__pyx_n_s_eigenval;
static PyObject *__pyx_n_s_eigenvalues;
static PyObject *__pyx_n_u_eigenvalues;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_emulsion_conc_out;
static PyObject *__pyx_n_u_emulsion_concentrations;
static PyObject *__pyx_n_s_emulsion_matrix;
static PyObject *__pyx_n_s_emulsion_t;
static PyObject *__pyx_n_s_enthalpies_arr;
static PyObject *__pyx_n_s_enthalpies_formation;
static PyObject *__pyx_n_u_enthalpies_formation;
static PyObject *__pyx_n_s_enthalpy;
static PyObject *__pyx_n_s_entropy;
static PyObject *__pyx_n_u_error;
static PyObject *__pyx_n_s_exp;
static PyObject *__pyx_n_s_exp_c;
static PyObject *__pyx_n_s_experimental;
static PyObject *__pyx_n_s_experimental_data;
static PyObject *__pyx_n_s_feed_conditions;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_flow_rate;
static PyObject *__pyx_n_u_flow_rate;
static PyObject *__pyx_n_u_flow_rate_adjust;
static PyObject *__pyx_n_s_flow_rates;
static PyObject *__pyx_n_s_gas_constant;
static PyObject *__pyx_n_s_gas_velocity;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_geometry_factor;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_heat_capacities;
static PyObject *__pyx_n_u_heat_capacities;
static PyObject *__pyx_n_u_heat_generation;
static PyObject *__pyx_n_s_heat_generation_val;
static PyObject *__pyx_n_u_heat_transfer;
static PyObject *__pyx_n_u_heat_transfer_coeff;
static PyObject *__pyx_n_s_horizon;
static PyObject *__pyx_n_u_horizon;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_inhibitor_conc;
static PyObject *__pyx_n_s_initial;
static PyObject *__pyx_n_u_initial;
static PyObject *__pyx_n_s_initial_activity;
static PyObject *__pyx_n_s_integral_term;
static PyObject *__pyx_n_u_is_conserved;
static PyObject *__pyx_n_s_is_stable;
static PyObject *__pyx_n_u_is_stable;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_jacobian;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_k1;
static PyObject *__pyx_n_s_k2;
static PyObject *__pyx_n_s_kf;
static PyObject *__pyx_n_u_kf;
static PyObject *__pyx_n_s_kf_arr;
static PyObject *__pyx_n_s_kf_c;
static PyObject *__pyx_n_s_kf_mean;
static PyObject *__pyx_n_s_kf_mean_arr;
static PyObject *__pyx_n_s_kf_out;
static PyObject *__pyx_n_s_kf_out_c;
static PyObject *__pyx_n_s_kf_ptr;
static PyObject *__pyx_n_s_kf_ref;
static PyObject *__pyx_n_s_kf_ref_c;
static PyObject *__pyx_n_s_kf_std;
static PyObject *__pyx_n_s_kf_std_arr;
static PyObject *__pyx_n_s_kr;
static PyObject *__pyx_n_u_kr;
static PyObject *__pyx_n_s_kr_arr;
static PyObject *__pyx_n_s_kr_c;
static PyObject *__pyx_n_s_kr_mean;
static PyObject *__pyx_n_s_kr_mean_arr;
static PyObject *__pyx_n_s_kr_out;
static PyObject *__pyx_n_s_kr_out_c;
static PyObject *__pyx_n_s_kr_ptr;
static PyObject *__pyx_n_s_kr_ref;
static PyObject *__pyx_n_s_kr_ref_c;
static PyObject *__pyx_n_s_kr_std;
static PyObject *__pyx_n_s_kr_std_arr;
static PyObject *__pyx_n_s_lab_conditions;
static PyObject *__pyx_n_s_lab_scale_volume;
static PyObject *__pyx_n_s_length_scale;
static PyObject *__pyx_n_u_length_scale;
static PyObject *__pyx_n_s_light_intensity;
static PyObject *__pyx_n_s_log;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mass_balance;
static PyObject *__pyx_n_u_mass_balance;
static PyObject *__pyx_n_s_mass_balance_list;
static PyObject *__pyx_n_u_mass_transfer;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_u_max;
static PyObject *__pyx_n_s_max_len;
static PyObject *__pyx_n_s_max_list;
static PyObject *__pyx_n_u_max_violation;
static PyObject *__pyx_n_u_mean;
static PyObject *__pyx_n_s_mean_list;
static PyObject *__pyx_n_u_mean_residence_time;
static PyObject *__pyx_n_s_mean_residence_times;
static PyObject *__pyx_n_u_min;
static PyObject *__pyx_n_s_min_list;
static PyObject *__pyx_n_s_mixing_efficiency;
static PyObject *__pyx_n_u_mixing_efficiency;
static PyObject *__pyx_n_s_mixing_efficiency_out;
static PyObject *__pyx_n_s_mixing_intensity;
static PyObject *__pyx_n_u_mixing_time;
static PyObject *__pyx_n_s_molar_absorptivity;
static PyObject *__pyx_n_s_molecular_diff;
static PyObject *__pyx_kp_u_multi_reactor_C_simulation_faile;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_n_bootstrap;
static PyObject *__pyx_n_u_n_bootstrap;
static PyObject *__pyx_n_s_n_controls;
static PyObject *__pyx_n_s_n_data;
static PyObject *__pyx_n_s_n_folds;
static PyObject *__pyx_n_s_n_known;
static PyObject *__pyx_n_s_n_params;
static PyObject *__pyx_n_u_n_points;
static PyObject *__pyx_n_u_n_reactions;
static PyObject *__pyx_n_s_n_reactors;
static PyObject *__pyx_n_u_n_samples;
static PyObject *__pyx_n_s_n_species;
static PyObject *__pyx_n_u_n_species;
static PyObject *__pyx_n_s_n_tanks;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_ndata;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_nparams;
static PyObject *__pyx_n_s_npoints;
static PyObject *__pyx_n_s_npts;
static PyObject *__pyx_n_s_nsamples;
static PyObject *__pyx_n_s_nseg;
static PyObject *__pyx_n_s_nsteps;
static PyObject *__pyx_n_s_nthreads;
static PyObject *__pyx_n_u_nthreads;
static PyObject *__pyx_n_s_nu;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy__core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy__core_umath_failed_to_impo;
static PyObject *__pyx_n_s_omega;
static PyObject *__pyx_n_s_optimal_controls;
static PyObject *__pyx_n_u_optimal_controls;
static PyObject *__pyx_n_s_optimal_settings;
static PyObject *__pyx_n_u_overall_conversion;
static PyObject *__pyx_n_s_overall_mean_tau;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_param_distribution;
static PyObject *__pyx_n_s_param_samples;
static PyObject *__pyx_n_u_parameter_distribution;
static PyObject *__pyx_n_s_parameters;
static PyObject *__pyx_n_s_params;
static PyObject *__pyx_n_s_params_c;
static PyObject *__pyx_n_s_partial_pressure_poison;
static PyObject *__pyx_n_s_particle_diameter;
static PyObject *__pyx_n_s_path_length;
static PyObject *__pyx_n_s_pilot_conditions;
static PyObject *__pyx_n_u_pilot_conditions;
static PyObject *__pyx_n_s_pilot_scale_volume;
static PyObject *__pyx_n_s_poison_factor;
static PyObject *__pyx_n_u_poison_factor;
static PyObject *__pyx_n_s_porosity;
static PyObject *__pyx_n_s_power_scale;
static PyObject *__pyx_n_u_power_scale;
static PyObject *__pyx_n_s_pre_exponential;
static PyObject *__pyx_n_s_pred_c;
static PyObject *__pyx_n_s_predicted;
static PyObject *__pyx_n_s_predicted_profit;
static PyObject *__pyx_n_u_predicted_profit;
static PyObject *__pyx_n_s_pressure;
static PyObject *__pyx_n_u_pressure;
static PyObject *__pyx_n_u_pressure_drop;
static PyObject *__pyx_n_s_pressure_out;
static PyObject *__pyx_n_s_pressure_out_list;
static PyObject *__pyx_n_s_previous_error;
static PyObject *__pyx_n_s_process_variable;
static PyObject *__pyx_n_s_prod_idx;
static PyObject *__pyx_n_s_prod_idx_arr;
static PyObject *__pyx_n_s_prod_idx_list;
static PyObject *__pyx_n_s_prod_nu;
static PyObject *__pyx_n_s_prod_nu_arr;
static PyObject *__pyx_n_s_prod_nu_list;
static PyObject *__pyx_n_s_prod_off;
static PyObject *__pyx_n_s_prod_off_arr;
static PyObject *__pyx_n_s_products;
static PyObject *__pyx_n_u_products;
static PyObject *__pyx_n_s_py_analytical_consecutive_first;
static PyObject *__pyx_n_s_py_analytical_first_order;
static PyObject *__pyx_n_s_py_analytical_reversible_first_o;
static PyObject *__pyx_n_s_py_arrhenius_rate;
static PyObject *__pyx_n_s_py_autocatalytic_rate;
static PyObject *__pyx_n_s_py_bootstrap_uncertainty;
static PyObject *__pyx_n_s_py_calculate_aic;
static PyObject *__pyx_n_s_py_calculate_energy_balance;
static PyObject *__pyx_n_s_py_calculate_jacobian;
static PyObject *__pyx_n_s_py_calculate_objective_function;
static PyObject *__pyx_n_s_py_calculate_r_squared;
static PyObject *__pyx_n_s_py_calculate_rate_constants;
static PyObject *__pyx_n_s_py_calculate_rmse;
static PyObject *__pyx_n_s_py_calculate_sensitivity;
static PyObject *__pyx_n_s_py_catalyst_deactivation_model;
static PyObject *__pyx_n_s_py_check_mass_conservation;
static PyObject *__pyx_n_s_py_check_mass_conservation_local;
static PyObject *__pyx_n_s_py_competitive_inhibition_rate;
static PyObject *__pyx_n_s_py_cross_validation_score;
static PyObject *__pyx_n_s_py_cubic_spline_interpolate;
static PyObject *__pyx_n_s_py_effective_diffusivity;
static PyObject *__pyx_n_s_py_enthalpy_c;
static PyObject *__pyx_n_s_py_enthalpy_nasa;
static PyObject *__pyx_n_s_py_entropy_c;
static PyObject *__pyx_n_s_py_entropy_nasa;
static PyObject *__pyx_n_s_py_equilibrium_constant;
static PyObject *__pyx_n_s_py_fugacity_coefficient;
static PyObject *__pyx_n_s_py_gibbs_free_energy;
static PyObject *__pyx_n_s_py_heat_capacity_nasa;
static PyObject *__pyx_n_s_py_heat_transfer_correlation;
static PyObject *__pyx_n_s_py_kriging_interpolation;
static PyObject *__pyx_n_s_py_langmuir_hinshelwood_rate;
static PyObject *__pyx_n_s_py_linear_interpolate;
static PyObject *__pyx_n_s_py_mass_transfer_correlation;
static PyObject *__pyx_n_s_py_matrix_invert;
static PyObject *__pyx_n_s_py_matrix_multiply;
static PyObject *__pyx_n_s_py_michaelis_menten_rate;
static PyObject *__pyx_n_s_py_monte_carlo_simulation;
static PyObject *__pyx_n_s_py_mpc_controller;
static PyObject *__pyx_n_s_py_photochemical_rate;
static PyObject *__pyx_n_s_py_pid_controller;
static PyObject *__pyx_n_s_py_pressure_drop_ergun;
static PyObject *__pyx_n_s_py_pressure_peng_robinson;
static PyObject *__pyx_n_s_py_process_scale_up;
static PyObject *__pyx_n_s_py_real_time_optimization;
static PyObject *__pyx_n_s_py_residence_time_distribution;
static PyObject *__pyx_n_s_py_residence_time_distribution_l;
static PyObject *__pyx_n_s_py_simulate_fluidized_bed;
static PyObject *__pyx_n_s_py_simulate_homogeneous_batch;
static PyObject *__pyx_n_s_py_simulate_multi_reactor_adapti;
static PyObject *__pyx_n_s_py_simulate_packed_bed;
static PyObject *__pyx_n_s_py_solve_linear_system;
static PyObject *__pyx_n_s_py_stability_analysis;
static PyObject *__pyx_n_s_py_stability_analysis_locals_gen;
static PyObject *__pyx_n_s_pyroxa__pybindings;
static PyObject *__pyx_kp_s_pyroxa_pybindings_pyx;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_quantum_yield;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rate;
static PyObject *__pyx_n_s_rates;
static PyObject *__pyx_n_s_rates_arr;
static PyObject *__pyx_n_s_reac_idx;
static PyObject *__pyx_n_s_reac_idx_arr;
static PyObject *__pyx_n_s_reac_idx_list;
static PyObject *__pyx_n_s_reac_nu;
static PyObject *__pyx_n_s_reac_nu_arr;
static PyObject *__pyx_n_s_reac_nu_list;
static PyObject *__pyx_n_s_reac_off;
static PyObject *__pyx_n_s_reac_off_arr;
static PyObject *__pyx_n_s_reactants;
static PyObject *__pyx_n_u_reactants;
static PyObject *__pyx_n_s_reaction;
static PyObject *__pyx_n_u_reaction;
static PyObject *__pyx_n_s_reaction_network;
static PyObject *__pyx_n_s_reaction_rates;
static PyObject *__pyx_n_u_reaction_rates;
static PyObject *__pyx_n_s_reactions;
static PyObject *__pyx_n_u_reactions;
static PyObject *__pyx_n_s_reactor;
static PyObject *__pyx_n_s_reactor_config;
static PyObject *__pyx_n_u_reactor_id;
static PyObject *__pyx_n_s_reactor_output;
static PyObject *__pyx_n_s_reactor_outputs;
static PyObject *__pyx_n_u_reactor_outputs;
static PyObject *__pyx_n_u_recommendations;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_u_remaining_lifetime;
static PyObject *__pyx_n_u_residence_time;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_round;
static PyObject *__pyx_n_s_run;
static PyObject *__pyx_n_s_run_simulation_cpp;
static PyObject *__pyx_n_s_rxn;
static PyObject *__pyx_n_s_rxns;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_scale_factor;
static PyObject *__pyx_n_u_scale_factor;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_sensitivity_matrix;
static PyObject *__pyx_n_s_setpoint;
static PyObject *__pyx_n_s_setpoints;
static PyObject *__pyx_n_s_setpts;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_sim;
static PyObject *__pyx_n_u_sim;
static PyObject *__pyx_n_s_sim_c;
static PyObject *__pyx_n_s_simulated_data;
static PyObject *__pyx_kp_u_simulation_failed_or_insufficien;
static PyObject *__pyx_n_s_spec;
static PyObject *__pyx_kp_u_spec_must_be_a_dict;
static PyObject *__pyx_n_s_species;
static PyObject *__pyx_n_u_species;
static PyObject *__pyx_n_s_state;
static PyObject *__pyx_n_u_statistics;
static PyObject *__pyx_n_s_statistics_output;
static PyObject *__pyx_n_u_std;
static PyObject *__pyx_n_s_std_list;
static PyObject *__pyx_n_s_steady_state;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_subarray;
static PyObject *__pyx_n_s_substrate_conc;
static PyObject *__pyx_n_u_success;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_u_tank_residence_times;
static PyObject *__pyx_n_s_tarr;
static PyObject *__pyx_n_s_tau;
static PyObject *__pyx_n_s_temp_factor;
static PyObject *__pyx_n_s_temperature;
static PyObject *__pyx_n_u_temperature;
static PyObject *__pyx_n_u_temperature_adjust;
static PyObject *__pyx_n_u_temperature_factor;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_time_span;
static PyObject *__pyx_n_u_time_span;
static PyObject *__pyx_n_u_time_step;
static PyObject *__pyx_n_s_times;
static PyObject *__pyx_n_u_times;
static PyObject *__pyx_n_s_times_buf;
static PyObject *__pyx_n_s_times_list;
static PyObject *__pyx_n_s_times_out;
static PyObject *__pyx_n_s_times_py;
static PyObject *__pyx_n_s_tolerance;
static PyObject *__pyx_n_s_tolist;
static PyObject *__pyx_n_s_tortuosity;
static PyObject *__pyx_n_s_total_flow;
static PyObject *__pyx_n_s_total_prod;
static PyObject *__pyx_n_s_total_reac;
static PyObject *__pyx_n_s_total_volume;
static PyObject *__pyx_n_s_traj;
static PyObject *__pyx_n_s_var_params_c;
static PyObject *__pyx_n_s_variance;
static PyObject *__pyx_n_u_variance;
static PyObject *__pyx_n_s_variogram_params;
static PyObject *__pyx_n_s_velocity;
static PyObject *__pyx_n_s_viscosity;
static PyObject *__pyx_n_s_volume;
static PyObject *__pyx_n_s_volumes;
static PyObject *__pyx_n_s_weight_c;
static PyObject *__pyx_n_s_weights;
static PyObject *__pyx_n_s_written;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x_c;
static PyObject *__pyx_n_s_x_data;
static PyObject *__pyx_n_s_x_data_c;
static PyObject *__pyx_n_s_x_known;
static PyObject *__pyx_n_s_x_known_c;
static PyObject *__pyx_n_s_x_new;
static PyObject *__pyx_n_s_x_new_c;
static PyObject *__pyx_n_s_x_new_list;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_y_data;
static PyObject *__pyx_n_s_y_data_c;
static PyObject *__pyx_n_s_y_known;
static PyObject *__pyx_n_s_y_known_c;
static PyObject *__pyx_n_s_zeros;
static int __pyx_pf_6pyroxa_11_pybindings_14Thermodynamics___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, double __pyx_v_cp); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_2enthalpy(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_4entropy(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyroxa_11_pybindings_8Reaction___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self, double __pyx_v_kf, double __pyx_v_kr); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_8Reaction_2rate(struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self, double __pyx_v_A, double __pyx_v_B); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_8Reaction_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_8Reaction_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyroxa_11_pybindings_13ReactionMulti___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, double __pyx_v_kf, double __pyx_v_kr, PyObject *__pyx_v_reactants, PyObject *__pyx_v_products); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_2rate(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, PyObject *__pyx_v_conc); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyroxa_11_pybindings_12MultiReactor___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, PyObject *__pyx_v_species, PyObject *__pyx_v_conc0, PyObject *__pyx_v_reactions, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_2_dcdt(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, PyObject *__pyx_v_conc); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_4step(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, double __pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_6run(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, double __pyx_v_time_span, double __pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyroxa_11_pybindings_7Reactor___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self, struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_rxn, double __pyx_v_A0, double __pyx_v_B0, double __pyx_v_time_span, double __pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_7Reactor_2run(struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_7Reactor_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_7Reactor_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_run_simulation_cpp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_spec); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_2py_gibbs_free_energy(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_enthalpy, double __pyx_v_entropy, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_4py_equilibrium_constant(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_delta_G, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_6py_arrhenius_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_A, double __pyx_v_Ea, double __pyx_v_T, double __pyx_v_R); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_8py_pressure_peng_robinson(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_n, double __pyx_v_V, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_10py_fugacity_coefficient(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_P, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_12py_langmuir_hinshelwood_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_K_A, double __pyx_v_K_B, double __pyx_v_conc_A, double __pyx_v_conc_B); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_14py_photochemical_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_quantum_yield, double __pyx_v_molar_absorptivity, double __pyx_v_path_length, double __pyx_v_light_intensity, double __pyx_v_concentration); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_16py_autocatalytic_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_A, double __pyx_v_B, double __pyx_v_temperature); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_18py_michaelis_menten_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_20py_competitive_inhibition_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc, double __pyx_v_inhibitor_conc, double __pyx_v_Ki); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_22py_heat_capacity_nasa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_T, PyObject *__pyx_v_coeffs); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_24py_enthalpy_nasa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_T, PyObject *__pyx_v_coeffs); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_26py_entropy_nasa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_T, PyObject *__pyx_v_coeffs); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_28py_mass_transfer_correlation(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Re, double __pyx_v_Sc, double __pyx_v_geometry_factor); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_heat_transfer_correlation(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Re, double __pyx_v_Pr, double __pyx_v_geometry_factor); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_32py_effective_diffusivity(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_molecular_diff, double __pyx_v_porosity, double __pyx_v_tortuosity, double __pyx_v_constriction_factor); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_34py_pressure_drop_ergun(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_velocity, double __pyx_v_density, double __pyx_v_viscosity, double __pyx_v_particle_diameter, double __pyx_v_bed_porosity, double __pyx_v_bed_length); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_36py_pid_controller(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_setpoint, double __pyx_v_process_variable, double __pyx_v_dt, double __pyx_v_Kp, double __pyx_v_Ki, double __pyx_v_Kd); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_38py_gibbs_free_energy(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_enthalpy, double __pyx_v_entropy, double __pyx_v_temperature); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_40py_equilibrium_constant(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_delta_G, double __pyx_v_temperature); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_42py_arrhenius_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_pre_exponential, double __pyx_v_activation_energy, double __pyx_v_temperature, double __pyx_v_gas_constant); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_44py_pressure_peng_robinson(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_n, double __pyx_v_V, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_46py_fugacity_coefficient(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_P, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_48py_langmuir_hinshelwood_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_K_A, double __pyx_v_K_B, double __pyx_v_conc_A, double __pyx_v_conc_B); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_50py_photochemical_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_quantum_yield, double __pyx_v_molar_absorptivity, double __pyx_v_path_length, double __pyx_v_light_intensity, double __pyx_v_concentration); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_52py_linear_interpolate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_x, PyObject *__pyx_v_x_data, PyObject *__pyx_v_y_data); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_54py_cubic_spline_interpolate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_x, PyObject *__pyx_v_x_data, PyObject *__pyx_v_y_data); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_56py_calculate_r_squared(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental, PyObject *__pyx_v_predicted); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_58py_calculate_rmse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental, PyObject *__pyx_v_predicted); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_60py_calculate_aic(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental, PyObject *__pyx_v_predicted, int __pyx_v_nparams); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_62py_michaelis_menten_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_64py_competitive_inhibition_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc, double __pyx_v_inhibitor_conc, double __pyx_v_Ki); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_66py_enthalpy_c(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_cp, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_68py_entropy_c(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_cp, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_70py_analytical_first_order(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_A0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_72py_analytical_reversible_first_order(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_kf, double __pyx_v_kr, double __pyx_v_A0, double __pyx_v_B0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_74py_analytical_consecutive_first_order(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k1, double __pyx_v_k2, double __pyx_v_A0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_76py_calculate_objective_function(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental_data, PyObject *__pyx_v_simulated_data, PyObject *__pyx_v_weights); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_26py_check_mass_conservation_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_78py_check_mass_conservation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_concentrations, PyObject *__pyx_v_tolerance); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_80py_calculate_rate_constants(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_kf_ref, PyObject *__pyx_v_kr_ref, PyObject *__pyx_v_Ea_f, PyObject *__pyx_v_Ea_r, double __pyx_v_T, double __pyx_v_T_ref); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_82py_cross_validation_score(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_parameters, int __pyx_v_n_folds); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_84py_kriging_interpolation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x_new, PyObject *__pyx_v_x_known, PyObject *__pyx_v_y_known, PyObject *__pyx_v_variogram_params); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_86py_bootstrap_uncertainty(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_parameters, int __pyx_v_n_bootstrap); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_88py_matrix_multiply(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_A, PyObject *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_90py_matrix_invert(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_92py_solve_linear_system(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_A, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_94py_calculate_sensitivity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_params, PyObject *__pyx_v_concentrations, PyObject *__pyx_v_rates, PyObject *__pyx_v_n_params, PyObject *__pyx_v_n_species); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_96py_calculate_jacobian(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_dydt, PyObject *__pyx_v_n_species); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_21py_stability_analysis_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_98py_stability_analysis(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_steady_state, PyObject *__pyx_v_n_species, PyObject *__pyx_v_temperature, PyObject *__pyx_v_pressure); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_100py_mpc_controller(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_current_state, PyObject *__pyx_v_setpoints, PyObject *__pyx_v_control_bounds, PyObject *__pyx_v_reaction_network, int __pyx_v_horizon); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_102py_real_time_optimization(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_current_concentrations, PyObject *__pyx_v_economic_coefficients, PyObject *__pyx_v_control_bounds, PyObject *__pyx_v_reaction_network); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_104py_simulate_packed_bed(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, int __pyx_v_nseg, PyObject *__pyx_v_kf, PyObject *__pyx_v_kr, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_flow_rate, double __pyx_v_bed_length, double __pyx_v_bed_porosity, double __pyx_v_particle_diameter, double __pyx_v_catalyst_density, double __pyx_v_effectiveness_factor, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_106py_simulate_fluidized_bed(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, PyObject *__pyx_v_kf, PyObject *__pyx_v_kr, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_gas_velocity, double __pyx_v_bed_height, double __pyx_v_bed_porosity, double __pyx_v_bubble_fraction, double __pyx_v_particle_diameter, double __pyx_v_catalyst_density, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_108py_simulate_homogeneous_batch(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, PyObject *__pyx_v_kf, PyObject *__pyx_v_kr, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_volume, double __pyx_v_mixing_intensity, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_110py_simulate_multi_reactor_adaptive(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_reactor_config, CYTHON_UNUSED PyObject *__pyx_v_feed_conditions, CYTHON_UNUSED PyObject *__pyx_v_control_strategy); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_112py_calculate_energy_balance(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, PyObject *__pyx_v_conc, PyObject *__pyx_v_reaction_rates, PyObject *__pyx_v_enthalpies_formation, PyObject *__pyx_v_heat_capacities, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_114py_monte_carlo_simulation(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, int __pyx_v_nsamples, PyObject *__pyx_v_kf_mean, PyObject *__pyx_v_kr_mean, PyObject *__pyx_v_kf_std, PyObject *__pyx_v_kr_std, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_nthreads); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_6genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_116py_residence_time_distribution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_rates, PyObject *__pyx_v_volumes, PyObject *__pyx_v_n_tanks); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_118py_catalyst_deactivation_model(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_initial_activity, PyObject *__pyx_v_deactivation_constant, PyObject *__pyx_v_time, PyObject *__pyx_v_temperature, PyObject *__pyx_v_partial_pressure_poison); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_120py_process_scale_up(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lab_scale_volume, PyObject *__pyx_v_pilot_scale_volume, PyObject *__pyx_v_lab_conditions); /* proto */
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_Thermodynamics(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_Reaction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_ReactionMulti(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_MultiReactor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_Reactor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_0_1;
static PyObject *__pyx_float_0_2;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_0_7;
static PyObject *__pyx_float_0_9;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_2_0;
static PyObject *__pyx_float_0_01;
static PyObject *__pyx_float_0_05;
static PyObject *__pyx_float_0_15;
static PyObject *__pyx_float_10_0;
static PyObject *__pyx_float_1eneg_6;
static PyObject *__pyx_float_8_314;
static PyObject *__pyx_float_298_15;
static PyObject *__pyx_float_101325_0;
static PyObject *__pyx_float_neg_1_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_50;
static PyObject *__pyx_int_neg_5000;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__123;
static PyObject *__pyx_codeobj__125;
static PyObject *__pyx_codeobj__127;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__131;
static PyObject *__pyx_codeobj__133;
static PyObject *__pyx_codeobj__135;
static PyObject *__pyx_codeobj__137;
static PyObject *__pyx_codeobj__139;
static PyObject *__pyx_codeobj__141;
static PyObject *__pyx_codeobj__143;
static PyObject *__pyx_codeobj__145;
static PyObject *__pyx_codeobj__147;
static PyObject *__pyx_codeobj__149;
static PyObject *__pyx_codeobj__151;
static PyObject *__pyx_codeobj__153;
static PyObject *__pyx_codeobj__155;
static PyObject *__pyx_codeobj__157;
static PyObject *__pyx_codeobj__159;
static PyObject *__pyx_codeobj__161;
static PyObject *__pyx_codeobj__163;
/* Late includes */

/* "pyroxa/pybindings.pyx":262
 * 	cdef double cp
 * 
 * 	def __cinit__(self, double cp=29.1):             # <<<<<<<<<<<<<<
 * 		self.cp = cp
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_cp;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cp,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cp);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 262, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_cp = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_cp == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 262, __pyx_L3_error)
    } else {
      __pyx_v_cp = ((double)29.1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 262, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_14Thermodynamics___cinit__(((struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *)__pyx_v_self), __pyx_v_cp);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyroxa_11_pybindings_14Thermodynamics___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, double __pyx_v_cp) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyroxa/pybindings.pyx":263
 * 
 * 	def __cinit__(self, double cp=29.1):
 * 		self.cp = cp             # <<<<<<<<<<<<<<
 * 
 * 	def enthalpy(self, double T):
 */
  __pyx_v_self->cp = __pyx_v_cp;

  /* "pyroxa/pybindings.pyx":262
 * 	cdef double cp
 * 
 * 	def __cinit__(self, double cp=29.1):             # <<<<<<<<<<<<<<
 * 		self.cp = cp
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":265
 * 		self.cp = cp
 * 
 * 	def enthalpy(self, double T):             # <<<<<<<<<<<<<<
 * 		return enthalpy_c(self.cp, T)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_3enthalpy(PyObject *__pyx_v_self, PyObject *__pyx_arg_T); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_2enthalpy[] = "Thermodynamics.enthalpy(self, double T)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_3enthalpy(PyObject *__pyx_v_self, PyObject *__pyx_arg_T) {
  double __pyx_v_T;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enthalpy (wrapper)", 0);
  assert(__pyx_arg_T); {
    __pyx_v_T = __pyx_PyFloat_AsDouble(__pyx_arg_T); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 265, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.enthalpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_2enthalpy(((struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *)__pyx_v_self), ((double)__pyx_v_T));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_2enthalpy(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, double __pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("enthalpy", 0);

  /* "pyroxa/pybindings.pyx":266
 * 
 * 	def enthalpy(self, double T):
 * 		return enthalpy_c(self.cp, T)             # <<<<<<<<<<<<<<
 * 
 * 	def entropy(self, double T):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(enthalpy_c(__pyx_v_self->cp, __pyx_v_T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":265
 * 		self.cp = cp
 * 
 * 	def enthalpy(self, double T):             # <<<<<<<<<<<<<<
 * 		return enthalpy_c(self.cp, T)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.enthalpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":268
 * 		return enthalpy_c(self.cp, T)
 * 
 * 	def entropy(self, double T):             # <<<<<<<<<<<<<<
 * 		return entropy_c(self.cp, T)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_5entropy(PyObject *__pyx_v_self, PyObject *__pyx_arg_T); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_4entropy[] = "Thermodynamics.entropy(self, double T)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_5entropy(PyObject *__pyx_v_self, PyObject *__pyx_arg_T) {
  double __pyx_v_T;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("entropy (wrapper)", 0);
  assert(__pyx_arg_T); {
    __pyx_v_T = __pyx_PyFloat_AsDouble(__pyx_arg_T); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 268, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.entropy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_4entropy(((struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *)__pyx_v_self), ((double)__pyx_v_T));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_4entropy(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, double __pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("entropy", 0);

  /* "pyroxa/pybindings.pyx":269
 * 
 * 	def entropy(self, double T):
 * 		return entropy_c(self.cp, T)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(entropy_c(__pyx_v_self->cp, __pyx_v_T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":268
 * 		return enthalpy_c(self.cp, T)
 * 
 * 	def entropy(self, double T):             # <<<<<<<<<<<<<<
 * 		return entropy_c(self.cp, T)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.entropy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_6__reduce_cython__[] = "Thermodynamics.__reduce_cython__(self)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_6__reduce_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_8__setstate_cython__[] = "Thermodynamics.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_8__setstate_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":276
 * 	cdef double kr
 * 
 * 	def __cinit__(self, double kf=1.0, double kr=0.5):             # <<<<<<<<<<<<<<
 * 		self.kf = kf
 * 		self.kr = kr
 */

/* Python wrapper */
static int __pyx_pw_6pyroxa_11_pybindings_8Reaction_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyroxa_11_pybindings_8Reaction_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_kf;
  double __pyx_v_kr;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_kf,&__pyx_n_s_kr,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kf);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kr);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 276, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_kf = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_kf == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 276, __pyx_L3_error)
    } else {
      __pyx_v_kf = ((double)1.0);
    }
    if (values[1]) {
      __pyx_v_kr = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_kr == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 276, __pyx_L3_error)
    } else {
      __pyx_v_kr = ((double)0.5);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 276, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.Reaction.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_8Reaction___cinit__(((struct __pyx_obj_6pyroxa_11_pybindings_Reaction *)__pyx_v_self), __pyx_v_kf, __pyx_v_kr);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyroxa_11_pybindings_8Reaction___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self, double __pyx_v_kf, double __pyx_v_kr) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyroxa/pybindings.pyx":277
 * 
 * 	def __cinit__(self, double kf=1.0, double kr=0.5):
 * 		self.kf = kf             # <<<<<<<<<<<<<<
 * 		self.kr = kr
 * 
 */
  __pyx_v_self->kf = __pyx_v_kf;

  /* "pyroxa/pybindings.pyx":278
 * 	def __cinit__(self, double kf=1.0, double kr=0.5):
 * 		self.kf = kf
 * 		self.kr = kr             # <<<<<<<<<<<<<<
 * 
 * 	def rate(self, double A, double B):
 */
  __pyx_v_self->kr = __pyx_v_kr;

  /* "pyroxa/pybindings.pyx":276
 * 	cdef double kr
 * 
 * 	def __cinit__(self, double kf=1.0, double kr=0.5):             # <<<<<<<<<<<<<<
 * 		self.kf = kf
 * 		self.kr = kr
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":280
 * 		self.kr = kr
 * 
 * 	def rate(self, double A, double B):             # <<<<<<<<<<<<<<
 * 		return self.kf * A - self.kr * B
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_8Reaction_3rate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_8Reaction_2rate[] = "Reaction.rate(self, double A, double B)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_8Reaction_3rate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_A;
  double __pyx_v_B;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_B,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rate", 1, 2, 2, 1); __PYX_ERR(1, 280, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rate") < 0)) __PYX_ERR(1, 280, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_A = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 280, __pyx_L3_error)
    __pyx_v_B = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_B == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 280, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 280, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.Reaction.rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_8Reaction_2rate(((struct __pyx_obj_6pyroxa_11_pybindings_Reaction *)__pyx_v_self), __pyx_v_A, __pyx_v_B);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_8Reaction_2rate(struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self, double __pyx_v_A, double __pyx_v_B) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rate", 0);

  /* "pyroxa/pybindings.pyx":281
 * 
 * 	def rate(self, double A, double B):
 * 		return self.kf * A - self.kr * B             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->kf * __pyx_v_A) - (__pyx_v_self->kr * __pyx_v_B))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":280
 * 		self.kr = kr
 * 
 * 	def rate(self, double A, double B):             # <<<<<<<<<<<<<<
 * 		return self.kf * A - self.kr * B
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.Reaction.rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_8Reaction_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_8Reaction_4__reduce_cython__[] = "Reaction.__reduce_cython__(self)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_8Reaction_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_8Reaction_4__reduce_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_Reaction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_8Reaction_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.Reaction.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_8Reaction_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_8Reaction_6__setstate_cython__[] = "Reaction.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_8Reaction_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_8Reaction_6__setstate_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_Reaction *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_8Reaction_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.Reaction.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":290
 * 	cdef dict products
 * 
 * 	def __cinit__(self, double kf=1.0, double kr=0.0, reactants=None, products=None):             # <<<<<<<<<<<<<<
 * 		self.kf = kf
 * 		self.kr = kr
 */

/* Python wrapper */
static int __pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_kf;
  double __pyx_v_kr;
  PyObject *__pyx_v_reactants = 0;
  PyObject *__pyx_v_products = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_kf,&__pyx_n_s_kr,&__pyx_n_s_reactants,&__pyx_n_s_products,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kf);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kr);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reactants);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_products);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 290, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_kf = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_kf == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 290, __pyx_L3_error)
    } else {
      __pyx_v_kf = ((double)1.0);
    }
    if (values[1]) {
      __pyx_v_kr = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_kr == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 290, __pyx_L3_error)
    } else {
      __pyx_v_kr = ((double)0.0);
    }
    __pyx_v_reactants = values[2];
    __pyx_v_products = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 290, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.ReactionMulti.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_13ReactionMulti___cinit__(((struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)__pyx_v_self), __pyx_v_kf, __pyx_v_kr, __pyx_v_reactants, __pyx_v_products);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyroxa_11_pybindings_13ReactionMulti___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, double __pyx_v_kf, double __pyx_v_kr, PyObject *__pyx_v_reactants, PyObject *__pyx_v_products) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyroxa/pybindings.pyx":291
 * 
 * 	def __cinit__(self, double kf=1.0, double kr=0.0, reactants=None, products=None):
 * 		self.kf = kf             # <<<<<<<<<<<<<<
 * 		self.kr = kr
 * 		self.reactants = reactants if reactants is not None else {}
 */
  __pyx_v_self->kf = __pyx_v_kf;

  /* "pyroxa/pybindings.pyx":292
 * 	def __cinit__(self, double kf=1.0, double kr=0.0, reactants=None, products=None):
 * 		self.kf = kf
 * 		self.kr = kr             # <<<<<<<<<<<<<<
 * 		self.reactants = reactants if reactants is not None else {}
 * 		self.products = products if products is not None else {}
 */
  __pyx_v_self->kr = __pyx_v_kr;

  /* "pyroxa/pybindings.pyx":293
 * 		self.kf = kf
 * 		self.kr = kr
 * 		self.reactants = reactants if reactants is not None else {}             # <<<<<<<<<<<<<<
 * 		self.products = products if products is not None else {}
 * 
 */
  __pyx_t_2 = (__pyx_v_reactants != Py_None);
  if ((__pyx_t_2 != 0)) {
    if (!(likely(PyDict_CheckExact(__pyx_v_reactants))||((__pyx_v_reactants) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_reactants)->tp_name), 0))) __PYX_ERR(1, 293, __pyx_L1_error)
    __Pyx_INCREF(__pyx_v_reactants);
    __pyx_t_1 = __pyx_v_reactants;
  } else {
    __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->reactants);
  __Pyx_DECREF(__pyx_v_self->reactants);
  __pyx_v_self->reactants = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":294
 * 		self.kr = kr
 * 		self.reactants = reactants if reactants is not None else {}
 * 		self.products = products if products is not None else {}             # <<<<<<<<<<<<<<
 * 
 * 	cpdef double rate(self, list conc):
 */
  __pyx_t_2 = (__pyx_v_products != Py_None);
  if ((__pyx_t_2 != 0)) {
    if (!(likely(PyDict_CheckExact(__pyx_v_products))||((__pyx_v_products) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_v_products)->tp_name), 0))) __PYX_ERR(1, 294, __pyx_L1_error)
    __Pyx_INCREF(__pyx_v_products);
    __pyx_t_1 = __pyx_v_products;
  } else {
    __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->products);
  __Pyx_DECREF(__pyx_v_self->products);
  __pyx_v_self->products = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":290
 * 	cdef dict products
 * 
 * 	def __cinit__(self, double kf=1.0, double kr=0.0, reactants=None, products=None):             # <<<<<<<<<<<<<<
 * 		self.kf = kf
 * 		self.kr = kr
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyroxa._pybindings.ReactionMulti.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":296
 * 		self.products = products if products is not None else {}
 * 
 * 	cpdef double rate(self, list conc):             # <<<<<<<<<<<<<<
 * 		cdef double f = 1.0
 * 		cdef double r = 1.0
 */

static PyObject *__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_3rate(PyObject *__pyx_v_self, PyObject *__pyx_v_conc); /*proto*/
static double __pyx_f_6pyroxa_11_pybindings_13ReactionMulti_rate(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, PyObject *__pyx_v_conc, int __pyx_skip_dispatch) {
  double __pyx_v_f;
  double __pyx_v_r;
  int __pyx_v_idx;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_nu = NULL;
  PyObject *__pyx_v_val = NULL;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rate", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_3rate)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_conc) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_conc);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 296, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 296, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "pyroxa/pybindings.pyx":297
 * 
 * 	cpdef double rate(self, list conc):
 * 		cdef double f = 1.0             # <<<<<<<<<<<<<<
 * 		cdef double r = 1.0
 * 		cdef int idx
 */
  __pyx_v_f = 1.0;

  /* "pyroxa/pybindings.pyx":298
 * 	cpdef double rate(self, list conc):
 * 		cdef double f = 1.0
 * 		cdef double r = 1.0             # <<<<<<<<<<<<<<
 * 		cdef int idx
 * 		for key, nu in self.reactants.items():
 */
  __pyx_v_r = 1.0;

  /* "pyroxa/pybindings.pyx":300
 * 		cdef double r = 1.0
 * 		cdef int idx
 * 		for key, nu in self.reactants.items():             # <<<<<<<<<<<<<<
 * 			idx = int(key)
 * 			val = conc[idx]
 */
  __pyx_t_6 = 0;
  if (unlikely(__pyx_v_self->reactants == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 300, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_dict_iterator(__pyx_v_self->reactants, 1, __pyx_n_s_items, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_2;
  __pyx_t_2 = 0;
  while (1) {
    __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_7, &__pyx_t_6, &__pyx_t_2, &__pyx_t_3, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_9 == 0)) break;
    if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(1, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_nu, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":301
 * 		cdef int idx
 * 		for key, nu in self.reactants.items():
 * 			idx = int(key)             # <<<<<<<<<<<<<<
 * 			val = conc[idx]
 * 			if val <= 0:
 */
    __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 301, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_idx = __pyx_t_9;

    /* "pyroxa/pybindings.pyx":302
 * 		for key, nu in self.reactants.items():
 * 			idx = int(key)
 * 			val = conc[idx]             # <<<<<<<<<<<<<<
 * 			if val <= 0:
 * 				f = 0.0
 */
    if (unlikely(__pyx_v_conc == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 302, __pyx_L1_error)
    }
    __pyx_t_3 = PyList_GET_ITEM(__pyx_v_conc, __pyx_v_idx);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":303
 * 			idx = int(key)
 * 			val = conc[idx]
 * 			if val <= 0:             # <<<<<<<<<<<<<<
 * 				f = 0.0
 * 				break
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_val, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 303, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 303, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_10) {

      /* "pyroxa/pybindings.pyx":304
 * 			val = conc[idx]
 * 			if val <= 0:
 * 				f = 0.0             # <<<<<<<<<<<<<<
 * 				break
 * 			f *= val ** nu
 */
      __pyx_v_f = 0.0;

      /* "pyroxa/pybindings.pyx":305
 * 			if val <= 0:
 * 				f = 0.0
 * 				break             # <<<<<<<<<<<<<<
 * 			f *= val ** nu
 * 		for key, nu in self.products.items():
 */
      goto __pyx_L4_break;

      /* "pyroxa/pybindings.pyx":303
 * 			idx = int(key)
 * 			val = conc[idx]
 * 			if val <= 0:             # <<<<<<<<<<<<<<
 * 				f = 0.0
 * 				break
 */
    }

    /* "pyroxa/pybindings.pyx":306
 * 				f = 0.0
 * 				break
 * 			f *= val ** nu             # <<<<<<<<<<<<<<
 * 		for key, nu in self.products.items():
 * 			idx = int(key)
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_f); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Power(__pyx_v_val, __pyx_v_nu, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyNumber_InPlaceMultiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 306, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_f = __pyx_t_5;
  }
  __pyx_L4_break:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":307
 * 				break
 * 			f *= val ** nu
 * 		for key, nu in self.products.items():             # <<<<<<<<<<<<<<
 * 			idx = int(key)
 * 			val = conc[idx]
 */
  __pyx_t_7 = 0;
  if (unlikely(__pyx_v_self->products == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(1, 307, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_dict_iterator(__pyx_v_self->products, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_8)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_4;
  __pyx_t_4 = 0;
  while (1) {
    __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_6, &__pyx_t_7, &__pyx_t_4, &__pyx_t_2, NULL, __pyx_t_8);
    if (unlikely(__pyx_t_9 == 0)) break;
    if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(1, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_nu, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":308
 * 			f *= val ** nu
 * 		for key, nu in self.products.items():
 * 			idx = int(key)             # <<<<<<<<<<<<<<
 * 			val = conc[idx]
 * 			if val <= 0:
 */
    __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_idx = __pyx_t_9;

    /* "pyroxa/pybindings.pyx":309
 * 		for key, nu in self.products.items():
 * 			idx = int(key)
 * 			val = conc[idx]             # <<<<<<<<<<<<<<
 * 			if val <= 0:
 * 				r = 0.0
 */
    if (unlikely(__pyx_v_conc == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 309, __pyx_L1_error)
    }
    __pyx_t_2 = PyList_GET_ITEM(__pyx_v_conc, __pyx_v_idx);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":310
 * 			idx = int(key)
 * 			val = conc[idx]
 * 			if val <= 0:             # <<<<<<<<<<<<<<
 * 				r = 0.0
 * 				break
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_val, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 310, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 310, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_10) {

      /* "pyroxa/pybindings.pyx":311
 * 			val = conc[idx]
 * 			if val <= 0:
 * 				r = 0.0             # <<<<<<<<<<<<<<
 * 				break
 * 			r *= val ** nu
 */
      __pyx_v_r = 0.0;

      /* "pyroxa/pybindings.pyx":312
 * 			if val <= 0:
 * 				r = 0.0
 * 				break             # <<<<<<<<<<<<<<
 * 			r *= val ** nu
 * 		return self.kf * f - self.kr * r
 */
      goto __pyx_L7_break;

      /* "pyroxa/pybindings.pyx":310
 * 			idx = int(key)
 * 			val = conc[idx]
 * 			if val <= 0:             # <<<<<<<<<<<<<<
 * 				r = 0.0
 * 				break
 */
    }

    /* "pyroxa/pybindings.pyx":313
 * 				r = 0.0
 * 				break
 * 			r *= val ** nu             # <<<<<<<<<<<<<<
 * 		return self.kf * f - self.kr * r
 * 
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyNumber_Power(__pyx_v_val, __pyx_v_nu, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 313, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_r = __pyx_t_5;
  }
  __pyx_L7_break:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":314
 * 				break
 * 			r *= val ** nu
 * 		return self.kf * f - self.kr * r             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((__pyx_v_self->kf * __pyx_v_f) - (__pyx_v_self->kr * __pyx_v_r));
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":296
 * 		self.products = products if products is not None else {}
 * 
 * 	cpdef double rate(self, list conc):             # <<<<<<<<<<<<<<
 * 		cdef double f = 1.0
 * 		cdef double r = 1.0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("pyroxa._pybindings.ReactionMulti.rate", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_nu);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_3rate(PyObject *__pyx_v_self, PyObject *__pyx_v_conc); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_13ReactionMulti_2rate[] = "ReactionMulti.rate(self, list conc) -> double";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_3rate(PyObject *__pyx_v_self, PyObject *__pyx_v_conc) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rate (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_conc), (&PyList_Type), 1, "conc", 1))) __PYX_ERR(1, 296, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_2rate(((struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)__pyx_v_self), ((PyObject*)__pyx_v_conc));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_2rate(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, PyObject *__pyx_v_conc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rate", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_6pyroxa_11_pybindings_13ReactionMulti_rate(__pyx_v_self, __pyx_v_conc, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.ReactionMulti.rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_13ReactionMulti_4__reduce_cython__[] = "ReactionMulti.__reduce_cython__(self)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_4__reduce_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.ReactionMulti.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_13ReactionMulti_6__setstate_cython__[] = "ReactionMulti.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_6__setstate_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.ReactionMulti.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":323
 * 	cdef double T
 * 
 * 	def __cinit__(self, list species, list conc0, list reactions, double T=300.0):             # <<<<<<<<<<<<<<
 * 		self.species = species
 * 		self.conc = [float(x) for x in conc0]
 */

/* Python wrapper */
static int __pyx_pw_6pyroxa_11_pybindings_12MultiReactor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyroxa_11_pybindings_12MultiReactor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_species = 0;
  PyObject *__pyx_v_conc0 = 0;
  PyObject *__pyx_v_reactions = 0;
  double __pyx_v_T;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_species,&__pyx_n_s_conc0,&__pyx_n_s_reactions,&__pyx_n_s_T,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_species)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conc0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 1); __PYX_ERR(1, 323, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reactions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, 2); __PYX_ERR(1, 323, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 323, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_species = ((PyObject*)values[0]);
    __pyx_v_conc0 = ((PyObject*)values[1]);
    __pyx_v_reactions = ((PyObject*)values[2]);
    if (values[3]) {
      __pyx_v_T = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 323, __pyx_L3_error)
    } else {
      __pyx_v_T = ((double)300.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 323, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species), (&PyList_Type), 1, "species", 1))) __PYX_ERR(1, 323, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_conc0), (&PyList_Type), 1, "conc0", 1))) __PYX_ERR(1, 323, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reactions), (&PyList_Type), 1, "reactions", 1))) __PYX_ERR(1, 323, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_12MultiReactor___cinit__(((struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self), __pyx_v_species, __pyx_v_conc0, __pyx_v_reactions, __pyx_v_T);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyroxa_11_pybindings_12MultiReactor___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, PyObject *__pyx_v_species, PyObject *__pyx_v_conc0, PyObject *__pyx_v_reactions, double __pyx_v_T) {
  PyObject *__pyx_7genexpr__pyx_v_x = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyroxa/pybindings.pyx":324
 * 
 * 	def __cinit__(self, list species, list conc0, list reactions, double T=300.0):
 * 		self.species = species             # <<<<<<<<<<<<<<
 * 		self.conc = [float(x) for x in conc0]
 * 		self.reactions = reactions
 */
  __Pyx_INCREF(__pyx_v_species);
  __Pyx_GIVEREF(__pyx_v_species);
  __Pyx_GOTREF(__pyx_v_self->species);
  __Pyx_DECREF(__pyx_v_self->species);
  __pyx_v_self->species = __pyx_v_species;

  /* "pyroxa/pybindings.pyx":325
 * 	def __cinit__(self, list species, list conc0, list reactions, double T=300.0):
 * 		self.species = species
 * 		self.conc = [float(x) for x in conc0]             # <<<<<<<<<<<<<<
 * 		self.reactions = reactions
 * 		self.T = T
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 325, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_conc0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(1, 325, __pyx_L5_error)
    }
    __pyx_t_2 = __pyx_v_conc0; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 325, __pyx_L5_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 325, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_x, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_7genexpr__pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 325, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 325, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x); __pyx_7genexpr__pyx_v_x = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x); __pyx_7genexpr__pyx_v_x = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->conc);
  __Pyx_DECREF(__pyx_v_self->conc);
  __pyx_v_self->conc = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":326
 * 		self.species = species
 * 		self.conc = [float(x) for x in conc0]
 * 		self.reactions = reactions             # <<<<<<<<<<<<<<
 * 		self.T = T
 * 
 */
  __Pyx_INCREF(__pyx_v_reactions);
  __Pyx_GIVEREF(__pyx_v_reactions);
  __Pyx_GOTREF(__pyx_v_self->reactions);
  __Pyx_DECREF(__pyx_v_self->reactions);
  __pyx_v_self->reactions = __pyx_v_reactions;

  /* "pyroxa/pybindings.pyx":327
 * 		self.conc = [float(x) for x in conc0]
 * 		self.reactions = reactions
 * 		self.T = T             # <<<<<<<<<<<<<<
 * 
 * 	cpdef list _dcdt(self, list conc):
 */
  __pyx_v_self->T = __pyx_v_T;

  /* "pyroxa/pybindings.pyx":323
 * 	cdef double T
 * 
 * 	def __cinit__(self, list species, list conc0, list reactions, double T=300.0):             # <<<<<<<<<<<<<<
 * 		self.species = species
 * 		self.conc = [float(x) for x in conc0]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":329
 * 		self.T = T
 * 
 * 	cpdef list _dcdt(self, list conc):             # <<<<<<<<<<<<<<
 * 		cdef int N = len(conc)
 * 		cdef list d = [0.0] * N
 */

static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_3_dcdt(PyObject *__pyx_v_self, PyObject *__pyx_v_conc); /*proto*/
static PyObject *__pyx_f_6pyroxa_11_pybindings_12MultiReactor__dcdt(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, PyObject *__pyx_v_conc, int __pyx_skip_dispatch) {
  int __pyx_v_N;
  PyObject *__pyx_v_d = 0;
  double __pyx_v_rate;
  PyObject *__pyx_v_rxn = 0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_nu = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  double __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_dcdt", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dcdt); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 329, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_3_dcdt)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_conc) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_conc);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 329, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(1, 329, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "pyroxa/pybindings.pyx":330
 * 
 * 	cpdef list _dcdt(self, list conc):
 * 		cdef int N = len(conc)             # <<<<<<<<<<<<<<
 * 		cdef list d = [0.0] * N
 * 		cdef double rate
 */
  if (unlikely(__pyx_v_conc == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 330, __pyx_L1_error)
  }
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_conc); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 330, __pyx_L1_error)
  __pyx_v_N = __pyx_t_5;

  /* "pyroxa/pybindings.pyx":331
 * 	cpdef list _dcdt(self, list conc):
 * 		cdef int N = len(conc)
 * 		cdef list d = [0.0] * N             # <<<<<<<<<<<<<<
 * 		cdef double rate
 * 		cdef object rxn
 */
  __pyx_t_1 = PyList_New(1 * ((__pyx_v_N<0) ? 0:__pyx_v_N)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_N; __pyx_temp++) {
      __Pyx_INCREF(__pyx_float_0_0);
      __Pyx_GIVEREF(__pyx_float_0_0);
      PyList_SET_ITEM(__pyx_t_1, __pyx_temp, __pyx_float_0_0);
    }
  }
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":334
 * 		cdef double rate
 * 		cdef object rxn
 * 		for rxn in self.reactions:             # <<<<<<<<<<<<<<
 * 			rate = rxn.rate(conc)
 * 			for key, nu in rxn.reactants.items():
 */
  if (unlikely(__pyx_v_self->reactions == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 334, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->reactions; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_2); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 334, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_rxn, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":335
 * 		cdef object rxn
 * 		for rxn in self.reactions:
 * 			rate = rxn.rate(conc)             # <<<<<<<<<<<<<<
 * 			for key, nu in rxn.reactants.items():
 * 				d[int(key)] -= nu * rate
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rxn, __pyx_n_s_rate); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_conc) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_conc);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_rate = __pyx_t_6;

    /* "pyroxa/pybindings.pyx":336
 * 		for rxn in self.reactions:
 * 			rate = rxn.rate(conc)
 * 			for key, nu in rxn.reactants.items():             # <<<<<<<<<<<<<<
 * 				d[int(key)] -= nu * rate
 * 			for key, nu in rxn.products.items():
 */
    __pyx_t_7 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rxn, __pyx_n_s_reactants); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(1, 336, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_dict_iterator(__pyx_t_3, 0, __pyx_n_s_items, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_4;
    __pyx_t_4 = 0;
    while (1) {
      __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_8, &__pyx_t_7, &__pyx_t_4, &__pyx_t_3, NULL, __pyx_t_9);
      if (unlikely(__pyx_t_10 == 0)) break;
      if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(1, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_nu, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":337
 * 			rate = rxn.rate(conc)
 * 			for key, nu in rxn.reactants.items():
 * 				d[int(key)] -= nu * rate             # <<<<<<<<<<<<<<
 * 			for key, nu in rxn.products.items():
 * 				d[int(key)] += nu * rate
 */
      __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_d, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = PyFloat_FromDouble(__pyx_v_rate); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyNumber_Multiply(__pyx_v_nu, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyNumber_InPlaceSubtract(__pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_d, __pyx_t_3, __pyx_t_11) < 0)) __PYX_ERR(1, 337, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":338
 * 			for key, nu in rxn.reactants.items():
 * 				d[int(key)] -= nu * rate
 * 			for key, nu in rxn.products.items():             # <<<<<<<<<<<<<<
 * 				d[int(key)] += nu * rate
 * 		return d
 */
    __pyx_t_8 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_rxn, __pyx_n_s_products); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(1, 338, __pyx_L1_error)
    }
    __pyx_t_11 = __Pyx_dict_iterator(__pyx_t_3, 0, __pyx_n_s_items, (&__pyx_t_7), (&__pyx_t_9)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_11;
    __pyx_t_11 = 0;
    while (1) {
      __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_7, &__pyx_t_8, &__pyx_t_11, &__pyx_t_3, NULL, __pyx_t_9);
      if (unlikely(__pyx_t_10 == 0)) break;
      if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(1, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_XDECREF_SET(__pyx_v_nu, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":339
 * 				d[int(key)] -= nu * rate
 * 			for key, nu in rxn.products.items():
 * 				d[int(key)] += nu * rate             # <<<<<<<<<<<<<<
 * 		return d
 * 
 */
      __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_v_key); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_d, __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyFloat_FromDouble(__pyx_v_rate); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_4 = PyNumber_Multiply(__pyx_v_nu, __pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyNumber_InPlaceAdd(__pyx_t_11, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(PyObject_SetItem(__pyx_v_d, __pyx_t_3, __pyx_t_12) < 0)) __PYX_ERR(1, 339, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":334
 * 		cdef double rate
 * 		cdef object rxn
 * 		for rxn in self.reactions:             # <<<<<<<<<<<<<<
 * 			rate = rxn.rate(conc)
 * 			for key, nu in rxn.reactants.items():
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":340
 * 			for key, nu in rxn.products.items():
 * 				d[int(key)] += nu * rate
 * 		return d             # <<<<<<<<<<<<<<
 * 
 * 	def step(self, double dt):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_d);
  __pyx_r = __pyx_v_d;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":329
 * 		self.T = T
 * 
 * 	cpdef list _dcdt(self, list conc):             # <<<<<<<<<<<<<<
 * 		cdef int N = len(conc)
 * 		cdef list d = [0.0] * N
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor._dcdt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_rxn);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_nu);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_3_dcdt(PyObject *__pyx_v_self, PyObject *__pyx_v_conc); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_2_dcdt[] = "MultiReactor._dcdt(self, list conc) -> list";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_3_dcdt(PyObject *__pyx_v_self, PyObject *__pyx_v_conc) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_dcdt (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_conc), (&PyList_Type), 1, "conc", 1))) __PYX_ERR(1, 329, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_12MultiReactor_2_dcdt(((struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self), ((PyObject*)__pyx_v_conc));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_2_dcdt(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, PyObject *__pyx_v_conc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_dcdt", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyroxa_11_pybindings_12MultiReactor__dcdt(__pyx_v_self, __pyx_v_conc, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor._dcdt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":342
 * 		return d
 * 
 * 	def step(self, double dt):             # <<<<<<<<<<<<<<
 * 		y0 = self.conc
 * 		k1 = self._dcdt(y0)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_5step(PyObject *__pyx_v_self, PyObject *__pyx_arg_dt); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_4step[] = "MultiReactor.step(self, double dt)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_5step(PyObject *__pyx_v_self, PyObject *__pyx_arg_dt) {
  double __pyx_v_dt;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step (wrapper)", 0);
  assert(__pyx_arg_dt); {
    __pyx_v_dt = __pyx_PyFloat_AsDouble(__pyx_arg_dt); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 342, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_12MultiReactor_4step(((struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self), ((double)__pyx_v_dt));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_4step(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, double __pyx_v_dt) {
  PyObject *__pyx_v_y0 = NULL;
  PyObject *__pyx_v_k1 = NULL;
  PyObject *__pyx_v_y1 = NULL;
  PyObject *__pyx_v_k2 = NULL;
  PyObject *__pyx_v_y2 = NULL;
  PyObject *__pyx_v_k3 = NULL;
  PyObject *__pyx_v_y3 = NULL;
  PyObject *__pyx_v_k4 = NULL;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_8genexpr1__pyx_v_i;
  Py_ssize_t __pyx_8genexpr2__pyx_v_i;
  Py_ssize_t __pyx_8genexpr3__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("step", 0);

  /* "pyroxa/pybindings.pyx":343
 * 
 * 	def step(self, double dt):
 * 		y0 = self.conc             # <<<<<<<<<<<<<<
 * 		k1 = self._dcdt(y0)
 * 		y1 = [y0[i] + 0.5 * dt * k1[i] for i in range(len(y0))]
 */
  __pyx_t_1 = __pyx_v_self->conc;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_y0 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":344
 * 	def step(self, double dt):
 * 		y0 = self.conc
 * 		k1 = self._dcdt(y0)             # <<<<<<<<<<<<<<
 * 		y1 = [y0[i] + 0.5 * dt * k1[i] for i in range(len(y0))]
 * 		k2 = self._dcdt(y1)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self->__pyx_vtab)->_dcdt(__pyx_v_self, __pyx_v_y0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k1 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":345
 * 		y0 = self.conc
 * 		k1 = self._dcdt(y0)
 * 		y1 = [y0[i] + 0.5 * dt * k1[i] for i in range(len(y0))]             # <<<<<<<<<<<<<<
 * 		k2 = self._dcdt(y1)
 * 		y2 = [y0[i] + 0.5 * dt * k2[i] for i in range(len(y0))]
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_y0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(1, 345, __pyx_L1_error)
    }
    __pyx_t_2 = PyList_GET_SIZE(__pyx_v_y0); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 345, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_8genexpr1__pyx_v_i = __pyx_t_4;
      if (unlikely(__pyx_v_y0 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 345, __pyx_L1_error)
      }
      __pyx_t_5 = PyFloat_FromDouble((0.5 * __pyx_v_dt)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__pyx_v_k1 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 345, __pyx_L1_error)
      }
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_5, PyList_GET_ITEM(__pyx_v_k1, __pyx_8genexpr1__pyx_v_i)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Add(PyList_GET_ITEM(__pyx_v_y0, __pyx_8genexpr1__pyx_v_i), __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 345, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_v_y1 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":346
 * 		k1 = self._dcdt(y0)
 * 		y1 = [y0[i] + 0.5 * dt * k1[i] for i in range(len(y0))]
 * 		k2 = self._dcdt(y1)             # <<<<<<<<<<<<<<
 * 		y2 = [y0[i] + 0.5 * dt * k2[i] for i in range(len(y0))]
 * 		k3 = self._dcdt(y2)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self->__pyx_vtab)->_dcdt(__pyx_v_self, __pyx_v_y1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":347
 * 		y1 = [y0[i] + 0.5 * dt * k1[i] for i in range(len(y0))]
 * 		k2 = self._dcdt(y1)
 * 		y2 = [y0[i] + 0.5 * dt * k2[i] for i in range(len(y0))]             # <<<<<<<<<<<<<<
 * 		k3 = self._dcdt(y2)
 * 		y3 = [y0[i] + dt * k3[i] for i in range(len(y0))]
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_y0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(1, 347, __pyx_L1_error)
    }
    __pyx_t_2 = PyList_GET_SIZE(__pyx_v_y0); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 347, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_8genexpr2__pyx_v_i = __pyx_t_4;
      if (unlikely(__pyx_v_y0 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 347, __pyx_L1_error)
      }
      __pyx_t_5 = PyFloat_FromDouble((0.5 * __pyx_v_dt)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__pyx_v_k2 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 347, __pyx_L1_error)
      }
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_5, PyList_GET_ITEM(__pyx_v_k2, __pyx_8genexpr2__pyx_v_i)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Add(PyList_GET_ITEM(__pyx_v_y0, __pyx_8genexpr2__pyx_v_i), __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 347, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 347, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_v_y2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":348
 * 		k2 = self._dcdt(y1)
 * 		y2 = [y0[i] + 0.5 * dt * k2[i] for i in range(len(y0))]
 * 		k3 = self._dcdt(y2)             # <<<<<<<<<<<<<<
 * 		y3 = [y0[i] + dt * k3[i] for i in range(len(y0))]
 * 		k4 = self._dcdt(y3)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self->__pyx_vtab)->_dcdt(__pyx_v_self, __pyx_v_y2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k3 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":349
 * 		y2 = [y0[i] + 0.5 * dt * k2[i] for i in range(len(y0))]
 * 		k3 = self._dcdt(y2)
 * 		y3 = [y0[i] + dt * k3[i] for i in range(len(y0))]             # <<<<<<<<<<<<<<
 * 		k4 = self._dcdt(y3)
 * 		for i in range(len(y0)):
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_y0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(1, 349, __pyx_L1_error)
    }
    __pyx_t_2 = PyList_GET_SIZE(__pyx_v_y0); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 349, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_8genexpr3__pyx_v_i = __pyx_t_4;
      if (unlikely(__pyx_v_y0 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 349, __pyx_L1_error)
      }
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__pyx_v_k3 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 349, __pyx_L1_error)
      }
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_5, PyList_GET_ITEM(__pyx_v_k3, __pyx_8genexpr3__pyx_v_i)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Add(PyList_GET_ITEM(__pyx_v_y0, __pyx_8genexpr3__pyx_v_i), __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 349, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_v_y3 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":350
 * 		k3 = self._dcdt(y2)
 * 		y3 = [y0[i] + dt * k3[i] for i in range(len(y0))]
 * 		k4 = self._dcdt(y3)             # <<<<<<<<<<<<<<
 * 		for i in range(len(y0)):
 * 			self.conc[i] += (dt / 6.0) * (k1[i] + 2.0 * k2[i] + 2.0 * k3[i] + k4[i])
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self->__pyx_vtab)->_dcdt(__pyx_v_self, __pyx_v_y3, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k4 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":351
 * 		y3 = [y0[i] + dt * k3[i] for i in range(len(y0))]
 * 		k4 = self._dcdt(y3)
 * 		for i in range(len(y0)):             # <<<<<<<<<<<<<<
 * 			self.conc[i] += (dt / 6.0) * (k1[i] + 2.0 * k2[i] + 2.0 * k3[i] + k4[i])
 * 			if self.conc[i] < 0:
 */
  if (unlikely(__pyx_v_y0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 351, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_v_y0); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 351, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "pyroxa/pybindings.pyx":352
 * 		k4 = self._dcdt(y3)
 * 		for i in range(len(y0)):
 * 			self.conc[i] += (dt / 6.0) * (k1[i] + 2.0 * k2[i] + 2.0 * k3[i] + k4[i])             # <<<<<<<<<<<<<<
 * 			if self.conc[i] < 0:
 * 				self.conc[i] = 0.0
 */
    if (unlikely(__pyx_v_self->conc == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 352, __pyx_L1_error)
    }
    __Pyx_INCREF(__pyx_v_self->conc);
    __pyx_t_7 = __pyx_v_self->conc;
    __pyx_t_8 = __pyx_v_i;
    if (unlikely(__pyx_t_7 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 352, __pyx_L1_error)
    }
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_dt / 6.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_k1 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 352, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_k2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 352, __pyx_L1_error)
    }
    __pyx_t_5 = PyNumber_Multiply(__pyx_float_2_0, PyList_GET_ITEM(__pyx_v_k2, __pyx_v_i)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyNumber_Add(PyList_GET_ITEM(__pyx_v_k1, __pyx_v_i), __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v_k3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 352, __pyx_L1_error)
    }
    __pyx_t_5 = PyNumber_Multiply(__pyx_float_2_0, PyList_GET_ITEM(__pyx_v_k3, __pyx_v_i)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyNumber_Add(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v_k4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 352, __pyx_L1_error)
    }
    __pyx_t_5 = PyNumber_Add(__pyx_t_9, PyList_GET_ITEM(__pyx_v_k4, __pyx_v_i)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Multiply(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_InPlaceAdd(PyList_GET_ITEM(__pyx_t_7, __pyx_t_8), __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_t_7 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 352, __pyx_L1_error)
    }
    if (unlikely(__Pyx_SetItemInt(__pyx_t_7, __pyx_t_8, __pyx_t_5, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 0, 0) < 0)) __PYX_ERR(1, 352, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyroxa/pybindings.pyx":353
 * 		for i in range(len(y0)):
 * 			self.conc[i] += (dt / 6.0) * (k1[i] + 2.0 * k2[i] + 2.0 * k3[i] + k4[i])
 * 			if self.conc[i] < 0:             # <<<<<<<<<<<<<<
 * 				self.conc[i] = 0.0
 * 
 */
    if (unlikely(__pyx_v_self->conc == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 353, __pyx_L1_error)
    }
    __pyx_t_5 = PyObject_RichCompare(PyList_GET_ITEM(__pyx_v_self->conc, __pyx_v_i), __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 353, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(1, 353, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_10) {

      /* "pyroxa/pybindings.pyx":354
 * 			self.conc[i] += (dt / 6.0) * (k1[i] + 2.0 * k2[i] + 2.0 * k3[i] + k4[i])
 * 			if self.conc[i] < 0:
 * 				self.conc[i] = 0.0             # <<<<<<<<<<<<<<
 * 
 * 	def run(self, double time_span, double dt):
 */
      if (unlikely(__pyx_v_self->conc == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(1, 354, __pyx_L1_error)
      }
      if (unlikely(__Pyx_SetItemInt(__pyx_v_self->conc, __pyx_v_i, __pyx_float_0_0, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 0, 0) < 0)) __PYX_ERR(1, 354, __pyx_L1_error)

      /* "pyroxa/pybindings.pyx":353
 * 		for i in range(len(y0)):
 * 			self.conc[i] += (dt / 6.0) * (k1[i] + 2.0 * k2[i] + 2.0 * k3[i] + k4[i])
 * 			if self.conc[i] < 0:             # <<<<<<<<<<<<<<
 * 				self.conc[i] = 0.0
 * 
 */
    }
  }

  /* "pyroxa/pybindings.pyx":342
 * 		return d
 * 
 * 	def step(self, double dt):             # <<<<<<<<<<<<<<
 * 		y0 = self.conc
 * 		k1 = self._dcdt(y0)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_y0);
  __Pyx_XDECREF(__pyx_v_k1);
  __Pyx_XDECREF(__pyx_v_y1);
  __Pyx_XDECREF(__pyx_v_k2);
  __Pyx_XDECREF(__pyx_v_y2);
  __Pyx_XDECREF(__pyx_v_k3);
  __Pyx_XDECREF(__pyx_v_y3);
  __Pyx_XDECREF(__pyx_v_k4);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":356
 * 				self.conc[i] = 0.0
 * 
 * 	def run(self, double time_span, double dt):             # <<<<<<<<<<<<<<
 * 		cdef int nsteps = <int>round(time_span / dt)
 * 		cdef int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_7run(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_6run[] = "MultiReactor.run(self, double time_span, double dt)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_7run(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_time_span,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_span)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run", 1, 2, 2, 1); __PYX_ERR(1, 356, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "run") < 0)) __PYX_ERR(1, 356, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_time_span = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 356, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 356, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("run", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 356, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_12MultiReactor_6run(((struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self), __pyx_v_time_span, __pyx_v_dt);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_6run(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, double __pyx_v_time_span, double __pyx_v_dt) {
  int __pyx_v_nsteps;
  int __pyx_v_i;
  PyObject *__pyx_v_times = NULL;
  PyObject *__pyx_v_traj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);

  /* "pyroxa/pybindings.pyx":357
 * 
 * 	def run(self, double time_span, double dt):
 * 		cdef int nsteps = <int>round(time_span / dt)             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		times = [0.0]
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_time_span / __pyx_v_dt)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_round, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_nsteps = ((int)__pyx_t_3);

  /* "pyroxa/pybindings.pyx":359
 * 		cdef int nsteps = <int>round(time_span / dt)
 * 		cdef int i
 * 		times = [0.0]             # <<<<<<<<<<<<<<
 * 		traj = [list(self.conc)]
 * 		for i in range(nsteps):
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_float_0_0);
  __pyx_v_times = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":360
 * 		cdef int i
 * 		times = [0.0]
 * 		traj = [list(self.conc)]             # <<<<<<<<<<<<<<
 * 		for i in range(nsteps):
 * 			self.step(dt)
 */
  __pyx_t_2 = PySequence_List(__pyx_v_self->conc); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_v_traj = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":361
 * 		times = [0.0]
 * 		traj = [list(self.conc)]
 * 		for i in range(nsteps):             # <<<<<<<<<<<<<<
 * 			self.step(dt)
 * 			times.append((i + 1) * dt)
 */
  __pyx_t_3 = __pyx_v_nsteps;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "pyroxa/pybindings.pyx":362
 * 		traj = [list(self.conc)]
 * 		for i in range(nsteps):
 * 			self.step(dt)             # <<<<<<<<<<<<<<
 * 			times.append((i + 1) * dt)
 * 			traj.append(list(self.conc))
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_step); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyroxa/pybindings.pyx":363
 * 		for i in range(nsteps):
 * 			self.step(dt)
 * 			times.append((i + 1) * dt)             # <<<<<<<<<<<<<<
 * 			traj.append(list(self.conc))
 * 		return times, traj
 */
    __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_i + 1) * __pyx_v_dt)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_times, __pyx_t_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(1, 363, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyroxa/pybindings.pyx":364
 * 			self.step(dt)
 * 			times.append((i + 1) * dt)
 * 			traj.append(list(self.conc))             # <<<<<<<<<<<<<<
 * 		return times, traj
 * 
 */
    __pyx_t_1 = PySequence_List(__pyx_v_self->conc); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_traj, __pyx_t_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(1, 364, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "pyroxa/pybindings.pyx":365
 * 			times.append((i + 1) * dt)
 * 			traj.append(list(self.conc))
 * 		return times, traj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_times);
  __Pyx_GIVEREF(__pyx_v_times);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_times);
  __Pyx_INCREF(__pyx_v_traj);
  __Pyx_GIVEREF(__pyx_v_traj);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_traj);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":356
 * 				self.conc[i] = 0.0
 * 
 * 	def run(self, double time_span, double dt):             # <<<<<<<<<<<<<<
 * 		cdef int nsteps = <int>round(time_span / dt)
 * 		cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_times);
  __Pyx_XDECREF(__pyx_v_traj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_8__reduce_cython__[] = "MultiReactor.__reduce_cython__(self)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_12MultiReactor_8__reduce_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_10__setstate_cython__[] = "MultiReactor.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_12MultiReactor_10__setstate_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":376
 * 	cdef double dt
 * 
 * 	def __cinit__(self, Reaction rxn, double A0=1.0, double B0=0.0, double time_span=10.0, double dt=0.01):             # <<<<<<<<<<<<<<
 * 		self.kf = rxn.kf
 * 		self.kr = rxn.kr
 */

/* Python wrapper */
static int __pyx_pw_6pyroxa_11_pybindings_7Reactor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyroxa_11_pybindings_7Reactor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_rxn = 0;
  double __pyx_v_A0;
  double __pyx_v_B0;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rxn,&__pyx_n_s_A0,&__pyx_n_s_B0,&__pyx_n_s_time_span,&__pyx_n_s_dt,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rxn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A0);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B0);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_span);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 376, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rxn = ((struct __pyx_obj_6pyroxa_11_pybindings_Reaction *)values[0]);
    if (values[1]) {
      __pyx_v_A0 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_A0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 376, __pyx_L3_error)
    } else {
      __pyx_v_A0 = ((double)1.0);
    }
    if (values[2]) {
      __pyx_v_B0 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_B0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 376, __pyx_L3_error)
    } else {
      __pyx_v_B0 = ((double)0.0);
    }
    if (values[3]) {
      __pyx_v_time_span = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 376, __pyx_L3_error)
    } else {
      __pyx_v_time_span = ((double)10.0);
    }
    if (values[4]) {
      __pyx_v_dt = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 376, __pyx_L3_error)
    } else {
      __pyx_v_dt = ((double)0.01);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 376, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.Reactor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rxn), __pyx_ptype_6pyroxa_11_pybindings_Reaction, 1, "rxn", 0))) __PYX_ERR(1, 376, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_7Reactor___cinit__(((struct __pyx_obj_6pyroxa_11_pybindings_Reactor *)__pyx_v_self), __pyx_v_rxn, __pyx_v_A0, __pyx_v_B0, __pyx_v_time_span, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyroxa_11_pybindings_7Reactor___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self, struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_rxn, double __pyx_v_A0, double __pyx_v_B0, double __pyx_v_time_span, double __pyx_v_dt) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyroxa/pybindings.pyx":377
 * 
 * 	def __cinit__(self, Reaction rxn, double A0=1.0, double B0=0.0, double time_span=10.0, double dt=0.01):
 * 		self.kf = rxn.kf             # <<<<<<<<<<<<<<
 * 		self.kr = rxn.kr
 * 		self.A0 = A0
 */
  __pyx_t_1 = __pyx_v_rxn->kf;
  __pyx_v_self->kf = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":378
 * 	def __cinit__(self, Reaction rxn, double A0=1.0, double B0=0.0, double time_span=10.0, double dt=0.01):
 * 		self.kf = rxn.kf
 * 		self.kr = rxn.kr             # <<<<<<<<<<<<<<
 * 		self.A0 = A0
 * 		self.B0 = B0
 */
  __pyx_t_1 = __pyx_v_rxn->kr;
  __pyx_v_self->kr = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":379
 * 		self.kf = rxn.kf
 * 		self.kr = rxn.kr
 * 		self.A0 = A0             # <<<<<<<<<<<<<<
 * 		self.B0 = B0
 * 		self.time_span = time_span
 */
  __pyx_v_self->A0 = __pyx_v_A0;

  /* "pyroxa/pybindings.pyx":380
 * 		self.kr = rxn.kr
 * 		self.A0 = A0
 * 		self.B0 = B0             # <<<<<<<<<<<<<<
 * 		self.time_span = time_span
 * 		self.dt = dt
 */
  __pyx_v_self->B0 = __pyx_v_B0;

  /* "pyroxa/pybindings.pyx":381
 * 		self.A0 = A0
 * 		self.B0 = B0
 * 		self.time_span = time_span             # <<<<<<<<<<<<<<
 * 		self.dt = dt
 * 
 */
  __pyx_v_self->time_span = __pyx_v_time_span;

  /* "pyroxa/pybindings.pyx":382
 * 		self.B0 = B0
 * 		self.time_span = time_span
 * 		self.dt = dt             # <<<<<<<<<<<<<<
 * 
 * 	def run(self):
 */
  __pyx_v_self->dt = __pyx_v_dt;

  /* "pyroxa/pybindings.pyx":376
 * 	cdef double dt
 * 
 * 	def __cinit__(self, Reaction rxn, double A0=1.0, double B0=0.0, double time_span=10.0, double dt=0.01):             # <<<<<<<<<<<<<<
 * 		self.kf = rxn.kf
 * 		self.kr = rxn.kr
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":384
 * 		self.dt = dt
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		cdef int nsteps = <int>round(self.time_span / self.dt)
 * 		cdef int npts = nsteps + 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7Reactor_3run(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_7Reactor_2run[] = "Reactor.run(self)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7Reactor_3run(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_7Reactor_2run(((struct __pyx_obj_6pyroxa_11_pybindings_Reactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_7Reactor_2run(struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self) {
  int __pyx_v_nsteps;
  int __pyx_v_npts;
  int __pyx_v_max_len;
  double *__pyx_v_times;
  double *__pyx_v_Aout;
  double *__pyx_v_Bout;
  int __pyx_v_written;
  PyObject *__pyx_v_tarr = NULL;
  PyObject *__pyx_v_aarr = NULL;
  int __pyx_v_i;
  PyObject *__pyx_v_py_times = NULL;
  PyObject *__pyx_v_traj = NULL;
  int __pyx_8genexpr4__pyx_v_i;
  int __pyx_8genexpr5__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  char const *__pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);

  /* "pyroxa/pybindings.pyx":385
 * 
 * 	def run(self):
 * 		cdef int nsteps = <int>round(self.time_span / self.dt)             # <<<<<<<<<<<<<<
 * 		cdef int npts = nsteps + 1
 * 		cdef int max_len = npts
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->time_span / __pyx_v_self->dt)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_round, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_nsteps = ((int)__pyx_t_3);

  /* "pyroxa/pybindings.pyx":386
 * 	def run(self):
 * 		cdef int nsteps = <int>round(self.time_span / self.dt)
 * 		cdef int npts = nsteps + 1             # <<<<<<<<<<<<<<
 * 		cdef int max_len = npts
 * 		cdef double* times = <double*>malloc(max_len * sizeof(double))
 */
  __pyx_v_npts = (__pyx_v_nsteps + 1);

  /* "pyroxa/pybindings.pyx":387
 * 		cdef int nsteps = <int>round(self.time_span / self.dt)
 * 		cdef int npts = nsteps + 1
 * 		cdef int max_len = npts             # <<<<<<<<<<<<<<
 * 		cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 		cdef double* Aout = <double*>malloc(max_len * sizeof(double))
 */
  __pyx_v_max_len = __pyx_v_npts;

  /* "pyroxa/pybindings.pyx":388
 * 		cdef int npts = nsteps + 1
 * 		cdef int max_len = npts
 * 		cdef double* times = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 		cdef double* Aout = <double*>malloc(max_len * sizeof(double))
 * 		cdef double* Bout = <double*>malloc(max_len * sizeof(double))
 */
  __pyx_v_times = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":389
 * 		cdef int max_len = npts
 * 		cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 		cdef double* Aout = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 		cdef double* Bout = <double*>malloc(max_len * sizeof(double))
 * 		if not times or not Aout or not Bout:
 */
  __pyx_v_Aout = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":390
 * 		cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 		cdef double* Aout = <double*>malloc(max_len * sizeof(double))
 * 		cdef double* Bout = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 		if not times or not Aout or not Bout:
 * 			if times: free(times)
 */
  __pyx_v_Bout = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":391
 * 		cdef double* Aout = <double*>malloc(max_len * sizeof(double))
 * 		cdef double* Bout = <double*>malloc(max_len * sizeof(double))
 * 		if not times or not Aout or not Bout:             # <<<<<<<<<<<<<<
 * 			if times: free(times)
 * 			if Aout: free(Aout)
 */
  __pyx_t_5 = ((!(__pyx_v_times != 0)) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = ((!(__pyx_v_Aout != 0)) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = ((!(__pyx_v_Bout != 0)) != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_4) {

    /* "pyroxa/pybindings.pyx":392
 * 		cdef double* Bout = <double*>malloc(max_len * sizeof(double))
 * 		if not times or not Aout or not Bout:
 * 			if times: free(times)             # <<<<<<<<<<<<<<
 * 			if Aout: free(Aout)
 * 			if Bout: free(Bout)
 */
    __pyx_t_4 = (__pyx_v_times != 0);
    if (__pyx_t_4) {
      free(__pyx_v_times);
    }

    /* "pyroxa/pybindings.pyx":393
 * 		if not times or not Aout or not Bout:
 * 			if times: free(times)
 * 			if Aout: free(Aout)             # <<<<<<<<<<<<<<
 * 			if Bout: free(Bout)
 * 			raise MemoryError("allocation failed")
 */
    __pyx_t_4 = (__pyx_v_Aout != 0);
    if (__pyx_t_4) {
      free(__pyx_v_Aout);
    }

    /* "pyroxa/pybindings.pyx":394
 * 			if times: free(times)
 * 			if Aout: free(Aout)
 * 			if Bout: free(Bout)             # <<<<<<<<<<<<<<
 * 			raise MemoryError("allocation failed")
 * 		cdef int written
 */
    __pyx_t_4 = (__pyx_v_Bout != 0);
    if (__pyx_t_4) {
      free(__pyx_v_Bout);
    }

    /* "pyroxa/pybindings.pyx":395
 * 			if Aout: free(Aout)
 * 			if Bout: free(Bout)
 * 			raise MemoryError("allocation failed")             # <<<<<<<<<<<<<<
 * 		cdef int written
 * 		written = simulate_reactor(self.kf, self.kr, self.A0, self.B0, self.time_span, self.dt, times, Aout, Bout, max_len)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 395, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":391
 * 		cdef double* Aout = <double*>malloc(max_len * sizeof(double))
 * 		cdef double* Bout = <double*>malloc(max_len * sizeof(double))
 * 		if not times or not Aout or not Bout:             # <<<<<<<<<<<<<<
 * 			if times: free(times)
 * 			if Aout: free(Aout)
 */
  }

  /* "pyroxa/pybindings.pyx":397
 * 			raise MemoryError("allocation failed")
 * 		cdef int written
 * 		written = simulate_reactor(self.kf, self.kr, self.A0, self.B0, self.time_span, self.dt, times, Aout, Bout, max_len)             # <<<<<<<<<<<<<<
 * 		if written <= 0:
 * 			raise RuntimeError("simulation failed or insufficient buffer size")
 */
  __pyx_v_written = simulate_reactor(__pyx_v_self->kf, __pyx_v_self->kr, __pyx_v_self->A0, __pyx_v_self->B0, __pyx_v_self->time_span, __pyx_v_self->dt, __pyx_v_times, __pyx_v_Aout, __pyx_v_Bout, __pyx_v_max_len);

  /* "pyroxa/pybindings.pyx":398
 * 		cdef int written
 * 		written = simulate_reactor(self.kf, self.kr, self.A0, self.B0, self.time_span, self.dt, times, Aout, Bout, max_len)
 * 		if written <= 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("simulation failed or insufficient buffer size")
 * 		try:
 */
  __pyx_t_4 = ((__pyx_v_written <= 0) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "pyroxa/pybindings.pyx":399
 * 		written = simulate_reactor(self.kf, self.kr, self.A0, self.B0, self.time_span, self.dt, times, Aout, Bout, max_len)
 * 		if written <= 0:
 * 			raise RuntimeError("simulation failed or insufficient buffer size")             # <<<<<<<<<<<<<<
 * 		try:
 * 			if _HAS_NUMPY:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 399, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":398
 * 		cdef int written
 * 		written = simulate_reactor(self.kf, self.kr, self.A0, self.B0, self.time_span, self.dt, times, Aout, Bout, max_len)
 * 		if written <= 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("simulation failed or insufficient buffer size")
 * 		try:
 */
  }

  /* "pyroxa/pybindings.pyx":400
 * 		if written <= 0:
 * 			raise RuntimeError("simulation failed or insufficient buffer size")
 * 		try:             # <<<<<<<<<<<<<<
 * 			if _HAS_NUMPY:
 * 				tarr = np.empty(written, dtype=np.float64)
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":401
 * 			raise RuntimeError("simulation failed or insufficient buffer size")
 * 		try:
 * 			if _HAS_NUMPY:             # <<<<<<<<<<<<<<
 * 				tarr = np.empty(written, dtype=np.float64)
 * 				aarr = np.empty((written, 2), dtype=np.float64)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_HAS_NUMPY); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 401, __pyx_L12_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 401, __pyx_L12_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "pyroxa/pybindings.pyx":402
 * 		try:
 * 			if _HAS_NUMPY:
 * 				tarr = np.empty(written, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 				aarr = np.empty((written, 2), dtype=np.float64)
 * 				for i in range(written):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 402, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 402, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_written); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 402, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 402, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 402, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 402, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 402, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(1, 402, __pyx_L12_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 402, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_tarr = __pyx_t_8;
      __pyx_t_8 = 0;

      /* "pyroxa/pybindings.pyx":403
 * 			if _HAS_NUMPY:
 * 				tarr = np.empty(written, dtype=np.float64)
 * 				aarr = np.empty((written, 2), dtype=np.float64)             # <<<<<<<<<<<<<<
 * 				for i in range(written):
 * 					tarr[i] = times[i]
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 403, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 403, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_written); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 403, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 403, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
      __Pyx_INCREF(__pyx_int_2);
      __Pyx_GIVEREF(__pyx_int_2);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_2);
      __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 403, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 403, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 403, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 403, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(1, 403, __pyx_L12_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 403, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_aarr = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "pyroxa/pybindings.pyx":404
 * 				tarr = np.empty(written, dtype=np.float64)
 * 				aarr = np.empty((written, 2), dtype=np.float64)
 * 				for i in range(written):             # <<<<<<<<<<<<<<
 * 					tarr[i] = times[i]
 * 					aarr[i, 0] = Aout[i]
 */
      __pyx_t_3 = __pyx_v_written;
      __pyx_t_9 = __pyx_t_3;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_i = __pyx_t_10;

        /* "pyroxa/pybindings.pyx":405
 * 				aarr = np.empty((written, 2), dtype=np.float64)
 * 				for i in range(written):
 * 					tarr[i] = times[i]             # <<<<<<<<<<<<<<
 * 					aarr[i, 0] = Aout[i]
 * 					aarr[i, 1] = Bout[i]
 */
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_times[__pyx_v_i])); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 405, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__Pyx_SetItemInt(__pyx_v_tarr, __pyx_v_i, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(1, 405, __pyx_L12_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "pyroxa/pybindings.pyx":406
 * 				for i in range(written):
 * 					tarr[i] = times[i]
 * 					aarr[i, 0] = Aout[i]             # <<<<<<<<<<<<<<
 * 					aarr[i, 1] = Bout[i]
 * 				return tarr, aarr
 */
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_Aout[__pyx_v_i])); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 406, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 406, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 406, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
        __Pyx_INCREF(__pyx_int_0);
        __Pyx_GIVEREF(__pyx_int_0);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_int_0);
        __pyx_t_6 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_aarr, __pyx_t_8, __pyx_t_7) < 0)) __PYX_ERR(1, 406, __pyx_L12_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "pyroxa/pybindings.pyx":407
 * 					tarr[i] = times[i]
 * 					aarr[i, 0] = Aout[i]
 * 					aarr[i, 1] = Bout[i]             # <<<<<<<<<<<<<<
 * 				return tarr, aarr
 * 			else:
 */
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_Bout[__pyx_v_i])); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 407, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 407, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 407, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
        __Pyx_INCREF(__pyx_int_1);
        __Pyx_GIVEREF(__pyx_int_1);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_1);
        __pyx_t_8 = 0;
        if (unlikely(PyObject_SetItem(__pyx_v_aarr, __pyx_t_6, __pyx_t_7) < 0)) __PYX_ERR(1, 407, __pyx_L12_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }

      /* "pyroxa/pybindings.pyx":408
 * 					aarr[i, 0] = Aout[i]
 * 					aarr[i, 1] = Bout[i]
 * 				return tarr, aarr             # <<<<<<<<<<<<<<
 * 			else:
 * 				py_times = [times[i] for i in range(written)]
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 408, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_tarr);
      __Pyx_GIVEREF(__pyx_v_tarr);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_tarr);
      __Pyx_INCREF(__pyx_v_aarr);
      __Pyx_GIVEREF(__pyx_v_aarr);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_aarr);
      __pyx_r = __pyx_t_7;
      __pyx_t_7 = 0;
      goto __pyx_L11_return;

      /* "pyroxa/pybindings.pyx":401
 * 			raise RuntimeError("simulation failed or insufficient buffer size")
 * 		try:
 * 			if _HAS_NUMPY:             # <<<<<<<<<<<<<<
 * 				tarr = np.empty(written, dtype=np.float64)
 * 				aarr = np.empty((written, 2), dtype=np.float64)
 */
    }

    /* "pyroxa/pybindings.pyx":410
 * 				return tarr, aarr
 * 			else:
 * 				py_times = [times[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 				traj = [[Aout[i], Bout[i]] for i in range(written)]
 * 				return py_times, traj
 */
    /*else*/ {
      { /* enter inner scope */
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 410, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = __pyx_v_written;
        __pyx_t_9 = __pyx_t_3;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_8genexpr4__pyx_v_i = __pyx_t_10;
          __pyx_t_6 = PyFloat_FromDouble((__pyx_v_times[__pyx_8genexpr4__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 410, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 410, __pyx_L12_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      } /* exit inner scope */
      __pyx_v_py_times = ((PyObject*)__pyx_t_7);
      __pyx_t_7 = 0;

      /* "pyroxa/pybindings.pyx":411
 * 			else:
 * 				py_times = [times[i] for i in range(written)]
 * 				traj = [[Aout[i], Bout[i]] for i in range(written)]             # <<<<<<<<<<<<<<
 * 				return py_times, traj
 * 		finally:
 */
      { /* enter inner scope */
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 411, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = __pyx_v_written;
        __pyx_t_9 = __pyx_t_3;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_8genexpr5__pyx_v_i = __pyx_t_10;
          __pyx_t_6 = PyFloat_FromDouble((__pyx_v_Aout[__pyx_8genexpr5__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 411, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_8 = PyFloat_FromDouble((__pyx_v_Bout[__pyx_8genexpr5__pyx_v_i])); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 411, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 411, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_6);
          PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_8);
          PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_8);
          __pyx_t_6 = 0;
          __pyx_t_8 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 411, __pyx_L12_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
      } /* exit inner scope */
      __pyx_v_traj = ((PyObject*)__pyx_t_7);
      __pyx_t_7 = 0;

      /* "pyroxa/pybindings.pyx":412
 * 				py_times = [times[i] for i in range(written)]
 * 				traj = [[Aout[i], Bout[i]] for i in range(written)]
 * 				return py_times, traj             # <<<<<<<<<<<<<<
 * 		finally:
 * 			free(times)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 412, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_v_py_times);
      __Pyx_GIVEREF(__pyx_v_py_times);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_py_times);
      __Pyx_INCREF(__pyx_v_traj);
      __Pyx_GIVEREF(__pyx_v_traj);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_traj);
      __pyx_r = __pyx_t_7;
      __pyx_t_7 = 0;
      goto __pyx_L11_return;
    }
  }

  /* "pyroxa/pybindings.pyx":414
 * 				return py_times, traj
 * 		finally:
 * 			free(times)             # <<<<<<<<<<<<<<
 * 			free(Aout)
 * 			free(Bout)
 */
  /*finally:*/ {
    __pyx_L12_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14) < 0)) __Pyx_ErrFetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __pyx_t_3 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_11 = __pyx_filename;
      {
        free(__pyx_v_times);

        /* "pyroxa/pybindings.pyx":415
 * 		finally:
 * 			free(times)
 * 			free(Aout)             # <<<<<<<<<<<<<<
 * 			free(Bout)
 * 
 */
        free(__pyx_v_Aout);

        /* "pyroxa/pybindings.pyx":416
 * 			free(times)
 * 			free(Aout)
 * 			free(Bout)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        free(__pyx_v_Bout);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      }
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_ErrRestore(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_11;
      goto __pyx_L1_error;
    }
    __pyx_L11_return: {
      __pyx_t_17 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":414
 * 				return py_times, traj
 * 		finally:
 * 			free(times)             # <<<<<<<<<<<<<<
 * 			free(Aout)
 * 			free(Bout)
 */
      free(__pyx_v_times);

      /* "pyroxa/pybindings.pyx":415
 * 		finally:
 * 			free(times)
 * 			free(Aout)             # <<<<<<<<<<<<<<
 * 			free(Bout)
 * 
 */
      free(__pyx_v_Aout);

      /* "pyroxa/pybindings.pyx":416
 * 			free(times)
 * 			free(Aout)
 * 			free(Bout)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      free(__pyx_v_Bout);
      __pyx_r = __pyx_t_17;
      __pyx_t_17 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":384
 * 		self.dt = dt
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		cdef int nsteps = <int>round(self.time_span / self.dt)
 * 		cdef int npts = nsteps + 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyroxa._pybindings.Reactor.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tarr);
  __Pyx_XDECREF(__pyx_v_aarr);
  __Pyx_XDECREF(__pyx_v_py_times);
  __Pyx_XDECREF(__pyx_v_traj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7Reactor_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_7Reactor_4__reduce_cython__[] = "Reactor.__reduce_cython__(self)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7Reactor_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_7Reactor_4__reduce_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_Reactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_7Reactor_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.Reactor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7Reactor_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_7Reactor_6__setstate_cython__[] = "Reactor.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7Reactor_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_7Reactor_6__setstate_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_Reactor *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_7Reactor_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.Reactor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":419
 * 
 * 
 * def run_simulation_cpp(spec):             # <<<<<<<<<<<<<<
 * 	"""High-level helper that takes a Python dict spec and runs the C++ reactor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_1run_simulation_cpp(PyObject *__pyx_self, PyObject *__pyx_v_spec); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_run_simulation_cpp[] = "run_simulation_cpp(spec)\nHigh-level helper that takes a Python dict spec and runs the C++ reactor.\n\n\tExpected spec keys similar to pure-Python runner:\n\t  reaction: {'kf', 'kr'}\n\t  initial: {'conc': {'A','B'}}\n\t  sim: {'time_span', 'time_step'}\n\t";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_1run_simulation_cpp = {"run_simulation_cpp", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_1run_simulation_cpp, METH_O, __pyx_doc_6pyroxa_11_pybindings_run_simulation_cpp};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_1run_simulation_cpp(PyObject *__pyx_self, PyObject *__pyx_v_spec) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run_simulation_cpp (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_run_simulation_cpp(__pyx_self, ((PyObject *)__pyx_v_spec));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_run_simulation_cpp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_spec) {
  int __pyx_v_N;
  int __pyx_v_M;
  int __pyx_v_nsteps;
  int __pyx_v_npts;
  int __pyx_v_max_len;
  int __pyx_v_written;
  double *__pyx_v_kf_ptr;
  double *__pyx_v_kr_ptr;
  int __pyx_v_i;
  int __pyx_v_total_reac;
  int __pyx_v_total_prod;
  int *__pyx_v_c_reac_idx;
  double *__pyx_v_c_reac_nu;
  int *__pyx_v_c_reac_off;
  int *__pyx_v_c_prod_idx;
  double *__pyx_v_c_prod_nu;
  int *__pyx_v_c_prod_off;
  double *__pyx_v_c_conc0;
  double *__pyx_v_times_buf;
  double *__pyx_v_conc_out_flat;
  PyObject *__pyx_v_reaction = NULL;
  PyObject *__pyx_v_initial = NULL;
  PyObject *__pyx_v_sim = NULL;
  PyObject *__pyx_v_species = NULL;
  PyObject *__pyx_v_rxns = NULL;
  PyObject *__pyx_v_reac_idx_list = NULL;
  PyObject *__pyx_v_reac_nu_list = NULL;
  PyObject *__pyx_v_reac_off = NULL;
  PyObject *__pyx_v_prod_idx_list = NULL;
  PyObject *__pyx_v_prod_nu_list = NULL;
  PyObject *__pyx_v_prod_off = NULL;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_v_reactants = NULL;
  PyObject *__pyx_v_products = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_nu = NULL;
  CYTHON_UNUSED double *__pyx_v_kf_c;
  CYTHON_UNUSED double *__pyx_v_kr_c;
  CYTHON_UNUSED PyObject *__pyx_v_ctypes = NULL;
  PyObject *__pyx_v_conc0_py = NULL;
  PyObject *__pyx_v_tarr = NULL;
  PyObject *__pyx_v_carr = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_times_py = NULL;
  PyObject *__pyx_v_traj = NULL;
  double __pyx_v_kf;
  double __pyx_v_kr;
  PyObject *__pyx_v_conc = NULL;
  double __pyx_v_A0;
  double __pyx_v_B0;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_rxn = NULL;
  struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_reactor = NULL;
  PyObject *__pyx_8genexpr6__pyx_v_s = NULL;
  int __pyx_8genexpr7__pyx_v_i;
  int __pyx_8genexpr8__pyx_v_i;
  int __pyx_8genexpr9__pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  double __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  double __pyx_t_23;
  int __pyx_t_24;
  int __pyx_t_25;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run_simulation_cpp", 0);

  /* "pyroxa/pybindings.pyx":443
 * 	cdef double* conc_out_flat
 * 	# pointers for buffers will be allocated with malloc below
 * 	if not isinstance(spec, dict):             # <<<<<<<<<<<<<<
 * 		raise TypeError('spec must be a dict')
 * 	reaction = spec.get('reaction', {})
 */
  __pyx_t_1 = PyDict_Check(__pyx_v_spec); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "pyroxa/pybindings.pyx":444
 * 	# pointers for buffers will be allocated with malloc below
 * 	if not isinstance(spec, dict):
 * 		raise TypeError('spec must be a dict')             # <<<<<<<<<<<<<<
 * 	reaction = spec.get('reaction', {})
 * 	initial = spec.get('initial', {})
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 444, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":443
 * 	cdef double* conc_out_flat
 * 	# pointers for buffers will be allocated with malloc below
 * 	if not isinstance(spec, dict):             # <<<<<<<<<<<<<<
 * 		raise TypeError('spec must be a dict')
 * 	reaction = spec.get('reaction', {})
 */
  }

  /* "pyroxa/pybindings.pyx":445
 * 	if not isinstance(spec, dict):
 * 		raise TypeError('spec must be a dict')
 * 	reaction = spec.get('reaction', {})             # <<<<<<<<<<<<<<
 * 	initial = spec.get('initial', {})
 * 	sim = spec.get('sim', {})
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_spec, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_u_reaction, __pyx_t_5};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 445, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_u_reaction, __pyx_t_5};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 445, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_reaction);
    __Pyx_GIVEREF(__pyx_n_u_reaction);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_n_u_reaction);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_reaction = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":446
 * 		raise TypeError('spec must be a dict')
 * 	reaction = spec.get('reaction', {})
 * 	initial = spec.get('initial', {})             # <<<<<<<<<<<<<<
 * 	sim = spec.get('sim', {})
 * 	# multi-species branch: try calling optimized C++ multi-reactor
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_spec, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_initial, __pyx_t_8};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 446, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_initial, __pyx_t_8};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 446, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_initial);
    __Pyx_GIVEREF(__pyx_n_u_initial);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_n_u_initial);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_initial = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":447
 * 	reaction = spec.get('reaction', {})
 * 	initial = spec.get('initial', {})
 * 	sim = spec.get('sim', {})             # <<<<<<<<<<<<<<
 * 	# multi-species branch: try calling optimized C++ multi-reactor
 * 	if 'species' in spec and 'reactions' in spec:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_spec, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_n_u_sim, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_n_u_sim, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_sim);
    __Pyx_GIVEREF(__pyx_n_u_sim);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_n_u_sim);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_sim = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":449
 * 	sim = spec.get('sim', {})
 * 	# multi-species branch: try calling optimized C++ multi-reactor
 * 	if 'species' in spec and 'reactions' in spec:             # <<<<<<<<<<<<<<
 * 		species = spec.get('species', [])
 * 		N = len(species)
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_species, __pyx_v_spec, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 449, __pyx_L1_error)
  __pyx_t_9 = (__pyx_t_1 != 0);
  if (__pyx_t_9) {
  } else {
    __pyx_t_2 = __pyx_t_9;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_reactions, __pyx_v_spec, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 449, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_9 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "pyroxa/pybindings.pyx":450
 * 	# multi-species branch: try calling optimized C++ multi-reactor
 * 	if 'species' in spec and 'reactions' in spec:
 * 		species = spec.get('species', [])             # <<<<<<<<<<<<<<
 * 		N = len(species)
 * 		rxns = spec.get('reactions', [])
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_spec, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_u_species, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 450, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_u_species, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 450, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 450, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_species);
      __Pyx_GIVEREF(__pyx_n_u_species);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_n_u_species);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 450, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_species = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":451
 * 	if 'species' in spec and 'reactions' in spec:
 * 		species = spec.get('species', [])
 * 		N = len(species)             # <<<<<<<<<<<<<<
 * 		rxns = spec.get('reactions', [])
 * 		M = len(rxns)
 */
    __pyx_t_10 = PyObject_Length(__pyx_v_species); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(1, 451, __pyx_L1_error)
    __pyx_v_N = __pyx_t_10;

    /* "pyroxa/pybindings.pyx":452
 * 		species = spec.get('species', [])
 * 		N = len(species)
 * 		rxns = spec.get('reactions', [])             # <<<<<<<<<<<<<<
 * 		M = len(rxns)
 * 		# prepare arrays: allocate C arrays and fill them
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_spec, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_reactions, __pyx_t_8};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 452, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_reactions, __pyx_t_8};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 452, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 452, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_reactions);
      __Pyx_GIVEREF(__pyx_n_u_reactions);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_n_u_reactions);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 452, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_rxns = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":453
 * 		N = len(species)
 * 		rxns = spec.get('reactions', [])
 * 		M = len(rxns)             # <<<<<<<<<<<<<<
 * 		# prepare arrays: allocate C arrays and fill them
 * 		# kf/kr
 */
    __pyx_t_10 = PyObject_Length(__pyx_v_rxns); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(1, 453, __pyx_L1_error)
    __pyx_v_M = __pyx_t_10;

    /* "pyroxa/pybindings.pyx":456
 * 		# prepare arrays: allocate C arrays and fill them
 * 		# kf/kr
 * 		if M > 0:             # <<<<<<<<<<<<<<
 * 			kf_ptr = <double*>malloc(M * sizeof(double))
 * 			kr_ptr = <double*>malloc(M * sizeof(double))
 */
    __pyx_t_2 = ((__pyx_v_M > 0) != 0);
    if (__pyx_t_2) {

      /* "pyroxa/pybindings.pyx":457
 * 		# kf/kr
 * 		if M > 0:
 * 			kf_ptr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 			kr_ptr = <double*>malloc(M * sizeof(double))
 * 			if not kf_ptr or not kr_ptr:
 */
      __pyx_v_kf_ptr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

      /* "pyroxa/pybindings.pyx":458
 * 		if M > 0:
 * 			kf_ptr = <double*>malloc(M * sizeof(double))
 * 			kr_ptr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 			if not kf_ptr or not kr_ptr:
 * 				if kf_ptr: free(kf_ptr)
 */
      __pyx_v_kr_ptr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

      /* "pyroxa/pybindings.pyx":459
 * 			kf_ptr = <double*>malloc(M * sizeof(double))
 * 			kr_ptr = <double*>malloc(M * sizeof(double))
 * 			if not kf_ptr or not kr_ptr:             # <<<<<<<<<<<<<<
 * 				if kf_ptr: free(kf_ptr)
 * 				if kr_ptr: free(kr_ptr)
 */
      __pyx_t_1 = ((!(__pyx_v_kf_ptr != 0)) != 0);
      if (!__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_1 = ((!(__pyx_v_kr_ptr != 0)) != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_2) {

        /* "pyroxa/pybindings.pyx":460
 * 			kr_ptr = <double*>malloc(M * sizeof(double))
 * 			if not kf_ptr or not kr_ptr:
 * 				if kf_ptr: free(kf_ptr)             # <<<<<<<<<<<<<<
 * 				if kr_ptr: free(kr_ptr)
 * 				raise MemoryError('allocation failed for kf/kr')
 */
        __pyx_t_2 = (__pyx_v_kf_ptr != 0);
        if (__pyx_t_2) {
          free(__pyx_v_kf_ptr);
        }

        /* "pyroxa/pybindings.pyx":461
 * 			if not kf_ptr or not kr_ptr:
 * 				if kf_ptr: free(kf_ptr)
 * 				if kr_ptr: free(kr_ptr)             # <<<<<<<<<<<<<<
 * 				raise MemoryError('allocation failed for kf/kr')
 * 			for i in range(M):
 */
        __pyx_t_2 = (__pyx_v_kr_ptr != 0);
        if (__pyx_t_2) {
          free(__pyx_v_kr_ptr);
        }

        /* "pyroxa/pybindings.pyx":462
 * 				if kf_ptr: free(kf_ptr)
 * 				if kr_ptr: free(kr_ptr)
 * 				raise MemoryError('allocation failed for kf/kr')             # <<<<<<<<<<<<<<
 * 			for i in range(M):
 * 				kf_ptr[i] = float(rxns[i].get('kf', 1.0))
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 462, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 462, __pyx_L1_error)

        /* "pyroxa/pybindings.pyx":459
 * 			kf_ptr = <double*>malloc(M * sizeof(double))
 * 			kr_ptr = <double*>malloc(M * sizeof(double))
 * 			if not kf_ptr or not kr_ptr:             # <<<<<<<<<<<<<<
 * 				if kf_ptr: free(kf_ptr)
 * 				if kr_ptr: free(kr_ptr)
 */
      }

      /* "pyroxa/pybindings.pyx":463
 * 				if kr_ptr: free(kr_ptr)
 * 				raise MemoryError('allocation failed for kf/kr')
 * 			for i in range(M):             # <<<<<<<<<<<<<<
 * 				kf_ptr[i] = float(rxns[i].get('kf', 1.0))
 * 				kr_ptr[i] = float(rxns[i].get('kr', 0.0))
 */
      __pyx_t_7 = __pyx_v_M;
      __pyx_t_11 = __pyx_t_7;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
        __pyx_v_i = __pyx_t_12;

        /* "pyroxa/pybindings.pyx":464
 * 				raise MemoryError('allocation failed for kf/kr')
 * 			for i in range(M):
 * 				kf_ptr[i] = float(rxns[i].get('kf', 1.0))             # <<<<<<<<<<<<<<
 * 				kr_ptr[i] = float(rxns[i].get('kr', 0.0))
 * 		else:
 */
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_rxns, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 464, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 464, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 464, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_13 = __Pyx_PyObject_AsDouble(__pyx_t_3); if (unlikely(__pyx_t_13 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 464, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        (__pyx_v_kf_ptr[__pyx_v_i]) = __pyx_t_13;

        /* "pyroxa/pybindings.pyx":465
 * 			for i in range(M):
 * 				kf_ptr[i] = float(rxns[i].get('kf', 1.0))
 * 				kr_ptr[i] = float(rxns[i].get('kr', 0.0))             # <<<<<<<<<<<<<<
 * 		else:
 * 			kf_ptr = <double*>0
 */
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_rxns, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 465, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 465, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 465, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_13 = __Pyx_PyObject_AsDouble(__pyx_t_3); if (unlikely(__pyx_t_13 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 465, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        (__pyx_v_kr_ptr[__pyx_v_i]) = __pyx_t_13;
      }

      /* "pyroxa/pybindings.pyx":456
 * 		# prepare arrays: allocate C arrays and fill them
 * 		# kf/kr
 * 		if M > 0:             # <<<<<<<<<<<<<<
 * 			kf_ptr = <double*>malloc(M * sizeof(double))
 * 			kr_ptr = <double*>malloc(M * sizeof(double))
 */
      goto __pyx_L7;
    }

    /* "pyroxa/pybindings.pyx":467
 * 				kr_ptr[i] = float(rxns[i].get('kr', 0.0))
 * 		else:
 * 			kf_ptr = <double*>0             # <<<<<<<<<<<<<<
 * 			kr_ptr = <double*>0
 * 		# reactant/product flattened lists and offsets
 */
    /*else*/ {
      __pyx_v_kf_ptr = ((double *)0);

      /* "pyroxa/pybindings.pyx":468
 * 		else:
 * 			kf_ptr = <double*>0
 * 			kr_ptr = <double*>0             # <<<<<<<<<<<<<<
 * 		# reactant/product flattened lists and offsets
 * 		reac_idx_list = []
 */
      __pyx_v_kr_ptr = ((double *)0);
    }
    __pyx_L7:;

    /* "pyroxa/pybindings.pyx":470
 * 			kr_ptr = <double*>0
 * 		# reactant/product flattened lists and offsets
 * 		reac_idx_list = []             # <<<<<<<<<<<<<<
 * 		reac_nu_list = []
 * 		reac_off = [0]
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_reac_idx_list = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":471
 * 		# reactant/product flattened lists and offsets
 * 		reac_idx_list = []
 * 		reac_nu_list = []             # <<<<<<<<<<<<<<
 * 		reac_off = [0]
 * 		prod_idx_list = []
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_reac_nu_list = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":472
 * 		reac_idx_list = []
 * 		reac_nu_list = []
 * 		reac_off = [0]             # <<<<<<<<<<<<<<
 * 		prod_idx_list = []
 * 		prod_nu_list = []
 */
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_int_0);
    __pyx_v_reac_off = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":473
 * 		reac_nu_list = []
 * 		reac_off = [0]
 * 		prod_idx_list = []             # <<<<<<<<<<<<<<
 * 		prod_nu_list = []
 * 		prod_off = [0]
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_prod_idx_list = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":474
 * 		reac_off = [0]
 * 		prod_idx_list = []
 * 		prod_nu_list = []             # <<<<<<<<<<<<<<
 * 		prod_off = [0]
 * 		for r in rxns:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_prod_nu_list = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":475
 * 		prod_idx_list = []
 * 		prod_nu_list = []
 * 		prod_off = [0]             # <<<<<<<<<<<<<<
 * 		for r in rxns:
 * 			reactants = r.get('reactants', {})
 */
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_int_0);
    __pyx_v_prod_off = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":476
 * 		prod_nu_list = []
 * 		prod_off = [0]
 * 		for r in rxns:             # <<<<<<<<<<<<<<
 * 			reactants = r.get('reactants', {})
 * 			products = r.get('products', {})
 */
    if (likely(PyList_CheckExact(__pyx_v_rxns)) || PyTuple_CheckExact(__pyx_v_rxns)) {
      __pyx_t_3 = __pyx_v_rxns; __Pyx_INCREF(__pyx_t_3); __pyx_t_10 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_rxns); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 476, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 476, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(1, 476, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 476, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(1, 476, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 476, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_14(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 476, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":477
 * 		prod_off = [0]
 * 		for r in rxns:
 * 			reactants = r.get('reactants', {})             # <<<<<<<<<<<<<<
 * 			products = r.get('products', {})
 * 			for s, nu in reactants.items():
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_r, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 477, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 477, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_reactants, __pyx_t_8};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 477, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_reactants, __pyx_t_8};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 477, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_15 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 477, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (__pyx_t_5) {
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_5); __pyx_t_5 = NULL;
        }
        __Pyx_INCREF(__pyx_n_u_reactants);
        __Pyx_GIVEREF(__pyx_n_u_reactants);
        PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_7, __pyx_n_u_reactants);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_7, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 477, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_reactants, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":478
 * 		for r in rxns:
 * 			reactants = r.get('reactants', {})
 * 			products = r.get('products', {})             # <<<<<<<<<<<<<<
 * 			for s, nu in reactants.items():
 * 				reac_idx_list.append(int(species.index(s)))
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_r, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 478, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_15 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 478, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_8 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_n_u_products, __pyx_t_15};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 478, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_n_u_products, __pyx_t_15};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 478, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_INCREF(__pyx_n_u_products);
        __Pyx_GIVEREF(__pyx_n_u_products);
        PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_n_u_products);
        __Pyx_GIVEREF(__pyx_t_15);
        PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_t_15);
        __pyx_t_15 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_products, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":479
 * 			reactants = r.get('reactants', {})
 * 			products = r.get('products', {})
 * 			for s, nu in reactants.items():             # <<<<<<<<<<<<<<
 * 				reac_idx_list.append(int(species.index(s)))
 * 				reac_nu_list.append(float(nu))
 */
      __pyx_t_16 = 0;
      if (unlikely(__pyx_v_reactants == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
        __PYX_ERR(1, 479, __pyx_L1_error)
      }
      __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_reactants, 0, __pyx_n_s_items, (&__pyx_t_17), (&__pyx_t_7)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 479, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4);
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
      while (1) {
        __pyx_t_11 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_17, &__pyx_t_16, &__pyx_t_6, &__pyx_t_5, NULL, __pyx_t_7);
        if (unlikely(__pyx_t_11 == 0)) break;
        if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(1, 479, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_XDECREF_SET(__pyx_v_nu, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "pyroxa/pybindings.pyx":480
 * 			products = r.get('products', {})
 * 			for s, nu in reactants.items():
 * 				reac_idx_list.append(int(species.index(s)))             # <<<<<<<<<<<<<<
 * 				reac_nu_list.append(float(nu))
 * 			reac_off.append(len(reac_idx_list))
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_species, __pyx_n_s_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 480, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_15 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_5 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_15, __pyx_v_s) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_s);
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 480, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 480, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_18 = __Pyx_PyList_Append(__pyx_v_reac_idx_list, __pyx_t_6); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(1, 480, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "pyroxa/pybindings.pyx":481
 * 			for s, nu in reactants.items():
 * 				reac_idx_list.append(int(species.index(s)))
 * 				reac_nu_list.append(float(nu))             # <<<<<<<<<<<<<<
 * 			reac_off.append(len(reac_idx_list))
 * 			for s, nu in products.items():
 */
        __pyx_t_6 = __Pyx_PyNumber_Float(__pyx_v_nu); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_18 = __Pyx_PyList_Append(__pyx_v_reac_nu_list, __pyx_t_6); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(1, 481, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":482
 * 				reac_idx_list.append(int(species.index(s)))
 * 				reac_nu_list.append(float(nu))
 * 			reac_off.append(len(reac_idx_list))             # <<<<<<<<<<<<<<
 * 			for s, nu in products.items():
 * 				prod_idx_list.append(int(species.index(s)))
 */
      __pyx_t_17 = PyList_GET_SIZE(__pyx_v_reac_idx_list); if (unlikely(__pyx_t_17 == ((Py_ssize_t)-1))) __PYX_ERR(1, 482, __pyx_L1_error)
      __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_17); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 482, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_18 = __Pyx_PyList_Append(__pyx_v_reac_off, __pyx_t_4); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(1, 482, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":483
 * 				reac_nu_list.append(float(nu))
 * 			reac_off.append(len(reac_idx_list))
 * 			for s, nu in products.items():             # <<<<<<<<<<<<<<
 * 				prod_idx_list.append(int(species.index(s)))
 * 				prod_nu_list.append(float(nu))
 */
      __pyx_t_17 = 0;
      if (unlikely(__pyx_v_products == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
        __PYX_ERR(1, 483, __pyx_L1_error)
      }
      __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_products, 0, __pyx_n_s_items, (&__pyx_t_16), (&__pyx_t_7)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 483, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4);
      __pyx_t_4 = __pyx_t_6;
      __pyx_t_6 = 0;
      while (1) {
        __pyx_t_11 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_16, &__pyx_t_17, &__pyx_t_6, &__pyx_t_5, NULL, __pyx_t_7);
        if (unlikely(__pyx_t_11 == 0)) break;
        if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(1, 483, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_6);
        __pyx_t_6 = 0;
        __Pyx_XDECREF_SET(__pyx_v_nu, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "pyroxa/pybindings.pyx":484
 * 			reac_off.append(len(reac_idx_list))
 * 			for s, nu in products.items():
 * 				prod_idx_list.append(int(species.index(s)))             # <<<<<<<<<<<<<<
 * 				prod_nu_list.append(float(nu))
 * 			prod_off.append(len(prod_idx_list))
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_species, __pyx_n_s_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_15 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_5 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_15, __pyx_v_s) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_s);
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_18 = __Pyx_PyList_Append(__pyx_v_prod_idx_list, __pyx_t_6); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(1, 484, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "pyroxa/pybindings.pyx":485
 * 			for s, nu in products.items():
 * 				prod_idx_list.append(int(species.index(s)))
 * 				prod_nu_list.append(float(nu))             # <<<<<<<<<<<<<<
 * 			prod_off.append(len(prod_idx_list))
 * 		# create arrays
 */
        __pyx_t_6 = __Pyx_PyNumber_Float(__pyx_v_nu); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 485, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_18 = __Pyx_PyList_Append(__pyx_v_prod_nu_list, __pyx_t_6); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(1, 485, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":486
 * 				prod_idx_list.append(int(species.index(s)))
 * 				prod_nu_list.append(float(nu))
 * 			prod_off.append(len(prod_idx_list))             # <<<<<<<<<<<<<<
 * 		# create arrays
 * 		kf_c = kf_ptr
 */
      __pyx_t_16 = PyList_GET_SIZE(__pyx_v_prod_idx_list); if (unlikely(__pyx_t_16 == ((Py_ssize_t)-1))) __PYX_ERR(1, 486, __pyx_L1_error)
      __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_16); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 486, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_18 = __Pyx_PyList_Append(__pyx_v_prod_off, __pyx_t_4); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(1, 486, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":476
 * 		prod_nu_list = []
 * 		prod_off = [0]
 * 		for r in rxns:             # <<<<<<<<<<<<<<
 * 			reactants = r.get('reactants', {})
 * 			products = r.get('products', {})
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":488
 * 			prod_off.append(len(prod_idx_list))
 * 		# create arrays
 * 		kf_c = kf_ptr             # <<<<<<<<<<<<<<
 * 		kr_c = kr_ptr
 * 		import ctypes
 */
    __pyx_v_kf_c = __pyx_v_kf_ptr;

    /* "pyroxa/pybindings.pyx":489
 * 		# create arrays
 * 		kf_c = kf_ptr
 * 		kr_c = kr_ptr             # <<<<<<<<<<<<<<
 * 		import ctypes
 * 		# allocate and fill reactant/product arrays
 */
    __pyx_v_kr_c = __pyx_v_kr_ptr;

    /* "pyroxa/pybindings.pyx":490
 * 		kf_c = kf_ptr
 * 		kr_c = kr_ptr
 * 		import ctypes             # <<<<<<<<<<<<<<
 * 		# allocate and fill reactant/product arrays
 * 		total_reac = len(reac_idx_list)
 */
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_ctypes, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_ctypes = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":492
 * 		import ctypes
 * 		# allocate and fill reactant/product arrays
 * 		total_reac = len(reac_idx_list)             # <<<<<<<<<<<<<<
 * 		total_prod = len(prod_idx_list)
 * 		if total_reac > 0:
 */
    __pyx_t_10 = PyList_GET_SIZE(__pyx_v_reac_idx_list); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(1, 492, __pyx_L1_error)
    __pyx_v_total_reac = __pyx_t_10;

    /* "pyroxa/pybindings.pyx":493
 * 		# allocate and fill reactant/product arrays
 * 		total_reac = len(reac_idx_list)
 * 		total_prod = len(prod_idx_list)             # <<<<<<<<<<<<<<
 * 		if total_reac > 0:
 * 			c_reac_idx = <int*>malloc(total_reac * sizeof(int))
 */
    __pyx_t_10 = PyList_GET_SIZE(__pyx_v_prod_idx_list); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(1, 493, __pyx_L1_error)
    __pyx_v_total_prod = __pyx_t_10;

    /* "pyroxa/pybindings.pyx":494
 * 		total_reac = len(reac_idx_list)
 * 		total_prod = len(prod_idx_list)
 * 		if total_reac > 0:             # <<<<<<<<<<<<<<
 * 			c_reac_idx = <int*>malloc(total_reac * sizeof(int))
 * 			c_reac_nu = <double*>malloc(total_reac * sizeof(double))
 */
    __pyx_t_2 = ((__pyx_v_total_reac > 0) != 0);
    if (__pyx_t_2) {

      /* "pyroxa/pybindings.pyx":495
 * 		total_prod = len(prod_idx_list)
 * 		if total_reac > 0:
 * 			c_reac_idx = <int*>malloc(total_reac * sizeof(int))             # <<<<<<<<<<<<<<
 * 			c_reac_nu = <double*>malloc(total_reac * sizeof(double))
 * 			if not c_reac_idx or not c_reac_nu:
 */
      __pyx_v_c_reac_idx = ((int *)malloc((__pyx_v_total_reac * (sizeof(int)))));

      /* "pyroxa/pybindings.pyx":496
 * 		if total_reac > 0:
 * 			c_reac_idx = <int*>malloc(total_reac * sizeof(int))
 * 			c_reac_nu = <double*>malloc(total_reac * sizeof(double))             # <<<<<<<<<<<<<<
 * 			if not c_reac_idx or not c_reac_nu:
 * 				if c_reac_idx: free(c_reac_idx)
 */
      __pyx_v_c_reac_nu = ((double *)malloc((__pyx_v_total_reac * (sizeof(double)))));

      /* "pyroxa/pybindings.pyx":497
 * 			c_reac_idx = <int*>malloc(total_reac * sizeof(int))
 * 			c_reac_nu = <double*>malloc(total_reac * sizeof(double))
 * 			if not c_reac_idx or not c_reac_nu:             # <<<<<<<<<<<<<<
 * 				if c_reac_idx: free(c_reac_idx)
 * 				if c_reac_nu: free(c_reac_nu)
 */
      __pyx_t_1 = ((!(__pyx_v_c_reac_idx != 0)) != 0);
      if (!__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L23_bool_binop_done;
      }
      __pyx_t_1 = ((!(__pyx_v_c_reac_nu != 0)) != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L23_bool_binop_done:;
      if (__pyx_t_2) {

        /* "pyroxa/pybindings.pyx":498
 * 			c_reac_nu = <double*>malloc(total_reac * sizeof(double))
 * 			if not c_reac_idx or not c_reac_nu:
 * 				if c_reac_idx: free(c_reac_idx)             # <<<<<<<<<<<<<<
 * 				if c_reac_nu: free(c_reac_nu)
 * 				raise MemoryError('allocation failed for reactants')
 */
        __pyx_t_2 = (__pyx_v_c_reac_idx != 0);
        if (__pyx_t_2) {
          free(__pyx_v_c_reac_idx);
        }

        /* "pyroxa/pybindings.pyx":499
 * 			if not c_reac_idx or not c_reac_nu:
 * 				if c_reac_idx: free(c_reac_idx)
 * 				if c_reac_nu: free(c_reac_nu)             # <<<<<<<<<<<<<<
 * 				raise MemoryError('allocation failed for reactants')
 * 			for i in range(total_reac):
 */
        __pyx_t_2 = (__pyx_v_c_reac_nu != 0);
        if (__pyx_t_2) {
          free(__pyx_v_c_reac_nu);
        }

        /* "pyroxa/pybindings.pyx":500
 * 				if c_reac_idx: free(c_reac_idx)
 * 				if c_reac_nu: free(c_reac_nu)
 * 				raise MemoryError('allocation failed for reactants')             # <<<<<<<<<<<<<<
 * 			for i in range(total_reac):
 * 				c_reac_idx[i] = reac_idx_list[i]
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 500, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 500, __pyx_L1_error)

        /* "pyroxa/pybindings.pyx":497
 * 			c_reac_idx = <int*>malloc(total_reac * sizeof(int))
 * 			c_reac_nu = <double*>malloc(total_reac * sizeof(double))
 * 			if not c_reac_idx or not c_reac_nu:             # <<<<<<<<<<<<<<
 * 				if c_reac_idx: free(c_reac_idx)
 * 				if c_reac_nu: free(c_reac_nu)
 */
      }

      /* "pyroxa/pybindings.pyx":501
 * 				if c_reac_nu: free(c_reac_nu)
 * 				raise MemoryError('allocation failed for reactants')
 * 			for i in range(total_reac):             # <<<<<<<<<<<<<<
 * 				c_reac_idx[i] = reac_idx_list[i]
 * 				c_reac_nu[i] = reac_nu_list[i]
 */
      __pyx_t_7 = __pyx_v_total_reac;
      __pyx_t_11 = __pyx_t_7;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
        __pyx_v_i = __pyx_t_12;

        /* "pyroxa/pybindings.pyx":502
 * 				raise MemoryError('allocation failed for reactants')
 * 			for i in range(total_reac):
 * 				c_reac_idx[i] = reac_idx_list[i]             # <<<<<<<<<<<<<<
 * 				c_reac_nu[i] = reac_nu_list[i]
 * 		else:
 */
        __pyx_t_19 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_reac_idx_list, __pyx_v_i)); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 502, __pyx_L1_error)
        (__pyx_v_c_reac_idx[__pyx_v_i]) = __pyx_t_19;

        /* "pyroxa/pybindings.pyx":503
 * 			for i in range(total_reac):
 * 				c_reac_idx[i] = reac_idx_list[i]
 * 				c_reac_nu[i] = reac_nu_list[i]             # <<<<<<<<<<<<<<
 * 		else:
 * 			c_reac_idx = <int*>0
 */
        __pyx_t_13 = __pyx_PyFloat_AsDouble(PyList_GET_ITEM(__pyx_v_reac_nu_list, __pyx_v_i)); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 503, __pyx_L1_error)
        (__pyx_v_c_reac_nu[__pyx_v_i]) = __pyx_t_13;
      }

      /* "pyroxa/pybindings.pyx":494
 * 		total_reac = len(reac_idx_list)
 * 		total_prod = len(prod_idx_list)
 * 		if total_reac > 0:             # <<<<<<<<<<<<<<
 * 			c_reac_idx = <int*>malloc(total_reac * sizeof(int))
 * 			c_reac_nu = <double*>malloc(total_reac * sizeof(double))
 */
      goto __pyx_L21;
    }

    /* "pyroxa/pybindings.pyx":505
 * 				c_reac_nu[i] = reac_nu_list[i]
 * 		else:
 * 			c_reac_idx = <int*>0             # <<<<<<<<<<<<<<
 * 			c_reac_nu = <double*>0
 * 		# offsets
 */
    /*else*/ {
      __pyx_v_c_reac_idx = ((int *)0);

      /* "pyroxa/pybindings.pyx":506
 * 		else:
 * 			c_reac_idx = <int*>0
 * 			c_reac_nu = <double*>0             # <<<<<<<<<<<<<<
 * 		# offsets
 * 		c_reac_off = <int*>malloc(len(reac_off) * sizeof(int))
 */
      __pyx_v_c_reac_nu = ((double *)0);
    }
    __pyx_L21:;

    /* "pyroxa/pybindings.pyx":508
 * 			c_reac_nu = <double*>0
 * 		# offsets
 * 		c_reac_off = <int*>malloc(len(reac_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_off)):
 * 			c_reac_off[i] = reac_off[i]
 */
    __pyx_t_10 = PyList_GET_SIZE(__pyx_v_reac_off); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(1, 508, __pyx_L1_error)
    __pyx_v_c_reac_off = ((int *)malloc((__pyx_t_10 * (sizeof(int)))));

    /* "pyroxa/pybindings.pyx":509
 * 		# offsets
 * 		c_reac_off = <int*>malloc(len(reac_off) * sizeof(int))
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			c_reac_off[i] = reac_off[i]
 * 		# products
 */
    __pyx_t_10 = PyList_GET_SIZE(__pyx_v_reac_off); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(1, 509, __pyx_L1_error)
    __pyx_t_16 = __pyx_t_10;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_16; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":510
 * 		c_reac_off = <int*>malloc(len(reac_off) * sizeof(int))
 * 		for i in range(len(reac_off)):
 * 			c_reac_off[i] = reac_off[i]             # <<<<<<<<<<<<<<
 * 		# products
 * 		if total_prod > 0:
 */
      __pyx_t_11 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_reac_off, __pyx_v_i)); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 510, __pyx_L1_error)
      (__pyx_v_c_reac_off[__pyx_v_i]) = __pyx_t_11;
    }

    /* "pyroxa/pybindings.pyx":512
 * 			c_reac_off[i] = reac_off[i]
 * 		# products
 * 		if total_prod > 0:             # <<<<<<<<<<<<<<
 * 			c_prod_idx = <int*>malloc(total_prod * sizeof(int))
 * 			c_prod_nu = <double*>malloc(total_prod * sizeof(double))
 */
    __pyx_t_2 = ((__pyx_v_total_prod > 0) != 0);
    if (__pyx_t_2) {

      /* "pyroxa/pybindings.pyx":513
 * 		# products
 * 		if total_prod > 0:
 * 			c_prod_idx = <int*>malloc(total_prod * sizeof(int))             # <<<<<<<<<<<<<<
 * 			c_prod_nu = <double*>malloc(total_prod * sizeof(double))
 * 			if not c_prod_idx or not c_prod_nu:
 */
      __pyx_v_c_prod_idx = ((int *)malloc((__pyx_v_total_prod * (sizeof(int)))));

      /* "pyroxa/pybindings.pyx":514
 * 		if total_prod > 0:
 * 			c_prod_idx = <int*>malloc(total_prod * sizeof(int))
 * 			c_prod_nu = <double*>malloc(total_prod * sizeof(double))             # <<<<<<<<<<<<<<
 * 			if not c_prod_idx or not c_prod_nu:
 * 				if c_prod_idx: free(c_prod_idx)
 */
      __pyx_v_c_prod_nu = ((double *)malloc((__pyx_v_total_prod * (sizeof(double)))));

      /* "pyroxa/pybindings.pyx":515
 * 			c_prod_idx = <int*>malloc(total_prod * sizeof(int))
 * 			c_prod_nu = <double*>malloc(total_prod * sizeof(double))
 * 			if not c_prod_idx or not c_prod_nu:             # <<<<<<<<<<<<<<
 * 				if c_prod_idx: free(c_prod_idx)
 * 				if c_prod_nu: free(c_prod_nu)
 */
      __pyx_t_1 = ((!(__pyx_v_c_prod_idx != 0)) != 0);
      if (!__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L33_bool_binop_done;
      }
      __pyx_t_1 = ((!(__pyx_v_c_prod_nu != 0)) != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L33_bool_binop_done:;
      if (__pyx_t_2) {

        /* "pyroxa/pybindings.pyx":516
 * 			c_prod_nu = <double*>malloc(total_prod * sizeof(double))
 * 			if not c_prod_idx or not c_prod_nu:
 * 				if c_prod_idx: free(c_prod_idx)             # <<<<<<<<<<<<<<
 * 				if c_prod_nu: free(c_prod_nu)
 * 				raise MemoryError('allocation failed for products')
 */
        __pyx_t_2 = (__pyx_v_c_prod_idx != 0);
        if (__pyx_t_2) {
          free(__pyx_v_c_prod_idx);
        }

        /* "pyroxa/pybindings.pyx":517
 * 			if not c_prod_idx or not c_prod_nu:
 * 				if c_prod_idx: free(c_prod_idx)
 * 				if c_prod_nu: free(c_prod_nu)             # <<<<<<<<<<<<<<
 * 				raise MemoryError('allocation failed for products')
 * 			for i in range(total_prod):
 */
        __pyx_t_2 = (__pyx_v_c_prod_nu != 0);
        if (__pyx_t_2) {
          free(__pyx_v_c_prod_nu);
        }

        /* "pyroxa/pybindings.pyx":518
 * 				if c_prod_idx: free(c_prod_idx)
 * 				if c_prod_nu: free(c_prod_nu)
 * 				raise MemoryError('allocation failed for products')             # <<<<<<<<<<<<<<
 * 			for i in range(total_prod):
 * 				c_prod_idx[i] = prod_idx_list[i]
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 518, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 518, __pyx_L1_error)

        /* "pyroxa/pybindings.pyx":515
 * 			c_prod_idx = <int*>malloc(total_prod * sizeof(int))
 * 			c_prod_nu = <double*>malloc(total_prod * sizeof(double))
 * 			if not c_prod_idx or not c_prod_nu:             # <<<<<<<<<<<<<<
 * 				if c_prod_idx: free(c_prod_idx)
 * 				if c_prod_nu: free(c_prod_nu)
 */
      }

      /* "pyroxa/pybindings.pyx":519
 * 				if c_prod_nu: free(c_prod_nu)
 * 				raise MemoryError('allocation failed for products')
 * 			for i in range(total_prod):             # <<<<<<<<<<<<<<
 * 				c_prod_idx[i] = prod_idx_list[i]
 * 				c_prod_nu[i] = prod_nu_list[i]
 */
      __pyx_t_7 = __pyx_v_total_prod;
      __pyx_t_11 = __pyx_t_7;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
        __pyx_v_i = __pyx_t_12;

        /* "pyroxa/pybindings.pyx":520
 * 				raise MemoryError('allocation failed for products')
 * 			for i in range(total_prod):
 * 				c_prod_idx[i] = prod_idx_list[i]             # <<<<<<<<<<<<<<
 * 				c_prod_nu[i] = prod_nu_list[i]
 * 		else:
 */
        __pyx_t_19 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_prod_idx_list, __pyx_v_i)); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 520, __pyx_L1_error)
        (__pyx_v_c_prod_idx[__pyx_v_i]) = __pyx_t_19;

        /* "pyroxa/pybindings.pyx":521
 * 			for i in range(total_prod):
 * 				c_prod_idx[i] = prod_idx_list[i]
 * 				c_prod_nu[i] = prod_nu_list[i]             # <<<<<<<<<<<<<<
 * 		else:
 * 			c_prod_idx = <int*>0
 */
        __pyx_t_13 = __pyx_PyFloat_AsDouble(PyList_GET_ITEM(__pyx_v_prod_nu_list, __pyx_v_i)); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 521, __pyx_L1_error)
        (__pyx_v_c_prod_nu[__pyx_v_i]) = __pyx_t_13;
      }

      /* "pyroxa/pybindings.pyx":512
 * 			c_reac_off[i] = reac_off[i]
 * 		# products
 * 		if total_prod > 0:             # <<<<<<<<<<<<<<
 * 			c_prod_idx = <int*>malloc(total_prod * sizeof(int))
 * 			c_prod_nu = <double*>malloc(total_prod * sizeof(double))
 */
      goto __pyx_L31;
    }

    /* "pyroxa/pybindings.pyx":523
 * 				c_prod_nu[i] = prod_nu_list[i]
 * 		else:
 * 			c_prod_idx = <int*>0             # <<<<<<<<<<<<<<
 * 			c_prod_nu = <double*>0
 * 		# offsets
 */
    /*else*/ {
      __pyx_v_c_prod_idx = ((int *)0);

      /* "pyroxa/pybindings.pyx":524
 * 		else:
 * 			c_prod_idx = <int*>0
 * 			c_prod_nu = <double*>0             # <<<<<<<<<<<<<<
 * 		# offsets
 * 		c_prod_off = <int*>malloc(len(prod_off) * sizeof(int))
 */
      __pyx_v_c_prod_nu = ((double *)0);
    }
    __pyx_L31:;

    /* "pyroxa/pybindings.pyx":526
 * 			c_prod_nu = <double*>0
 * 		# offsets
 * 		c_prod_off = <int*>malloc(len(prod_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_off)):
 * 			c_prod_off[i] = prod_off[i]
 */
    __pyx_t_10 = PyList_GET_SIZE(__pyx_v_prod_off); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(1, 526, __pyx_L1_error)
    __pyx_v_c_prod_off = ((int *)malloc((__pyx_t_10 * (sizeof(int)))));

    /* "pyroxa/pybindings.pyx":527
 * 		# offsets
 * 		c_prod_off = <int*>malloc(len(prod_off) * sizeof(int))
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			c_prod_off[i] = prod_off[i]
 * 		# conc0 C array
 */
    __pyx_t_10 = PyList_GET_SIZE(__pyx_v_prod_off); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(1, 527, __pyx_L1_error)
    __pyx_t_16 = __pyx_t_10;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_16; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":528
 * 		c_prod_off = <int*>malloc(len(prod_off) * sizeof(int))
 * 		for i in range(len(prod_off)):
 * 			c_prod_off[i] = prod_off[i]             # <<<<<<<<<<<<<<
 * 		# conc0 C array
 * 		conc0_py = [float(spec.get('initial', {}).get('conc', {}).get(s, 0.0)) for s in species]
 */
      __pyx_t_11 = __Pyx_PyInt_As_int(PyList_GET_ITEM(__pyx_v_prod_off, __pyx_v_i)); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 528, __pyx_L1_error)
      (__pyx_v_c_prod_off[__pyx_v_i]) = __pyx_t_11;
    }

    /* "pyroxa/pybindings.pyx":530
 * 			c_prod_off[i] = prod_off[i]
 * 		# conc0 C array
 * 		conc0_py = [float(spec.get('initial', {}).get('conc', {}).get(s, 0.0)) for s in species]             # <<<<<<<<<<<<<<
 * 		if N > 0:
 * 			c_conc0 = <double*>malloc(N * sizeof(double))
 */
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 530, __pyx_L43_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_v_species)) || PyTuple_CheckExact(__pyx_v_species)) {
        __pyx_t_4 = __pyx_v_species; __Pyx_INCREF(__pyx_t_4); __pyx_t_10 = 0;
        __pyx_t_14 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_species); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 530, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_14 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 530, __pyx_L43_error)
      }
      for (;;) {
        if (likely(!__pyx_t_14)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_6); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(1, 530, __pyx_L43_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 530, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_6); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(1, 530, __pyx_L43_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 530, __pyx_L43_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_14(__pyx_t_4);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 530, __pyx_L43_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_s, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_spec, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 530, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_20 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 530, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_20);
        __pyx_t_21 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_21)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_21);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_8)) {
          PyObject *__pyx_temp[3] = {__pyx_t_21, __pyx_n_u_initial, __pyx_t_20};
          __pyx_t_15 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 530, __pyx_L43_error)
          __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
          PyObject *__pyx_temp[3] = {__pyx_t_21, __pyx_n_u_initial, __pyx_t_20};
          __pyx_t_15 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 530, __pyx_L43_error)
          __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        } else
        #endif
        {
          __pyx_t_22 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 530, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_22);
          if (__pyx_t_21) {
            __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_21); __pyx_t_21 = NULL;
          }
          __Pyx_INCREF(__pyx_n_u_initial);
          __Pyx_GIVEREF(__pyx_n_u_initial);
          PyTuple_SET_ITEM(__pyx_t_22, 0+__pyx_t_7, __pyx_n_u_initial);
          __Pyx_GIVEREF(__pyx_t_20);
          PyTuple_SET_ITEM(__pyx_t_22, 1+__pyx_t_7, __pyx_t_20);
          __pyx_t_20 = 0;
          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_22, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 530, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 530, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 530, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_22 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_22)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_22);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_8)) {
          PyObject *__pyx_temp[3] = {__pyx_t_22, __pyx_n_u_conc, __pyx_t_15};
          __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 530, __pyx_L43_error)
          __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
          PyObject *__pyx_temp[3] = {__pyx_t_22, __pyx_n_u_conc, __pyx_t_15};
          __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 530, __pyx_L43_error)
          __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        } else
        #endif
        {
          __pyx_t_20 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 530, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_20);
          if (__pyx_t_22) {
            __Pyx_GIVEREF(__pyx_t_22); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_22); __pyx_t_22 = NULL;
          }
          __Pyx_INCREF(__pyx_n_u_conc);
          __Pyx_GIVEREF(__pyx_n_u_conc);
          PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_7, __pyx_n_u_conc);
          __Pyx_GIVEREF(__pyx_t_15);
          PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_7, __pyx_t_15);
          __pyx_t_15 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_20, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 530, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 530, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_8)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_8genexpr6__pyx_v_s, __pyx_float_0_0};
          __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 530, __pyx_L43_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_6);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
          PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_8genexpr6__pyx_v_s, __pyx_float_0_0};
          __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 530, __pyx_L43_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_6);
        } else
        #endif
        {
          __pyx_t_20 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 530, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_20);
          if (__pyx_t_5) {
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_5); __pyx_t_5 = NULL;
          }
          __Pyx_INCREF(__pyx_8genexpr6__pyx_v_s);
          __Pyx_GIVEREF(__pyx_8genexpr6__pyx_v_s);
          PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_7, __pyx_8genexpr6__pyx_v_s);
          __Pyx_INCREF(__pyx_float_0_0);
          __Pyx_GIVEREF(__pyx_float_0_0);
          PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_7, __pyx_float_0_0);
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_20, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 530, __pyx_L43_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyNumber_Float(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 530, __pyx_L43_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_8))) __PYX_ERR(1, 530, __pyx_L43_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_s); __pyx_8genexpr6__pyx_v_s = 0;
      goto __pyx_L46_exit_scope;
      __pyx_L43_error:;
      __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_s); __pyx_8genexpr6__pyx_v_s = 0;
      goto __pyx_L1_error;
      __pyx_L46_exit_scope:;
    } /* exit inner scope */
    __pyx_v_conc0_py = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":531
 * 		# conc0 C array
 * 		conc0_py = [float(spec.get('initial', {}).get('conc', {}).get(s, 0.0)) for s in species]
 * 		if N > 0:             # <<<<<<<<<<<<<<
 * 			c_conc0 = <double*>malloc(N * sizeof(double))
 * 			if not c_conc0:
 */
    __pyx_t_2 = ((__pyx_v_N > 0) != 0);
    if (__pyx_t_2) {

      /* "pyroxa/pybindings.pyx":532
 * 		conc0_py = [float(spec.get('initial', {}).get('conc', {}).get(s, 0.0)) for s in species]
 * 		if N > 0:
 * 			c_conc0 = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 			if not c_conc0:
 * 				raise MemoryError('allocation failed for conc0')
 */
      __pyx_v_c_conc0 = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

      /* "pyroxa/pybindings.pyx":533
 * 		if N > 0:
 * 			c_conc0 = <double*>malloc(N * sizeof(double))
 * 			if not c_conc0:             # <<<<<<<<<<<<<<
 * 				raise MemoryError('allocation failed for conc0')
 * 			for i in range(N):
 */
      __pyx_t_2 = ((!(__pyx_v_c_conc0 != 0)) != 0);
      if (unlikely(__pyx_t_2)) {

        /* "pyroxa/pybindings.pyx":534
 * 			c_conc0 = <double*>malloc(N * sizeof(double))
 * 			if not c_conc0:
 * 				raise MemoryError('allocation failed for conc0')             # <<<<<<<<<<<<<<
 * 			for i in range(N):
 * 				c_conc0[i] = conc0_py[i]
 */
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 534, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 534, __pyx_L1_error)

        /* "pyroxa/pybindings.pyx":533
 * 		if N > 0:
 * 			c_conc0 = <double*>malloc(N * sizeof(double))
 * 			if not c_conc0:             # <<<<<<<<<<<<<<
 * 				raise MemoryError('allocation failed for conc0')
 * 			for i in range(N):
 */
      }

      /* "pyroxa/pybindings.pyx":535
 * 			if not c_conc0:
 * 				raise MemoryError('allocation failed for conc0')
 * 			for i in range(N):             # <<<<<<<<<<<<<<
 * 				c_conc0[i] = conc0_py[i]
 * 		else:
 */
      __pyx_t_7 = __pyx_v_N;
      __pyx_t_11 = __pyx_t_7;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
        __pyx_v_i = __pyx_t_12;

        /* "pyroxa/pybindings.pyx":536
 * 				raise MemoryError('allocation failed for conc0')
 * 			for i in range(N):
 * 				c_conc0[i] = conc0_py[i]             # <<<<<<<<<<<<<<
 * 		else:
 * 			c_conc0 = <double*>0
 */
        __pyx_t_13 = __pyx_PyFloat_AsDouble(PyList_GET_ITEM(__pyx_v_conc0_py, __pyx_v_i)); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 536, __pyx_L1_error)
        (__pyx_v_c_conc0[__pyx_v_i]) = __pyx_t_13;
      }

      /* "pyroxa/pybindings.pyx":531
 * 		# conc0 C array
 * 		conc0_py = [float(spec.get('initial', {}).get('conc', {}).get(s, 0.0)) for s in species]
 * 		if N > 0:             # <<<<<<<<<<<<<<
 * 			c_conc0 = <double*>malloc(N * sizeof(double))
 * 			if not c_conc0:
 */
      goto __pyx_L47;
    }

    /* "pyroxa/pybindings.pyx":538
 * 				c_conc0[i] = conc0_py[i]
 * 		else:
 * 			c_conc0 = <double*>0             # <<<<<<<<<<<<<<
 * 		# output buffers
 * 		nsteps = int(round(float(sim.get('time_span', 10.0)) / float(sim.get('time_step', 0.01))))
 */
    /*else*/ {
      __pyx_v_c_conc0 = ((double *)0);
    }
    __pyx_L47:;

    /* "pyroxa/pybindings.pyx":540
 * 			c_conc0 = <double*>0
 * 		# output buffers
 * 		nsteps = int(round(float(sim.get('time_span', 10.0)) / float(sim.get('time_step', 0.01))))             # <<<<<<<<<<<<<<
 * 		npts = nsteps + 1
 * 		max_len = npts
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_sim, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_13 = __Pyx_PyObject_AsDouble(__pyx_t_4); if (unlikely(__pyx_t_13 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 540, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_sim, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_23 = __Pyx_PyObject_AsDouble(__pyx_t_3); if (unlikely(__pyx_t_23 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 540, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyFloat_FromDouble((__pyx_t_13 / __pyx_t_23)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_round, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 540, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_nsteps = __pyx_t_7;

    /* "pyroxa/pybindings.pyx":541
 * 		# output buffers
 * 		nsteps = int(round(float(sim.get('time_span', 10.0)) / float(sim.get('time_step', 0.01))))
 * 		npts = nsteps + 1             # <<<<<<<<<<<<<<
 * 		max_len = npts
 * 		times_buf = <double*>malloc(max_len * sizeof(double))
 */
    __pyx_v_npts = (__pyx_v_nsteps + 1);

    /* "pyroxa/pybindings.pyx":542
 * 		nsteps = int(round(float(sim.get('time_span', 10.0)) / float(sim.get('time_step', 0.01))))
 * 		npts = nsteps + 1
 * 		max_len = npts             # <<<<<<<<<<<<<<
 * 		times_buf = <double*>malloc(max_len * sizeof(double))
 * 		conc_out_flat = <double*>malloc(max_len * N * sizeof(double))
 */
    __pyx_v_max_len = __pyx_v_npts;

    /* "pyroxa/pybindings.pyx":543
 * 		npts = nsteps + 1
 * 		max_len = npts
 * 		times_buf = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 		conc_out_flat = <double*>malloc(max_len * N * sizeof(double))
 * 		if (max_len > 0 and not times_buf) or (max_len * N > 0 and not conc_out_flat):
 */
    __pyx_v_times_buf = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

    /* "pyroxa/pybindings.pyx":544
 * 		max_len = npts
 * 		times_buf = <double*>malloc(max_len * sizeof(double))
 * 		conc_out_flat = <double*>malloc(max_len * N * sizeof(double))             # <<<<<<<<<<<<<<
 * 		if (max_len > 0 and not times_buf) or (max_len * N > 0 and not conc_out_flat):
 * 			# free previously allocated
 */
    __pyx_v_conc_out_flat = ((double *)malloc(((__pyx_v_max_len * __pyx_v_N) * (sizeof(double)))));

    /* "pyroxa/pybindings.pyx":545
 * 		times_buf = <double*>malloc(max_len * sizeof(double))
 * 		conc_out_flat = <double*>malloc(max_len * N * sizeof(double))
 * 		if (max_len > 0 and not times_buf) or (max_len * N > 0 and not conc_out_flat):             # <<<<<<<<<<<<<<
 * 			# free previously allocated
 * 			if kf_ptr and kf_ptr != <double*>0: free(kf_ptr)
 */
    __pyx_t_1 = ((__pyx_v_max_len > 0) != 0);
    if (!__pyx_t_1) {
      goto __pyx_L53_next_or;
    } else {
    }
    __pyx_t_1 = ((!(__pyx_v_times_buf != 0)) != 0);
    if (!__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L52_bool_binop_done;
    }
    __pyx_L53_next_or:;
    __pyx_t_1 = (((__pyx_v_max_len * __pyx_v_N) > 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L52_bool_binop_done;
    }
    __pyx_t_1 = ((!(__pyx_v_conc_out_flat != 0)) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L52_bool_binop_done:;
    if (__pyx_t_2) {

      /* "pyroxa/pybindings.pyx":547
 * 		if (max_len > 0 and not times_buf) or (max_len * N > 0 and not conc_out_flat):
 * 			# free previously allocated
 * 			if kf_ptr and kf_ptr != <double*>0: free(kf_ptr)             # <<<<<<<<<<<<<<
 * 			if kr_ptr and kr_ptr != <double*>0: free(kr_ptr)
 * 			if c_reac_idx and c_reac_idx != <int*>0: free(c_reac_idx)
 */
      __pyx_t_1 = (__pyx_v_kf_ptr != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L57_bool_binop_done;
      }
      __pyx_t_1 = ((__pyx_v_kf_ptr != ((double *)0)) != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L57_bool_binop_done:;
      if (__pyx_t_2) {
        free(__pyx_v_kf_ptr);
      }

      /* "pyroxa/pybindings.pyx":548
 * 			# free previously allocated
 * 			if kf_ptr and kf_ptr != <double*>0: free(kf_ptr)
 * 			if kr_ptr and kr_ptr != <double*>0: free(kr_ptr)             # <<<<<<<<<<<<<<
 * 			if c_reac_idx and c_reac_idx != <int*>0: free(c_reac_idx)
 * 			if c_reac_nu and c_reac_nu != <double*>0: free(c_reac_nu)
 */
      __pyx_t_1 = (__pyx_v_kr_ptr != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L60_bool_binop_done;
      }
      __pyx_t_1 = ((__pyx_v_kr_ptr != ((double *)0)) != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L60_bool_binop_done:;
      if (__pyx_t_2) {
        free(__pyx_v_kr_ptr);
      }

      /* "pyroxa/pybindings.pyx":549
 * 			if kf_ptr and kf_ptr != <double*>0: free(kf_ptr)
 * 			if kr_ptr and kr_ptr != <double*>0: free(kr_ptr)
 * 			if c_reac_idx and c_reac_idx != <int*>0: free(c_reac_idx)             # <<<<<<<<<<<<<<
 * 			if c_reac_nu and c_reac_nu != <double*>0: free(c_reac_nu)
 * 			if c_reac_off: free(c_reac_off)
 */
      __pyx_t_1 = (__pyx_v_c_reac_idx != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L63_bool_binop_done;
      }
      __pyx_t_1 = ((__pyx_v_c_reac_idx != ((int *)0)) != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L63_bool_binop_done:;
      if (__pyx_t_2) {
        free(__pyx_v_c_reac_idx);
      }

      /* "pyroxa/pybindings.pyx":550
 * 			if kr_ptr and kr_ptr != <double*>0: free(kr_ptr)
 * 			if c_reac_idx and c_reac_idx != <int*>0: free(c_reac_idx)
 * 			if c_reac_nu and c_reac_nu != <double*>0: free(c_reac_nu)             # <<<<<<<<<<<<<<
 * 			if c_reac_off: free(c_reac_off)
 * 			if c_prod_idx and c_prod_idx != <int*>0: free(c_prod_idx)
 */
      __pyx_t_1 = (__pyx_v_c_reac_nu != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L66_bool_binop_done;
      }
      __pyx_t_1 = ((__pyx_v_c_reac_nu != ((double *)0)) != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L66_bool_binop_done:;
      if (__pyx_t_2) {
        free(__pyx_v_c_reac_nu);
      }

      /* "pyroxa/pybindings.pyx":551
 * 			if c_reac_idx and c_reac_idx != <int*>0: free(c_reac_idx)
 * 			if c_reac_nu and c_reac_nu != <double*>0: free(c_reac_nu)
 * 			if c_reac_off: free(c_reac_off)             # <<<<<<<<<<<<<<
 * 			if c_prod_idx and c_prod_idx != <int*>0: free(c_prod_idx)
 * 			if c_prod_nu and c_prod_nu != <double*>0: free(c_prod_nu)
 */
      __pyx_t_2 = (__pyx_v_c_reac_off != 0);
      if (__pyx_t_2) {
        free(__pyx_v_c_reac_off);
      }

      /* "pyroxa/pybindings.pyx":552
 * 			if c_reac_nu and c_reac_nu != <double*>0: free(c_reac_nu)
 * 			if c_reac_off: free(c_reac_off)
 * 			if c_prod_idx and c_prod_idx != <int*>0: free(c_prod_idx)             # <<<<<<<<<<<<<<
 * 			if c_prod_nu and c_prod_nu != <double*>0: free(c_prod_nu)
 * 			if c_prod_off: free(c_prod_off)
 */
      __pyx_t_1 = (__pyx_v_c_prod_idx != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L70_bool_binop_done;
      }
      __pyx_t_1 = ((__pyx_v_c_prod_idx != ((int *)0)) != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L70_bool_binop_done:;
      if (__pyx_t_2) {
        free(__pyx_v_c_prod_idx);
      }

      /* "pyroxa/pybindings.pyx":553
 * 			if c_reac_off: free(c_reac_off)
 * 			if c_prod_idx and c_prod_idx != <int*>0: free(c_prod_idx)
 * 			if c_prod_nu and c_prod_nu != <double*>0: free(c_prod_nu)             # <<<<<<<<<<<<<<
 * 			if c_prod_off: free(c_prod_off)
 * 			if c_conc0 and c_conc0 != <double*>0: free(c_conc0)
 */
      __pyx_t_1 = (__pyx_v_c_prod_nu != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L73_bool_binop_done;
      }
      __pyx_t_1 = ((__pyx_v_c_prod_nu != ((double *)0)) != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L73_bool_binop_done:;
      if (__pyx_t_2) {
        free(__pyx_v_c_prod_nu);
      }

      /* "pyroxa/pybindings.pyx":554
 * 			if c_prod_idx and c_prod_idx != <int*>0: free(c_prod_idx)
 * 			if c_prod_nu and c_prod_nu != <double*>0: free(c_prod_nu)
 * 			if c_prod_off: free(c_prod_off)             # <<<<<<<<<<<<<<
 * 			if c_conc0 and c_conc0 != <double*>0: free(c_conc0)
 * 			raise MemoryError('allocation failed for output buffers')
 */
      __pyx_t_2 = (__pyx_v_c_prod_off != 0);
      if (__pyx_t_2) {
        free(__pyx_v_c_prod_off);
      }

      /* "pyroxa/pybindings.pyx":555
 * 			if c_prod_nu and c_prod_nu != <double*>0: free(c_prod_nu)
 * 			if c_prod_off: free(c_prod_off)
 * 			if c_conc0 and c_conc0 != <double*>0: free(c_conc0)             # <<<<<<<<<<<<<<
 * 			raise MemoryError('allocation failed for output buffers')
 * 		# call
 */
      __pyx_t_1 = (__pyx_v_c_conc0 != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L77_bool_binop_done;
      }
      __pyx_t_1 = ((__pyx_v_c_conc0 != ((double *)0)) != 0);
      __pyx_t_2 = __pyx_t_1;
      __pyx_L77_bool_binop_done:;
      if (__pyx_t_2) {
        free(__pyx_v_c_conc0);
      }

      /* "pyroxa/pybindings.pyx":556
 * 			if c_prod_off: free(c_prod_off)
 * 			if c_conc0 and c_conc0 != <double*>0: free(c_conc0)
 * 			raise MemoryError('allocation failed for output buffers')             # <<<<<<<<<<<<<<
 * 		# call
 * 		written = simulate_multi_reactor(N, M, kf_ptr, kr_ptr,
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 556, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 556, __pyx_L1_error)

      /* "pyroxa/pybindings.pyx":545
 * 		times_buf = <double*>malloc(max_len * sizeof(double))
 * 		conc_out_flat = <double*>malloc(max_len * N * sizeof(double))
 * 		if (max_len > 0 and not times_buf) or (max_len * N > 0 and not conc_out_flat):             # <<<<<<<<<<<<<<
 * 			# free previously allocated
 * 			if kf_ptr and kf_ptr != <double*>0: free(kf_ptr)
 */
    }

    /* "pyroxa/pybindings.pyx":562
 * 							 <int*>c_prod_idx, <double*>c_prod_nu, <int*>c_prod_off,
 * 							 <double*>c_conc0,
 * 							 float(sim.get('time_span', 10.0)), float(sim.get('time_step', 0.01)),             # <<<<<<<<<<<<<<
 * 							 <double*>times_buf, <double*>conc_out_flat, max_len)
 * 		if written <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_sim, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_23 = __Pyx_PyObject_AsDouble(__pyx_t_4); if (unlikely(__pyx_t_23 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 562, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_sim, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_13 = __Pyx_PyObject_AsDouble(__pyx_t_3); if (unlikely(__pyx_t_13 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 562, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":558
 * 			raise MemoryError('allocation failed for output buffers')
 * 		# call
 * 		written = simulate_multi_reactor(N, M, kf_ptr, kr_ptr,             # <<<<<<<<<<<<<<
 * 							 <int*>c_reac_idx, <double*>c_reac_nu, <int*>c_reac_off,
 * 							 <int*>c_prod_idx, <double*>c_prod_nu, <int*>c_prod_off,
 */
    __pyx_v_written = simulate_multi_reactor(__pyx_v_N, __pyx_v_M, __pyx_v_kf_ptr, __pyx_v_kr_ptr, ((int *)__pyx_v_c_reac_idx), ((double *)__pyx_v_c_reac_nu), ((int *)__pyx_v_c_reac_off), ((int *)__pyx_v_c_prod_idx), ((double *)__pyx_v_c_prod_nu), ((int *)__pyx_v_c_prod_off), ((double *)__pyx_v_c_conc0), __pyx_t_23, __pyx_t_13, ((double *)__pyx_v_times_buf), ((double *)__pyx_v_conc_out_flat), __pyx_v_max_len);

    /* "pyroxa/pybindings.pyx":564
 * 							 float(sim.get('time_span', 10.0)), float(sim.get('time_step', 0.01)),
 * 							 <double*>times_buf, <double*>conc_out_flat, max_len)
 * 		if written <= 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError('multi-reactor C++ simulation failed')
 * 		# build numpy arrays if available
 */
    __pyx_t_2 = ((__pyx_v_written <= 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "pyroxa/pybindings.pyx":565
 * 							 <double*>times_buf, <double*>conc_out_flat, max_len)
 * 		if written <= 0:
 * 			raise RuntimeError('multi-reactor C++ simulation failed')             # <<<<<<<<<<<<<<
 * 		# build numpy arrays if available
 * 		if _HAS_NUMPY:
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 565, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 565, __pyx_L1_error)

      /* "pyroxa/pybindings.pyx":564
 * 							 float(sim.get('time_span', 10.0)), float(sim.get('time_step', 0.01)),
 * 							 <double*>times_buf, <double*>conc_out_flat, max_len)
 * 		if written <= 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError('multi-reactor C++ simulation failed')
 * 		# build numpy arrays if available
 */
    }

    /* "pyroxa/pybindings.pyx":567
 * 			raise RuntimeError('multi-reactor C++ simulation failed')
 * 		# build numpy arrays if available
 * 		if _HAS_NUMPY:             # <<<<<<<<<<<<<<
 * 			tarr = np.empty(written, dtype=np.float64)
 * 			carr = np.empty((written, N), dtype=np.float64)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_HAS_NUMPY); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 567, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "pyroxa/pybindings.pyx":568
 * 		# build numpy arrays if available
 * 		if _HAS_NUMPY:
 * 			tarr = np.empty(written, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 			carr = np.empty((written, N), dtype=np.float64)
 * 			for i in range(written):
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 568, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 568, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_written); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 568, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 568, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 568, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 568, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float64); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 568, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_20) < 0) __PYX_ERR(1, 568, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 568, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_tarr = __pyx_t_20;
      __pyx_t_20 = 0;

      /* "pyroxa/pybindings.pyx":569
 * 		if _HAS_NUMPY:
 * 			tarr = np.empty(written, dtype=np.float64)
 * 			carr = np.empty((written, N), dtype=np.float64)             # <<<<<<<<<<<<<<
 * 			for i in range(written):
 * 				tarr[i] = times_buf[i]
 */
      __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_np); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __pyx_t_20 = __Pyx_PyInt_From_int(__pyx_v_written); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_20);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_20);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
      __pyx_t_20 = 0;
      __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_np); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_float64); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_carr = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "pyroxa/pybindings.pyx":570
 * 			tarr = np.empty(written, dtype=np.float64)
 * 			carr = np.empty((written, N), dtype=np.float64)
 * 			for i in range(written):             # <<<<<<<<<<<<<<
 * 				tarr[i] = times_buf[i]
 * 				for j in range(N):
 */
      __pyx_t_7 = __pyx_v_written;
      __pyx_t_11 = __pyx_t_7;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
        __pyx_v_i = __pyx_t_12;

        /* "pyroxa/pybindings.pyx":571
 * 			carr = np.empty((written, N), dtype=np.float64)
 * 			for i in range(written):
 * 				tarr[i] = times_buf[i]             # <<<<<<<<<<<<<<
 * 				for j in range(N):
 * 					carr[i, j] = conc_out_flat[i*N + j]
 */
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_times_buf[__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 571, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_SetItemInt(__pyx_v_tarr, __pyx_v_i, __pyx_t_6, int, 1, __Pyx_PyInt_From_int, 0, 0, 0) < 0)) __PYX_ERR(1, 571, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "pyroxa/pybindings.pyx":572
 * 			for i in range(written):
 * 				tarr[i] = times_buf[i]
 * 				for j in range(N):             # <<<<<<<<<<<<<<
 * 					carr[i, j] = conc_out_flat[i*N + j]
 * 			return tarr, carr
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 572, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 572, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
          __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_10 = 0;
          __pyx_t_14 = NULL;
        } else {
          __pyx_t_10 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 572, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_14 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 572, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        for (;;) {
          if (likely(!__pyx_t_14)) {
            if (likely(PyList_CheckExact(__pyx_t_6))) {
              if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(1, 572, __pyx_L1_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 572, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            } else {
              if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(1, 572, __pyx_L1_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 572, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            }
          } else {
            __pyx_t_4 = __pyx_t_14(__pyx_t_6);
            if (unlikely(!__pyx_t_4)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(1, 572, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "pyroxa/pybindings.pyx":573
 * 				tarr[i] = times_buf[i]
 * 				for j in range(N):
 * 					carr[i, j] = conc_out_flat[i*N + j]             # <<<<<<<<<<<<<<
 * 			return tarr, carr
 * 		else:
 */
          __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_i * __pyx_v_N)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 573, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = PyNumber_Add(__pyx_t_4, __pyx_v_j); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 573, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_16 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_16 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 573, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyFloat_FromDouble((__pyx_v_conc_out_flat[__pyx_t_16])); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 573, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 573, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 573, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
          __Pyx_INCREF(__pyx_v_j);
          __Pyx_GIVEREF(__pyx_v_j);
          PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_j);
          __pyx_t_4 = 0;
          if (unlikely(PyObject_SetItem(__pyx_v_carr, __pyx_t_3, __pyx_t_8) < 0)) __PYX_ERR(1, 573, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "pyroxa/pybindings.pyx":572
 * 			for i in range(written):
 * 				tarr[i] = times_buf[i]
 * 				for j in range(N):             # <<<<<<<<<<<<<<
 * 					carr[i, j] = conc_out_flat[i*N + j]
 * 			return tarr, carr
 */
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }

      /* "pyroxa/pybindings.pyx":574
 * 				for j in range(N):
 * 					carr[i, j] = conc_out_flat[i*N + j]
 * 			return tarr, carr             # <<<<<<<<<<<<<<
 * 		else:
 * 			times_py = [times_buf[i] for i in range(written)]
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_tarr);
      __Pyx_GIVEREF(__pyx_v_tarr);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_tarr);
      __Pyx_INCREF(__pyx_v_carr);
      __Pyx_GIVEREF(__pyx_v_carr);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_carr);
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L0;

      /* "pyroxa/pybindings.pyx":567
 * 			raise RuntimeError('multi-reactor C++ simulation failed')
 * 		# build numpy arrays if available
 * 		if _HAS_NUMPY:             # <<<<<<<<<<<<<<
 * 			tarr = np.empty(written, dtype=np.float64)
 * 			carr = np.empty((written, N), dtype=np.float64)
 */
    }

    /* "pyroxa/pybindings.pyx":576
 * 			return tarr, carr
 * 		else:
 * 			times_py = [times_buf[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 			traj = [[conc_out_flat[i*N + j] for j in range(N)] for i in range(written)]
 * 			return times_py, traj
 */
    /*else*/ {
      { /* enter inner scope */
        __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 576, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __pyx_v_written;
        __pyx_t_11 = __pyx_t_7;
        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
          __pyx_8genexpr7__pyx_v_i = __pyx_t_12;
          __pyx_t_8 = PyFloat_FromDouble((__pyx_v_times_buf[__pyx_8genexpr7__pyx_v_i])); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 576, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_8))) __PYX_ERR(1, 576, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      } /* exit inner scope */
      __pyx_v_times_py = ((PyObject*)__pyx_t_6);
      __pyx_t_6 = 0;

      /* "pyroxa/pybindings.pyx":577
 * 		else:
 * 			times_py = [times_buf[i] for i in range(written)]
 * 			traj = [[conc_out_flat[i*N + j] for j in range(N)] for i in range(written)]             # <<<<<<<<<<<<<<
 * 			return times_py, traj
 * 	else:
 */
      { /* enter inner scope */
        __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 577, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __pyx_v_written;
        __pyx_t_11 = __pyx_t_7;
        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
          __pyx_8genexpr8__pyx_v_i = __pyx_t_12;
          { /* enter inner scope */
            __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 577, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_19 = __pyx_v_N;
            __pyx_t_24 = __pyx_t_19;
            for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_24; __pyx_t_25+=1) {
              __pyx_8genexpr9__pyx_v_j = __pyx_t_25;
              __pyx_t_3 = PyFloat_FromDouble((__pyx_v_conc_out_flat[((__pyx_8genexpr8__pyx_v_i * __pyx_v_N) + __pyx_8genexpr9__pyx_v_j)])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 577, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_3);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 577, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            }
          } /* exit inner scope */
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_8))) __PYX_ERR(1, 577, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      } /* exit inner scope */
      __pyx_v_traj = ((PyObject*)__pyx_t_6);
      __pyx_t_6 = 0;

      /* "pyroxa/pybindings.pyx":578
 * 			times_py = [times_buf[i] for i in range(written)]
 * 			traj = [[conc_out_flat[i*N + j] for j in range(N)] for i in range(written)]
 * 			return times_py, traj             # <<<<<<<<<<<<<<
 * 	else:
 * 		kf = float(reaction.get('kf', 1.0))
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 578, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_v_times_py);
      __Pyx_GIVEREF(__pyx_v_times_py);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_times_py);
      __Pyx_INCREF(__pyx_v_traj);
      __Pyx_GIVEREF(__pyx_v_traj);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_traj);
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L0;
    }

    /* "pyroxa/pybindings.pyx":449
 * 	sim = spec.get('sim', {})
 * 	# multi-species branch: try calling optimized C++ multi-reactor
 * 	if 'species' in spec and 'reactions' in spec:             # <<<<<<<<<<<<<<
 * 		species = spec.get('species', [])
 * 		N = len(species)
 */
  }

  /* "pyroxa/pybindings.pyx":580
 * 			return times_py, traj
 * 	else:
 * 		kf = float(reaction.get('kf', 1.0))             # <<<<<<<<<<<<<<
 * 		kr = float(reaction.get('kr', 0.5))
 * 		conc = initial.get('conc', {})
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_reaction, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_13 = __Pyx_PyObject_AsDouble(__pyx_t_8); if (unlikely(__pyx_t_13 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 580, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_kf = __pyx_t_13;

    /* "pyroxa/pybindings.pyx":581
 * 	else:
 * 		kf = float(reaction.get('kf', 1.0))
 * 		kr = float(reaction.get('kr', 0.5))             # <<<<<<<<<<<<<<
 * 		conc = initial.get('conc', {})
 * 		A0 = float(conc.get('A', 1.0))
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_reaction, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_13 = __Pyx_PyObject_AsDouble(__pyx_t_6); if (unlikely(__pyx_t_13 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 581, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_kr = __pyx_t_13;

    /* "pyroxa/pybindings.pyx":582
 * 		kf = float(reaction.get('kf', 1.0))
 * 		kr = float(reaction.get('kr', 0.5))
 * 		conc = initial.get('conc', {})             # <<<<<<<<<<<<<<
 * 		A0 = float(conc.get('A', 1.0))
 * 		B0 = float(conc.get('B', 0.0))
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_initial, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_conc, __pyx_t_3};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 582, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_conc, __pyx_t_3};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 582, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_20 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_n_u_conc);
      __Pyx_GIVEREF(__pyx_n_u_conc);
      PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_7, __pyx_n_u_conc);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_7, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_20, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_conc = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "pyroxa/pybindings.pyx":583
 * 		kr = float(reaction.get('kr', 0.5))
 * 		conc = initial.get('conc', {})
 * 		A0 = float(conc.get('A', 1.0))             # <<<<<<<<<<<<<<
 * 		B0 = float(conc.get('B', 0.0))
 * 		time_span = float(sim.get('time_span', 10.0))
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_conc, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_13 = __Pyx_PyObject_AsDouble(__pyx_t_8); if (unlikely(__pyx_t_13 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 583, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_A0 = __pyx_t_13;

    /* "pyroxa/pybindings.pyx":584
 * 		conc = initial.get('conc', {})
 * 		A0 = float(conc.get('A', 1.0))
 * 		B0 = float(conc.get('B', 0.0))             # <<<<<<<<<<<<<<
 * 		time_span = float(sim.get('time_span', 10.0))
 * 		dt = float(sim.get('time_step', 0.01))
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_conc, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_13 = __Pyx_PyObject_AsDouble(__pyx_t_6); if (unlikely(__pyx_t_13 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 584, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_B0 = __pyx_t_13;

    /* "pyroxa/pybindings.pyx":585
 * 		A0 = float(conc.get('A', 1.0))
 * 		B0 = float(conc.get('B', 0.0))
 * 		time_span = float(sim.get('time_span', 10.0))             # <<<<<<<<<<<<<<
 * 		dt = float(sim.get('time_step', 0.01))
 * 		rxn = Reaction(kf, kr)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_sim, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_13 = __Pyx_PyObject_AsDouble(__pyx_t_8); if (unlikely(__pyx_t_13 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 585, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_time_span = __pyx_t_13;

    /* "pyroxa/pybindings.pyx":586
 * 		B0 = float(conc.get('B', 0.0))
 * 		time_span = float(sim.get('time_span', 10.0))
 * 		dt = float(sim.get('time_step', 0.01))             # <<<<<<<<<<<<<<
 * 		rxn = Reaction(kf, kr)
 * 		reactor = Reactor(rxn, A0=A0, B0=B0, time_span=time_span, dt=dt)
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_sim, __pyx_n_s_get); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_13 = __Pyx_PyObject_AsDouble(__pyx_t_6); if (unlikely(__pyx_t_13 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(1, 586, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_dt = __pyx_t_13;

    /* "pyroxa/pybindings.pyx":587
 * 		time_span = float(sim.get('time_span', 10.0))
 * 		dt = float(sim.get('time_step', 0.01))
 * 		rxn = Reaction(kf, kr)             # <<<<<<<<<<<<<<
 * 		reactor = Reactor(rxn, A0=A0, B0=B0, time_span=time_span, dt=dt)
 * 		return reactor.run()
 */
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_kf); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_kr); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_t_8);
    __pyx_t_6 = 0;
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pyroxa_11_pybindings_Reaction), __pyx_t_20, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_v_rxn = ((struct __pyx_obj_6pyroxa_11_pybindings_Reaction *)__pyx_t_8);
    __pyx_t_8 = 0;

    /* "pyroxa/pybindings.pyx":588
 * 		dt = float(sim.get('time_step', 0.01))
 * 		rxn = Reaction(kf, kr)
 * 		reactor = Reactor(rxn, A0=A0, B0=B0, time_span=time_span, dt=dt)             # <<<<<<<<<<<<<<
 * 		return reactor.run()
 * 
 */
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(((PyObject *)__pyx_v_rxn));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_rxn));
    PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_rxn));
    __pyx_t_20 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_A0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_A0, __pyx_t_6) < 0) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_B0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_B0, __pyx_t_6) < 0) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_time_span); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_time_span, __pyx_t_6) < 0) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_dt, __pyx_t_6) < 0) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pyroxa_11_pybindings_Reactor), __pyx_t_8, __pyx_t_20); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_v_reactor = ((struct __pyx_obj_6pyroxa_11_pybindings_Reactor *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "pyroxa/pybindings.pyx":589
 * 		rxn = Reaction(kf, kr)
 * 		reactor = Reactor(rxn, A0=A0, B0=B0, time_span=time_span, dt=dt)
 * 		return reactor.run()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_20 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_reactor), __pyx_n_s_run); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_20))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_20);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_20, function);
      }
    }
    __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_20);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* "pyroxa/pybindings.pyx":419
 * 
 * 
 * def run_simulation_cpp(spec):             # <<<<<<<<<<<<<<
 * 	"""High-level helper that takes a Python dict spec and runs the C++ reactor.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_AddTraceback("pyroxa._pybindings.run_simulation_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_reaction);
  __Pyx_XDECREF(__pyx_v_initial);
  __Pyx_XDECREF(__pyx_v_sim);
  __Pyx_XDECREF(__pyx_v_species);
  __Pyx_XDECREF(__pyx_v_rxns);
  __Pyx_XDECREF(__pyx_v_reac_idx_list);
  __Pyx_XDECREF(__pyx_v_reac_nu_list);
  __Pyx_XDECREF(__pyx_v_reac_off);
  __Pyx_XDECREF(__pyx_v_prod_idx_list);
  __Pyx_XDECREF(__pyx_v_prod_nu_list);
  __Pyx_XDECREF(__pyx_v_prod_off);
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XDECREF(__pyx_v_reactants);
  __Pyx_XDECREF(__pyx_v_products);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_nu);
  __Pyx_XDECREF(__pyx_v_ctypes);
  __Pyx_XDECREF(__pyx_v_conc0_py);
  __Pyx_XDECREF(__pyx_v_tarr);
  __Pyx_XDECREF(__pyx_v_carr);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_times_py);
  __Pyx_XDECREF(__pyx_v_traj);
  __Pyx_XDECREF(__pyx_v_conc);
  __Pyx_XDECREF((PyObject *)__pyx_v_rxn);
  __Pyx_XDECREF((PyObject *)__pyx_v_reactor);
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":597
 * 
 * # Enhanced thermodynamics functions
 * def py_gibbs_free_energy(double enthalpy, double entropy, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate Gibbs free energy"""
 * 	return gibbs_free_energy(enthalpy, entropy, T)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_3py_gibbs_free_energy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_2py_gibbs_free_energy[] = "py_gibbs_free_energy(double enthalpy, double entropy, double T)\nCalculate Gibbs free energy";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_3py_gibbs_free_energy = {"py_gibbs_free_energy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_3py_gibbs_free_energy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_2py_gibbs_free_energy};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_3py_gibbs_free_energy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_enthalpy;
  double __pyx_v_entropy;
  double __pyx_v_T;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_gibbs_free_energy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_enthalpy,&__pyx_n_s_entropy,&__pyx_n_s_T,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enthalpy)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_entropy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_gibbs_free_energy", 1, 3, 3, 1); __PYX_ERR(1, 597, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_gibbs_free_energy", 1, 3, 3, 2); __PYX_ERR(1, 597, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_gibbs_free_energy") < 0)) __PYX_ERR(1, 597, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_enthalpy = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_enthalpy == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 597, __pyx_L3_error)
    __pyx_v_entropy = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_entropy == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 597, __pyx_L3_error)
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 597, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_gibbs_free_energy", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 597, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_gibbs_free_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_2py_gibbs_free_energy(__pyx_self, __pyx_v_enthalpy, __pyx_v_entropy, __pyx_v_T);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_2py_gibbs_free_energy(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_enthalpy, double __pyx_v_entropy, double __pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_gibbs_free_energy", 0);

  /* "pyroxa/pybindings.pyx":599
 * def py_gibbs_free_energy(double enthalpy, double entropy, double T):
 * 	"""Calculate Gibbs free energy"""
 * 	return gibbs_free_energy(enthalpy, entropy, T)             # <<<<<<<<<<<<<<
 * 
 * def py_equilibrium_constant(double delta_G, double T):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(gibbs_free_energy(__pyx_v_enthalpy, __pyx_v_entropy, __pyx_v_T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":597
 * 
 * # Enhanced thermodynamics functions
 * def py_gibbs_free_energy(double enthalpy, double entropy, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate Gibbs free energy"""
 * 	return gibbs_free_energy(enthalpy, entropy, T)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_gibbs_free_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":601
 * 	return gibbs_free_energy(enthalpy, entropy, T)
 * 
 * def py_equilibrium_constant(double delta_G, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate equilibrium constant from Gibbs free energy"""
 * 	return equilibrium_constant(delta_G, T)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_5py_equilibrium_constant(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_4py_equilibrium_constant[] = "py_equilibrium_constant(double delta_G, double T)\nCalculate equilibrium constant from Gibbs free energy";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_5py_equilibrium_constant = {"py_equilibrium_constant", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_5py_equilibrium_constant, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_4py_equilibrium_constant};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_5py_equilibrium_constant(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_delta_G;
  double __pyx_v_T;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_equilibrium_constant (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_delta_G,&__pyx_n_s_T,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delta_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_equilibrium_constant", 1, 2, 2, 1); __PYX_ERR(1, 601, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_equilibrium_constant") < 0)) __PYX_ERR(1, 601, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_delta_G = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_delta_G == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 601, __pyx_L3_error)
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 601, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_equilibrium_constant", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 601, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_equilibrium_constant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_4py_equilibrium_constant(__pyx_self, __pyx_v_delta_G, __pyx_v_T);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_4py_equilibrium_constant(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_delta_G, double __pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_equilibrium_constant", 0);

  /* "pyroxa/pybindings.pyx":603
 * def py_equilibrium_constant(double delta_G, double T):
 * 	"""Calculate equilibrium constant from Gibbs free energy"""
 * 	return equilibrium_constant(delta_G, T)             # <<<<<<<<<<<<<<
 * 
 * def py_arrhenius_rate(double A, double Ea, double T, double R=8.314):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(equilibrium_constant(__pyx_v_delta_G, __pyx_v_T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":601
 * 	return gibbs_free_energy(enthalpy, entropy, T)
 * 
 * def py_equilibrium_constant(double delta_G, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate equilibrium constant from Gibbs free energy"""
 * 	return equilibrium_constant(delta_G, T)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_equilibrium_constant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":605
 * 	return equilibrium_constant(delta_G, T)
 * 
 * def py_arrhenius_rate(double A, double Ea, double T, double R=8.314):             # <<<<<<<<<<<<<<
 * 	"""Calculate Arrhenius rate constant"""
 * 	return arrhenius_rate(A, Ea, T, R)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7py_arrhenius_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_6py_arrhenius_rate[] = "py_arrhenius_rate(double A, double Ea, double T, double R=8.314)\nCalculate Arrhenius rate constant";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_7py_arrhenius_rate = {"py_arrhenius_rate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_7py_arrhenius_rate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_6py_arrhenius_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7py_arrhenius_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_A;
  double __pyx_v_Ea;
  double __pyx_v_T;
  double __pyx_v_R;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_arrhenius_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_Ea,&__pyx_n_s_T,&__pyx_n_s_R,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ea)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arrhenius_rate", 0, 3, 4, 1); __PYX_ERR(1, 605, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arrhenius_rate", 0, 3, 4, 2); __PYX_ERR(1, 605, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_R);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_arrhenius_rate") < 0)) __PYX_ERR(1, 605, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_A = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 605, __pyx_L3_error)
    __pyx_v_Ea = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Ea == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 605, __pyx_L3_error)
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 605, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_R = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_R == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 605, __pyx_L3_error)
    } else {
      __pyx_v_R = ((double)8.314);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_arrhenius_rate", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 605, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_arrhenius_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_6py_arrhenius_rate(__pyx_self, __pyx_v_A, __pyx_v_Ea, __pyx_v_T, __pyx_v_R);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_6py_arrhenius_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_A, double __pyx_v_Ea, double __pyx_v_T, double __pyx_v_R) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_arrhenius_rate", 0);

  /* "pyroxa/pybindings.pyx":607
 * def py_arrhenius_rate(double A, double Ea, double T, double R=8.314):
 * 	"""Calculate Arrhenius rate constant"""
 * 	return arrhenius_rate(A, Ea, T, R)             # <<<<<<<<<<<<<<
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(arrhenius_rate(__pyx_v_A, __pyx_v_Ea, __pyx_v_T, __pyx_v_R)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":605
 * 	return equilibrium_constant(delta_G, T)
 * 
 * def py_arrhenius_rate(double A, double Ea, double T, double R=8.314):             # <<<<<<<<<<<<<<
 * 	"""Calculate Arrhenius rate constant"""
 * 	return arrhenius_rate(A, Ea, T, R)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_arrhenius_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":609
 * 	return arrhenius_rate(A, Ea, T, R)
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_9py_pressure_peng_robinson(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_8py_pressure_peng_robinson[] = "py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega)\nCalculate pressure using Peng-Robinson equation of state";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_9py_pressure_peng_robinson = {"py_pressure_peng_robinson", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_9py_pressure_peng_robinson, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_8py_pressure_peng_robinson};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_9py_pressure_peng_robinson(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_n;
  double __pyx_v_V;
  double __pyx_v_T;
  double __pyx_v_Tc;
  double __pyx_v_Pc;
  double __pyx_v_omega;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_pressure_peng_robinson (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_V,&__pyx_n_s_T,&__pyx_n_s_Tc,&__pyx_n_s_Pc,&__pyx_n_s_omega,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_V)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, 1); __PYX_ERR(1, 609, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, 2); __PYX_ERR(1, 609, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Tc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, 3); __PYX_ERR(1, 609, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Pc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, 4); __PYX_ERR(1, 609, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, 5); __PYX_ERR(1, 609, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_pressure_peng_robinson") < 0)) __PYX_ERR(1, 609, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_n = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_n == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 609, __pyx_L3_error)
    __pyx_v_V = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_V == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 609, __pyx_L3_error)
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 609, __pyx_L3_error)
    __pyx_v_Tc = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Tc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 609, __pyx_L3_error)
    __pyx_v_Pc = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Pc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 609, __pyx_L3_error)
    __pyx_v_omega = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 609, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 609, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_pressure_peng_robinson", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_8py_pressure_peng_robinson(__pyx_self, __pyx_v_n, __pyx_v_V, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_8py_pressure_peng_robinson(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_n, double __pyx_v_V, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_pressure_peng_robinson", 0);

  /* "pyroxa/pybindings.pyx":611
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)             # <<<<<<<<<<<<<<
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(pressure_peng_robinson(__pyx_v_n, __pyx_v_V, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":609
 * 	return arrhenius_rate(A, Ea, T, R)
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_pressure_peng_robinson", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":613
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate fugacity coefficient"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_11py_fugacity_coefficient(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_10py_fugacity_coefficient[] = "py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega)\nCalculate fugacity coefficient";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_11py_fugacity_coefficient = {"py_fugacity_coefficient", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_11py_fugacity_coefficient, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_10py_fugacity_coefficient};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_11py_fugacity_coefficient(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_P;
  double __pyx_v_T;
  double __pyx_v_Tc;
  double __pyx_v_Pc;
  double __pyx_v_omega;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_fugacity_coefficient (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_P,&__pyx_n_s_T,&__pyx_n_s_Tc,&__pyx_n_s_Pc,&__pyx_n_s_omega,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_P)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_fugacity_coefficient", 1, 5, 5, 1); __PYX_ERR(1, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Tc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_fugacity_coefficient", 1, 5, 5, 2); __PYX_ERR(1, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Pc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_fugacity_coefficient", 1, 5, 5, 3); __PYX_ERR(1, 613, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_fugacity_coefficient", 1, 5, 5, 4); __PYX_ERR(1, 613, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_fugacity_coefficient") < 0)) __PYX_ERR(1, 613, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_P = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_P == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 613, __pyx_L3_error)
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 613, __pyx_L3_error)
    __pyx_v_Tc = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Tc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 613, __pyx_L3_error)
    __pyx_v_Pc = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Pc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 613, __pyx_L3_error)
    __pyx_v_omega = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 613, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_fugacity_coefficient", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 613, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_fugacity_coefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_10py_fugacity_coefficient(__pyx_self, __pyx_v_P, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_10py_fugacity_coefficient(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_P, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_fugacity_coefficient", 0);

  /* "pyroxa/pybindings.pyx":615
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):
 * 	"""Calculate fugacity coefficient"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)             # <<<<<<<<<<<<<<
 * 
 * # Additional kinetics functions
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(fugacity_coefficient(__pyx_v_P, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":613
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate fugacity coefficient"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_fugacity_coefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":618
 * 
 * # Additional kinetics functions
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):             # <<<<<<<<<<<<<<
 * 	"""Calculate Langmuir-Hinshelwood surface reaction rate"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13py_langmuir_hinshelwood_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_12py_langmuir_hinshelwood_rate[] = "py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B)\nCalculate Langmuir-Hinshelwood surface reaction rate";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_13py_langmuir_hinshelwood_rate = {"py_langmuir_hinshelwood_rate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_13py_langmuir_hinshelwood_rate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_12py_langmuir_hinshelwood_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13py_langmuir_hinshelwood_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_k;
  double __pyx_v_K_A;
  double __pyx_v_K_B;
  double __pyx_v_conc_A;
  double __pyx_v_conc_B;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_langmuir_hinshelwood_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_K_A,&__pyx_n_s_K_B,&__pyx_n_s_conc_A,&__pyx_n_s_conc_B,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_K_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_langmuir_hinshelwood_rate", 1, 5, 5, 1); __PYX_ERR(1, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_K_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_langmuir_hinshelwood_rate", 1, 5, 5, 2); __PYX_ERR(1, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conc_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_langmuir_hinshelwood_rate", 1, 5, 5, 3); __PYX_ERR(1, 618, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conc_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_langmuir_hinshelwood_rate", 1, 5, 5, 4); __PYX_ERR(1, 618, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_langmuir_hinshelwood_rate") < 0)) __PYX_ERR(1, 618, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_k = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_k == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 618, __pyx_L3_error)
    __pyx_v_K_A = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_K_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 618, __pyx_L3_error)
    __pyx_v_K_B = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_K_B == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 618, __pyx_L3_error)
    __pyx_v_conc_A = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_conc_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 618, __pyx_L3_error)
    __pyx_v_conc_B = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_conc_B == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 618, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_langmuir_hinshelwood_rate", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 618, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_langmuir_hinshelwood_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_12py_langmuir_hinshelwood_rate(__pyx_self, __pyx_v_k, __pyx_v_K_A, __pyx_v_K_B, __pyx_v_conc_A, __pyx_v_conc_B);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_12py_langmuir_hinshelwood_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_K_A, double __pyx_v_K_B, double __pyx_v_conc_A, double __pyx_v_conc_B) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_langmuir_hinshelwood_rate", 0);

  /* "pyroxa/pybindings.pyx":620
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):
 * 	"""Calculate Langmuir-Hinshelwood surface reaction rate"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)             # <<<<<<<<<<<<<<
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(langmuir_hinshelwood_rate(__pyx_v_k, __pyx_v_K_A, __pyx_v_K_B, __pyx_v_conc_A, __pyx_v_conc_B)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":618
 * 
 * # Additional kinetics functions
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):             # <<<<<<<<<<<<<<
 * 	"""Calculate Langmuir-Hinshelwood surface reaction rate"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_langmuir_hinshelwood_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":622
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,             # <<<<<<<<<<<<<<
 * 						 double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_15py_photochemical_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_14py_photochemical_rate[] = "py_photochemical_rate(double quantum_yield, double molar_absorptivity, double path_length, double light_intensity, double concentration)\nCalculate photochemical reaction rate";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_15py_photochemical_rate = {"py_photochemical_rate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_15py_photochemical_rate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_14py_photochemical_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_15py_photochemical_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_quantum_yield;
  double __pyx_v_molar_absorptivity;
  double __pyx_v_path_length;
  double __pyx_v_light_intensity;
  double __pyx_v_concentration;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_photochemical_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_quantum_yield,&__pyx_n_s_molar_absorptivity,&__pyx_n_s_path_length,&__pyx_n_s_light_intensity,&__pyx_n_s_concentration,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quantum_yield)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_molar_absorptivity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_photochemical_rate", 1, 5, 5, 1); __PYX_ERR(1, 622, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_photochemical_rate", 1, 5, 5, 2); __PYX_ERR(1, 622, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_light_intensity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_photochemical_rate", 1, 5, 5, 3); __PYX_ERR(1, 622, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_concentration)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_photochemical_rate", 1, 5, 5, 4); __PYX_ERR(1, 622, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_photochemical_rate") < 0)) __PYX_ERR(1, 622, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_quantum_yield = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_quantum_yield == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 622, __pyx_L3_error)
    __pyx_v_molar_absorptivity = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_molar_absorptivity == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 622, __pyx_L3_error)
    __pyx_v_path_length = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_path_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 623, __pyx_L3_error)
    __pyx_v_light_intensity = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_light_intensity == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 623, __pyx_L3_error)
    __pyx_v_concentration = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_concentration == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 623, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_photochemical_rate", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 622, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_photochemical_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_14py_photochemical_rate(__pyx_self, __pyx_v_quantum_yield, __pyx_v_molar_absorptivity, __pyx_v_path_length, __pyx_v_light_intensity, __pyx_v_concentration);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_14py_photochemical_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_quantum_yield, double __pyx_v_molar_absorptivity, double __pyx_v_path_length, double __pyx_v_light_intensity, double __pyx_v_concentration) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_photochemical_rate", 0);

  /* "pyroxa/pybindings.pyx":625
 * 						 double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
 * 	return photochemical_rate(quantum_yield, molar_absorptivity, path_length, light_intensity, concentration)             # <<<<<<<<<<<<<<
 * 
 * # Python wrapper functions for newly implemented C++ functions
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(photochemical_rate(__pyx_v_quantum_yield, __pyx_v_molar_absorptivity, __pyx_v_path_length, __pyx_v_light_intensity, __pyx_v_concentration)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":622
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,             # <<<<<<<<<<<<<<
 * 						 double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_photochemical_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":628
 * 
 * # Python wrapper functions for newly implemented C++ functions
 * def py_autocatalytic_rate(double k, double A, double B, double temperature=298.15):             # <<<<<<<<<<<<<<
 * 	"""Calculate autocatalytic reaction rate with temperature dependency"""
 * 	return autocatalytic_rate(k, A, B, temperature)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_17py_autocatalytic_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_16py_autocatalytic_rate[] = "py_autocatalytic_rate(double k, double A, double B, double temperature=298.15)\nCalculate autocatalytic reaction rate with temperature dependency";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_17py_autocatalytic_rate = {"py_autocatalytic_rate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_17py_autocatalytic_rate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_16py_autocatalytic_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_17py_autocatalytic_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_k;
  double __pyx_v_A;
  double __pyx_v_B;
  double __pyx_v_temperature;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_autocatalytic_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_A,&__pyx_n_s_B,&__pyx_n_s_temperature,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_autocatalytic_rate", 0, 3, 4, 1); __PYX_ERR(1, 628, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_autocatalytic_rate", 0, 3, 4, 2); __PYX_ERR(1, 628, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_temperature);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_autocatalytic_rate") < 0)) __PYX_ERR(1, 628, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_k == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 628, __pyx_L3_error)
    __pyx_v_A = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 628, __pyx_L3_error)
    __pyx_v_B = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_B == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 628, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_temperature = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_temperature == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 628, __pyx_L3_error)
    } else {
      __pyx_v_temperature = ((double)298.15);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_autocatalytic_rate", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 628, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_autocatalytic_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_16py_autocatalytic_rate(__pyx_self, __pyx_v_k, __pyx_v_A, __pyx_v_B, __pyx_v_temperature);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_16py_autocatalytic_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_A, double __pyx_v_B, double __pyx_v_temperature) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_autocatalytic_rate", 0);

  /* "pyroxa/pybindings.pyx":630
 * def py_autocatalytic_rate(double k, double A, double B, double temperature=298.15):
 * 	"""Calculate autocatalytic reaction rate with temperature dependency"""
 * 	return autocatalytic_rate(k, A, B, temperature)             # <<<<<<<<<<<<<<
 * 
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(autocatalytic_rate(__pyx_v_k, __pyx_v_A, __pyx_v_B, __pyx_v_temperature)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":628
 * 
 * # Python wrapper functions for newly implemented C++ functions
 * def py_autocatalytic_rate(double k, double A, double B, double temperature=298.15):             # <<<<<<<<<<<<<<
 * 	"""Calculate autocatalytic reaction rate with temperature dependency"""
 * 	return autocatalytic_rate(k, A, B, temperature)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_autocatalytic_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":632
 * 	return autocatalytic_rate(k, A, B, temperature)
 * 
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):             # <<<<<<<<<<<<<<
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_19py_michaelis_menten_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_18py_michaelis_menten_rate[] = "py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc)\nCalculate Michaelis-Menten enzyme kinetics rate";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_19py_michaelis_menten_rate = {"py_michaelis_menten_rate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_19py_michaelis_menten_rate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_18py_michaelis_menten_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_19py_michaelis_menten_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_Vmax;
  double __pyx_v_Km;
  double __pyx_v_substrate_conc;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_michaelis_menten_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Vmax,&__pyx_n_s_Km,&__pyx_n_s_substrate_conc,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Vmax)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Km)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_michaelis_menten_rate", 1, 3, 3, 1); __PYX_ERR(1, 632, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_substrate_conc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_michaelis_menten_rate", 1, 3, 3, 2); __PYX_ERR(1, 632, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_michaelis_menten_rate") < 0)) __PYX_ERR(1, 632, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_Vmax = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Vmax == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 632, __pyx_L3_error)
    __pyx_v_Km = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Km == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 632, __pyx_L3_error)
    __pyx_v_substrate_conc = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_substrate_conc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 632, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_michaelis_menten_rate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 632, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_michaelis_menten_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_18py_michaelis_menten_rate(__pyx_self, __pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_18py_michaelis_menten_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_michaelis_menten_rate", 0);

  /* "pyroxa/pybindings.pyx":634
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)             # <<<<<<<<<<<<<<
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(michaelis_menten_rate(__pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":632
 * 	return autocatalytic_rate(k, A, B, temperature)
 * 
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):             # <<<<<<<<<<<<<<
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_michaelis_menten_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":636
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,             # <<<<<<<<<<<<<<
 * 								   double inhibitor_conc, double Ki):
 * 	"""Calculate competitive inhibition rate"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_21py_competitive_inhibition_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_20py_competitive_inhibition_rate[] = "py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc, double inhibitor_conc, double Ki)\nCalculate competitive inhibition rate";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_21py_competitive_inhibition_rate = {"py_competitive_inhibition_rate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_21py_competitive_inhibition_rate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_20py_competitive_inhibition_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_21py_competitive_inhibition_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_Vmax;
  double __pyx_v_Km;
  double __pyx_v_substrate_conc;
  double __pyx_v_inhibitor_conc;
  double __pyx_v_Ki;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_competitive_inhibition_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Vmax,&__pyx_n_s_Km,&__pyx_n_s_substrate_conc,&__pyx_n_s_inhibitor_conc,&__pyx_n_s_Ki,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Vmax)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Km)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_competitive_inhibition_rate", 1, 5, 5, 1); __PYX_ERR(1, 636, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_substrate_conc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_competitive_inhibition_rate", 1, 5, 5, 2); __PYX_ERR(1, 636, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inhibitor_conc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_competitive_inhibition_rate", 1, 5, 5, 3); __PYX_ERR(1, 636, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ki)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_competitive_inhibition_rate", 1, 5, 5, 4); __PYX_ERR(1, 636, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_competitive_inhibition_rate") < 0)) __PYX_ERR(1, 636, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_Vmax = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Vmax == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 636, __pyx_L3_error)
    __pyx_v_Km = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Km == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 636, __pyx_L3_error)
    __pyx_v_substrate_conc = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_substrate_conc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 636, __pyx_L3_error)
    __pyx_v_inhibitor_conc = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_inhibitor_conc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 637, __pyx_L3_error)
    __pyx_v_Ki = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Ki == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 637, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_competitive_inhibition_rate", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 636, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_competitive_inhibition_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_20py_competitive_inhibition_rate(__pyx_self, __pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc, __pyx_v_inhibitor_conc, __pyx_v_Ki);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_20py_competitive_inhibition_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc, double __pyx_v_inhibitor_conc, double __pyx_v_Ki) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_competitive_inhibition_rate", 0);

  /* "pyroxa/pybindings.pyx":639
 * 								   double inhibitor_conc, double Ki):
 * 	"""Calculate competitive inhibition rate"""
 * 	return competitive_inhibition_rate(Vmax, Km, substrate_conc, inhibitor_conc, Ki)             # <<<<<<<<<<<<<<
 * 
 * def py_heat_capacity_nasa(double T, coeffs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(competitive_inhibition_rate(__pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc, __pyx_v_inhibitor_conc, __pyx_v_Ki)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":636
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,             # <<<<<<<<<<<<<<
 * 								   double inhibitor_conc, double Ki):
 * 	"""Calculate competitive inhibition rate"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_competitive_inhibition_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":641
 * 	return competitive_inhibition_rate(Vmax, Km, substrate_conc, inhibitor_conc, Ki)
 * 
 * def py_heat_capacity_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate heat capacity using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_23py_heat_capacity_nasa(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_22py_heat_capacity_nasa[] = "py_heat_capacity_nasa(double T, coeffs)\nCalculate heat capacity using NASA polynomial";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_23py_heat_capacity_nasa = {"py_heat_capacity_nasa", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_23py_heat_capacity_nasa, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_22py_heat_capacity_nasa};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_23py_heat_capacity_nasa(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_T;
  PyObject *__pyx_v_coeffs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_heat_capacity_nasa (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_T,&__pyx_n_s_coeffs,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeffs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_heat_capacity_nasa", 1, 2, 2, 1); __PYX_ERR(1, 641, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_heat_capacity_nasa") < 0)) __PYX_ERR(1, 641, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 641, __pyx_L3_error)
    __pyx_v_coeffs = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_heat_capacity_nasa", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 641, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_heat_capacity_nasa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_22py_heat_capacity_nasa(__pyx_self, __pyx_v_T, __pyx_v_coeffs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_22py_heat_capacity_nasa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_T, PyObject *__pyx_v_coeffs) {
  double *__pyx_v_c_coeffs;
  long __pyx_v_i;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  double __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  double __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  char const *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_heat_capacity_nasa", 0);

  /* "pyroxa/pybindings.pyx":643
 * def py_heat_capacity_nasa(double T, coeffs):
 * 	"""Calculate heat capacity using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))             # <<<<<<<<<<<<<<
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')
 */
  __pyx_v_c_coeffs = ((double *)malloc((7 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":644
 * 	"""Calculate heat capacity using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:             # <<<<<<<<<<<<<<
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
 */
  __pyx_t_1 = ((!(__pyx_v_c_coeffs != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pyroxa/pybindings.pyx":645
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')             # <<<<<<<<<<<<<<
 * 	try:
 * 		for i in range(7):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 645, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":644
 * 	"""Calculate heat capacity using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:             # <<<<<<<<<<<<<<
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
 */
  }

  /* "pyroxa/pybindings.pyx":646
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":647
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
 * 		for i in range(7):             # <<<<<<<<<<<<<<
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = heat_capacity_nasa(T, c_coeffs)
 */
    for (__pyx_t_3 = 0; __pyx_t_3 < 7; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "pyroxa/pybindings.pyx":648
 * 	try:
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0             # <<<<<<<<<<<<<<
 * 		result = heat_capacity_nasa(T, c_coeffs)
 * 		return result
 */
      __pyx_t_5 = PyObject_Length(__pyx_v_coeffs); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 648, __pyx_L5_error)
      if (((__pyx_v_i < __pyx_t_5) != 0)) {
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coeffs, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 648, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 648, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_4 = __pyx_t_6;
      } else {
        __pyx_t_4 = 0.0;
      }
      (__pyx_v_c_coeffs[__pyx_v_i]) = __pyx_t_4;
    }

    /* "pyroxa/pybindings.pyx":649
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = heat_capacity_nasa(T, c_coeffs)             # <<<<<<<<<<<<<<
 * 		return result
 * 	finally:
 */
    __pyx_v_result = heat_capacity_nasa(__pyx_v_T, __pyx_v_c_coeffs);

    /* "pyroxa/pybindings.pyx":650
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = heat_capacity_nasa(T, c_coeffs)
 * 		return result             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(c_coeffs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 650, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L4_return;
  }

  /* "pyroxa/pybindings.pyx":652
 * 		return result
 * 	finally:
 * 		free(c_coeffs)             # <<<<<<<<<<<<<<
 * 
 * def py_enthalpy_nasa(double T, coeffs):
 */
  /*finally:*/ {
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __pyx_t_7 = __pyx_lineno; __pyx_t_8 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
      {
        free(__pyx_v_c_coeffs);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      }
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_8; __pyx_filename = __pyx_t_9;
      goto __pyx_L1_error;
    }
    __pyx_L4_return: {
      __pyx_t_15 = __pyx_r;
      __pyx_r = 0;
      free(__pyx_v_c_coeffs);
      __pyx_r = __pyx_t_15;
      __pyx_t_15 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":641
 * 	return competitive_inhibition_rate(Vmax, Km, substrate_conc, inhibitor_conc, Ki)
 * 
 * def py_heat_capacity_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate heat capacity using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyroxa._pybindings.py_heat_capacity_nasa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":654
 * 		free(c_coeffs)
 * 
 * def py_enthalpy_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate enthalpy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_25py_enthalpy_nasa(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_24py_enthalpy_nasa[] = "py_enthalpy_nasa(double T, coeffs)\nCalculate enthalpy using NASA polynomial";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_25py_enthalpy_nasa = {"py_enthalpy_nasa", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_25py_enthalpy_nasa, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_24py_enthalpy_nasa};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_25py_enthalpy_nasa(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_T;
  PyObject *__pyx_v_coeffs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_enthalpy_nasa (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_T,&__pyx_n_s_coeffs,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeffs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_enthalpy_nasa", 1, 2, 2, 1); __PYX_ERR(1, 654, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_enthalpy_nasa") < 0)) __PYX_ERR(1, 654, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 654, __pyx_L3_error)
    __pyx_v_coeffs = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_enthalpy_nasa", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 654, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_enthalpy_nasa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_24py_enthalpy_nasa(__pyx_self, __pyx_v_T, __pyx_v_coeffs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_24py_enthalpy_nasa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_T, PyObject *__pyx_v_coeffs) {
  double *__pyx_v_c_coeffs;
  long __pyx_v_i;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  double __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  double __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  char const *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_enthalpy_nasa", 0);

  /* "pyroxa/pybindings.pyx":656
 * def py_enthalpy_nasa(double T, coeffs):
 * 	"""Calculate enthalpy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))             # <<<<<<<<<<<<<<
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')
 */
  __pyx_v_c_coeffs = ((double *)malloc((7 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":657
 * 	"""Calculate enthalpy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:             # <<<<<<<<<<<<<<
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
 */
  __pyx_t_1 = ((!(__pyx_v_c_coeffs != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pyroxa/pybindings.pyx":658
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')             # <<<<<<<<<<<<<<
 * 	try:
 * 		for i in range(7):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 658, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":657
 * 	"""Calculate enthalpy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:             # <<<<<<<<<<<<<<
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
 */
  }

  /* "pyroxa/pybindings.pyx":659
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":660
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
 * 		for i in range(7):             # <<<<<<<<<<<<<<
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = enthalpy_nasa(T, c_coeffs)
 */
    for (__pyx_t_3 = 0; __pyx_t_3 < 7; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "pyroxa/pybindings.pyx":661
 * 	try:
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0             # <<<<<<<<<<<<<<
 * 		result = enthalpy_nasa(T, c_coeffs)
 * 		return result
 */
      __pyx_t_5 = PyObject_Length(__pyx_v_coeffs); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 661, __pyx_L5_error)
      if (((__pyx_v_i < __pyx_t_5) != 0)) {
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coeffs, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 661, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 661, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_4 = __pyx_t_6;
      } else {
        __pyx_t_4 = 0.0;
      }
      (__pyx_v_c_coeffs[__pyx_v_i]) = __pyx_t_4;
    }

    /* "pyroxa/pybindings.pyx":662
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = enthalpy_nasa(T, c_coeffs)             # <<<<<<<<<<<<<<
 * 		return result
 * 	finally:
 */
    __pyx_v_result = enthalpy_nasa(__pyx_v_T, __pyx_v_c_coeffs);

    /* "pyroxa/pybindings.pyx":663
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = enthalpy_nasa(T, c_coeffs)
 * 		return result             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(c_coeffs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 663, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L4_return;
  }

  /* "pyroxa/pybindings.pyx":665
 * 		return result
 * 	finally:
 * 		free(c_coeffs)             # <<<<<<<<<<<<<<
 * 
 * def py_entropy_nasa(double T, coeffs):
 */
  /*finally:*/ {
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __pyx_t_7 = __pyx_lineno; __pyx_t_8 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
      {
        free(__pyx_v_c_coeffs);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      }
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_8; __pyx_filename = __pyx_t_9;
      goto __pyx_L1_error;
    }
    __pyx_L4_return: {
      __pyx_t_15 = __pyx_r;
      __pyx_r = 0;
      free(__pyx_v_c_coeffs);
      __pyx_r = __pyx_t_15;
      __pyx_t_15 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":654
 * 		free(c_coeffs)
 * 
 * def py_enthalpy_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate enthalpy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyroxa._pybindings.py_enthalpy_nasa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":667
 * 		free(c_coeffs)
 * 
 * def py_entropy_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate entropy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_27py_entropy_nasa(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_26py_entropy_nasa[] = "py_entropy_nasa(double T, coeffs)\nCalculate entropy using NASA polynomial";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_27py_entropy_nasa = {"py_entropy_nasa", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_27py_entropy_nasa, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_26py_entropy_nasa};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_27py_entropy_nasa(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_T;
  PyObject *__pyx_v_coeffs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_entropy_nasa (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_T,&__pyx_n_s_coeffs,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeffs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_entropy_nasa", 1, 2, 2, 1); __PYX_ERR(1, 667, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_entropy_nasa") < 0)) __PYX_ERR(1, 667, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 667, __pyx_L3_error)
    __pyx_v_coeffs = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_entropy_nasa", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 667, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_entropy_nasa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_26py_entropy_nasa(__pyx_self, __pyx_v_T, __pyx_v_coeffs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_26py_entropy_nasa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_T, PyObject *__pyx_v_coeffs) {
  double *__pyx_v_c_coeffs;
  long __pyx_v_i;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  double __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  double __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  char const *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_entropy_nasa", 0);

  /* "pyroxa/pybindings.pyx":669
 * def py_entropy_nasa(double T, coeffs):
 * 	"""Calculate entropy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))             # <<<<<<<<<<<<<<
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')
 */
  __pyx_v_c_coeffs = ((double *)malloc((7 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":670
 * 	"""Calculate entropy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:             # <<<<<<<<<<<<<<
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
 */
  __pyx_t_1 = ((!(__pyx_v_c_coeffs != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pyroxa/pybindings.pyx":671
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')             # <<<<<<<<<<<<<<
 * 	try:
 * 		for i in range(7):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 671, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":670
 * 	"""Calculate entropy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:             # <<<<<<<<<<<<<<
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
 */
  }

  /* "pyroxa/pybindings.pyx":672
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":673
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
 * 		for i in range(7):             # <<<<<<<<<<<<<<
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = entropy_nasa(T, c_coeffs)
 */
    for (__pyx_t_3 = 0; __pyx_t_3 < 7; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "pyroxa/pybindings.pyx":674
 * 	try:
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0             # <<<<<<<<<<<<<<
 * 		result = entropy_nasa(T, c_coeffs)
 * 		return result
 */
      __pyx_t_5 = PyObject_Length(__pyx_v_coeffs); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 674, __pyx_L5_error)
      if (((__pyx_v_i < __pyx_t_5) != 0)) {
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coeffs, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 674, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 674, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_4 = __pyx_t_6;
      } else {
        __pyx_t_4 = 0.0;
      }
      (__pyx_v_c_coeffs[__pyx_v_i]) = __pyx_t_4;
    }

    /* "pyroxa/pybindings.pyx":675
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = entropy_nasa(T, c_coeffs)             # <<<<<<<<<<<<<<
 * 		return result
 * 	finally:
 */
    __pyx_v_result = entropy_nasa(__pyx_v_T, __pyx_v_c_coeffs);

    /* "pyroxa/pybindings.pyx":676
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = entropy_nasa(T, c_coeffs)
 * 		return result             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(c_coeffs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 676, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L4_return;
  }

  /* "pyroxa/pybindings.pyx":678
 * 		return result
 * 	finally:
 * 		free(c_coeffs)             # <<<<<<<<<<<<<<
 * 
 * def py_mass_transfer_correlation(double Re, double Sc, double geometry_factor):
 */
  /*finally:*/ {
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __pyx_t_7 = __pyx_lineno; __pyx_t_8 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
      {
        free(__pyx_v_c_coeffs);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      }
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_8; __pyx_filename = __pyx_t_9;
      goto __pyx_L1_error;
    }
    __pyx_L4_return: {
      __pyx_t_15 = __pyx_r;
      __pyx_r = 0;
      free(__pyx_v_c_coeffs);
      __pyx_r = __pyx_t_15;
      __pyx_t_15 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":667
 * 		free(c_coeffs)
 * 
 * def py_entropy_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate entropy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyroxa._pybindings.py_entropy_nasa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":680
 * 		free(c_coeffs)
 * 
 * def py_mass_transfer_correlation(double Re, double Sc, double geometry_factor):             # <<<<<<<<<<<<<<
 * 	"""Calculate Sherwood number from Reynolds and Schmidt numbers"""
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_29py_mass_transfer_correlation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_28py_mass_transfer_correlation[] = "py_mass_transfer_correlation(double Re, double Sc, double geometry_factor)\nCalculate Sherwood number from Reynolds and Schmidt numbers";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_29py_mass_transfer_correlation = {"py_mass_transfer_correlation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_29py_mass_transfer_correlation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_28py_mass_transfer_correlation};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_29py_mass_transfer_correlation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_Re;
  double __pyx_v_Sc;
  double __pyx_v_geometry_factor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_mass_transfer_correlation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Re,&__pyx_n_s_Sc,&__pyx_n_s_geometry_factor,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Re)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Sc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_mass_transfer_correlation", 1, 3, 3, 1); __PYX_ERR(1, 680, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geometry_factor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_mass_transfer_correlation", 1, 3, 3, 2); __PYX_ERR(1, 680, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_mass_transfer_correlation") < 0)) __PYX_ERR(1, 680, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_Re = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Re == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 680, __pyx_L3_error)
    __pyx_v_Sc = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Sc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 680, __pyx_L3_error)
    __pyx_v_geometry_factor = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_geometry_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 680, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_mass_transfer_correlation", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 680, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_mass_transfer_correlation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_28py_mass_transfer_correlation(__pyx_self, __pyx_v_Re, __pyx_v_Sc, __pyx_v_geometry_factor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_28py_mass_transfer_correlation(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Re, double __pyx_v_Sc, double __pyx_v_geometry_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_mass_transfer_correlation", 0);

  /* "pyroxa/pybindings.pyx":682
 * def py_mass_transfer_correlation(double Re, double Sc, double geometry_factor):
 * 	"""Calculate Sherwood number from Reynolds and Schmidt numbers"""
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)             # <<<<<<<<<<<<<<
 * 
 * def py_heat_transfer_correlation(double Re, double Pr, double geometry_factor):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(mass_transfer_correlation(__pyx_v_Re, __pyx_v_Sc, __pyx_v_geometry_factor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":680
 * 		free(c_coeffs)
 * 
 * def py_mass_transfer_correlation(double Re, double Sc, double geometry_factor):             # <<<<<<<<<<<<<<
 * 	"""Calculate Sherwood number from Reynolds and Schmidt numbers"""
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_mass_transfer_correlation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":684
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)
 * 
 * def py_heat_transfer_correlation(double Re, double Pr, double geometry_factor):             # <<<<<<<<<<<<<<
 * 	"""Calculate Nusselt number from Reynolds and Prandtl numbers"""
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_31py_heat_transfer_correlation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_30py_heat_transfer_correlation[] = "py_heat_transfer_correlation(double Re, double Pr, double geometry_factor)\nCalculate Nusselt number from Reynolds and Prandtl numbers";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_31py_heat_transfer_correlation = {"py_heat_transfer_correlation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_31py_heat_transfer_correlation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_30py_heat_transfer_correlation};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_31py_heat_transfer_correlation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_Re;
  double __pyx_v_Pr;
  double __pyx_v_geometry_factor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_heat_transfer_correlation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Re,&__pyx_n_s_Pr,&__pyx_n_s_geometry_factor,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Re)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Pr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_heat_transfer_correlation", 1, 3, 3, 1); __PYX_ERR(1, 684, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geometry_factor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_heat_transfer_correlation", 1, 3, 3, 2); __PYX_ERR(1, 684, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_heat_transfer_correlation") < 0)) __PYX_ERR(1, 684, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_Re = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Re == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 684, __pyx_L3_error)
    __pyx_v_Pr = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Pr == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 684, __pyx_L3_error)
    __pyx_v_geometry_factor = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_geometry_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 684, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_heat_transfer_correlation", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 684, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_heat_transfer_correlation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_30py_heat_transfer_correlation(__pyx_self, __pyx_v_Re, __pyx_v_Pr, __pyx_v_geometry_factor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_heat_transfer_correlation(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Re, double __pyx_v_Pr, double __pyx_v_geometry_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_heat_transfer_correlation", 0);

  /* "pyroxa/pybindings.pyx":686
 * def py_heat_transfer_correlation(double Re, double Pr, double geometry_factor):
 * 	"""Calculate Nusselt number from Reynolds and Prandtl numbers"""
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)             # <<<<<<<<<<<<<<
 * 
 * def py_effective_diffusivity(double molecular_diff, double porosity,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(heat_transfer_correlation(__pyx_v_Re, __pyx_v_Pr, __pyx_v_geometry_factor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":684
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)
 * 
 * def py_heat_transfer_correlation(double Re, double Pr, double geometry_factor):             # <<<<<<<<<<<<<<
 * 	"""Calculate Nusselt number from Reynolds and Prandtl numbers"""
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_heat_transfer_correlation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":688
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)
 * 
 * def py_effective_diffusivity(double molecular_diff, double porosity,             # <<<<<<<<<<<<<<
 * 							 double tortuosity, double constriction_factor):
 * 	"""Calculate effective diffusivity in porous media"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_33py_effective_diffusivity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_32py_effective_diffusivity[] = "py_effective_diffusivity(double molecular_diff, double porosity, double tortuosity, double constriction_factor)\nCalculate effective diffusivity in porous media";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_33py_effective_diffusivity = {"py_effective_diffusivity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_33py_effective_diffusivity, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_32py_effective_diffusivity};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_33py_effective_diffusivity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_molecular_diff;
  double __pyx_v_porosity;
  double __pyx_v_tortuosity;
  double __pyx_v_constriction_factor;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_effective_diffusivity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_molecular_diff,&__pyx_n_s_porosity,&__pyx_n_s_tortuosity,&__pyx_n_s_constriction_factor,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_molecular_diff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_porosity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_effective_diffusivity", 1, 4, 4, 1); __PYX_ERR(1, 688, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tortuosity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_effective_diffusivity", 1, 4, 4, 2); __PYX_ERR(1, 688, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_constriction_factor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_effective_diffusivity", 1, 4, 4, 3); __PYX_ERR(1, 688, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_effective_diffusivity") < 0)) __PYX_ERR(1, 688, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_molecular_diff = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_molecular_diff == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 688, __pyx_L3_error)
    __pyx_v_porosity = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_porosity == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 688, __pyx_L3_error)
    __pyx_v_tortuosity = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_tortuosity == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 689, __pyx_L3_error)
    __pyx_v_constriction_factor = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_constriction_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 689, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_effective_diffusivity", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 688, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_effective_diffusivity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_32py_effective_diffusivity(__pyx_self, __pyx_v_molecular_diff, __pyx_v_porosity, __pyx_v_tortuosity, __pyx_v_constriction_factor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_32py_effective_diffusivity(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_molecular_diff, double __pyx_v_porosity, double __pyx_v_tortuosity, double __pyx_v_constriction_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_effective_diffusivity", 0);

  /* "pyroxa/pybindings.pyx":691
 * 							 double tortuosity, double constriction_factor):
 * 	"""Calculate effective diffusivity in porous media"""
 * 	return effective_diffusivity(molecular_diff, porosity, tortuosity, constriction_factor)             # <<<<<<<<<<<<<<
 * 
 * def py_pressure_drop_ergun(double velocity, double density, double viscosity,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(effective_diffusivity(__pyx_v_molecular_diff, __pyx_v_porosity, __pyx_v_tortuosity, __pyx_v_constriction_factor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":688
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)
 * 
 * def py_effective_diffusivity(double molecular_diff, double porosity,             # <<<<<<<<<<<<<<
 * 							 double tortuosity, double constriction_factor):
 * 	"""Calculate effective diffusivity in porous media"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_effective_diffusivity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":693
 * 	return effective_diffusivity(molecular_diff, porosity, tortuosity, constriction_factor)
 * 
 * def py_pressure_drop_ergun(double velocity, double density, double viscosity,             # <<<<<<<<<<<<<<
 * 						   double particle_diameter, double bed_porosity, double bed_length):
 * 	"""Calculate pressure drop using Ergun equation"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_35py_pressure_drop_ergun(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_34py_pressure_drop_ergun[] = "py_pressure_drop_ergun(double velocity, double density, double viscosity, double particle_diameter, double bed_porosity, double bed_length)\nCalculate pressure drop using Ergun equation";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_35py_pressure_drop_ergun = {"py_pressure_drop_ergun", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_35py_pressure_drop_ergun, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_34py_pressure_drop_ergun};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_35py_pressure_drop_ergun(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_velocity;
  double __pyx_v_density;
  double __pyx_v_viscosity;
  double __pyx_v_particle_diameter;
  double __pyx_v_bed_porosity;
  double __pyx_v_bed_length;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_pressure_drop_ergun (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_velocity,&__pyx_n_s_density,&__pyx_n_s_viscosity,&__pyx_n_s_particle_diameter,&__pyx_n_s_bed_porosity,&__pyx_n_s_bed_length,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_velocity)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_density)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_drop_ergun", 1, 6, 6, 1); __PYX_ERR(1, 693, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_viscosity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_drop_ergun", 1, 6, 6, 2); __PYX_ERR(1, 693, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particle_diameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_drop_ergun", 1, 6, 6, 3); __PYX_ERR(1, 693, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bed_porosity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_drop_ergun", 1, 6, 6, 4); __PYX_ERR(1, 693, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bed_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_drop_ergun", 1, 6, 6, 5); __PYX_ERR(1, 693, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_pressure_drop_ergun") < 0)) __PYX_ERR(1, 693, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_velocity = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_velocity == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 693, __pyx_L3_error)
    __pyx_v_density = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_density == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 693, __pyx_L3_error)
    __pyx_v_viscosity = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_viscosity == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 693, __pyx_L3_error)
    __pyx_v_particle_diameter = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_particle_diameter == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 694, __pyx_L3_error)
    __pyx_v_bed_porosity = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_bed_porosity == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 694, __pyx_L3_error)
    __pyx_v_bed_length = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_bed_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 694, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_pressure_drop_ergun", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 693, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_pressure_drop_ergun", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_34py_pressure_drop_ergun(__pyx_self, __pyx_v_velocity, __pyx_v_density, __pyx_v_viscosity, __pyx_v_particle_diameter, __pyx_v_bed_porosity, __pyx_v_bed_length);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_34py_pressure_drop_ergun(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_velocity, double __pyx_v_density, double __pyx_v_viscosity, double __pyx_v_particle_diameter, double __pyx_v_bed_porosity, double __pyx_v_bed_length) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_pressure_drop_ergun", 0);

  /* "pyroxa/pybindings.pyx":696
 * 						   double particle_diameter, double bed_porosity, double bed_length):
 * 	"""Calculate pressure drop using Ergun equation"""
 * 	return pressure_drop_ergun(velocity, density, viscosity,             # <<<<<<<<<<<<<<
 * 							   particle_diameter, bed_porosity, bed_length)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "pyroxa/pybindings.pyx":697
 * 	"""Calculate pressure drop using Ergun equation"""
 * 	return pressure_drop_ergun(velocity, density, viscosity,
 * 							   particle_diameter, bed_porosity, bed_length)             # <<<<<<<<<<<<<<
 * 
 * def py_pid_controller(double setpoint, double process_variable, double dt,
 */
  __pyx_t_1 = PyFloat_FromDouble(pressure_drop_ergun(__pyx_v_velocity, __pyx_v_density, __pyx_v_viscosity, __pyx_v_particle_diameter, __pyx_v_bed_porosity, __pyx_v_bed_length)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":693
 * 	return effective_diffusivity(molecular_diff, porosity, tortuosity, constriction_factor)
 * 
 * def py_pressure_drop_ergun(double velocity, double density, double viscosity,             # <<<<<<<<<<<<<<
 * 						   double particle_diameter, double bed_porosity, double bed_length):
 * 	"""Calculate pressure drop using Ergun equation"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_pressure_drop_ergun", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":699
 * 							   particle_diameter, bed_porosity, bed_length)
 * 
 * def py_pid_controller(double setpoint, double process_variable, double dt,             # <<<<<<<<<<<<<<
 * 					  double Kp, double Ki, double Kd):
 * 	"""PID controller implementation"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_37py_pid_controller(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_36py_pid_controller[] = "py_pid_controller(double setpoint, double process_variable, double dt, double Kp, double Ki, double Kd)\nPID controller implementation";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_37py_pid_controller = {"py_pid_controller", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_37py_pid_controller, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_36py_pid_controller};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_37py_pid_controller(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_setpoint;
  double __pyx_v_process_variable;
  double __pyx_v_dt;
  double __pyx_v_Kp;
  double __pyx_v_Ki;
  double __pyx_v_Kd;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_pid_controller (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_setpoint,&__pyx_n_s_process_variable,&__pyx_n_s_dt,&__pyx_n_s_Kp,&__pyx_n_s_Ki,&__pyx_n_s_Kd,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_setpoint)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_process_variable)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pid_controller", 1, 6, 6, 1); __PYX_ERR(1, 699, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pid_controller", 1, 6, 6, 2); __PYX_ERR(1, 699, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Kp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pid_controller", 1, 6, 6, 3); __PYX_ERR(1, 699, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ki)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pid_controller", 1, 6, 6, 4); __PYX_ERR(1, 699, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Kd)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pid_controller", 1, 6, 6, 5); __PYX_ERR(1, 699, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_pid_controller") < 0)) __PYX_ERR(1, 699, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_setpoint = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_setpoint == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 699, __pyx_L3_error)
    __pyx_v_process_variable = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_process_variable == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 699, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 699, __pyx_L3_error)
    __pyx_v_Kp = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Kp == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 700, __pyx_L3_error)
    __pyx_v_Ki = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Ki == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 700, __pyx_L3_error)
    __pyx_v_Kd = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_Kd == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 700, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_pid_controller", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 699, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_pid_controller", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_36py_pid_controller(__pyx_self, __pyx_v_setpoint, __pyx_v_process_variable, __pyx_v_dt, __pyx_v_Kp, __pyx_v_Ki, __pyx_v_Kd);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_36py_pid_controller(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_setpoint, double __pyx_v_process_variable, double __pyx_v_dt, double __pyx_v_Kp, double __pyx_v_Ki, double __pyx_v_Kd) {
  double __pyx_v_integral_term;
  double __pyx_v_previous_error;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_pid_controller", 0);

  /* "pyroxa/pybindings.pyx":702
 * 					  double Kp, double Ki, double Kd):
 * 	"""PID controller implementation"""
 * 	cdef double integral_term = 0.0             # <<<<<<<<<<<<<<
 * 	cdef double previous_error = 0.0
 * 	return pid_controller(setpoint, process_variable, dt, Kp, Ki, Kd,
 */
  __pyx_v_integral_term = 0.0;

  /* "pyroxa/pybindings.pyx":703
 * 	"""PID controller implementation"""
 * 	cdef double integral_term = 0.0
 * 	cdef double previous_error = 0.0             # <<<<<<<<<<<<<<
 * 	return pid_controller(setpoint, process_variable, dt, Kp, Ki, Kd,
 * 						  &integral_term, &previous_error)
 */
  __pyx_v_previous_error = 0.0;

  /* "pyroxa/pybindings.pyx":704
 * 	cdef double integral_term = 0.0
 * 	cdef double previous_error = 0.0
 * 	return pid_controller(setpoint, process_variable, dt, Kp, Ki, Kd,             # <<<<<<<<<<<<<<
 * 						  &integral_term, &previous_error)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "pyroxa/pybindings.pyx":705
 * 	cdef double previous_error = 0.0
 * 	return pid_controller(setpoint, process_variable, dt, Kp, Ki, Kd,
 * 						  &integral_term, &previous_error)             # <<<<<<<<<<<<<<
 * 
 * # Simple thermodynamic calculations
 */
  __pyx_t_1 = PyFloat_FromDouble(pid_controller(__pyx_v_setpoint, __pyx_v_process_variable, __pyx_v_dt, __pyx_v_Kp, __pyx_v_Ki, __pyx_v_Kd, (&__pyx_v_integral_term), (&__pyx_v_previous_error))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":699
 * 							   particle_diameter, bed_porosity, bed_length)
 * 
 * def py_pid_controller(double setpoint, double process_variable, double dt,             # <<<<<<<<<<<<<<
 * 					  double Kp, double Ki, double Kd):
 * 	"""PID controller implementation"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_pid_controller", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":708
 * 
 * # Simple thermodynamic calculations
 * def py_gibbs_free_energy(double enthalpy, double entropy, double temperature):             # <<<<<<<<<<<<<<
 * 	"""Calculate Gibbs free energy from enthalpy and entropy"""
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_39py_gibbs_free_energy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_38py_gibbs_free_energy[] = "py_gibbs_free_energy(double enthalpy, double entropy, double temperature)\nCalculate Gibbs free energy from enthalpy and entropy";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_39py_gibbs_free_energy = {"py_gibbs_free_energy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_39py_gibbs_free_energy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_38py_gibbs_free_energy};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_39py_gibbs_free_energy(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_enthalpy;
  double __pyx_v_entropy;
  double __pyx_v_temperature;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_gibbs_free_energy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_enthalpy,&__pyx_n_s_entropy,&__pyx_n_s_temperature,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enthalpy)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_entropy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_gibbs_free_energy", 1, 3, 3, 1); __PYX_ERR(1, 708, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_temperature)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_gibbs_free_energy", 1, 3, 3, 2); __PYX_ERR(1, 708, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_gibbs_free_energy") < 0)) __PYX_ERR(1, 708, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_enthalpy = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_enthalpy == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 708, __pyx_L3_error)
    __pyx_v_entropy = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_entropy == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 708, __pyx_L3_error)
    __pyx_v_temperature = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_temperature == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 708, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_gibbs_free_energy", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 708, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_gibbs_free_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_38py_gibbs_free_energy(__pyx_self, __pyx_v_enthalpy, __pyx_v_entropy, __pyx_v_temperature);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_38py_gibbs_free_energy(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_enthalpy, double __pyx_v_entropy, double __pyx_v_temperature) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_gibbs_free_energy", 0);

  /* "pyroxa/pybindings.pyx":710
 * def py_gibbs_free_energy(double enthalpy, double entropy, double temperature):
 * 	"""Calculate Gibbs free energy from enthalpy and entropy"""
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)             # <<<<<<<<<<<<<<
 * 
 * def py_equilibrium_constant(double delta_G, double temperature):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(gibbs_free_energy(__pyx_v_enthalpy, __pyx_v_entropy, __pyx_v_temperature)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":708
 * 
 * # Simple thermodynamic calculations
 * def py_gibbs_free_energy(double enthalpy, double entropy, double temperature):             # <<<<<<<<<<<<<<
 * 	"""Calculate Gibbs free energy from enthalpy and entropy"""
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_gibbs_free_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":712
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)
 * 
 * def py_equilibrium_constant(double delta_G, double temperature):             # <<<<<<<<<<<<<<
 * 	"""Calculate equilibrium constant from Gibbs free energy change"""
 * 	return equilibrium_constant(delta_G, temperature)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_41py_equilibrium_constant(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_40py_equilibrium_constant[] = "py_equilibrium_constant(double delta_G, double temperature)\nCalculate equilibrium constant from Gibbs free energy change";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_41py_equilibrium_constant = {"py_equilibrium_constant", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_41py_equilibrium_constant, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_40py_equilibrium_constant};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_41py_equilibrium_constant(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_delta_G;
  double __pyx_v_temperature;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_equilibrium_constant (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_delta_G,&__pyx_n_s_temperature,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delta_G)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_temperature)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_equilibrium_constant", 1, 2, 2, 1); __PYX_ERR(1, 712, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_equilibrium_constant") < 0)) __PYX_ERR(1, 712, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_delta_G = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_delta_G == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 712, __pyx_L3_error)
    __pyx_v_temperature = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_temperature == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 712, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_equilibrium_constant", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 712, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_equilibrium_constant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_40py_equilibrium_constant(__pyx_self, __pyx_v_delta_G, __pyx_v_temperature);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_40py_equilibrium_constant(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_delta_G, double __pyx_v_temperature) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_equilibrium_constant", 0);

  /* "pyroxa/pybindings.pyx":714
 * def py_equilibrium_constant(double delta_G, double temperature):
 * 	"""Calculate equilibrium constant from Gibbs free energy change"""
 * 	return equilibrium_constant(delta_G, temperature)             # <<<<<<<<<<<<<<
 * 
 * def py_arrhenius_rate(double pre_exponential, double activation_energy, double temperature, double gas_constant=8.314):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(equilibrium_constant(__pyx_v_delta_G, __pyx_v_temperature)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":712
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)
 * 
 * def py_equilibrium_constant(double delta_G, double temperature):             # <<<<<<<<<<<<<<
 * 	"""Calculate equilibrium constant from Gibbs free energy change"""
 * 	return equilibrium_constant(delta_G, temperature)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_equilibrium_constant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":716
 * 	return equilibrium_constant(delta_G, temperature)
 * 
 * def py_arrhenius_rate(double pre_exponential, double activation_energy, double temperature, double gas_constant=8.314):             # <<<<<<<<<<<<<<
 * 	"""Calculate reaction rate constant using Arrhenius equation"""
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_43py_arrhenius_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_42py_arrhenius_rate[] = "py_arrhenius_rate(double pre_exponential, double activation_energy, double temperature, double gas_constant=8.314)\nCalculate reaction rate constant using Arrhenius equation";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_43py_arrhenius_rate = {"py_arrhenius_rate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_43py_arrhenius_rate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_42py_arrhenius_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_43py_arrhenius_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_pre_exponential;
  double __pyx_v_activation_energy;
  double __pyx_v_temperature;
  double __pyx_v_gas_constant;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_arrhenius_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pre_exponential,&__pyx_n_s_activation_energy,&__pyx_n_s_temperature,&__pyx_n_s_gas_constant,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pre_exponential)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_activation_energy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arrhenius_rate", 0, 3, 4, 1); __PYX_ERR(1, 716, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_temperature)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_arrhenius_rate", 0, 3, 4, 2); __PYX_ERR(1, 716, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gas_constant);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_arrhenius_rate") < 0)) __PYX_ERR(1, 716, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pre_exponential = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_pre_exponential == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 716, __pyx_L3_error)
    __pyx_v_activation_energy = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_activation_energy == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 716, __pyx_L3_error)
    __pyx_v_temperature = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_temperature == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 716, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_gas_constant = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_gas_constant == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 716, __pyx_L3_error)
    } else {
      __pyx_v_gas_constant = ((double)8.314);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_arrhenius_rate", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 716, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_arrhenius_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_42py_arrhenius_rate(__pyx_self, __pyx_v_pre_exponential, __pyx_v_activation_energy, __pyx_v_temperature, __pyx_v_gas_constant);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_42py_arrhenius_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_pre_exponential, double __pyx_v_activation_energy, double __pyx_v_temperature, double __pyx_v_gas_constant) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_arrhenius_rate", 0);

  /* "pyroxa/pybindings.pyx":718
 * def py_arrhenius_rate(double pre_exponential, double activation_energy, double temperature, double gas_constant=8.314):
 * 	"""Calculate reaction rate constant using Arrhenius equation"""
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)             # <<<<<<<<<<<<<<
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(arrhenius_rate(__pyx_v_pre_exponential, __pyx_v_activation_energy, __pyx_v_temperature, __pyx_v_gas_constant)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":716
 * 	return equilibrium_constant(delta_G, temperature)
 * 
 * def py_arrhenius_rate(double pre_exponential, double activation_energy, double temperature, double gas_constant=8.314):             # <<<<<<<<<<<<<<
 * 	"""Calculate reaction rate constant using Arrhenius equation"""
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_arrhenius_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":720
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_45py_pressure_peng_robinson(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_44py_pressure_peng_robinson[] = "py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega)\nCalculate pressure using Peng-Robinson equation of state";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_45py_pressure_peng_robinson = {"py_pressure_peng_robinson", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_45py_pressure_peng_robinson, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_44py_pressure_peng_robinson};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_45py_pressure_peng_robinson(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_n;
  double __pyx_v_V;
  double __pyx_v_T;
  double __pyx_v_Tc;
  double __pyx_v_Pc;
  double __pyx_v_omega;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_pressure_peng_robinson (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_V,&__pyx_n_s_T,&__pyx_n_s_Tc,&__pyx_n_s_Pc,&__pyx_n_s_omega,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_V)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, 1); __PYX_ERR(1, 720, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, 2); __PYX_ERR(1, 720, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Tc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, 3); __PYX_ERR(1, 720, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Pc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, 4); __PYX_ERR(1, 720, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, 5); __PYX_ERR(1, 720, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_pressure_peng_robinson") < 0)) __PYX_ERR(1, 720, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_n = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_n == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 720, __pyx_L3_error)
    __pyx_v_V = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_V == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 720, __pyx_L3_error)
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 720, __pyx_L3_error)
    __pyx_v_Tc = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Tc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 720, __pyx_L3_error)
    __pyx_v_Pc = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Pc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 720, __pyx_L3_error)
    __pyx_v_omega = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 720, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 720, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_pressure_peng_robinson", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_44py_pressure_peng_robinson(__pyx_self, __pyx_v_n, __pyx_v_V, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_44py_pressure_peng_robinson(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_n, double __pyx_v_V, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_pressure_peng_robinson", 0);

  /* "pyroxa/pybindings.pyx":722
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)             # <<<<<<<<<<<<<<
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(pressure_peng_robinson(__pyx_v_n, __pyx_v_V, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":720
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_pressure_peng_robinson", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":724
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate fugacity coefficient using Peng-Robinson equation"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_47py_fugacity_coefficient(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_46py_fugacity_coefficient[] = "py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega)\nCalculate fugacity coefficient using Peng-Robinson equation";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_47py_fugacity_coefficient = {"py_fugacity_coefficient", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_47py_fugacity_coefficient, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_46py_fugacity_coefficient};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_47py_fugacity_coefficient(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_P;
  double __pyx_v_T;
  double __pyx_v_Tc;
  double __pyx_v_Pc;
  double __pyx_v_omega;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_fugacity_coefficient (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_P,&__pyx_n_s_T,&__pyx_n_s_Tc,&__pyx_n_s_Pc,&__pyx_n_s_omega,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_P)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_fugacity_coefficient", 1, 5, 5, 1); __PYX_ERR(1, 724, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Tc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_fugacity_coefficient", 1, 5, 5, 2); __PYX_ERR(1, 724, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Pc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_fugacity_coefficient", 1, 5, 5, 3); __PYX_ERR(1, 724, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_omega)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_fugacity_coefficient", 1, 5, 5, 4); __PYX_ERR(1, 724, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_fugacity_coefficient") < 0)) __PYX_ERR(1, 724, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_P = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_P == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 724, __pyx_L3_error)
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 724, __pyx_L3_error)
    __pyx_v_Tc = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Tc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 724, __pyx_L3_error)
    __pyx_v_Pc = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Pc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 724, __pyx_L3_error)
    __pyx_v_omega = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 724, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_fugacity_coefficient", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 724, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_fugacity_coefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_46py_fugacity_coefficient(__pyx_self, __pyx_v_P, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_46py_fugacity_coefficient(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_P, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_fugacity_coefficient", 0);

  /* "pyroxa/pybindings.pyx":726
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):
 * 	"""Calculate fugacity coefficient using Peng-Robinson equation"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)             # <<<<<<<<<<<<<<
 * 
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(fugacity_coefficient(__pyx_v_P, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":724
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate fugacity coefficient using Peng-Robinson equation"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_fugacity_coefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":728
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 * 
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):             # <<<<<<<<<<<<<<
 * 	"""Calculate reaction rate using Langmuir-Hinshelwood kinetics"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_49py_langmuir_hinshelwood_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_48py_langmuir_hinshelwood_rate[] = "py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B)\nCalculate reaction rate using Langmuir-Hinshelwood kinetics";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_49py_langmuir_hinshelwood_rate = {"py_langmuir_hinshelwood_rate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_49py_langmuir_hinshelwood_rate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_48py_langmuir_hinshelwood_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_49py_langmuir_hinshelwood_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_k;
  double __pyx_v_K_A;
  double __pyx_v_K_B;
  double __pyx_v_conc_A;
  double __pyx_v_conc_B;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_langmuir_hinshelwood_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_K_A,&__pyx_n_s_K_B,&__pyx_n_s_conc_A,&__pyx_n_s_conc_B,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_K_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_langmuir_hinshelwood_rate", 1, 5, 5, 1); __PYX_ERR(1, 728, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_K_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_langmuir_hinshelwood_rate", 1, 5, 5, 2); __PYX_ERR(1, 728, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conc_A)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_langmuir_hinshelwood_rate", 1, 5, 5, 3); __PYX_ERR(1, 728, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conc_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_langmuir_hinshelwood_rate", 1, 5, 5, 4); __PYX_ERR(1, 728, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_langmuir_hinshelwood_rate") < 0)) __PYX_ERR(1, 728, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_k = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_k == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 728, __pyx_L3_error)
    __pyx_v_K_A = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_K_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 728, __pyx_L3_error)
    __pyx_v_K_B = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_K_B == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 728, __pyx_L3_error)
    __pyx_v_conc_A = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_conc_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 728, __pyx_L3_error)
    __pyx_v_conc_B = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_conc_B == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 728, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_langmuir_hinshelwood_rate", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 728, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_langmuir_hinshelwood_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_48py_langmuir_hinshelwood_rate(__pyx_self, __pyx_v_k, __pyx_v_K_A, __pyx_v_K_B, __pyx_v_conc_A, __pyx_v_conc_B);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_48py_langmuir_hinshelwood_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_K_A, double __pyx_v_K_B, double __pyx_v_conc_A, double __pyx_v_conc_B) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_langmuir_hinshelwood_rate", 0);

  /* "pyroxa/pybindings.pyx":730
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):
 * 	"""Calculate reaction rate using Langmuir-Hinshelwood kinetics"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)             # <<<<<<<<<<<<<<
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(langmuir_hinshelwood_rate(__pyx_v_k, __pyx_v_K_A, __pyx_v_K_B, __pyx_v_conc_A, __pyx_v_conc_B)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":728
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 * 
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):             # <<<<<<<<<<<<<<
 * 	"""Calculate reaction rate using Langmuir-Hinshelwood kinetics"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_langmuir_hinshelwood_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":732
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,             # <<<<<<<<<<<<<<
 * 						  double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_51py_photochemical_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_50py_photochemical_rate[] = "py_photochemical_rate(double quantum_yield, double molar_absorptivity, double path_length, double light_intensity, double concentration)\nCalculate photochemical reaction rate";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_51py_photochemical_rate = {"py_photochemical_rate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_51py_photochemical_rate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_50py_photochemical_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_51py_photochemical_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_quantum_yield;
  double __pyx_v_molar_absorptivity;
  double __pyx_v_path_length;
  double __pyx_v_light_intensity;
  double __pyx_v_concentration;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_photochemical_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_quantum_yield,&__pyx_n_s_molar_absorptivity,&__pyx_n_s_path_length,&__pyx_n_s_light_intensity,&__pyx_n_s_concentration,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quantum_yield)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_molar_absorptivity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_photochemical_rate", 1, 5, 5, 1); __PYX_ERR(1, 732, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_photochemical_rate", 1, 5, 5, 2); __PYX_ERR(1, 732, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_light_intensity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_photochemical_rate", 1, 5, 5, 3); __PYX_ERR(1, 732, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_concentration)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_photochemical_rate", 1, 5, 5, 4); __PYX_ERR(1, 732, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_photochemical_rate") < 0)) __PYX_ERR(1, 732, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_quantum_yield = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_quantum_yield == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 732, __pyx_L3_error)
    __pyx_v_molar_absorptivity = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_molar_absorptivity == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 732, __pyx_L3_error)
    __pyx_v_path_length = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_path_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 733, __pyx_L3_error)
    __pyx_v_light_intensity = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_light_intensity == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 733, __pyx_L3_error)
    __pyx_v_concentration = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_concentration == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 733, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_photochemical_rate", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 732, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_photochemical_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_50py_photochemical_rate(__pyx_self, __pyx_v_quantum_yield, __pyx_v_molar_absorptivity, __pyx_v_path_length, __pyx_v_light_intensity, __pyx_v_concentration);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_50py_photochemical_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_quantum_yield, double __pyx_v_molar_absorptivity, double __pyx_v_path_length, double __pyx_v_light_intensity, double __pyx_v_concentration) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_photochemical_rate", 0);

  /* "pyroxa/pybindings.pyx":735
 * 						  double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
 * 	return photochemical_rate(quantum_yield, molar_absorptivity, path_length, light_intensity, concentration)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 1: Simple utility functions (statistics and interpolation)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(photochemical_rate(__pyx_v_quantum_yield, __pyx_v_molar_absorptivity, __pyx_v_path_length, __pyx_v_light_intensity, __pyx_v_concentration)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":732
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,             # <<<<<<<<<<<<<<
 * 						  double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_photochemical_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":738
 * 
 * # BATCH 1: Simple utility functions (statistics and interpolation)
 * def py_linear_interpolate(double x, x_data, y_data):             # <<<<<<<<<<<<<<
 * 	"""Linear interpolation between data points"""
 * 	cdef int n = len(x_data)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_53py_linear_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_52py_linear_interpolate[] = "py_linear_interpolate(double x, x_data, y_data)\nLinear interpolation between data points";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_53py_linear_interpolate = {"py_linear_interpolate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_53py_linear_interpolate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_52py_linear_interpolate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_53py_linear_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x;
  PyObject *__pyx_v_x_data = 0;
  PyObject *__pyx_v_y_data = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_linear_interpolate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_x_data,&__pyx_n_s_y_data,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_linear_interpolate", 1, 3, 3, 1); __PYX_ERR(1, 738, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_linear_interpolate", 1, 3, 3, 2); __PYX_ERR(1, 738, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_linear_interpolate") < 0)) __PYX_ERR(1, 738, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 738, __pyx_L3_error)
    __pyx_v_x_data = values[1];
    __pyx_v_y_data = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_linear_interpolate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 738, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_linear_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_52py_linear_interpolate(__pyx_self, __pyx_v_x, __pyx_v_x_data, __pyx_v_y_data);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_52py_linear_interpolate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_x, PyObject *__pyx_v_x_data, PyObject *__pyx_v_y_data) {
  int __pyx_v_n;
  double *__pyx_v_x_data_c;
  double *__pyx_v_y_data_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_linear_interpolate", 0);

  /* "pyroxa/pybindings.pyx":740
 * def py_linear_interpolate(double x, x_data, y_data):
 * 	"""Linear interpolation between data points"""
 * 	cdef int n = len(x_data)             # <<<<<<<<<<<<<<
 * 	cdef double* x_data_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_x_data); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 740, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":741
 * 	"""Linear interpolation between data points"""
 * 	cdef int n = len(x_data)
 * 	cdef double* x_data_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))
 * 
 */
  __pyx_v_x_data_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":742
 * 	cdef int n = len(x_data)
 * 	cdef double* x_data_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_y_data_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":744
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(n):
 * 			x_data_c[i] = x_data[i]
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":745
 * 
 * 	try:
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			x_data_c[i] = x_data[i]
 * 			y_data_c[i] = y_data[i]
 */
    __pyx_t_2 = __pyx_v_n;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":746
 * 	try:
 * 		for i in range(n):
 * 			x_data_c[i] = x_data[i]             # <<<<<<<<<<<<<<
 * 			y_data_c[i] = y_data[i]
 * 
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_x_data, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 746, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 746, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_x_data_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":747
 * 		for i in range(n):
 * 			x_data_c[i] = x_data[i]
 * 			y_data_c[i] = y_data[i]             # <<<<<<<<<<<<<<
 * 
 * 		return linear_interpolate(x, x_data_c, y_data_c, n)
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_y_data, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 747, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 747, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_y_data_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":749
 * 			y_data_c[i] = y_data[i]
 * 
 * 		return linear_interpolate(x, x_data_c, y_data_c, n)             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(x_data_c)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(linear_interpolate(__pyx_v_x, __pyx_v_x_data_c, __pyx_v_y_data_c, __pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 749, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":751
 * 		return linear_interpolate(x, x_data_c, y_data_c, n)
 * 	finally:
 * 		free(x_data_c)             # <<<<<<<<<<<<<<
 * 		free(y_data_c)
 * 
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_x_data_c);

        /* "pyroxa/pybindings.pyx":752
 * 	finally:
 * 		free(x_data_c)
 * 		free(y_data_c)             # <<<<<<<<<<<<<<
 * 
 * def py_cubic_spline_interpolate(double x, x_data, y_data):
 */
        free(__pyx_v_y_data_c);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":751
 * 		return linear_interpolate(x, x_data_c, y_data_c, n)
 * 	finally:
 * 		free(x_data_c)             # <<<<<<<<<<<<<<
 * 		free(y_data_c)
 * 
 */
      free(__pyx_v_x_data_c);

      /* "pyroxa/pybindings.pyx":752
 * 	finally:
 * 		free(x_data_c)
 * 		free(y_data_c)             # <<<<<<<<<<<<<<
 * 
 * def py_cubic_spline_interpolate(double x, x_data, y_data):
 */
      free(__pyx_v_y_data_c);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":738
 * 
 * # BATCH 1: Simple utility functions (statistics and interpolation)
 * def py_linear_interpolate(double x, x_data, y_data):             # <<<<<<<<<<<<<<
 * 	"""Linear interpolation between data points"""
 * 	cdef int n = len(x_data)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_linear_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":754
 * 		free(y_data_c)
 * 
 * def py_cubic_spline_interpolate(double x, x_data, y_data):             # <<<<<<<<<<<<<<
 * 	"""Cubic spline interpolation between data points"""
 * 	cdef int n = len(x_data)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_55py_cubic_spline_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_54py_cubic_spline_interpolate[] = "py_cubic_spline_interpolate(double x, x_data, y_data)\nCubic spline interpolation between data points";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_55py_cubic_spline_interpolate = {"py_cubic_spline_interpolate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_55py_cubic_spline_interpolate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_54py_cubic_spline_interpolate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_55py_cubic_spline_interpolate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x;
  PyObject *__pyx_v_x_data = 0;
  PyObject *__pyx_v_y_data = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_cubic_spline_interpolate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_x_data,&__pyx_n_s_y_data,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_cubic_spline_interpolate", 1, 3, 3, 1); __PYX_ERR(1, 754, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_cubic_spline_interpolate", 1, 3, 3, 2); __PYX_ERR(1, 754, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_cubic_spline_interpolate") < 0)) __PYX_ERR(1, 754, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 754, __pyx_L3_error)
    __pyx_v_x_data = values[1];
    __pyx_v_y_data = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_cubic_spline_interpolate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 754, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_cubic_spline_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_54py_cubic_spline_interpolate(__pyx_self, __pyx_v_x, __pyx_v_x_data, __pyx_v_y_data);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_54py_cubic_spline_interpolate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_x, PyObject *__pyx_v_x_data, PyObject *__pyx_v_y_data) {
  int __pyx_v_n;
  double *__pyx_v_x_data_c;
  double *__pyx_v_y_data_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_cubic_spline_interpolate", 0);

  /* "pyroxa/pybindings.pyx":756
 * def py_cubic_spline_interpolate(double x, x_data, y_data):
 * 	"""Cubic spline interpolation between data points"""
 * 	cdef int n = len(x_data)             # <<<<<<<<<<<<<<
 * 	cdef double* x_data_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_x_data); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 756, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":757
 * 	"""Cubic spline interpolation between data points"""
 * 	cdef int n = len(x_data)
 * 	cdef double* x_data_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))
 * 
 */
  __pyx_v_x_data_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":758
 * 	cdef int n = len(x_data)
 * 	cdef double* x_data_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_y_data_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":760
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(n):
 * 			x_data_c[i] = x_data[i]
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":761
 * 
 * 	try:
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			x_data_c[i] = x_data[i]
 * 			y_data_c[i] = y_data[i]
 */
    __pyx_t_2 = __pyx_v_n;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":762
 * 	try:
 * 		for i in range(n):
 * 			x_data_c[i] = x_data[i]             # <<<<<<<<<<<<<<
 * 			y_data_c[i] = y_data[i]
 * 
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_x_data, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 762, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 762, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_x_data_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":763
 * 		for i in range(n):
 * 			x_data_c[i] = x_data[i]
 * 			y_data_c[i] = y_data[i]             # <<<<<<<<<<<<<<
 * 
 * 		return cubic_spline_interpolate(x, x_data_c, y_data_c, n)
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_y_data, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 763, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 763, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_y_data_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":765
 * 			y_data_c[i] = y_data[i]
 * 
 * 		return cubic_spline_interpolate(x, x_data_c, y_data_c, n)             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(x_data_c)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(cubic_spline_interpolate(__pyx_v_x, __pyx_v_x_data_c, __pyx_v_y_data_c, __pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 765, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":767
 * 		return cubic_spline_interpolate(x, x_data_c, y_data_c, n)
 * 	finally:
 * 		free(x_data_c)             # <<<<<<<<<<<<<<
 * 		free(y_data_c)
 * 
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_x_data_c);

        /* "pyroxa/pybindings.pyx":768
 * 	finally:
 * 		free(x_data_c)
 * 		free(y_data_c)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_r_squared(experimental, predicted):
 */
        free(__pyx_v_y_data_c);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":767
 * 		return cubic_spline_interpolate(x, x_data_c, y_data_c, n)
 * 	finally:
 * 		free(x_data_c)             # <<<<<<<<<<<<<<
 * 		free(y_data_c)
 * 
 */
      free(__pyx_v_x_data_c);

      /* "pyroxa/pybindings.pyx":768
 * 	finally:
 * 		free(x_data_c)
 * 		free(y_data_c)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_r_squared(experimental, predicted):
 */
      free(__pyx_v_y_data_c);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":754
 * 		free(y_data_c)
 * 
 * def py_cubic_spline_interpolate(double x, x_data, y_data):             # <<<<<<<<<<<<<<
 * 	"""Cubic spline interpolation between data points"""
 * 	cdef int n = len(x_data)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_cubic_spline_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":770
 * 		free(y_data_c)
 * 
 * def py_calculate_r_squared(experimental, predicted):             # <<<<<<<<<<<<<<
 * 	"""Calculate R-squared coefficient of determination"""
 * 	cdef int n = len(experimental)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_57py_calculate_r_squared(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_56py_calculate_r_squared[] = "py_calculate_r_squared(experimental, predicted)\nCalculate R-squared coefficient of determination";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_57py_calculate_r_squared = {"py_calculate_r_squared", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_57py_calculate_r_squared, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_56py_calculate_r_squared};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_57py_calculate_r_squared(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_experimental = 0;
  PyObject *__pyx_v_predicted = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_r_squared (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_experimental,&__pyx_n_s_predicted,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_experimental)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_predicted)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_r_squared", 1, 2, 2, 1); __PYX_ERR(1, 770, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_calculate_r_squared") < 0)) __PYX_ERR(1, 770, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_experimental = values[0];
    __pyx_v_predicted = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_r_squared", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 770, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_r_squared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_56py_calculate_r_squared(__pyx_self, __pyx_v_experimental, __pyx_v_predicted);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_56py_calculate_r_squared(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental, PyObject *__pyx_v_predicted) {
  int __pyx_v_n;
  double *__pyx_v_exp_c;
  double *__pyx_v_pred_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_r_squared", 0);

  /* "pyroxa/pybindings.pyx":772
 * def py_calculate_r_squared(experimental, predicted):
 * 	"""Calculate R-squared coefficient of determination"""
 * 	cdef int n = len(experimental)             # <<<<<<<<<<<<<<
 * 	cdef double* exp_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_experimental); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 772, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":773
 * 	"""Calculate R-squared coefficient of determination"""
 * 	cdef int n = len(experimental)
 * 	cdef double* exp_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))
 * 
 */
  __pyx_v_exp_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":774
 * 	cdef int n = len(experimental)
 * 	cdef double* exp_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_pred_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":776
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(n):
 * 			exp_c[i] = experimental[i]
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":777
 * 
 * 	try:
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			exp_c[i] = experimental[i]
 * 			pred_c[i] = predicted[i]
 */
    __pyx_t_2 = __pyx_v_n;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":778
 * 	try:
 * 		for i in range(n):
 * 			exp_c[i] = experimental[i]             # <<<<<<<<<<<<<<
 * 			pred_c[i] = predicted[i]
 * 
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_experimental, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 778, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 778, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_exp_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":779
 * 		for i in range(n):
 * 			exp_c[i] = experimental[i]
 * 			pred_c[i] = predicted[i]             # <<<<<<<<<<<<<<
 * 
 * 		return calculate_r_squared(exp_c, pred_c, n)
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_predicted, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 779, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 779, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_pred_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":781
 * 			pred_c[i] = predicted[i]
 * 
 * 		return calculate_r_squared(exp_c, pred_c, n)             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(exp_c)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(calculate_r_squared(__pyx_v_exp_c, __pyx_v_pred_c, __pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 781, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":783
 * 		return calculate_r_squared(exp_c, pred_c, n)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(pred_c)
 * 
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_exp_c);

        /* "pyroxa/pybindings.pyx":784
 * 	finally:
 * 		free(exp_c)
 * 		free(pred_c)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_rmse(experimental, predicted):
 */
        free(__pyx_v_pred_c);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":783
 * 		return calculate_r_squared(exp_c, pred_c, n)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(pred_c)
 * 
 */
      free(__pyx_v_exp_c);

      /* "pyroxa/pybindings.pyx":784
 * 	finally:
 * 		free(exp_c)
 * 		free(pred_c)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_rmse(experimental, predicted):
 */
      free(__pyx_v_pred_c);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":770
 * 		free(y_data_c)
 * 
 * def py_calculate_r_squared(experimental, predicted):             # <<<<<<<<<<<<<<
 * 	"""Calculate R-squared coefficient of determination"""
 * 	cdef int n = len(experimental)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_r_squared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":786
 * 		free(pred_c)
 * 
 * def py_calculate_rmse(experimental, predicted):             # <<<<<<<<<<<<<<
 * 	"""Calculate Root Mean Square Error"""
 * 	cdef int n = len(experimental)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_59py_calculate_rmse(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_58py_calculate_rmse[] = "py_calculate_rmse(experimental, predicted)\nCalculate Root Mean Square Error";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_59py_calculate_rmse = {"py_calculate_rmse", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_59py_calculate_rmse, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_58py_calculate_rmse};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_59py_calculate_rmse(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_experimental = 0;
  PyObject *__pyx_v_predicted = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_rmse (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_experimental,&__pyx_n_s_predicted,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_experimental)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_predicted)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_rmse", 1, 2, 2, 1); __PYX_ERR(1, 786, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_calculate_rmse") < 0)) __PYX_ERR(1, 786, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_experimental = values[0];
    __pyx_v_predicted = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_rmse", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 786, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_rmse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_58py_calculate_rmse(__pyx_self, __pyx_v_experimental, __pyx_v_predicted);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_58py_calculate_rmse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental, PyObject *__pyx_v_predicted) {
  int __pyx_v_n;
  double *__pyx_v_exp_c;
  double *__pyx_v_pred_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_rmse", 0);

  /* "pyroxa/pybindings.pyx":788
 * def py_calculate_rmse(experimental, predicted):
 * 	"""Calculate Root Mean Square Error"""
 * 	cdef int n = len(experimental)             # <<<<<<<<<<<<<<
 * 	cdef double* exp_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_experimental); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 788, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":789
 * 	"""Calculate Root Mean Square Error"""
 * 	cdef int n = len(experimental)
 * 	cdef double* exp_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))
 * 
 */
  __pyx_v_exp_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":790
 * 	cdef int n = len(experimental)
 * 	cdef double* exp_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_pred_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":792
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(n):
 * 			exp_c[i] = experimental[i]
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":793
 * 
 * 	try:
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			exp_c[i] = experimental[i]
 * 			pred_c[i] = predicted[i]
 */
    __pyx_t_2 = __pyx_v_n;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":794
 * 	try:
 * 		for i in range(n):
 * 			exp_c[i] = experimental[i]             # <<<<<<<<<<<<<<
 * 			pred_c[i] = predicted[i]
 * 
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_experimental, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 794, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 794, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_exp_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":795
 * 		for i in range(n):
 * 			exp_c[i] = experimental[i]
 * 			pred_c[i] = predicted[i]             # <<<<<<<<<<<<<<
 * 
 * 		return calculate_rmse(exp_c, pred_c, n)
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_predicted, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 795, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 795, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_pred_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":797
 * 			pred_c[i] = predicted[i]
 * 
 * 		return calculate_rmse(exp_c, pred_c, n)             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(exp_c)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(calculate_rmse(__pyx_v_exp_c, __pyx_v_pred_c, __pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 797, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":799
 * 		return calculate_rmse(exp_c, pred_c, n)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(pred_c)
 * 
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_exp_c);

        /* "pyroxa/pybindings.pyx":800
 * 	finally:
 * 		free(exp_c)
 * 		free(pred_c)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_aic(experimental, predicted, int nparams):
 */
        free(__pyx_v_pred_c);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":799
 * 		return calculate_rmse(exp_c, pred_c, n)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(pred_c)
 * 
 */
      free(__pyx_v_exp_c);

      /* "pyroxa/pybindings.pyx":800
 * 	finally:
 * 		free(exp_c)
 * 		free(pred_c)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_aic(experimental, predicted, int nparams):
 */
      free(__pyx_v_pred_c);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":786
 * 		free(pred_c)
 * 
 * def py_calculate_rmse(experimental, predicted):             # <<<<<<<<<<<<<<
 * 	"""Calculate Root Mean Square Error"""
 * 	cdef int n = len(experimental)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_rmse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":802
 * 		free(pred_c)
 * 
 * def py_calculate_aic(experimental, predicted, int nparams):             # <<<<<<<<<<<<<<
 * 	"""Calculate Akaike Information Criterion"""
 * 	cdef int ndata = len(experimental)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_61py_calculate_aic(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_60py_calculate_aic[] = "py_calculate_aic(experimental, predicted, int nparams)\nCalculate Akaike Information Criterion";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_61py_calculate_aic = {"py_calculate_aic", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_61py_calculate_aic, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_60py_calculate_aic};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_61py_calculate_aic(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_experimental = 0;
  PyObject *__pyx_v_predicted = 0;
  int __pyx_v_nparams;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_aic (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_experimental,&__pyx_n_s_predicted,&__pyx_n_s_nparams,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_experimental)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_predicted)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_aic", 1, 3, 3, 1); __PYX_ERR(1, 802, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nparams)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_aic", 1, 3, 3, 2); __PYX_ERR(1, 802, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_calculate_aic") < 0)) __PYX_ERR(1, 802, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_experimental = values[0];
    __pyx_v_predicted = values[1];
    __pyx_v_nparams = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nparams == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 802, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_aic", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 802, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_aic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_60py_calculate_aic(__pyx_self, __pyx_v_experimental, __pyx_v_predicted, __pyx_v_nparams);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_60py_calculate_aic(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental, PyObject *__pyx_v_predicted, int __pyx_v_nparams) {
  int __pyx_v_ndata;
  double *__pyx_v_exp_c;
  double *__pyx_v_pred_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_aic", 0);

  /* "pyroxa/pybindings.pyx":804
 * def py_calculate_aic(experimental, predicted, int nparams):
 * 	"""Calculate Akaike Information Criterion"""
 * 	cdef int ndata = len(experimental)             # <<<<<<<<<<<<<<
 * 	cdef double* exp_c = <double*>malloc(ndata * sizeof(double))
 * 	cdef double* pred_c = <double*>malloc(ndata * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_experimental); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 804, __pyx_L1_error)
  __pyx_v_ndata = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":805
 * 	"""Calculate Akaike Information Criterion"""
 * 	cdef int ndata = len(experimental)
 * 	cdef double* exp_c = <double*>malloc(ndata * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* pred_c = <double*>malloc(ndata * sizeof(double))
 * 
 */
  __pyx_v_exp_c = ((double *)malloc((__pyx_v_ndata * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":806
 * 	cdef int ndata = len(experimental)
 * 	cdef double* exp_c = <double*>malloc(ndata * sizeof(double))
 * 	cdef double* pred_c = <double*>malloc(ndata * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_pred_c = ((double *)malloc((__pyx_v_ndata * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":808
 * 	cdef double* pred_c = <double*>malloc(ndata * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(ndata):
 * 			exp_c[i] = experimental[i]
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":809
 * 
 * 	try:
 * 		for i in range(ndata):             # <<<<<<<<<<<<<<
 * 			exp_c[i] = experimental[i]
 * 			pred_c[i] = predicted[i]
 */
    __pyx_t_2 = __pyx_v_ndata;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":810
 * 	try:
 * 		for i in range(ndata):
 * 			exp_c[i] = experimental[i]             # <<<<<<<<<<<<<<
 * 			pred_c[i] = predicted[i]
 * 
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_experimental, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 810, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 810, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_exp_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":811
 * 		for i in range(ndata):
 * 			exp_c[i] = experimental[i]
 * 			pred_c[i] = predicted[i]             # <<<<<<<<<<<<<<
 * 
 * 		return calculate_aic(exp_c, pred_c, ndata, nparams)
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_predicted, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 811, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 811, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_pred_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":813
 * 			pred_c[i] = predicted[i]
 * 
 * 		return calculate_aic(exp_c, pred_c, ndata, nparams)             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(exp_c)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(calculate_aic(__pyx_v_exp_c, __pyx_v_pred_c, __pyx_v_ndata, __pyx_v_nparams)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 813, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":815
 * 		return calculate_aic(exp_c, pred_c, ndata, nparams)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(pred_c)
 * 
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_exp_c);

        /* "pyroxa/pybindings.pyx":816
 * 	finally:
 * 		free(exp_c)
 * 		free(pred_c)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 2: Additional kinetic functions
 */
        free(__pyx_v_pred_c);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":815
 * 		return calculate_aic(exp_c, pred_c, ndata, nparams)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(pred_c)
 * 
 */
      free(__pyx_v_exp_c);

      /* "pyroxa/pybindings.pyx":816
 * 	finally:
 * 		free(exp_c)
 * 		free(pred_c)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 2: Additional kinetic functions
 */
      free(__pyx_v_pred_c);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":802
 * 		free(pred_c)
 * 
 * def py_calculate_aic(experimental, predicted, int nparams):             # <<<<<<<<<<<<<<
 * 	"""Calculate Akaike Information Criterion"""
 * 	cdef int ndata = len(experimental)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_aic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":819
 * 
 * # BATCH 2: Additional kinetic functions
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):             # <<<<<<<<<<<<<<
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_63py_michaelis_menten_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_62py_michaelis_menten_rate[] = "py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc)\nCalculate Michaelis-Menten enzyme kinetics rate";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_63py_michaelis_menten_rate = {"py_michaelis_menten_rate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_63py_michaelis_menten_rate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_62py_michaelis_menten_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_63py_michaelis_menten_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_Vmax;
  double __pyx_v_Km;
  double __pyx_v_substrate_conc;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_michaelis_menten_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Vmax,&__pyx_n_s_Km,&__pyx_n_s_substrate_conc,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Vmax)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Km)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_michaelis_menten_rate", 1, 3, 3, 1); __PYX_ERR(1, 819, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_substrate_conc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_michaelis_menten_rate", 1, 3, 3, 2); __PYX_ERR(1, 819, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_michaelis_menten_rate") < 0)) __PYX_ERR(1, 819, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_Vmax = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Vmax == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 819, __pyx_L3_error)
    __pyx_v_Km = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Km == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 819, __pyx_L3_error)
    __pyx_v_substrate_conc = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_substrate_conc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 819, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_michaelis_menten_rate", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 819, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_michaelis_menten_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_62py_michaelis_menten_rate(__pyx_self, __pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_62py_michaelis_menten_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_michaelis_menten_rate", 0);

  /* "pyroxa/pybindings.pyx":821
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)             # <<<<<<<<<<<<<<
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(michaelis_menten_rate(__pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":819
 * 
 * # BATCH 2: Additional kinetic functions
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):             # <<<<<<<<<<<<<<
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_michaelis_menten_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":823
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,             # <<<<<<<<<<<<<<
 * 								  double inhibitor_conc, double Ki):
 * 	"""Calculate rate with competitive inhibition"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_65py_competitive_inhibition_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_64py_competitive_inhibition_rate[] = "py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc, double inhibitor_conc, double Ki)\nCalculate rate with competitive inhibition";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_65py_competitive_inhibition_rate = {"py_competitive_inhibition_rate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_65py_competitive_inhibition_rate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_64py_competitive_inhibition_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_65py_competitive_inhibition_rate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_Vmax;
  double __pyx_v_Km;
  double __pyx_v_substrate_conc;
  double __pyx_v_inhibitor_conc;
  double __pyx_v_Ki;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_competitive_inhibition_rate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Vmax,&__pyx_n_s_Km,&__pyx_n_s_substrate_conc,&__pyx_n_s_inhibitor_conc,&__pyx_n_s_Ki,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Vmax)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Km)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_competitive_inhibition_rate", 1, 5, 5, 1); __PYX_ERR(1, 823, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_substrate_conc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_competitive_inhibition_rate", 1, 5, 5, 2); __PYX_ERR(1, 823, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inhibitor_conc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_competitive_inhibition_rate", 1, 5, 5, 3); __PYX_ERR(1, 823, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ki)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_competitive_inhibition_rate", 1, 5, 5, 4); __PYX_ERR(1, 823, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_competitive_inhibition_rate") < 0)) __PYX_ERR(1, 823, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_Vmax = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Vmax == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 823, __pyx_L3_error)
    __pyx_v_Km = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Km == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 823, __pyx_L3_error)
    __pyx_v_substrate_conc = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_substrate_conc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 823, __pyx_L3_error)
    __pyx_v_inhibitor_conc = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_inhibitor_conc == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 824, __pyx_L3_error)
    __pyx_v_Ki = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Ki == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 824, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_competitive_inhibition_rate", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 823, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_competitive_inhibition_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_64py_competitive_inhibition_rate(__pyx_self, __pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc, __pyx_v_inhibitor_conc, __pyx_v_Ki);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_64py_competitive_inhibition_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc, double __pyx_v_inhibitor_conc, double __pyx_v_Ki) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_competitive_inhibition_rate", 0);

  /* "pyroxa/pybindings.pyx":826
 * 								  double inhibitor_conc, double Ki):
 * 	"""Calculate rate with competitive inhibition"""
 * 	return competitive_inhibition_rate(Vmax, Km, substrate_conc, inhibitor_conc, Ki)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 5: Core thermodynamic functions
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(competitive_inhibition_rate(__pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc, __pyx_v_inhibitor_conc, __pyx_v_Ki)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":823
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,             # <<<<<<<<<<<<<<
 * 								  double inhibitor_conc, double Ki):
 * 	"""Calculate rate with competitive inhibition"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_competitive_inhibition_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":829
 * 
 * # BATCH 5: Core thermodynamic functions
 * def py_enthalpy_c(double cp, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate enthalpy using constant pressure heat capacity"""
 * 	return enthalpy_c(cp, T)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_67py_enthalpy_c(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_66py_enthalpy_c[] = "py_enthalpy_c(double cp, double T)\nCalculate enthalpy using constant pressure heat capacity";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_67py_enthalpy_c = {"py_enthalpy_c", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_67py_enthalpy_c, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_66py_enthalpy_c};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_67py_enthalpy_c(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_cp;
  double __pyx_v_T;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_enthalpy_c (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cp,&__pyx_n_s_T,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_enthalpy_c", 1, 2, 2, 1); __PYX_ERR(1, 829, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_enthalpy_c") < 0)) __PYX_ERR(1, 829, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cp = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_cp == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 829, __pyx_L3_error)
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 829, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_enthalpy_c", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 829, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_enthalpy_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_66py_enthalpy_c(__pyx_self, __pyx_v_cp, __pyx_v_T);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_66py_enthalpy_c(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_cp, double __pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_enthalpy_c", 0);

  /* "pyroxa/pybindings.pyx":831
 * def py_enthalpy_c(double cp, double T):
 * 	"""Calculate enthalpy using constant pressure heat capacity"""
 * 	return enthalpy_c(cp, T)             # <<<<<<<<<<<<<<
 * 
 * def py_entropy_c(double cp, double T):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(enthalpy_c(__pyx_v_cp, __pyx_v_T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":829
 * 
 * # BATCH 5: Core thermodynamic functions
 * def py_enthalpy_c(double cp, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate enthalpy using constant pressure heat capacity"""
 * 	return enthalpy_c(cp, T)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_enthalpy_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":833
 * 	return enthalpy_c(cp, T)
 * 
 * def py_entropy_c(double cp, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate entropy using constant pressure heat capacity"""
 * 	return entropy_c(cp, T)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_69py_entropy_c(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_68py_entropy_c[] = "py_entropy_c(double cp, double T)\nCalculate entropy using constant pressure heat capacity";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_69py_entropy_c = {"py_entropy_c", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_69py_entropy_c, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_68py_entropy_c};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_69py_entropy_c(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_cp;
  double __pyx_v_T;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_entropy_c (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cp,&__pyx_n_s_T,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_entropy_c", 1, 2, 2, 1); __PYX_ERR(1, 833, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_entropy_c") < 0)) __PYX_ERR(1, 833, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cp = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_cp == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 833, __pyx_L3_error)
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 833, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_entropy_c", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 833, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_entropy_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_68py_entropy_c(__pyx_self, __pyx_v_cp, __pyx_v_T);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_68py_entropy_c(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_cp, double __pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_entropy_c", 0);

  /* "pyroxa/pybindings.pyx":835
 * def py_entropy_c(double cp, double T):
 * 	"""Calculate entropy using constant pressure heat capacity"""
 * 	return entropy_c(cp, T)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 6: Analytical solutions
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(entropy_c(__pyx_v_cp, __pyx_v_T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":833
 * 	return enthalpy_c(cp, T)
 * 
 * def py_entropy_c(double cp, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate entropy using constant pressure heat capacity"""
 * 	return entropy_c(cp, T)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_entropy_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":838
 * 
 * # BATCH 6: Analytical solutions
 * def py_analytical_first_order(double k, double A0, double time_span, double dt, int max_len=1000):             # <<<<<<<<<<<<<<
 * 	"""Analytical solution for A -> B (first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_71py_analytical_first_order(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_70py_analytical_first_order[] = "py_analytical_first_order(double k, double A0, double time_span, double dt, int max_len=1000)\nAnalytical solution for A -> B (first order)";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_71py_analytical_first_order = {"py_analytical_first_order", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_71py_analytical_first_order, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_70py_analytical_first_order};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_71py_analytical_first_order(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_k;
  double __pyx_v_A0;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_v_max_len;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_analytical_first_order (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_A0,&__pyx_n_s_time_span,&__pyx_n_s_dt,&__pyx_n_s_max_len,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_analytical_first_order", 0, 4, 5, 1); __PYX_ERR(1, 838, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_span)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_analytical_first_order", 0, 4, 5, 2); __PYX_ERR(1, 838, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_analytical_first_order", 0, 4, 5, 3); __PYX_ERR(1, 838, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_len);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_analytical_first_order") < 0)) __PYX_ERR(1, 838, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_k == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 838, __pyx_L3_error)
    __pyx_v_A0 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_A0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 838, __pyx_L3_error)
    __pyx_v_time_span = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 838, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 838, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_max_len = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_max_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 838, __pyx_L3_error)
    } else {
      __pyx_v_max_len = ((int)0x3E8);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_analytical_first_order", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 838, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_analytical_first_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_70py_analytical_first_order(__pyx_self, __pyx_v_k, __pyx_v_A0, __pyx_v_time_span, __pyx_v_dt, __pyx_v_max_len);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_70py_analytical_first_order(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_A0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len) {
  double *__pyx_v_times;
  double *__pyx_v_A_out;
  double *__pyx_v_B_out;
  int __pyx_v_written;
  PyObject *__pyx_v_times_list = NULL;
  PyObject *__pyx_v_A_list = NULL;
  PyObject *__pyx_v_B_list = NULL;
  int __pyx_9genexpr10__pyx_v_i;
  int __pyx_9genexpr11__pyx_v_i;
  int __pyx_9genexpr12__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_analytical_first_order", 0);

  /* "pyroxa/pybindings.pyx":840
 * def py_analytical_first_order(double k, double A0, double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A -> B (first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 */
  __pyx_v_times = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":841
 * 	"""Analytical solution for A -> B (first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 * 
 */
  __pyx_v_A_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":842
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_B_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":844
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		written = analytical_first_order(k, A0, time_span, dt, times, A_out, B_out, max_len)
 * 		if written < 0:
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":845
 * 
 * 	try:
 * 		written = analytical_first_order(k, A0, time_span, dt, times, A_out, B_out, max_len)             # <<<<<<<<<<<<<<
 * 		if written < 0:
 * 			raise RuntimeError("Analytical first order solution failed")
 */
    __pyx_v_written = analytical_first_order(__pyx_v_k, __pyx_v_A0, __pyx_v_time_span, __pyx_v_dt, __pyx_v_times, __pyx_v_A_out, __pyx_v_B_out, __pyx_v_max_len);

    /* "pyroxa/pybindings.pyx":846
 * 	try:
 * 		written = analytical_first_order(k, A0, time_span, dt, times, A_out, B_out, max_len)
 * 		if written < 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Analytical first order solution failed")
 * 
 */
    __pyx_t_1 = ((__pyx_v_written < 0) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "pyroxa/pybindings.pyx":847
 * 		written = analytical_first_order(k, A0, time_span, dt, times, A_out, B_out, max_len)
 * 		if written < 0:
 * 			raise RuntimeError("Analytical first order solution failed")             # <<<<<<<<<<<<<<
 * 
 * 		# Convert to Python lists
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 847, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 847, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":846
 * 	try:
 * 		written = analytical_first_order(k, A0, time_span, dt, times, A_out, B_out, max_len)
 * 		if written < 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Analytical first order solution failed")
 * 
 */
    }

    /* "pyroxa/pybindings.pyx":850
 * 
 * 		# Convert to Python lists
 * 		times_list = [times[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 		A_list = [A_out[i] for i in range(written)]
 * 		B_list = [B_out[i] for i in range(written)]
 */
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 850, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_v_written;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_9genexpr10__pyx_v_i = __pyx_t_5;
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_times[__pyx_9genexpr10__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 850, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 850, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    } /* exit inner scope */
    __pyx_v_times_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":851
 * 		# Convert to Python lists
 * 		times_list = [times[i] for i in range(written)]
 * 		A_list = [A_out[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 		B_list = [B_out[i] for i in range(written)]
 * 
 */
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 851, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_v_written;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_9genexpr11__pyx_v_i = __pyx_t_5;
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_A_out[__pyx_9genexpr11__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 851, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 851, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    } /* exit inner scope */
    __pyx_v_A_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":852
 * 		times_list = [times[i] for i in range(written)]
 * 		A_list = [A_out[i] for i in range(written)]
 * 		B_list = [B_out[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 
 * 		return {
 */
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 852, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_v_written;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_9genexpr12__pyx_v_i = __pyx_t_5;
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_B_out[__pyx_9genexpr12__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 852, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 852, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    } /* exit inner scope */
    __pyx_v_B_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":854
 * 		B_list = [B_out[i] for i in range(written)]
 * 
 * 		return {             # <<<<<<<<<<<<<<
 * 			'times': times_list,
 * 			'A': A_list,
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pyroxa/pybindings.pyx":855
 * 
 * 		return {
 * 			'times': times_list,             # <<<<<<<<<<<<<<
 * 			'A': A_list,
 * 			'B': B_list
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 855, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_times, __pyx_v_times_list) < 0) __PYX_ERR(1, 855, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":856
 * 		return {
 * 			'times': times_list,
 * 			'A': A_list,             # <<<<<<<<<<<<<<
 * 			'B': B_list
 * 		}
 */
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_A, __pyx_v_A_list) < 0) __PYX_ERR(1, 855, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":857
 * 			'times': times_list,
 * 			'A': A_list,
 * 			'B': B_list             # <<<<<<<<<<<<<<
 * 		}
 * 	finally:
 */
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_B, __pyx_v_B_list) < 0) __PYX_ERR(1, 855, __pyx_L4_error)
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":860
 * 		}
 * 	finally:
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(A_out)
 * 		free(B_out)
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_times);

        /* "pyroxa/pybindings.pyx":861
 * 	finally:
 * 		free(times)
 * 		free(A_out)             # <<<<<<<<<<<<<<
 * 		free(B_out)
 * 
 */
        free(__pyx_v_A_out);

        /* "pyroxa/pybindings.pyx":862
 * 		free(times)
 * 		free(A_out)
 * 		free(B_out)             # <<<<<<<<<<<<<<
 * 
 * def py_analytical_reversible_first_order(double kf, double kr, double A0, double B0,
 */
        free(__pyx_v_B_out);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":860
 * 		}
 * 	finally:
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(A_out)
 * 		free(B_out)
 */
      free(__pyx_v_times);

      /* "pyroxa/pybindings.pyx":861
 * 	finally:
 * 		free(times)
 * 		free(A_out)             # <<<<<<<<<<<<<<
 * 		free(B_out)
 * 
 */
      free(__pyx_v_A_out);

      /* "pyroxa/pybindings.pyx":862
 * 		free(times)
 * 		free(A_out)
 * 		free(B_out)             # <<<<<<<<<<<<<<
 * 
 * def py_analytical_reversible_first_order(double kf, double kr, double A0, double B0,
 */
      free(__pyx_v_B_out);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":838
 * 
 * # BATCH 6: Analytical solutions
 * def py_analytical_first_order(double k, double A0, double time_span, double dt, int max_len=1000):             # <<<<<<<<<<<<<<
 * 	"""Analytical solution for A -> B (first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyroxa._pybindings.py_analytical_first_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_times_list);
  __Pyx_XDECREF(__pyx_v_A_list);
  __Pyx_XDECREF(__pyx_v_B_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":864
 * 		free(B_out)
 * 
 * def py_analytical_reversible_first_order(double kf, double kr, double A0, double B0,             # <<<<<<<<<<<<<<
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A <=> B (reversible first order)"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_73py_analytical_reversible_first_order(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_72py_analytical_reversible_first_order[] = "py_analytical_reversible_first_order(double kf, double kr, double A0, double B0, double time_span, double dt, int max_len=1000)\nAnalytical solution for A <=> B (reversible first order)";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_73py_analytical_reversible_first_order = {"py_analytical_reversible_first_order", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_73py_analytical_reversible_first_order, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_72py_analytical_reversible_first_order};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_73py_analytical_reversible_first_order(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_kf;
  double __pyx_v_kr;
  double __pyx_v_A0;
  double __pyx_v_B0;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_v_max_len;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_analytical_reversible_first_order (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_kf,&__pyx_n_s_kr,&__pyx_n_s_A0,&__pyx_n_s_B0,&__pyx_n_s_time_span,&__pyx_n_s_dt,&__pyx_n_s_max_len,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kf)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_analytical_reversible_first_order", 0, 6, 7, 1); __PYX_ERR(1, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_analytical_reversible_first_order", 0, 6, 7, 2); __PYX_ERR(1, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_analytical_reversible_first_order", 0, 6, 7, 3); __PYX_ERR(1, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_span)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_analytical_reversible_first_order", 0, 6, 7, 4); __PYX_ERR(1, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_analytical_reversible_first_order", 0, 6, 7, 5); __PYX_ERR(1, 864, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_len);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_analytical_reversible_first_order") < 0)) __PYX_ERR(1, 864, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_kf = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_kf == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 864, __pyx_L3_error)
    __pyx_v_kr = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_kr == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 864, __pyx_L3_error)
    __pyx_v_A0 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_A0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 864, __pyx_L3_error)
    __pyx_v_B0 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_B0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 864, __pyx_L3_error)
    __pyx_v_time_span = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 865, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 865, __pyx_L3_error)
    if (values[6]) {
      __pyx_v_max_len = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_max_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 865, __pyx_L3_error)
    } else {
      __pyx_v_max_len = ((int)0x3E8);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_analytical_reversible_first_order", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 864, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_analytical_reversible_first_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_72py_analytical_reversible_first_order(__pyx_self, __pyx_v_kf, __pyx_v_kr, __pyx_v_A0, __pyx_v_B0, __pyx_v_time_span, __pyx_v_dt, __pyx_v_max_len);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_72py_analytical_reversible_first_order(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_kf, double __pyx_v_kr, double __pyx_v_A0, double __pyx_v_B0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len) {
  double *__pyx_v_times;
  double *__pyx_v_A_out;
  double *__pyx_v_B_out;
  int __pyx_v_written;
  PyObject *__pyx_v_times_list = NULL;
  PyObject *__pyx_v_A_list = NULL;
  PyObject *__pyx_v_B_list = NULL;
  int __pyx_9genexpr13__pyx_v_i;
  int __pyx_9genexpr14__pyx_v_i;
  int __pyx_9genexpr15__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_analytical_reversible_first_order", 0);

  /* "pyroxa/pybindings.pyx":867
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A <=> B (reversible first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 */
  __pyx_v_times = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":868
 * 	"""Analytical solution for A <=> B (reversible first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 * 
 */
  __pyx_v_A_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":869
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_B_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":871
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		written = analytical_reversible_first_order(kf, kr, A0, B0, time_span, dt,
 * 												   times, A_out, B_out, max_len)
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":872
 * 
 * 	try:
 * 		written = analytical_reversible_first_order(kf, kr, A0, B0, time_span, dt,             # <<<<<<<<<<<<<<
 * 												   times, A_out, B_out, max_len)
 * 		if written < 0:
 */
    __pyx_v_written = analytical_reversible_first_order(__pyx_v_kf, __pyx_v_kr, __pyx_v_A0, __pyx_v_B0, __pyx_v_time_span, __pyx_v_dt, __pyx_v_times, __pyx_v_A_out, __pyx_v_B_out, __pyx_v_max_len);

    /* "pyroxa/pybindings.pyx":874
 * 		written = analytical_reversible_first_order(kf, kr, A0, B0, time_span, dt,
 * 												   times, A_out, B_out, max_len)
 * 		if written < 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Analytical reversible first order solution failed")
 * 
 */
    __pyx_t_1 = ((__pyx_v_written < 0) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "pyroxa/pybindings.pyx":875
 * 												   times, A_out, B_out, max_len)
 * 		if written < 0:
 * 			raise RuntimeError("Analytical reversible first order solution failed")             # <<<<<<<<<<<<<<
 * 
 * 		# Convert to Python lists
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 875, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 875, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":874
 * 		written = analytical_reversible_first_order(kf, kr, A0, B0, time_span, dt,
 * 												   times, A_out, B_out, max_len)
 * 		if written < 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Analytical reversible first order solution failed")
 * 
 */
    }

    /* "pyroxa/pybindings.pyx":878
 * 
 * 		# Convert to Python lists
 * 		times_list = [times[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 		A_list = [A_out[i] for i in range(written)]
 * 		B_list = [B_out[i] for i in range(written)]
 */
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 878, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_v_written;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_9genexpr13__pyx_v_i = __pyx_t_5;
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_times[__pyx_9genexpr13__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 878, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 878, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    } /* exit inner scope */
    __pyx_v_times_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":879
 * 		# Convert to Python lists
 * 		times_list = [times[i] for i in range(written)]
 * 		A_list = [A_out[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 		B_list = [B_out[i] for i in range(written)]
 * 
 */
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 879, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_v_written;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_9genexpr14__pyx_v_i = __pyx_t_5;
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_A_out[__pyx_9genexpr14__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 879, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 879, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    } /* exit inner scope */
    __pyx_v_A_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":880
 * 		times_list = [times[i] for i in range(written)]
 * 		A_list = [A_out[i] for i in range(written)]
 * 		B_list = [B_out[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 
 * 		return {
 */
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 880, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_v_written;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_9genexpr15__pyx_v_i = __pyx_t_5;
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_B_out[__pyx_9genexpr15__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 880, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 880, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    } /* exit inner scope */
    __pyx_v_B_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":882
 * 		B_list = [B_out[i] for i in range(written)]
 * 
 * 		return {             # <<<<<<<<<<<<<<
 * 			'times': times_list,
 * 			'A': A_list,
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pyroxa/pybindings.pyx":883
 * 
 * 		return {
 * 			'times': times_list,             # <<<<<<<<<<<<<<
 * 			'A': A_list,
 * 			'B': B_list
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 883, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_times, __pyx_v_times_list) < 0) __PYX_ERR(1, 883, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":884
 * 		return {
 * 			'times': times_list,
 * 			'A': A_list,             # <<<<<<<<<<<<<<
 * 			'B': B_list
 * 		}
 */
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_A, __pyx_v_A_list) < 0) __PYX_ERR(1, 883, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":885
 * 			'times': times_list,
 * 			'A': A_list,
 * 			'B': B_list             # <<<<<<<<<<<<<<
 * 		}
 * 	finally:
 */
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_B, __pyx_v_B_list) < 0) __PYX_ERR(1, 883, __pyx_L4_error)
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":888
 * 		}
 * 	finally:
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(A_out)
 * 		free(B_out)
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_times);

        /* "pyroxa/pybindings.pyx":889
 * 	finally:
 * 		free(times)
 * 		free(A_out)             # <<<<<<<<<<<<<<
 * 		free(B_out)
 * 
 */
        free(__pyx_v_A_out);

        /* "pyroxa/pybindings.pyx":890
 * 		free(times)
 * 		free(A_out)
 * 		free(B_out)             # <<<<<<<<<<<<<<
 * 
 * def py_analytical_consecutive_first_order(double k1, double k2, double A0,
 */
        free(__pyx_v_B_out);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":888
 * 		}
 * 	finally:
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(A_out)
 * 		free(B_out)
 */
      free(__pyx_v_times);

      /* "pyroxa/pybindings.pyx":889
 * 	finally:
 * 		free(times)
 * 		free(A_out)             # <<<<<<<<<<<<<<
 * 		free(B_out)
 * 
 */
      free(__pyx_v_A_out);

      /* "pyroxa/pybindings.pyx":890
 * 		free(times)
 * 		free(A_out)
 * 		free(B_out)             # <<<<<<<<<<<<<<
 * 
 * def py_analytical_consecutive_first_order(double k1, double k2, double A0,
 */
      free(__pyx_v_B_out);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":864
 * 		free(B_out)
 * 
 * def py_analytical_reversible_first_order(double kf, double kr, double A0, double B0,             # <<<<<<<<<<<<<<
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A <=> B (reversible first order)"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyroxa._pybindings.py_analytical_reversible_first_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_times_list);
  __Pyx_XDECREF(__pyx_v_A_list);
  __Pyx_XDECREF(__pyx_v_B_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":892
 * 		free(B_out)
 * 
 * def py_analytical_consecutive_first_order(double k1, double k2, double A0,             # <<<<<<<<<<<<<<
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A -> B -> C (consecutive first order)"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_75py_analytical_consecutive_first_order(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_74py_analytical_consecutive_first_order[] = "py_analytical_consecutive_first_order(double k1, double k2, double A0, double time_span, double dt, int max_len=1000)\nAnalytical solution for A -> B -> C (consecutive first order)";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_75py_analytical_consecutive_first_order = {"py_analytical_consecutive_first_order", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_75py_analytical_consecutive_first_order, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_74py_analytical_consecutive_first_order};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_75py_analytical_consecutive_first_order(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_k1;
  double __pyx_v_k2;
  double __pyx_v_A0;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_v_max_len;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_analytical_consecutive_first_order (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k1,&__pyx_n_s_k2,&__pyx_n_s_A0,&__pyx_n_s_time_span,&__pyx_n_s_dt,&__pyx_n_s_max_len,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_analytical_consecutive_first_order", 0, 5, 6, 1); __PYX_ERR(1, 892, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_analytical_consecutive_first_order", 0, 5, 6, 2); __PYX_ERR(1, 892, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_span)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_analytical_consecutive_first_order", 0, 5, 6, 3); __PYX_ERR(1, 892, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_analytical_consecutive_first_order", 0, 5, 6, 4); __PYX_ERR(1, 892, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_len);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_analytical_consecutive_first_order") < 0)) __PYX_ERR(1, 892, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k1 = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_k1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 892, __pyx_L3_error)
    __pyx_v_k2 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_k2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 892, __pyx_L3_error)
    __pyx_v_A0 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_A0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 892, __pyx_L3_error)
    __pyx_v_time_span = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 893, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 893, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_max_len = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_max_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 893, __pyx_L3_error)
    } else {
      __pyx_v_max_len = ((int)0x3E8);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_analytical_consecutive_first_order", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 892, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_analytical_consecutive_first_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_74py_analytical_consecutive_first_order(__pyx_self, __pyx_v_k1, __pyx_v_k2, __pyx_v_A0, __pyx_v_time_span, __pyx_v_dt, __pyx_v_max_len);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_74py_analytical_consecutive_first_order(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k1, double __pyx_v_k2, double __pyx_v_A0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len) {
  double *__pyx_v_times;
  double *__pyx_v_A_out;
  double *__pyx_v_B_out;
  double *__pyx_v_C_out;
  int __pyx_v_written;
  PyObject *__pyx_v_times_list = NULL;
  PyObject *__pyx_v_A_list = NULL;
  PyObject *__pyx_v_B_list = NULL;
  PyObject *__pyx_v_C_list = NULL;
  int __pyx_9genexpr16__pyx_v_i;
  int __pyx_9genexpr17__pyx_v_i;
  int __pyx_9genexpr18__pyx_v_i;
  int __pyx_9genexpr19__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_analytical_consecutive_first_order", 0);

  /* "pyroxa/pybindings.pyx":895
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A -> B -> C (consecutive first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 */
  __pyx_v_times = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":896
 * 	"""Analytical solution for A -> B -> C (consecutive first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* C_out = <double*>malloc(max_len * sizeof(double))
 */
  __pyx_v_A_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":897
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* C_out = <double*>malloc(max_len * sizeof(double))
 * 
 */
  __pyx_v_B_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":898
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* C_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_C_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":900
 * 	cdef double* C_out = <double*>malloc(max_len * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		written = analytical_consecutive_first_order(k1, k2, A0, time_span, dt,
 * 													times, A_out, B_out, C_out, max_len)
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":901
 * 
 * 	try:
 * 		written = analytical_consecutive_first_order(k1, k2, A0, time_span, dt,             # <<<<<<<<<<<<<<
 * 													times, A_out, B_out, C_out, max_len)
 * 		if written < 0:
 */
    __pyx_v_written = analytical_consecutive_first_order(__pyx_v_k1, __pyx_v_k2, __pyx_v_A0, __pyx_v_time_span, __pyx_v_dt, __pyx_v_times, __pyx_v_A_out, __pyx_v_B_out, __pyx_v_C_out, __pyx_v_max_len);

    /* "pyroxa/pybindings.pyx":903
 * 		written = analytical_consecutive_first_order(k1, k2, A0, time_span, dt,
 * 													times, A_out, B_out, C_out, max_len)
 * 		if written < 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Analytical consecutive first order solution failed")
 * 
 */
    __pyx_t_1 = ((__pyx_v_written < 0) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "pyroxa/pybindings.pyx":904
 * 													times, A_out, B_out, C_out, max_len)
 * 		if written < 0:
 * 			raise RuntimeError("Analytical consecutive first order solution failed")             # <<<<<<<<<<<<<<
 * 
 * 		# Convert to Python lists
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 904, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 904, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":903
 * 		written = analytical_consecutive_first_order(k1, k2, A0, time_span, dt,
 * 													times, A_out, B_out, C_out, max_len)
 * 		if written < 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Analytical consecutive first order solution failed")
 * 
 */
    }

    /* "pyroxa/pybindings.pyx":907
 * 
 * 		# Convert to Python lists
 * 		times_list = [times[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 		A_list = [A_out[i] for i in range(written)]
 * 		B_list = [B_out[i] for i in range(written)]
 */
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 907, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_v_written;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_9genexpr16__pyx_v_i = __pyx_t_5;
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_times[__pyx_9genexpr16__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 907, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 907, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    } /* exit inner scope */
    __pyx_v_times_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":908
 * 		# Convert to Python lists
 * 		times_list = [times[i] for i in range(written)]
 * 		A_list = [A_out[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 		B_list = [B_out[i] for i in range(written)]
 * 		C_list = [C_out[i] for i in range(written)]
 */
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 908, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_v_written;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_9genexpr17__pyx_v_i = __pyx_t_5;
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_A_out[__pyx_9genexpr17__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 908, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 908, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    } /* exit inner scope */
    __pyx_v_A_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":909
 * 		times_list = [times[i] for i in range(written)]
 * 		A_list = [A_out[i] for i in range(written)]
 * 		B_list = [B_out[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 		C_list = [C_out[i] for i in range(written)]
 * 
 */
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 909, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_v_written;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_9genexpr18__pyx_v_i = __pyx_t_5;
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_B_out[__pyx_9genexpr18__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 909, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 909, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    } /* exit inner scope */
    __pyx_v_B_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":910
 * 		A_list = [A_out[i] for i in range(written)]
 * 		B_list = [B_out[i] for i in range(written)]
 * 		C_list = [C_out[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 
 * 		return {
 */
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 910, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_v_written;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_9genexpr19__pyx_v_i = __pyx_t_5;
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_C_out[__pyx_9genexpr19__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 910, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 910, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    } /* exit inner scope */
    __pyx_v_C_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":912
 * 		C_list = [C_out[i] for i in range(written)]
 * 
 * 		return {             # <<<<<<<<<<<<<<
 * 			'times': times_list,
 * 			'A': A_list,
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pyroxa/pybindings.pyx":913
 * 
 * 		return {
 * 			'times': times_list,             # <<<<<<<<<<<<<<
 * 			'A': A_list,
 * 			'B': B_list,
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 913, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_times, __pyx_v_times_list) < 0) __PYX_ERR(1, 913, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":914
 * 		return {
 * 			'times': times_list,
 * 			'A': A_list,             # <<<<<<<<<<<<<<
 * 			'B': B_list,
 * 			'C': C_list
 */
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_A, __pyx_v_A_list) < 0) __PYX_ERR(1, 913, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":915
 * 			'times': times_list,
 * 			'A': A_list,
 * 			'B': B_list,             # <<<<<<<<<<<<<<
 * 			'C': C_list
 * 		}
 */
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_B, __pyx_v_B_list) < 0) __PYX_ERR(1, 913, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":916
 * 			'A': A_list,
 * 			'B': B_list,
 * 			'C': C_list             # <<<<<<<<<<<<<<
 * 		}
 * 	finally:
 */
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_C, __pyx_v_C_list) < 0) __PYX_ERR(1, 913, __pyx_L4_error)
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":919
 * 		}
 * 	finally:
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(A_out)
 * 		free(B_out)
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_times);

        /* "pyroxa/pybindings.pyx":920
 * 	finally:
 * 		free(times)
 * 		free(A_out)             # <<<<<<<<<<<<<<
 * 		free(B_out)
 * 		free(C_out)
 */
        free(__pyx_v_A_out);

        /* "pyroxa/pybindings.pyx":921
 * 		free(times)
 * 		free(A_out)
 * 		free(B_out)             # <<<<<<<<<<<<<<
 * 		free(C_out)
 * 
 */
        free(__pyx_v_B_out);

        /* "pyroxa/pybindings.pyx":922
 * 		free(A_out)
 * 		free(B_out)
 * 		free(C_out)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 8: Simple utility and optimization functions
 */
        free(__pyx_v_C_out);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":919
 * 		}
 * 	finally:
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(A_out)
 * 		free(B_out)
 */
      free(__pyx_v_times);

      /* "pyroxa/pybindings.pyx":920
 * 	finally:
 * 		free(times)
 * 		free(A_out)             # <<<<<<<<<<<<<<
 * 		free(B_out)
 * 		free(C_out)
 */
      free(__pyx_v_A_out);

      /* "pyroxa/pybindings.pyx":921
 * 		free(times)
 * 		free(A_out)
 * 		free(B_out)             # <<<<<<<<<<<<<<
 * 		free(C_out)
 * 
 */
      free(__pyx_v_B_out);

      /* "pyroxa/pybindings.pyx":922
 * 		free(A_out)
 * 		free(B_out)
 * 		free(C_out)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 8: Simple utility and optimization functions
 */
      free(__pyx_v_C_out);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":892
 * 		free(B_out)
 * 
 * def py_analytical_consecutive_first_order(double k1, double k2, double A0,             # <<<<<<<<<<<<<<
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A -> B -> C (consecutive first order)"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyroxa._pybindings.py_analytical_consecutive_first_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_times_list);
  __Pyx_XDECREF(__pyx_v_A_list);
  __Pyx_XDECREF(__pyx_v_B_list);
  __Pyx_XDECREF(__pyx_v_C_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":925
 * 
 * # BATCH 8: Simple utility and optimization functions
 * def py_calculate_objective_function(experimental_data, simulated_data, weights=None):             # <<<<<<<<<<<<<<
 * 	"""Calculate objective function (sum of squared residuals) for optimization"""
 * 	cdef int ndata = len(experimental_data)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_77py_calculate_objective_function(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_76py_calculate_objective_function[] = "py_calculate_objective_function(experimental_data, simulated_data, weights=None)\nCalculate objective function (sum of squared residuals) for optimization";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_77py_calculate_objective_function = {"py_calculate_objective_function", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_77py_calculate_objective_function, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_76py_calculate_objective_function};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_77py_calculate_objective_function(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_experimental_data = 0;
  PyObject *__pyx_v_simulated_data = 0;
  PyObject *__pyx_v_weights = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_objective_function (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_experimental_data,&__pyx_n_s_simulated_data,&__pyx_n_s_weights,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_experimental_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_simulated_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_objective_function", 0, 2, 3, 1); __PYX_ERR(1, 925, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weights);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_calculate_objective_function") < 0)) __PYX_ERR(1, 925, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_experimental_data = values[0];
    __pyx_v_simulated_data = values[1];
    __pyx_v_weights = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_objective_function", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 925, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_objective_function", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_76py_calculate_objective_function(__pyx_self, __pyx_v_experimental_data, __pyx_v_simulated_data, __pyx_v_weights);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_76py_calculate_objective_function(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental_data, PyObject *__pyx_v_simulated_data, PyObject *__pyx_v_weights) {
  int __pyx_v_ndata;
  double *__pyx_v_exp_c;
  double *__pyx_v_sim_c;
  double *__pyx_v_weight_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  char const *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_objective_function", 0);

  /* "pyroxa/pybindings.pyx":927
 * def py_calculate_objective_function(experimental_data, simulated_data, weights=None):
 * 	"""Calculate objective function (sum of squared residuals) for optimization"""
 * 	cdef int ndata = len(experimental_data)             # <<<<<<<<<<<<<<
 * 	cdef double* exp_c = <double*>malloc(ndata * sizeof(double))
 * 	cdef double* sim_c = <double*>malloc(ndata * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_experimental_data); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 927, __pyx_L1_error)
  __pyx_v_ndata = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":928
 * 	"""Calculate objective function (sum of squared residuals) for optimization"""
 * 	cdef int ndata = len(experimental_data)
 * 	cdef double* exp_c = <double*>malloc(ndata * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* sim_c = <double*>malloc(ndata * sizeof(double))
 * 	cdef double* weight_c = <double*>malloc(ndata * sizeof(double))
 */
  __pyx_v_exp_c = ((double *)malloc((__pyx_v_ndata * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":929
 * 	cdef int ndata = len(experimental_data)
 * 	cdef double* exp_c = <double*>malloc(ndata * sizeof(double))
 * 	cdef double* sim_c = <double*>malloc(ndata * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* weight_c = <double*>malloc(ndata * sizeof(double))
 * 
 */
  __pyx_v_sim_c = ((double *)malloc((__pyx_v_ndata * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":930
 * 	cdef double* exp_c = <double*>malloc(ndata * sizeof(double))
 * 	cdef double* sim_c = <double*>malloc(ndata * sizeof(double))
 * 	cdef double* weight_c = <double*>malloc(ndata * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_weight_c = ((double *)malloc((__pyx_v_ndata * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":932
 * 	cdef double* weight_c = <double*>malloc(ndata * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(ndata):
 * 			exp_c[i] = experimental_data[i]
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":933
 * 
 * 	try:
 * 		for i in range(ndata):             # <<<<<<<<<<<<<<
 * 			exp_c[i] = experimental_data[i]
 * 			sim_c[i] = simulated_data[i]
 */
    __pyx_t_2 = __pyx_v_ndata;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":934
 * 	try:
 * 		for i in range(ndata):
 * 			exp_c[i] = experimental_data[i]             # <<<<<<<<<<<<<<
 * 			sim_c[i] = simulated_data[i]
 * 			weight_c[i] = weights[i] if weights else 1.0
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_experimental_data, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 934, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 934, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_exp_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":935
 * 		for i in range(ndata):
 * 			exp_c[i] = experimental_data[i]
 * 			sim_c[i] = simulated_data[i]             # <<<<<<<<<<<<<<
 * 			weight_c[i] = weights[i] if weights else 1.0
 * 
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_simulated_data, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 935, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 935, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_sim_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":936
 * 			exp_c[i] = experimental_data[i]
 * 			sim_c[i] = simulated_data[i]
 * 			weight_c[i] = weights[i] if weights else 1.0             # <<<<<<<<<<<<<<
 * 
 * 		return calculate_objective_function(ndata, exp_c, sim_c, weight_c)
 */
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_weights); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 936, __pyx_L4_error)
      if (__pyx_t_7) {
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_weights, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 936, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 936, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_6 = __pyx_t_8;
      } else {
        __pyx_t_6 = 1.0;
      }
      (__pyx_v_weight_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":938
 * 			weight_c[i] = weights[i] if weights else 1.0
 * 
 * 		return calculate_objective_function(ndata, exp_c, sim_c, weight_c)             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(exp_c)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(calculate_objective_function(__pyx_v_ndata, __pyx_v_exp_c, __pyx_v_sim_c, __pyx_v_weight_c)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 938, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":940
 * 		return calculate_objective_function(ndata, exp_c, sim_c, weight_c)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(sim_c)
 * 		free(weight_c)
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
      {
        free(__pyx_v_exp_c);

        /* "pyroxa/pybindings.pyx":941
 * 	finally:
 * 		free(exp_c)
 * 		free(sim_c)             # <<<<<<<<<<<<<<
 * 		free(weight_c)
 * 
 */
        free(__pyx_v_sim_c);

        /* "pyroxa/pybindings.pyx":942
 * 		free(exp_c)
 * 		free(sim_c)
 * 		free(weight_c)             # <<<<<<<<<<<<<<
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):
 */
        free(__pyx_v_weight_c);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      }
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_9;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_15 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":940
 * 		return calculate_objective_function(ndata, exp_c, sim_c, weight_c)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(sim_c)
 * 		free(weight_c)
 */
      free(__pyx_v_exp_c);

      /* "pyroxa/pybindings.pyx":941
 * 	finally:
 * 		free(exp_c)
 * 		free(sim_c)             # <<<<<<<<<<<<<<
 * 		free(weight_c)
 * 
 */
      free(__pyx_v_sim_c);

      /* "pyroxa/pybindings.pyx":942
 * 		free(exp_c)
 * 		free(sim_c)
 * 		free(weight_c)             # <<<<<<<<<<<<<<
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):
 */
      free(__pyx_v_weight_c);
      __pyx_r = __pyx_t_15;
      __pyx_t_15 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":925
 * 
 * # BATCH 8: Simple utility and optimization functions
 * def py_calculate_objective_function(experimental_data, simulated_data, weights=None):             # <<<<<<<<<<<<<<
 * 	"""Calculate objective function (sum of squared residuals) for optimization"""
 * 	cdef int ndata = len(experimental_data)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_objective_function", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":944
 * 		free(weight_c)
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):             # <<<<<<<<<<<<<<
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_79py_check_mass_conservation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_78py_check_mass_conservation[] = "py_check_mass_conservation(concentrations, tolerance=1e-6)\nCheck mass conservation during simulation";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_79py_check_mass_conservation = {"py_check_mass_conservation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_79py_check_mass_conservation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_78py_check_mass_conservation};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_79py_check_mass_conservation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_concentrations = 0;
  PyObject *__pyx_v_tolerance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_check_mass_conservation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_concentrations,&__pyx_n_s_tolerance,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_float_1eneg_6);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_concentrations)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tolerance);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_check_mass_conservation") < 0)) __PYX_ERR(1, 944, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_concentrations = values[0];
    __pyx_v_tolerance = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_check_mass_conservation", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 944, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_check_mass_conservation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_78py_check_mass_conservation(__pyx_self, __pyx_v_concentrations, __pyx_v_tolerance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pyroxa_11_pybindings_26py_check_mass_conservation_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyroxa/pybindings.pyx":968
 * 			'is_conserved': result > 0,
 * 			'mass_balance': mass_balance_list,
 * 			'max_violation': max(abs(x) for x in mass_balance_list)             # <<<<<<<<<<<<<<
 * 		}
 * 	finally:
 */

static PyObject *__pyx_pf_6pyroxa_11_pybindings_26py_check_mass_conservation_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr(__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 968, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pyroxa_11_pybindings_26py_check_mass_conservation_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_py_check_mass_conservation_local, __pyx_n_s_pyroxa__pybindings); if (unlikely(!gen)) __PYX_ERR(1, 968, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_check_mass_conservation.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pyroxa_11_pybindings_26py_check_mass_conservation_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 968, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mass_balance_list)) { __Pyx_RaiseClosureNameError("mass_balance_list"); __PYX_ERR(1, 968, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mass_balance_list == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 968, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_mass_balance_list; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 968, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Absolute(__pyx_cur_scope->__pyx_v_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 968, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":944
 * 		free(weight_c)
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):             # <<<<<<<<<<<<<<
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:
 */

static PyObject *__pyx_pf_6pyroxa_11_pybindings_78py_check_mass_conservation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_concentrations, PyObject *__pyx_v_tolerance) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation *__pyx_cur_scope;
  int __pyx_v_N;
  int __pyx_v_npoints;
  double *__pyx_v_conc_traj;
  double *__pyx_v_mass_balance;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  int __pyx_v_result;
  int __pyx_9genexpr20__pyx_v_i;
  PyObject *__pyx_gb_6pyroxa_11_pybindings_26py_check_mass_conservation_2generator = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  double __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_check_mass_conservation", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation(__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 944, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "pyroxa/pybindings.pyx":946
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Empty concentration data")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_concentrations); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 946, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyObject_Length(__pyx_v_concentrations); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 946, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_4 == 0) != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "pyroxa/pybindings.pyx":947
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:
 * 		raise ValueError("Empty concentration data")             # <<<<<<<<<<<<<<
 * 
 * 	cdef int N = len(concentrations[0])  # Number of species
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(1, 947, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":946
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Empty concentration data")
 * 
 */
  }

  /* "pyroxa/pybindings.pyx":949
 * 		raise ValueError("Empty concentration data")
 * 
 * 	cdef int N = len(concentrations[0])  # Number of species             # <<<<<<<<<<<<<<
 * 	cdef int npoints = len(concentrations)  # Number of time points
 * 	cdef double* conc_traj = <double*>malloc(N * npoints * sizeof(double))
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_concentrations, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 949, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_N = __pyx_t_4;

  /* "pyroxa/pybindings.pyx":950
 * 
 * 	cdef int N = len(concentrations[0])  # Number of species
 * 	cdef int npoints = len(concentrations)  # Number of time points             # <<<<<<<<<<<<<<
 * 	cdef double* conc_traj = <double*>malloc(N * npoints * sizeof(double))
 * 	cdef double* mass_balance = <double*>malloc(npoints * sizeof(double))
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_concentrations); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 950, __pyx_L1_error)
  __pyx_v_npoints = __pyx_t_4;

  /* "pyroxa/pybindings.pyx":951
 * 	cdef int N = len(concentrations[0])  # Number of species
 * 	cdef int npoints = len(concentrations)  # Number of time points
 * 	cdef double* conc_traj = <double*>malloc(N * npoints * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* mass_balance = <double*>malloc(npoints * sizeof(double))
 * 
 */
  __pyx_v_conc_traj = ((double *)malloc(((__pyx_v_N * __pyx_v_npoints) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":952
 * 	cdef int npoints = len(concentrations)  # Number of time points
 * 	cdef double* conc_traj = <double*>malloc(N * npoints * sizeof(double))
 * 	cdef double* mass_balance = <double*>malloc(npoints * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_mass_balance = ((double *)malloc((__pyx_v_npoints * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":954
 * 	cdef double* mass_balance = <double*>malloc(npoints * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Flatten concentration trajectory
 * 		for i in range(npoints):
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":956
 * 	try:
 * 		# Flatten concentration trajectory
 * 		for i in range(npoints):             # <<<<<<<<<<<<<<
 * 			for j in range(N):
 * 				conc_traj[i * N + j] = concentrations[i][j]
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_npoints); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 956, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 956, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_4 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 956, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 956, __pyx_L7_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 956, __pyx_L7_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 956, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 956, __pyx_L7_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 956, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 956, __pyx_L7_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "pyroxa/pybindings.pyx":957
 * 		# Flatten concentration trajectory
 * 		for i in range(npoints):
 * 			for j in range(N):             # <<<<<<<<<<<<<<
 * 				conc_traj[i * N + j] = concentrations[i][j]
 * 
 */
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 957, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 957, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
        __pyx_t_6 = __pyx_t_8; __Pyx_INCREF(__pyx_t_6); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 957, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 957, __pyx_L7_error)
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_6))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 957, __pyx_L7_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 957, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 957, __pyx_L7_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 957, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_10(__pyx_t_6);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 957, __pyx_L7_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "pyroxa/pybindings.pyx":958
 * 		for i in range(npoints):
 * 			for j in range(N):
 * 				conc_traj[i * N + j] = concentrations[i][j]             # <<<<<<<<<<<<<<
 * 
 * 		result = check_mass_conservation(N, npoints, conc_traj, mass_balance, tolerance)
 */
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_concentrations, __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 958, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 958, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 958, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 958, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_8 = PyNumber_Multiply(__pyx_v_i, __pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 958, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyNumber_Add(__pyx_t_8, __pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 958, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_t_11); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 958, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        (__pyx_v_conc_traj[__pyx_t_13]) = __pyx_t_12;

        /* "pyroxa/pybindings.pyx":957
 * 		# Flatten concentration trajectory
 * 		for i in range(npoints):
 * 			for j in range(N):             # <<<<<<<<<<<<<<
 * 				conc_traj[i * N + j] = concentrations[i][j]
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "pyroxa/pybindings.pyx":956
 * 	try:
 * 		# Flatten concentration trajectory
 * 		for i in range(npoints):             # <<<<<<<<<<<<<<
 * 			for j in range(N):
 * 				conc_traj[i * N + j] = concentrations[i][j]
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":960
 * 				conc_traj[i * N + j] = concentrations[i][j]
 * 
 * 		result = check_mass_conservation(N, npoints, conc_traj, mass_balance, tolerance)             # <<<<<<<<<<<<<<
 * 
 * 		# Convert mass balance to Python list
 */
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_tolerance); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 960, __pyx_L7_error)
    __pyx_v_result = check_mass_conservation(__pyx_v_N, __pyx_v_npoints, __pyx_v_conc_traj, __pyx_v_mass_balance, __pyx_t_12);

    /* "pyroxa/pybindings.pyx":963
 * 
 * 		# Convert mass balance to Python list
 * 		mass_balance_list = [mass_balance[i] for i in range(npoints)]             # <<<<<<<<<<<<<<
 * 
 * 		return {
 */
    { /* enter inner scope */
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 963, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = __pyx_v_npoints;
      __pyx_t_15 = __pyx_t_14;
      for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
        __pyx_9genexpr20__pyx_v_i = __pyx_t_16;
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_mass_balance[__pyx_9genexpr20__pyx_v_i])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 963, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 963, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    } /* exit inner scope */
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_cur_scope->__pyx_v_mass_balance_list = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":965
 * 		mass_balance_list = [mass_balance[i] for i in range(npoints)]
 * 
 * 		return {             # <<<<<<<<<<<<<<
 * 			'is_conserved': result > 0,
 * 			'mass_balance': mass_balance_list,
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pyroxa/pybindings.pyx":966
 * 
 * 		return {
 * 			'is_conserved': result > 0,             # <<<<<<<<<<<<<<
 * 			'mass_balance': mass_balance_list,
 * 			'max_violation': max(abs(x) for x in mass_balance_list)
 */
    __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 966, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyBool_FromLong((__pyx_v_result > 0)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 966, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_is_conserved, __pyx_t_6) < 0) __PYX_ERR(1, 966, __pyx_L7_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pyroxa/pybindings.pyx":967
 * 		return {
 * 			'is_conserved': result > 0,
 * 			'mass_balance': mass_balance_list,             # <<<<<<<<<<<<<<
 * 			'max_violation': max(abs(x) for x in mass_balance_list)
 * 		}
 */
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_mass_balance, __pyx_cur_scope->__pyx_v_mass_balance_list) < 0) __PYX_ERR(1, 966, __pyx_L7_error)

    /* "pyroxa/pybindings.pyx":968
 * 			'is_conserved': result > 0,
 * 			'mass_balance': mass_balance_list,
 * 			'max_violation': max(abs(x) for x in mass_balance_list)             # <<<<<<<<<<<<<<
 * 		}
 * 	finally:
 */
    __pyx_t_6 = __pyx_pf_6pyroxa_11_pybindings_26py_check_mass_conservation_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 968, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 968, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_max_violation, __pyx_t_11) < 0) __PYX_ERR(1, 966, __pyx_L7_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L6_return;
  }

  /* "pyroxa/pybindings.pyx":971
 * 		}
 * 	finally:
 * 		free(conc_traj)             # <<<<<<<<<<<<<<
 * 		free(mass_balance)
 * 
 */
  /*finally:*/ {
    __pyx_L7_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_23);
      __pyx_t_14 = __pyx_lineno; __pyx_t_15 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
      {
        free(__pyx_v_conc_traj);

        /* "pyroxa/pybindings.pyx":972
 * 	finally:
 * 		free(conc_traj)
 * 		free(mass_balance)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15):
 */
        free(__pyx_v_mass_balance);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_XGIVEREF(__pyx_t_22);
        __Pyx_XGIVEREF(__pyx_t_23);
        __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
      }
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
      __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      __pyx_lineno = __pyx_t_14; __pyx_clineno = __pyx_t_15; __pyx_filename = __pyx_t_17;
      goto __pyx_L1_error;
    }
    __pyx_L6_return: {
      __pyx_t_23 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":971
 * 		}
 * 	finally:
 * 		free(conc_traj)             # <<<<<<<<<<<<<<
 * 		free(mass_balance)
 * 
 */
      free(__pyx_v_conc_traj);

      /* "pyroxa/pybindings.pyx":972
 * 	finally:
 * 		free(conc_traj)
 * 		free(mass_balance)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15):
 */
      free(__pyx_v_mass_balance);
      __pyx_r = __pyx_t_23;
      __pyx_t_23 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":944
 * 		free(weight_c)
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):             # <<<<<<<<<<<<<<
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyroxa._pybindings.py_check_mass_conservation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_gb_6pyroxa_11_pybindings_26py_check_mass_conservation_2generator);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":974
 * 		free(mass_balance)
 * 
 * def py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15):             # <<<<<<<<<<<<<<
 * 	"""Calculate temperature-dependent rate constants using Arrhenius equation"""
 * 	cdef int M = len(kf_ref)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_81py_calculate_rate_constants(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_80py_calculate_rate_constants[] = "py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15)\nCalculate temperature-dependent rate constants using Arrhenius equation";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_81py_calculate_rate_constants = {"py_calculate_rate_constants", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_81py_calculate_rate_constants, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_80py_calculate_rate_constants};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_81py_calculate_rate_constants(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kf_ref = 0;
  PyObject *__pyx_v_kr_ref = 0;
  PyObject *__pyx_v_Ea_f = 0;
  PyObject *__pyx_v_Ea_r = 0;
  double __pyx_v_T;
  double __pyx_v_T_ref;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_rate_constants (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_kf_ref,&__pyx_n_s_kr_ref,&__pyx_n_s_Ea_f,&__pyx_n_s_Ea_r,&__pyx_n_s_T,&__pyx_n_s_T_ref,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kf_ref)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kr_ref)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_rate_constants", 0, 5, 6, 1); __PYX_ERR(1, 974, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ea_f)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_rate_constants", 0, 5, 6, 2); __PYX_ERR(1, 974, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Ea_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_rate_constants", 0, 5, 6, 3); __PYX_ERR(1, 974, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_rate_constants", 0, 5, 6, 4); __PYX_ERR(1, 974, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T_ref);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_calculate_rate_constants") < 0)) __PYX_ERR(1, 974, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_kf_ref = values[0];
    __pyx_v_kr_ref = values[1];
    __pyx_v_Ea_f = values[2];
    __pyx_v_Ea_r = values[3];
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 974, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_T_ref = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_T_ref == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 974, __pyx_L3_error)
    } else {
      __pyx_v_T_ref = ((double)298.15);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_rate_constants", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 974, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_rate_constants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_80py_calculate_rate_constants(__pyx_self, __pyx_v_kf_ref, __pyx_v_kr_ref, __pyx_v_Ea_f, __pyx_v_Ea_r, __pyx_v_T, __pyx_v_T_ref);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_80py_calculate_rate_constants(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_kf_ref, PyObject *__pyx_v_kr_ref, PyObject *__pyx_v_Ea_f, PyObject *__pyx_v_Ea_r, double __pyx_v_T, double __pyx_v_T_ref) {
  int __pyx_v_M;
  double *__pyx_v_kf_ref_c;
  double *__pyx_v_kr_ref_c;
  double *__pyx_v_Ea_f_c;
  double *__pyx_v_Ea_r_c;
  double *__pyx_v_kf_out_c;
  double *__pyx_v_kr_out_c;
  int __pyx_v_i;
  PyObject *__pyx_v_kf_out = NULL;
  PyObject *__pyx_v_kr_out = NULL;
  int __pyx_9genexpr22__pyx_v_i;
  int __pyx_9genexpr23__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char const *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_rate_constants", 0);

  /* "pyroxa/pybindings.pyx":976
 * def py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15):
 * 	"""Calculate temperature-dependent rate constants using Arrhenius equation"""
 * 	cdef int M = len(kf_ref)             # <<<<<<<<<<<<<<
 * 	cdef double* kf_ref_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_ref_c = <double*>malloc(M * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_kf_ref); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 976, __pyx_L1_error)
  __pyx_v_M = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":977
 * 	"""Calculate temperature-dependent rate constants using Arrhenius equation"""
 * 	cdef int M = len(kf_ref)
 * 	cdef double* kf_ref_c = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr_ref_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* Ea_f_c = <double*>malloc(M * sizeof(double))
 */
  __pyx_v_kf_ref_c = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":978
 * 	cdef int M = len(kf_ref)
 * 	cdef double* kf_ref_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_ref_c = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* Ea_f_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* Ea_r_c = <double*>malloc(M * sizeof(double))
 */
  __pyx_v_kr_ref_c = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":979
 * 	cdef double* kf_ref_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_ref_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* Ea_f_c = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* Ea_r_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kf_out_c = <double*>malloc(M * sizeof(double))
 */
  __pyx_v_Ea_f_c = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":980
 * 	cdef double* kr_ref_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* Ea_f_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* Ea_r_c = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kf_out_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_out_c = <double*>malloc(M * sizeof(double))
 */
  __pyx_v_Ea_r_c = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":981
 * 	cdef double* Ea_f_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* Ea_r_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kf_out_c = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr_out_c = <double*>malloc(M * sizeof(double))
 * 
 */
  __pyx_v_kf_out_c = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":982
 * 	cdef double* Ea_r_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kf_out_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_out_c = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_kr_out_c = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":984
 * 	cdef double* kr_out_c = <double*>malloc(M * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(M):
 * 			kf_ref_c[i] = kf_ref[i]
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":985
 * 
 * 	try:
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_ref_c[i] = kf_ref[i]
 * 			kr_ref_c[i] = kr_ref[i]
 */
    __pyx_t_2 = __pyx_v_M;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":986
 * 	try:
 * 		for i in range(M):
 * 			kf_ref_c[i] = kf_ref[i]             # <<<<<<<<<<<<<<
 * 			kr_ref_c[i] = kr_ref[i]
 * 			Ea_f_c[i] = Ea_f[i]
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_kf_ref, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 986, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 986, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_kf_ref_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":987
 * 		for i in range(M):
 * 			kf_ref_c[i] = kf_ref[i]
 * 			kr_ref_c[i] = kr_ref[i]             # <<<<<<<<<<<<<<
 * 			Ea_f_c[i] = Ea_f[i]
 * 			Ea_r_c[i] = Ea_r[i]
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_kr_ref, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 987, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 987, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_kr_ref_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":988
 * 			kf_ref_c[i] = kf_ref[i]
 * 			kr_ref_c[i] = kr_ref[i]
 * 			Ea_f_c[i] = Ea_f[i]             # <<<<<<<<<<<<<<
 * 			Ea_r_c[i] = Ea_r[i]
 * 
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_Ea_f, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 988, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 988, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_Ea_f_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":989
 * 			kr_ref_c[i] = kr_ref[i]
 * 			Ea_f_c[i] = Ea_f[i]
 * 			Ea_r_c[i] = Ea_r[i]             # <<<<<<<<<<<<<<
 * 
 * 		calculate_rate_constants(M, kf_ref_c, kr_ref_c, Ea_f_c, Ea_r_c,
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_Ea_r, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 989, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 989, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_Ea_r_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":991
 * 			Ea_r_c[i] = Ea_r[i]
 * 
 * 		calculate_rate_constants(M, kf_ref_c, kr_ref_c, Ea_f_c, Ea_r_c,             # <<<<<<<<<<<<<<
 * 								T, T_ref, kf_out_c, kr_out_c)
 * 
 */
    calculate_rate_constants(__pyx_v_M, __pyx_v_kf_ref_c, __pyx_v_kr_ref_c, __pyx_v_Ea_f_c, __pyx_v_Ea_r_c, __pyx_v_T, __pyx_v_T_ref, __pyx_v_kf_out_c, __pyx_v_kr_out_c);

    /* "pyroxa/pybindings.pyx":995
 * 
 * 		# Convert to Python lists
 * 		kf_out = [kf_out_c[i] for i in range(M)]             # <<<<<<<<<<<<<<
 * 		kr_out = [kr_out_c[i] for i in range(M)]
 * 
 */
    { /* enter inner scope */
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 995, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __pyx_v_M;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_9genexpr22__pyx_v_i = __pyx_t_4;
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_kf_out_c[__pyx_9genexpr22__pyx_v_i])); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 995, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_7))) __PYX_ERR(1, 995, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    } /* exit inner scope */
    __pyx_v_kf_out = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":996
 * 		# Convert to Python lists
 * 		kf_out = [kf_out_c[i] for i in range(M)]
 * 		kr_out = [kr_out_c[i] for i in range(M)]             # <<<<<<<<<<<<<<
 * 
 * 		return {
 */
    { /* enter inner scope */
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 996, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __pyx_v_M;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_9genexpr23__pyx_v_i = __pyx_t_4;
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_kr_out_c[__pyx_9genexpr23__pyx_v_i])); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 996, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_7))) __PYX_ERR(1, 996, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    } /* exit inner scope */
    __pyx_v_kr_out = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":998
 * 		kr_out = [kr_out_c[i] for i in range(M)]
 * 
 * 		return {             # <<<<<<<<<<<<<<
 * 			'kf': kf_out,
 * 			'kr': kr_out
 */
    __Pyx_XDECREF(__pyx_r);

    /* "pyroxa/pybindings.pyx":999
 * 
 * 		return {
 * 			'kf': kf_out,             # <<<<<<<<<<<<<<
 * 			'kr': kr_out
 * 		}
 */
    __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 999, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_kf, __pyx_v_kf_out) < 0) __PYX_ERR(1, 999, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":1000
 * 		return {
 * 			'kf': kf_out,
 * 			'kr': kr_out             # <<<<<<<<<<<<<<
 * 		}
 * 	finally:
 */
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_kr, __pyx_v_kr_out) < 0) __PYX_ERR(1, 999, __pyx_L4_error)
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":1003
 * 		}
 * 	finally:
 * 		free(kf_ref_c)             # <<<<<<<<<<<<<<
 * 		free(kr_ref_c)
 * 		free(Ea_f_c)
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11) < 0)) __Pyx_ErrFetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_8 = __pyx_filename;
      {
        free(__pyx_v_kf_ref_c);

        /* "pyroxa/pybindings.pyx":1004
 * 	finally:
 * 		free(kf_ref_c)
 * 		free(kr_ref_c)             # <<<<<<<<<<<<<<
 * 		free(Ea_f_c)
 * 		free(Ea_r_c)
 */
        free(__pyx_v_kr_ref_c);

        /* "pyroxa/pybindings.pyx":1005
 * 		free(kf_ref_c)
 * 		free(kr_ref_c)
 * 		free(Ea_f_c)             # <<<<<<<<<<<<<<
 * 		free(Ea_r_c)
 * 		free(kf_out_c)
 */
        free(__pyx_v_Ea_f_c);

        /* "pyroxa/pybindings.pyx":1006
 * 		free(kr_ref_c)
 * 		free(Ea_f_c)
 * 		free(Ea_r_c)             # <<<<<<<<<<<<<<
 * 		free(kf_out_c)
 * 		free(kr_out_c)
 */
        free(__pyx_v_Ea_r_c);

        /* "pyroxa/pybindings.pyx":1007
 * 		free(Ea_f_c)
 * 		free(Ea_r_c)
 * 		free(kf_out_c)             # <<<<<<<<<<<<<<
 * 		free(kr_out_c)
 * 
 */
        free(__pyx_v_kf_out_c);

        /* "pyroxa/pybindings.pyx":1008
 * 		free(Ea_r_c)
 * 		free(kf_out_c)
 * 		free(kr_out_c)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 9: Simple utility and validation functions
 */
        free(__pyx_v_kr_out_c);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      }
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ErrRestore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_8;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_14 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1003
 * 		}
 * 	finally:
 * 		free(kf_ref_c)             # <<<<<<<<<<<<<<
 * 		free(kr_ref_c)
 * 		free(Ea_f_c)
 */
      free(__pyx_v_kf_ref_c);

      /* "pyroxa/pybindings.pyx":1004
 * 	finally:
 * 		free(kf_ref_c)
 * 		free(kr_ref_c)             # <<<<<<<<<<<<<<
 * 		free(Ea_f_c)
 * 		free(Ea_r_c)
 */
      free(__pyx_v_kr_ref_c);

      /* "pyroxa/pybindings.pyx":1005
 * 		free(kf_ref_c)
 * 		free(kr_ref_c)
 * 		free(Ea_f_c)             # <<<<<<<<<<<<<<
 * 		free(Ea_r_c)
 * 		free(kf_out_c)
 */
      free(__pyx_v_Ea_f_c);

      /* "pyroxa/pybindings.pyx":1006
 * 		free(kr_ref_c)
 * 		free(Ea_f_c)
 * 		free(Ea_r_c)             # <<<<<<<<<<<<<<
 * 		free(kf_out_c)
 * 		free(kr_out_c)
 */
      free(__pyx_v_Ea_r_c);

      /* "pyroxa/pybindings.pyx":1007
 * 		free(Ea_f_c)
 * 		free(Ea_r_c)
 * 		free(kf_out_c)             # <<<<<<<<<<<<<<
 * 		free(kr_out_c)
 * 
 */
      free(__pyx_v_kf_out_c);

      /* "pyroxa/pybindings.pyx":1008
 * 		free(Ea_r_c)
 * 		free(kf_out_c)
 * 		free(kr_out_c)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 9: Simple utility and validation functions
 */
      free(__pyx_v_kr_out_c);
      __pyx_r = __pyx_t_14;
      __pyx_t_14 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":974
 * 		free(mass_balance)
 * 
 * def py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15):             # <<<<<<<<<<<<<<
 * 	"""Calculate temperature-dependent rate constants using Arrhenius equation"""
 * 	cdef int M = len(kf_ref)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_rate_constants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kf_out);
  __Pyx_XDECREF(__pyx_v_kr_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1011
 * 
 * # BATCH 9: Simple utility and validation functions
 * def py_cross_validation_score(data, parameters, int n_folds=5):             # <<<<<<<<<<<<<<
 * 	"""Calculate cross-validation score for model validation"""
 * 	cdef int n_data = len(data)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_83py_cross_validation_score(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_82py_cross_validation_score[] = "py_cross_validation_score(data, parameters, int n_folds=5)\nCalculate cross-validation score for model validation";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_83py_cross_validation_score = {"py_cross_validation_score", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_83py_cross_validation_score, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_82py_cross_validation_score};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_83py_cross_validation_score(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_parameters = 0;
  int __pyx_v_n_folds;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_cross_validation_score (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_parameters,&__pyx_n_s_n_folds,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameters)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_cross_validation_score", 0, 2, 3, 1); __PYX_ERR(1, 1011, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_folds);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_cross_validation_score") < 0)) __PYX_ERR(1, 1011, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = values[0];
    __pyx_v_parameters = values[1];
    if (values[2]) {
      __pyx_v_n_folds = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n_folds == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1011, __pyx_L3_error)
    } else {
      __pyx_v_n_folds = ((int)5);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_cross_validation_score", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1011, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_cross_validation_score", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_82py_cross_validation_score(__pyx_self, __pyx_v_data, __pyx_v_parameters, __pyx_v_n_folds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_82py_cross_validation_score(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_parameters, int __pyx_v_n_folds) {
  int __pyx_v_n_data;
  int __pyx_v_n_params;
  double *__pyx_v_data_c;
  double *__pyx_v_params_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_cross_validation_score", 0);

  /* "pyroxa/pybindings.pyx":1013
 * def py_cross_validation_score(data, parameters, int n_folds=5):
 * 	"""Calculate cross-validation score for model validation"""
 * 	cdef int n_data = len(data)             # <<<<<<<<<<<<<<
 * 	cdef int n_params = len(parameters)
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1013, __pyx_L1_error)
  __pyx_v_n_data = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":1014
 * 	"""Calculate cross-validation score for model validation"""
 * 	cdef int n_data = len(data)
 * 	cdef int n_params = len(parameters)             # <<<<<<<<<<<<<<
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_parameters); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1014, __pyx_L1_error)
  __pyx_v_n_params = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":1015
 * 	cdef int n_data = len(data)
 * 	cdef int n_params = len(parameters)
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))
 * 
 */
  __pyx_v_data_c = ((double *)malloc((__pyx_v_n_data * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1016
 * 	cdef int n_params = len(parameters)
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_params_c = ((double *)malloc((__pyx_v_n_params * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1018
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(n_data):
 * 			data_c[i] = data[i]
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1019
 * 
 * 	try:
 * 		for i in range(n_data):             # <<<<<<<<<<<<<<
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):
 */
    __pyx_t_2 = __pyx_v_n_data;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":1020
 * 	try:
 * 		for i in range(n_data):
 * 			data_c[i] = data[i]             # <<<<<<<<<<<<<<
 * 		for i in range(n_params):
 * 			params_c[i] = parameters[i]
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_data, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1020, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1020, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_data_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":1021
 * 		for i in range(n_data):
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):             # <<<<<<<<<<<<<<
 * 			params_c[i] = parameters[i]
 * 
 */
    __pyx_t_2 = __pyx_v_n_params;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":1022
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):
 * 			params_c[i] = parameters[i]             # <<<<<<<<<<<<<<
 * 
 * 		return cross_validation_score(n_folds, n_data, data_c, n_params, params_c)
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_parameters, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1022, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1022, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_params_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":1024
 * 			params_c[i] = parameters[i]
 * 
 * 		return cross_validation_score(n_folds, n_data, data_c, n_params, params_c)             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(data_c)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(cross_validation_score(__pyx_v_n_folds, __pyx_v_n_data, __pyx_v_data_c, __pyx_v_n_params, __pyx_v_params_c)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1024, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":1026
 * 		return cross_validation_score(n_folds, n_data, data_c, n_params, params_c)
 * 	finally:
 * 		free(data_c)             # <<<<<<<<<<<<<<
 * 		free(params_c)
 * 
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_data_c);

        /* "pyroxa/pybindings.pyx":1027
 * 	finally:
 * 		free(data_c)
 * 		free(params_c)             # <<<<<<<<<<<<<<
 * 
 * def py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None):
 */
        free(__pyx_v_params_c);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1026
 * 		return cross_validation_score(n_folds, n_data, data_c, n_params, params_c)
 * 	finally:
 * 		free(data_c)             # <<<<<<<<<<<<<<
 * 		free(params_c)
 * 
 */
      free(__pyx_v_data_c);

      /* "pyroxa/pybindings.pyx":1027
 * 	finally:
 * 		free(data_c)
 * 		free(params_c)             # <<<<<<<<<<<<<<
 * 
 * def py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None):
 */
      free(__pyx_v_params_c);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1011
 * 
 * # BATCH 9: Simple utility and validation functions
 * def py_cross_validation_score(data, parameters, int n_folds=5):             # <<<<<<<<<<<<<<
 * 	"""Calculate cross-validation score for model validation"""
 * 	cdef int n_data = len(data)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_cross_validation_score", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1029
 * 		free(params_c)
 * 
 * def py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None):             # <<<<<<<<<<<<<<
 * 	"""Kriging interpolation for spatial data"""
 * 	cdef int n_known = len(x_known)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_85py_kriging_interpolation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_84py_kriging_interpolation[] = "py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None)\nKriging interpolation for spatial data";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_85py_kriging_interpolation = {"py_kriging_interpolation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_85py_kriging_interpolation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_84py_kriging_interpolation};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_85py_kriging_interpolation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x_new = 0;
  PyObject *__pyx_v_x_known = 0;
  PyObject *__pyx_v_y_known = 0;
  PyObject *__pyx_v_variogram_params = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_kriging_interpolation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x_new,&__pyx_n_s_x_known,&__pyx_n_s_y_known,&__pyx_n_s_variogram_params,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x_new)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x_known)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_kriging_interpolation", 0, 3, 4, 1); __PYX_ERR(1, 1029, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y_known)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_kriging_interpolation", 0, 3, 4, 2); __PYX_ERR(1, 1029, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_variogram_params);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_kriging_interpolation") < 0)) __PYX_ERR(1, 1029, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x_new = values[0];
    __pyx_v_x_known = values[1];
    __pyx_v_y_known = values[2];
    __pyx_v_variogram_params = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_kriging_interpolation", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1029, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_kriging_interpolation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_84py_kriging_interpolation(__pyx_self, __pyx_v_x_new, __pyx_v_x_known, __pyx_v_y_known, __pyx_v_variogram_params);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_84py_kriging_interpolation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x_new, PyObject *__pyx_v_x_known, PyObject *__pyx_v_y_known, PyObject *__pyx_v_variogram_params) {
  int __pyx_v_n_known;
  PyObject *__pyx_v_x_new_list = NULL;
  double *__pyx_v_x_new_c;
  double *__pyx_v_x_known_c;
  double *__pyx_v_y_known_c;
  double *__pyx_v_var_params_c;
  Py_ssize_t __pyx_v_i;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  double __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  char const *__pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_kriging_interpolation", 0);
  __Pyx_INCREF(__pyx_v_variogram_params);

  /* "pyroxa/pybindings.pyx":1031
 * def py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None):
 * 	"""Kriging interpolation for spatial data"""
 * 	cdef int n_known = len(x_known)             # <<<<<<<<<<<<<<
 * 
 * 	# Handle single value vs array for x_new
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_x_known); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1031, __pyx_L1_error)
  __pyx_v_n_known = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":1034
 * 
 * 	# Handle single value vs array for x_new
 * 	if isinstance(x_new, (int, float)):             # <<<<<<<<<<<<<<
 * 		x_new_list = [float(x_new)]
 * 	else:
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_x_new); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_x_new); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pyroxa/pybindings.pyx":1035
 * 	# Handle single value vs array for x_new
 * 	if isinstance(x_new, (int, float)):
 * 		x_new_list = [float(x_new)]             # <<<<<<<<<<<<<<
 * 	else:
 * 		x_new_list = list(x_new)
 */
    __pyx_t_5 = __Pyx_PyNumber_Float(__pyx_v_x_new); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1035, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1035, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_x_new_list = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "pyroxa/pybindings.pyx":1034
 * 
 * 	# Handle single value vs array for x_new
 * 	if isinstance(x_new, (int, float)):             # <<<<<<<<<<<<<<
 * 		x_new_list = [float(x_new)]
 * 	else:
 */
    goto __pyx_L3;
  }

  /* "pyroxa/pybindings.pyx":1037
 * 		x_new_list = [float(x_new)]
 * 	else:
 * 		x_new_list = list(x_new)             # <<<<<<<<<<<<<<
 * 
 * 	# Default variogram parameters if not provided
 */
  /*else*/ {
    __pyx_t_6 = PySequence_List(__pyx_v_x_new); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1037, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_x_new_list = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "pyroxa/pybindings.pyx":1040
 * 
 * 	# Default variogram parameters if not provided
 * 	if variogram_params is None:             # <<<<<<<<<<<<<<
 * 		variogram_params = [1.0, 0.1, 1.0]  # [range, sill, nugget]
 * 
 */
  __pyx_t_3 = (__pyx_v_variogram_params == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "pyroxa/pybindings.pyx":1041
 * 	# Default variogram parameters if not provided
 * 	if variogram_params is None:
 * 		variogram_params = [1.0, 0.1, 1.0]  # [range, sill, nugget]             # <<<<<<<<<<<<<<
 * 
 * 	cdef double* x_new_c = <double*>malloc(len(x_new_list) * sizeof(double))
 */
    __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1041, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_float_1_0);
    __Pyx_GIVEREF(__pyx_float_1_0);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_float_1_0);
    __Pyx_INCREF(__pyx_float_0_1);
    __Pyx_GIVEREF(__pyx_float_0_1);
    PyList_SET_ITEM(__pyx_t_6, 1, __pyx_float_0_1);
    __Pyx_INCREF(__pyx_float_1_0);
    __Pyx_GIVEREF(__pyx_float_1_0);
    PyList_SET_ITEM(__pyx_t_6, 2, __pyx_float_1_0);
    __Pyx_DECREF_SET(__pyx_v_variogram_params, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pyroxa/pybindings.pyx":1040
 * 
 * 	# Default variogram parameters if not provided
 * 	if variogram_params is None:             # <<<<<<<<<<<<<<
 * 		variogram_params = [1.0, 0.1, 1.0]  # [range, sill, nugget]
 * 
 */
  }

  /* "pyroxa/pybindings.pyx":1043
 * 		variogram_params = [1.0, 0.1, 1.0]  # [range, sill, nugget]
 * 
 * 	cdef double* x_new_c = <double*>malloc(len(x_new_list) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* x_known_c = <double*>malloc(n_known * sizeof(double))
 * 	cdef double* y_known_c = <double*>malloc(n_known * sizeof(double))
 */
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_x_new_list); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1043, __pyx_L1_error)
  __pyx_v_x_new_c = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1044
 * 
 * 	cdef double* x_new_c = <double*>malloc(len(x_new_list) * sizeof(double))
 * 	cdef double* x_known_c = <double*>malloc(n_known * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* y_known_c = <double*>malloc(n_known * sizeof(double))
 * 	cdef double* var_params_c = <double*>malloc(len(variogram_params) * sizeof(double))
 */
  __pyx_v_x_known_c = ((double *)malloc((__pyx_v_n_known * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1045
 * 	cdef double* x_new_c = <double*>malloc(len(x_new_list) * sizeof(double))
 * 	cdef double* x_known_c = <double*>malloc(n_known * sizeof(double))
 * 	cdef double* y_known_c = <double*>malloc(n_known * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* var_params_c = <double*>malloc(len(variogram_params) * sizeof(double))
 * 
 */
  __pyx_v_y_known_c = ((double *)malloc((__pyx_v_n_known * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1046
 * 	cdef double* x_known_c = <double*>malloc(n_known * sizeof(double))
 * 	cdef double* y_known_c = <double*>malloc(n_known * sizeof(double))
 * 	cdef double* var_params_c = <double*>malloc(len(variogram_params) * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_variogram_params); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1046, __pyx_L1_error)
  __pyx_v_var_params_c = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1048
 * 	cdef double* var_params_c = <double*>malloc(len(variogram_params) * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(len(x_new_list)):
 * 			x_new_c[i] = x_new_list[i]
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1049
 * 
 * 	try:
 * 		for i in range(len(x_new_list)):             # <<<<<<<<<<<<<<
 * 			x_new_c[i] = x_new_list[i]
 * 		for i in range(n_known):
 */
    __pyx_t_1 = PyList_GET_SIZE(__pyx_v_x_new_list); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1049, __pyx_L8_error)
    __pyx_t_7 = __pyx_t_1;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1050
 * 	try:
 * 		for i in range(len(x_new_list)):
 * 			x_new_c[i] = x_new_list[i]             # <<<<<<<<<<<<<<
 * 		for i in range(n_known):
 * 			x_known_c[i] = x_known[i]
 */
      __pyx_t_9 = __pyx_PyFloat_AsDouble(PyList_GET_ITEM(__pyx_v_x_new_list, __pyx_v_i)); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1050, __pyx_L8_error)
      (__pyx_v_x_new_c[__pyx_v_i]) = __pyx_t_9;
    }

    /* "pyroxa/pybindings.pyx":1051
 * 		for i in range(len(x_new_list)):
 * 			x_new_c[i] = x_new_list[i]
 * 		for i in range(n_known):             # <<<<<<<<<<<<<<
 * 			x_known_c[i] = x_known[i]
 * 			y_known_c[i] = y_known[i]
 */
    __pyx_t_10 = __pyx_v_n_known;
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_11; __pyx_t_1+=1) {
      __pyx_v_i = __pyx_t_1;

      /* "pyroxa/pybindings.pyx":1052
 * 			x_new_c[i] = x_new_list[i]
 * 		for i in range(n_known):
 * 			x_known_c[i] = x_known[i]             # <<<<<<<<<<<<<<
 * 			y_known_c[i] = y_known[i]
 * 		for i in range(len(variogram_params)):
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_x_known, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1052, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1052, __pyx_L8_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      (__pyx_v_x_known_c[__pyx_v_i]) = __pyx_t_9;

      /* "pyroxa/pybindings.pyx":1053
 * 		for i in range(n_known):
 * 			x_known_c[i] = x_known[i]
 * 			y_known_c[i] = y_known[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(variogram_params)):
 * 			var_params_c[i] = variogram_params[i]
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_y_known, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1053, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1053, __pyx_L8_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      (__pyx_v_y_known_c[__pyx_v_i]) = __pyx_t_9;
    }

    /* "pyroxa/pybindings.pyx":1054
 * 			x_known_c[i] = x_known[i]
 * 			y_known_c[i] = y_known[i]
 * 		for i in range(len(variogram_params)):             # <<<<<<<<<<<<<<
 * 			var_params_c[i] = variogram_params[i]
 * 
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_variogram_params); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1054, __pyx_L8_error)
    __pyx_t_7 = __pyx_t_1;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1055
 * 			y_known_c[i] = y_known[i]
 * 		for i in range(len(variogram_params)):
 * 			var_params_c[i] = variogram_params[i]             # <<<<<<<<<<<<<<
 * 
 * 		result = kriging_interpolation(x_new_c, n_known, x_known_c, y_known_c, var_params_c)
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_variogram_params, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1055, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1055, __pyx_L8_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      (__pyx_v_var_params_c[__pyx_v_i]) = __pyx_t_9;
    }

    /* "pyroxa/pybindings.pyx":1057
 * 			var_params_c[i] = variogram_params[i]
 * 
 * 		result = kriging_interpolation(x_new_c, n_known, x_known_c, y_known_c, var_params_c)             # <<<<<<<<<<<<<<
 * 
 * 		# Return single value if input was single value
 */
    __pyx_v_result = kriging_interpolation(__pyx_v_x_new_c, __pyx_v_n_known, __pyx_v_x_known_c, __pyx_v_y_known_c, __pyx_v_var_params_c);

    /* "pyroxa/pybindings.pyx":1060
 * 
 * 		# Return single value if input was single value
 * 		if isinstance(x_new, (int, float)):             # <<<<<<<<<<<<<<
 * 			return result
 * 		else:
 */
    __pyx_t_3 = PyInt_Check(__pyx_v_x_new); 
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_4 = PyFloat_Check(__pyx_v_x_new); 
    __pyx_t_3 = (__pyx_t_4 != 0);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L17_bool_binop_done:;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {

      /* "pyroxa/pybindings.pyx":1061
 * 		# Return single value if input was single value
 * 		if isinstance(x_new, (int, float)):
 * 			return result             # <<<<<<<<<<<<<<
 * 		else:
 * 			return [result]  # For now, return single result even for arrays
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1061, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L7_return;

      /* "pyroxa/pybindings.pyx":1060
 * 
 * 		# Return single value if input was single value
 * 		if isinstance(x_new, (int, float)):             # <<<<<<<<<<<<<<
 * 			return result
 * 		else:
 */
    }

    /* "pyroxa/pybindings.pyx":1063
 * 			return result
 * 		else:
 * 			return [result]  # For now, return single result even for arrays             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(x_new_c)
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1063, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1063, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L7_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1065
 * 			return [result]  # For now, return single result even for arrays
 * 	finally:
 * 		free(x_new_c)             # <<<<<<<<<<<<<<
 * 		free(x_known_c)
 * 		free(y_known_c)
 */
  /*finally:*/ {
    __pyx_L8_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __pyx_t_10 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_12 = __pyx_filename;
      {
        free(__pyx_v_x_new_c);

        /* "pyroxa/pybindings.pyx":1066
 * 	finally:
 * 		free(x_new_c)
 * 		free(x_known_c)             # <<<<<<<<<<<<<<
 * 		free(y_known_c)
 * 		free(var_params_c)
 */
        free(__pyx_v_x_known_c);

        /* "pyroxa/pybindings.pyx":1067
 * 		free(x_new_c)
 * 		free(x_known_c)
 * 		free(y_known_c)             # <<<<<<<<<<<<<<
 * 		free(var_params_c)
 * 
 */
        free(__pyx_v_y_known_c);

        /* "pyroxa/pybindings.pyx":1068
 * 		free(x_known_c)
 * 		free(y_known_c)
 * 		free(var_params_c)             # <<<<<<<<<<<<<<
 * 
 * def py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000):
 */
        free(__pyx_v_var_params_c);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
      }
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
      __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_12;
      goto __pyx_L1_error;
    }
    __pyx_L7_return: {
      __pyx_t_18 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1065
 * 			return [result]  # For now, return single result even for arrays
 * 	finally:
 * 		free(x_new_c)             # <<<<<<<<<<<<<<
 * 		free(x_known_c)
 * 		free(y_known_c)
 */
      free(__pyx_v_x_new_c);

      /* "pyroxa/pybindings.pyx":1066
 * 	finally:
 * 		free(x_new_c)
 * 		free(x_known_c)             # <<<<<<<<<<<<<<
 * 		free(y_known_c)
 * 		free(var_params_c)
 */
      free(__pyx_v_x_known_c);

      /* "pyroxa/pybindings.pyx":1067
 * 		free(x_new_c)
 * 		free(x_known_c)
 * 		free(y_known_c)             # <<<<<<<<<<<<<<
 * 		free(var_params_c)
 * 
 */
      free(__pyx_v_y_known_c);

      /* "pyroxa/pybindings.pyx":1068
 * 		free(x_known_c)
 * 		free(y_known_c)
 * 		free(var_params_c)             # <<<<<<<<<<<<<<
 * 
 * def py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000):
 */
      free(__pyx_v_var_params_c);
      __pyx_r = __pyx_t_18;
      __pyx_t_18 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1029
 * 		free(params_c)
 * 
 * def py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None):             # <<<<<<<<<<<<<<
 * 	"""Kriging interpolation for spatial data"""
 * 	cdef int n_known = len(x_known)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyroxa._pybindings.py_kriging_interpolation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x_new_list);
  __Pyx_XDECREF(__pyx_v_variogram_params);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1070
 * 		free(var_params_c)
 * 
 * def py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000):             # <<<<<<<<<<<<<<
 * 	"""Bootstrap uncertainty analysis"""
 * 	cdef int n_data = len(data)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_87py_bootstrap_uncertainty(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_86py_bootstrap_uncertainty[] = "py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000)\nBootstrap uncertainty analysis";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_87py_bootstrap_uncertainty = {"py_bootstrap_uncertainty", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_87py_bootstrap_uncertainty, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_86py_bootstrap_uncertainty};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_87py_bootstrap_uncertainty(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_parameters = 0;
  int __pyx_v_n_bootstrap;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_bootstrap_uncertainty (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_parameters,&__pyx_n_s_n_bootstrap,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_parameters)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_bootstrap_uncertainty", 0, 2, 3, 1); __PYX_ERR(1, 1070, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_bootstrap);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_bootstrap_uncertainty") < 0)) __PYX_ERR(1, 1070, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = values[0];
    __pyx_v_parameters = values[1];
    if (values[2]) {
      __pyx_v_n_bootstrap = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_n_bootstrap == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1070, __pyx_L3_error)
    } else {
      __pyx_v_n_bootstrap = ((int)0x3E8);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_bootstrap_uncertainty", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1070, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_bootstrap_uncertainty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_86py_bootstrap_uncertainty(__pyx_self, __pyx_v_data, __pyx_v_parameters, __pyx_v_n_bootstrap);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_86py_bootstrap_uncertainty(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_parameters, int __pyx_v_n_bootstrap) {
  int __pyx_v_n_data;
  int __pyx_v_n_params;
  double *__pyx_v_data_c;
  double *__pyx_v_params_c;
  double *__pyx_v_param_distribution;
  PyObject *__pyx_v_i = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_distribution = NULL;
  PyObject *__pyx_v_param_samples = NULL;
  int __pyx_9genexpr24__pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  double __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  char const *__pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_bootstrap_uncertainty", 0);

  /* "pyroxa/pybindings.pyx":1072
 * def py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000):
 * 	"""Bootstrap uncertainty analysis"""
 * 	cdef int n_data = len(data)             # <<<<<<<<<<<<<<
 * 	cdef int n_params = len(parameters)
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1072, __pyx_L1_error)
  __pyx_v_n_data = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":1073
 * 	"""Bootstrap uncertainty analysis"""
 * 	cdef int n_data = len(data)
 * 	cdef int n_params = len(parameters)             # <<<<<<<<<<<<<<
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_parameters); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1073, __pyx_L1_error)
  __pyx_v_n_params = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":1074
 * 	cdef int n_data = len(data)
 * 	cdef int n_params = len(parameters)
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))
 * 	cdef double* param_distribution = <double*>malloc(n_params * n_bootstrap * sizeof(double))
 */
  __pyx_v_data_c = ((double *)malloc((__pyx_v_n_data * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1075
 * 	cdef int n_params = len(parameters)
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* param_distribution = <double*>malloc(n_params * n_bootstrap * sizeof(double))
 * 
 */
  __pyx_v_params_c = ((double *)malloc((__pyx_v_n_params * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1076
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))
 * 	cdef double* param_distribution = <double*>malloc(n_params * n_bootstrap * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_param_distribution = ((double *)malloc(((__pyx_v_n_params * __pyx_v_n_bootstrap) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1078
 * 	cdef double* param_distribution = <double*>malloc(n_params * n_bootstrap * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(n_data):
 * 			data_c[i] = data[i]
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1079
 * 
 * 	try:
 * 		for i in range(n_data):             # <<<<<<<<<<<<<<
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n_data); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1079, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1079, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1079, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1079, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1079, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1079, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1079, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1079, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1079, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1080
 * 	try:
 * 		for i in range(n_data):
 * 			data_c[i] = data[i]             # <<<<<<<<<<<<<<
 * 		for i in range(n_params):
 * 			params_c[i] = parameters[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_data, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1080, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1080, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1080, __pyx_L4_error)
      (__pyx_v_data_c[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1079
 * 
 * 	try:
 * 		for i in range(n_data):             # <<<<<<<<<<<<<<
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1081
 * 		for i in range(n_data):
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):             # <<<<<<<<<<<<<<
 * 			params_c[i] = parameters[i]
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1081, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1081, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1081, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1081, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1081, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1081, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1081, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1081, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1081, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1082
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):
 * 			params_c[i] = parameters[i]             # <<<<<<<<<<<<<<
 * 
 * 		result = bootstrap_uncertainty(n_bootstrap, n_data, n_params, data_c, params_c, param_distribution)
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1082, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1082, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1082, __pyx_L4_error)
      (__pyx_v_params_c[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1081
 * 		for i in range(n_data):
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):             # <<<<<<<<<<<<<<
 * 			params_c[i] = parameters[i]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1084
 * 			params_c[i] = parameters[i]
 * 
 * 		result = bootstrap_uncertainty(n_bootstrap, n_data, n_params, data_c, params_c, param_distribution)             # <<<<<<<<<<<<<<
 * 
 * 		if result > 0:
 */
    __pyx_v_result = bootstrap_uncertainty(__pyx_v_n_bootstrap, __pyx_v_n_data, __pyx_v_n_params, __pyx_v_data_c, __pyx_v_params_c, __pyx_v_param_distribution);

    /* "pyroxa/pybindings.pyx":1086
 * 		result = bootstrap_uncertainty(n_bootstrap, n_data, n_params, data_c, params_c, param_distribution)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Convert parameter distribution to list of lists
 * 			distribution = []
 */
    __pyx_t_7 = ((__pyx_v_result > 0) != 0);
    if (__pyx_t_7) {

      /* "pyroxa/pybindings.pyx":1088
 * 		if result > 0:
 * 			# Convert parameter distribution to list of lists
 * 			distribution = []             # <<<<<<<<<<<<<<
 * 			for i in range(n_params):
 * 				param_samples = [param_distribution[i * n_bootstrap + j] for j in range(n_bootstrap)]
 */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1088, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_distribution = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1089
 * 			# Convert parameter distribution to list of lists
 * 			distribution = []
 * 			for i in range(n_params):             # <<<<<<<<<<<<<<
 * 				param_samples = [param_distribution[i * n_bootstrap + j] for j in range(n_bootstrap)]
 * 				distribution.append(param_samples)
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1089, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1089, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
        __pyx_t_4 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1089, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1089, __pyx_L4_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_4)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1089, __pyx_L4_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1089, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1089, __pyx_L4_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1089, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_4(__pyx_t_2);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 1089, __pyx_L4_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "pyroxa/pybindings.pyx":1090
 * 			distribution = []
 * 			for i in range(n_params):
 * 				param_samples = [param_distribution[i * n_bootstrap + j] for j in range(n_bootstrap)]             # <<<<<<<<<<<<<<
 * 				distribution.append(param_samples)
 * 
 */
        { /* enter inner scope */
          __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1090, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_8 = __pyx_v_n_bootstrap;
          __pyx_t_9 = __pyx_t_8;
          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
            __pyx_9genexpr24__pyx_v_j = __pyx_t_10;
            __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_n_bootstrap); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1090, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_12 = PyNumber_Multiply(__pyx_v_i, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 1090, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_9genexpr24__pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1090, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_13 = PyNumber_Add(__pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1090, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_13); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1090, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = PyFloat_FromDouble((__pyx_v_param_distribution[__pyx_t_6])); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1090, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_13);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_13))) __PYX_ERR(1, 1090, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_param_samples, ((PyObject*)__pyx_t_3));
        __pyx_t_3 = 0;

        /* "pyroxa/pybindings.pyx":1091
 * 			for i in range(n_params):
 * 				param_samples = [param_distribution[i * n_bootstrap + j] for j in range(n_bootstrap)]
 * 				distribution.append(param_samples)             # <<<<<<<<<<<<<<
 * 
 * 			return {
 */
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_distribution, __pyx_v_param_samples); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(1, 1091, __pyx_L4_error)

        /* "pyroxa/pybindings.pyx":1089
 * 			# Convert parameter distribution to list of lists
 * 			distribution = []
 * 			for i in range(n_params):             # <<<<<<<<<<<<<<
 * 				param_samples = [param_distribution[i * n_bootstrap + j] for j in range(n_bootstrap)]
 * 				distribution.append(param_samples)
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1093
 * 				distribution.append(param_samples)
 * 
 * 			return {             # <<<<<<<<<<<<<<
 * 				'success': True,
 * 				'parameter_distribution': distribution,
 */
      __Pyx_XDECREF(__pyx_r);

      /* "pyroxa/pybindings.pyx":1094
 * 
 * 			return {
 * 				'success': True,             # <<<<<<<<<<<<<<
 * 				'parameter_distribution': distribution,
 * 				'n_bootstrap': n_bootstrap
 */
      __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1094, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_success, Py_True) < 0) __PYX_ERR(1, 1094, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1095
 * 			return {
 * 				'success': True,
 * 				'parameter_distribution': distribution,             # <<<<<<<<<<<<<<
 * 				'n_bootstrap': n_bootstrap
 * 			}
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_parameter_distribution, __pyx_v_distribution) < 0) __PYX_ERR(1, 1094, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1096
 * 				'success': True,
 * 				'parameter_distribution': distribution,
 * 				'n_bootstrap': n_bootstrap             # <<<<<<<<<<<<<<
 * 			}
 * 		else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n_bootstrap); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1096, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_n_bootstrap, __pyx_t_3) < 0) __PYX_ERR(1, 1094, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1086
 * 		result = bootstrap_uncertainty(n_bootstrap, n_data, n_params, data_c, params_c, param_distribution)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Convert parameter distribution to list of lists
 * 			distribution = []
 */
    }

    /* "pyroxa/pybindings.pyx":1099
 * 			}
 * 		else:
 * 			return {'success': False, 'parameter_distribution': []}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(data_c)
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1099, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_success, Py_False) < 0) __PYX_ERR(1, 1099, __pyx_L4_error)
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1099, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_parameter_distribution, __pyx_t_3) < 0) __PYX_ERR(1, 1099, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1101
 * 			return {'success': False, 'parameter_distribution': []}
 * 	finally:
 * 		free(data_c)             # <<<<<<<<<<<<<<
 * 		free(params_c)
 * 		free(param_distribution)
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __pyx_t_8 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
      {
        free(__pyx_v_data_c);

        /* "pyroxa/pybindings.pyx":1102
 * 	finally:
 * 		free(data_c)
 * 		free(params_c)             # <<<<<<<<<<<<<<
 * 		free(param_distribution)
 * 
 */
        free(__pyx_v_params_c);

        /* "pyroxa/pybindings.pyx":1103
 * 		free(data_c)
 * 		free(params_c)
 * 		free(param_distribution)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 10: Matrix operations
 */
        free(__pyx_v_param_distribution);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
      }
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
      __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
      __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_15;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_21 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1101
 * 			return {'success': False, 'parameter_distribution': []}
 * 	finally:
 * 		free(data_c)             # <<<<<<<<<<<<<<
 * 		free(params_c)
 * 		free(param_distribution)
 */
      free(__pyx_v_data_c);

      /* "pyroxa/pybindings.pyx":1102
 * 	finally:
 * 		free(data_c)
 * 		free(params_c)             # <<<<<<<<<<<<<<
 * 		free(param_distribution)
 * 
 */
      free(__pyx_v_params_c);

      /* "pyroxa/pybindings.pyx":1103
 * 		free(data_c)
 * 		free(params_c)
 * 		free(param_distribution)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 10: Matrix operations
 */
      free(__pyx_v_param_distribution);
      __pyx_r = __pyx_t_21;
      __pyx_t_21 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1070
 * 		free(var_params_c)
 * 
 * def py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000):             # <<<<<<<<<<<<<<
 * 	"""Bootstrap uncertainty analysis"""
 * 	cdef int n_data = len(data)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("pyroxa._pybindings.py_bootstrap_uncertainty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_distribution);
  __Pyx_XDECREF(__pyx_v_param_samples);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1106
 * 
 * # BATCH 10: Matrix operations
 * def py_matrix_multiply(A, B):             # <<<<<<<<<<<<<<
 * 	"""Matrix multiplication C = A * B"""
 * 	import numpy as np
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_89py_matrix_multiply(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_88py_matrix_multiply[] = "py_matrix_multiply(A, B)\nMatrix multiplication C = A * B";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_89py_matrix_multiply = {"py_matrix_multiply", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_89py_matrix_multiply, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_88py_matrix_multiply};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_89py_matrix_multiply(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_A = 0;
  PyObject *__pyx_v_B = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_matrix_multiply (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_B,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_matrix_multiply", 1, 2, 2, 1); __PYX_ERR(1, 1106, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_matrix_multiply") < 0)) __PYX_ERR(1, 1106, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_A = values[0];
    __pyx_v_B = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_matrix_multiply", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1106, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_matrix_multiply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_88py_matrix_multiply(__pyx_self, __pyx_v_A, __pyx_v_B);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_88py_matrix_multiply(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_A, PyObject *__pyx_v_B) {
  PyObject *__pyx_v_np = NULL;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_p;
  double *__pyx_v_A_c;
  double *__pyx_v_B_c;
  double *__pyx_v_C_c;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  double __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_matrix_multiply", 0);
  __Pyx_INCREF(__pyx_v_A);
  __Pyx_INCREF(__pyx_v_B);

  /* "pyroxa/pybindings.pyx":1108
 * def py_matrix_multiply(A, B):
 * 	"""Matrix multiplication C = A * B"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 	A = np.array(A)
 * 	B = np.array(B)
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1109
 * 	"""Matrix multiplication C = A * B"""
 * 	import numpy as np
 * 	A = np.array(A)             # <<<<<<<<<<<<<<
 * 	B = np.array(B)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_A) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_A);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_A, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1110
 * 	import numpy as np
 * 	A = np.array(A)
 * 	B = np.array(B)             # <<<<<<<<<<<<<<
 * 
 * 	if A.ndim != 2 or B.ndim != 2:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_B) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_B);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_B, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1112
 * 	B = np.array(B)
 * 
 * 	if A.ndim != 2 or B.ndim != 2:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Inputs must be 2D matrices")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_NeObjC(__pyx_t_1, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 1112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_B, __pyx_n_s_ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_NeObjC(__pyx_t_2, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 1112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "pyroxa/pybindings.pyx":1113
 * 
 * 	if A.ndim != 2 or B.ndim != 2:
 * 		raise ValueError("Inputs must be 2D matrices")             # <<<<<<<<<<<<<<
 * 
 * 	cdef int m = A.shape[0]
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1113, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1112
 * 	B = np.array(B)
 * 
 * 	if A.ndim != 2 or B.ndim != 2:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Inputs must be 2D matrices")
 * 
 */
  }

  /* "pyroxa/pybindings.pyx":1115
 * 		raise ValueError("Inputs must be 2D matrices")
 * 
 * 	cdef int m = A.shape[0]             # <<<<<<<<<<<<<<
 * 	cdef int n = A.shape[1]
 * 	cdef int p = B.shape[1]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_m = __pyx_t_6;

  /* "pyroxa/pybindings.pyx":1116
 * 
 * 	cdef int m = A.shape[0]
 * 	cdef int n = A.shape[1]             # <<<<<<<<<<<<<<
 * 	cdef int p = B.shape[1]
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n = __pyx_t_6;

  /* "pyroxa/pybindings.pyx":1117
 * 	cdef int m = A.shape[0]
 * 	cdef int n = A.shape[1]
 * 	cdef int p = B.shape[1]             # <<<<<<<<<<<<<<
 * 
 * 	if A.shape[1] != B.shape[0]:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_B, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_p = __pyx_t_6;

  /* "pyroxa/pybindings.pyx":1119
 * 	cdef int p = B.shape[1]
 * 
 * 	if A.shape[1] != B.shape[0]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Matrix dimensions incompatible for multiplication")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_B, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 1119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "pyroxa/pybindings.pyx":1120
 * 
 * 	if A.shape[1] != B.shape[0]:
 * 		raise ValueError("Matrix dimensions incompatible for multiplication")             # <<<<<<<<<<<<<<
 * 
 * 	cdef double* A_c = <double*>malloc(m * n * sizeof(double))
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1120, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1119
 * 	cdef int p = B.shape[1]
 * 
 * 	if A.shape[1] != B.shape[0]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Matrix dimensions incompatible for multiplication")
 * 
 */
  }

  /* "pyroxa/pybindings.pyx":1122
 * 		raise ValueError("Matrix dimensions incompatible for multiplication")
 * 
 * 	cdef double* A_c = <double*>malloc(m * n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* B_c = <double*>malloc(n * p * sizeof(double))
 * 	cdef double* C_c = <double*>malloc(m * p * sizeof(double))
 */
  __pyx_v_A_c = ((double *)malloc(((__pyx_v_m * __pyx_v_n) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1123
 * 
 * 	cdef double* A_c = <double*>malloc(m * n * sizeof(double))
 * 	cdef double* B_c = <double*>malloc(n * p * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* C_c = <double*>malloc(m * p * sizeof(double))
 * 
 */
  __pyx_v_B_c = ((double *)malloc(((__pyx_v_n * __pyx_v_p) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1124
 * 	cdef double* A_c = <double*>malloc(m * n * sizeof(double))
 * 	cdef double* B_c = <double*>malloc(n * p * sizeof(double))
 * 	cdef double* C_c = <double*>malloc(m * p * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_C_c = ((double *)malloc(((__pyx_v_m * __pyx_v_p) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1126
 * 	cdef double* C_c = <double*>malloc(m * p * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Flatten matrices to C arrays (row-major)
 * 		for i in range(m):
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1128
 * 	try:
 * 		# Flatten matrices to C arrays (row-major)
 * 		for i in range(m):             # <<<<<<<<<<<<<<
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_m); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1128, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1128, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1128, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1128, __pyx_L8_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1128, __pyx_L8_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1128, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1128, __pyx_L8_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1128, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_8(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1128, __pyx_L8_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1129
 * 		# Flatten matrices to C arrays (row-major)
 * 		for i in range(m):
 * 			for j in range(n):             # <<<<<<<<<<<<<<
 * 				A_c[i * n + j] = A[i, j]
 * 
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1129, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1129, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1129, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1129, __pyx_L8_error)
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1129, __pyx_L8_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1129, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1129, __pyx_L8_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1129, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          }
        } else {
          __pyx_t_1 = __pyx_t_10(__pyx_t_3);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 1129, __pyx_L8_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "pyroxa/pybindings.pyx":1130
 * 		for i in range(m):
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(n):
 */
        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1130, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_i);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_j);
        __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_A, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1130, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1130, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1130, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_1 = PyNumber_Multiply(__pyx_v_i, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1130, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyNumber_Add(__pyx_t_1, __pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1130, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_t_11); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1130, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        (__pyx_v_A_c[__pyx_t_13]) = __pyx_t_12;

        /* "pyroxa/pybindings.pyx":1129
 * 		# Flatten matrices to C arrays (row-major)
 * 		for i in range(m):
 * 			for j in range(n):             # <<<<<<<<<<<<<<
 * 				A_c[i * n + j] = A[i, j]
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1128
 * 	try:
 * 		# Flatten matrices to C arrays (row-major)
 * 		for i in range(m):             # <<<<<<<<<<<<<<
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1132
 * 				A_c[i * n + j] = A[i, j]
 * 
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			for j in range(p):
 * 				B_c[i * p + j] = B[i, j]
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1132, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1132, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1132, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1132, __pyx_L8_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1132, __pyx_L8_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1132, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1132, __pyx_L8_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1132, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_8(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1132, __pyx_L8_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1133
 * 
 * 		for i in range(n):
 * 			for j in range(p):             # <<<<<<<<<<<<<<
 * 				B_c[i * p + j] = B[i, j]
 * 
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_p); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1133, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1133, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
        __pyx_t_3 = __pyx_t_11; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1133, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1133, __pyx_L8_error)
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1133, __pyx_L8_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1133, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1133, __pyx_L8_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1133, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
          }
        } else {
          __pyx_t_11 = __pyx_t_10(__pyx_t_3);
          if (unlikely(!__pyx_t_11)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 1133, __pyx_L8_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_11);
        }
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "pyroxa/pybindings.pyx":1134
 * 		for i in range(n):
 * 			for j in range(p):
 * 				B_c[i * p + j] = B[i, j]             # <<<<<<<<<<<<<<
 * 
 * 		result = matrix_multiply(A_c, B_c, C_c, m, n, p)
 */
        __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1134, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_i);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_j);
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_B, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1134, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1134, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_p); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1134, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = PyNumber_Multiply(__pyx_v_i, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1134, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyNumber_Add(__pyx_t_11, __pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1134, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1134, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        (__pyx_v_B_c[__pyx_t_13]) = __pyx_t_12;

        /* "pyroxa/pybindings.pyx":1133
 * 
 * 		for i in range(n):
 * 			for j in range(p):             # <<<<<<<<<<<<<<
 * 				B_c[i * p + j] = B[i, j]
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1132
 * 				A_c[i * n + j] = A[i, j]
 * 
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			for j in range(p):
 * 				B_c[i * p + j] = B[i, j]
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1136
 * 				B_c[i * p + j] = B[i, j]
 * 
 * 		result = matrix_multiply(A_c, B_c, C_c, m, n, p)             # <<<<<<<<<<<<<<
 * 
 * 		if result == 0:  # C functions return 0 on success
 */
    __pyx_v_result = matrix_multiply(__pyx_v_A_c, __pyx_v_B_c, __pyx_v_C_c, __pyx_v_m, __pyx_v_n, __pyx_v_p);

    /* "pyroxa/pybindings.pyx":1138
 * 		result = matrix_multiply(A_c, B_c, C_c, m, n, p)
 * 
 * 		if result == 0:  # C functions return 0 on success             # <<<<<<<<<<<<<<
 * 			# Convert back to Python matrix
 * 			C = np.zeros((m, p))
 */
    __pyx_t_4 = ((__pyx_v_result == 0) != 0);
    if (likely(__pyx_t_4)) {

      /* "pyroxa/pybindings.pyx":1140
 * 		if result == 0:  # C functions return 0 on success
 * 			# Convert back to Python matrix
 * 			C = np.zeros((m, p))             # <<<<<<<<<<<<<<
 * 			for i in range(m):
 * 				for j in range(p):
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1140, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1140, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_p); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1140, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1140, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_11);
      __pyx_t_1 = 0;
      __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_2 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_11, __pyx_t_14) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_14);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1140, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_C = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1141
 * 			# Convert back to Python matrix
 * 			C = np.zeros((m, p))
 * 			for i in range(m):             # <<<<<<<<<<<<<<
 * 				for j in range(p):
 * 					C[i, j] = C_c[i * p + j]
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_m); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1141, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1141, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1141, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1141, __pyx_L8_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1141, __pyx_L8_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1141, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1141, __pyx_L8_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1141, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_8(__pyx_t_2);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 1141, __pyx_L8_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "pyroxa/pybindings.pyx":1142
 * 			C = np.zeros((m, p))
 * 			for i in range(m):
 * 				for j in range(p):             # <<<<<<<<<<<<<<
 * 					C[i, j] = C_c[i * p + j]
 * 			return C.tolist()
 */
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_p); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1142, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1142, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (likely(PyList_CheckExact(__pyx_t_14)) || PyTuple_CheckExact(__pyx_t_14)) {
          __pyx_t_3 = __pyx_t_14; __Pyx_INCREF(__pyx_t_3); __pyx_t_9 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_9 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1142, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_10 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1142, __pyx_L8_error)
        }
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        for (;;) {
          if (likely(!__pyx_t_10)) {
            if (likely(PyList_CheckExact(__pyx_t_3))) {
              if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_14 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_14); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1142, __pyx_L8_error)
              #else
              __pyx_t_14 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1142, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_14);
              #endif
            } else {
              if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_9); __Pyx_INCREF(__pyx_t_14); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1142, __pyx_L8_error)
              #else
              __pyx_t_14 = PySequence_ITEM(__pyx_t_3, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1142, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_14);
              #endif
            }
          } else {
            __pyx_t_14 = __pyx_t_10(__pyx_t_3);
            if (unlikely(!__pyx_t_14)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(1, 1142, __pyx_L8_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_14);
          }
          __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_14);
          __pyx_t_14 = 0;

          /* "pyroxa/pybindings.pyx":1143
 * 			for i in range(m):
 * 				for j in range(p):
 * 					C[i, j] = C_c[i * p + j]             # <<<<<<<<<<<<<<
 * 			return C.tolist()
 * 		else:
 */
          __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_p); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1143, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_11 = PyNumber_Multiply(__pyx_v_i, __pyx_t_14); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1143, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_14 = PyNumber_Add(__pyx_t_11, __pyx_v_j); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1143, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_t_14); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1143, __pyx_L8_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_14 = PyFloat_FromDouble((__pyx_v_C_c[__pyx_t_13])); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1143, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1143, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_v_i);
          __Pyx_GIVEREF(__pyx_v_i);
          PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_i);
          __Pyx_INCREF(__pyx_v_j);
          __Pyx_GIVEREF(__pyx_v_j);
          PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_j);
          if (unlikely(PyObject_SetItem(__pyx_v_C, __pyx_t_11, __pyx_t_14) < 0)) __PYX_ERR(1, 1143, __pyx_L8_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "pyroxa/pybindings.pyx":1142
 * 			C = np.zeros((m, p))
 * 			for i in range(m):
 * 				for j in range(p):             # <<<<<<<<<<<<<<
 * 					C[i, j] = C_c[i * p + j]
 * 			return C.tolist()
 */
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "pyroxa/pybindings.pyx":1141
 * 			# Convert back to Python matrix
 * 			C = np.zeros((m, p))
 * 			for i in range(m):             # <<<<<<<<<<<<<<
 * 				for j in range(p):
 * 					C[i, j] = C_c[i * p + j]
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1144
 * 				for j in range(p):
 * 					C[i, j] = C_c[i * p + j]
 * 			return C.tolist()             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise RuntimeError("Matrix multiplication failed")
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_C, __pyx_n_s_tolist); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1144, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_14 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_2 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1144, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L7_return;

      /* "pyroxa/pybindings.pyx":1138
 * 		result = matrix_multiply(A_c, B_c, C_c, m, n, p)
 * 
 * 		if result == 0:  # C functions return 0 on success             # <<<<<<<<<<<<<<
 * 			# Convert back to Python matrix
 * 			C = np.zeros((m, p))
 */
    }

    /* "pyroxa/pybindings.pyx":1146
 * 			return C.tolist()
 * 		else:
 * 			raise RuntimeError("Matrix multiplication failed")             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(A_c)
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1146, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 1146, __pyx_L8_error)
    }
  }

  /* "pyroxa/pybindings.pyx":1148
 * 			raise RuntimeError("Matrix multiplication failed")
 * 	finally:
 * 		free(A_c)             # <<<<<<<<<<<<<<
 * 		free(B_c)
 * 		free(C_c)
 */
  /*finally:*/ {
    __pyx_L8_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __pyx_t_6 = __pyx_lineno; __pyx_t_15 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
      {
        free(__pyx_v_A_c);

        /* "pyroxa/pybindings.pyx":1149
 * 	finally:
 * 		free(A_c)
 * 		free(B_c)             # <<<<<<<<<<<<<<
 * 		free(C_c)
 * 
 */
        free(__pyx_v_B_c);

        /* "pyroxa/pybindings.pyx":1150
 * 		free(A_c)
 * 		free(B_c)
 * 		free(C_c)             # <<<<<<<<<<<<<<
 * 
 * def py_matrix_invert(A):
 */
        free(__pyx_v_C_c);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_XGIVEREF(__pyx_t_22);
        __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      }
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_15; __pyx_filename = __pyx_t_16;
      goto __pyx_L1_error;
    }
    __pyx_L7_return: {
      __pyx_t_22 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1148
 * 			raise RuntimeError("Matrix multiplication failed")
 * 	finally:
 * 		free(A_c)             # <<<<<<<<<<<<<<
 * 		free(B_c)
 * 		free(C_c)
 */
      free(__pyx_v_A_c);

      /* "pyroxa/pybindings.pyx":1149
 * 	finally:
 * 		free(A_c)
 * 		free(B_c)             # <<<<<<<<<<<<<<
 * 		free(C_c)
 * 
 */
      free(__pyx_v_B_c);

      /* "pyroxa/pybindings.pyx":1150
 * 		free(A_c)
 * 		free(B_c)
 * 		free(C_c)             # <<<<<<<<<<<<<<
 * 
 * def py_matrix_invert(A):
 */
      free(__pyx_v_C_c);
      __pyx_r = __pyx_t_22;
      __pyx_t_22 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1106
 * 
 * # BATCH 10: Matrix operations
 * def py_matrix_multiply(A, B):             # <<<<<<<<<<<<<<
 * 	"""Matrix multiplication C = A * B"""
 * 	import numpy as np
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("pyroxa._pybindings.py_matrix_multiply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1152
 * 		free(C_c)
 * 
 * def py_matrix_invert(A):             # <<<<<<<<<<<<<<
 * 	"""Matrix inversion A_inv = A^(-1)"""
 * 	import numpy as np
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_91py_matrix_invert(PyObject *__pyx_self, PyObject *__pyx_v_A); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_90py_matrix_invert[] = "py_matrix_invert(A)\nMatrix inversion A_inv = A^(-1)";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_91py_matrix_invert = {"py_matrix_invert", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_91py_matrix_invert, METH_O, __pyx_doc_6pyroxa_11_pybindings_90py_matrix_invert};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_91py_matrix_invert(PyObject *__pyx_self, PyObject *__pyx_v_A) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_matrix_invert (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_90py_matrix_invert(__pyx_self, ((PyObject *)__pyx_v_A));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_90py_matrix_invert(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_A) {
  PyObject *__pyx_v_np = NULL;
  int __pyx_v_n;
  double *__pyx_v_A_c;
  double *__pyx_v_A_inv_c;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_A_inv = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  double __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_matrix_invert", 0);
  __Pyx_INCREF(__pyx_v_A);

  /* "pyroxa/pybindings.pyx":1154
 * def py_matrix_invert(A):
 * 	"""Matrix inversion A_inv = A^(-1)"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 	A = np.array(A)
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1155
 * 	"""Matrix inversion A_inv = A^(-1)"""
 * 	import numpy as np
 * 	A = np.array(A)             # <<<<<<<<<<<<<<
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_A) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_A);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_A, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1157
 * 	A = np.array(A)
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Input must be a square matrix")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_NeObjC(__pyx_t_1, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 1157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 1157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "pyroxa/pybindings.pyx":1158
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:
 * 		raise ValueError("Input must be a square matrix")             # <<<<<<<<<<<<<<
 * 
 * 	cdef int n = A.shape[0]
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1158, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1157
 * 	A = np.array(A)
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Input must be a square matrix")
 * 
 */
  }

  /* "pyroxa/pybindings.pyx":1160
 * 		raise ValueError("Input must be a square matrix")
 * 
 * 	cdef int n = A.shape[0]             # <<<<<<<<<<<<<<
 * 	cdef double* A_c = <double*>malloc(n * n * sizeof(double))
 * 	cdef double* A_inv_c = <double*>malloc(n * n * sizeof(double))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_n = __pyx_t_6;

  /* "pyroxa/pybindings.pyx":1161
 * 
 * 	cdef int n = A.shape[0]
 * 	cdef double* A_c = <double*>malloc(n * n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* A_inv_c = <double*>malloc(n * n * sizeof(double))
 * 
 */
  __pyx_v_A_c = ((double *)malloc(((__pyx_v_n * __pyx_v_n) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1162
 * 	cdef int n = A.shape[0]
 * 	cdef double* A_c = <double*>malloc(n * n * sizeof(double))
 * 	cdef double* A_inv_c = <double*>malloc(n * n * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_A_inv_c = ((double *)malloc(((__pyx_v_n * __pyx_v_n) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1164
 * 	cdef double* A_inv_c = <double*>malloc(n * n * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Flatten matrix to C array
 * 		for i in range(n):
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1166
 * 	try:
 * 		# Flatten matrix to C array
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]
 */
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1166, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1166, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1166, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1166, __pyx_L7_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1166, __pyx_L7_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1166, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1166, __pyx_L7_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1166, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_8(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1166, __pyx_L7_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1167
 * 		# Flatten matrix to C array
 * 		for i in range(n):
 * 			for j in range(n):             # <<<<<<<<<<<<<<
 * 				A_c[i * n + j] = A[i, j]
 * 
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1167, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1167, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1167, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1167, __pyx_L7_error)
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1167, __pyx_L7_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1167, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_1); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1167, __pyx_L7_error)
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1167, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          }
        } else {
          __pyx_t_1 = __pyx_t_10(__pyx_t_2);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 1167, __pyx_L7_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "pyroxa/pybindings.pyx":1168
 * 		for i in range(n):
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]             # <<<<<<<<<<<<<<
 * 
 * 		result = matrix_invert(A_c, A_inv_c, n)
 */
        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1168, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_i);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_j);
        __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_A, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1168, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1168, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1168, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_1 = PyNumber_Multiply(__pyx_v_i, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1168, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyNumber_Add(__pyx_t_1, __pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1168, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_t_11); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1168, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        (__pyx_v_A_c[__pyx_t_13]) = __pyx_t_12;

        /* "pyroxa/pybindings.pyx":1167
 * 		# Flatten matrix to C array
 * 		for i in range(n):
 * 			for j in range(n):             # <<<<<<<<<<<<<<
 * 				A_c[i * n + j] = A[i, j]
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1166
 * 	try:
 * 		# Flatten matrix to C array
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":1170
 * 				A_c[i * n + j] = A[i, j]
 * 
 * 		result = matrix_invert(A_c, A_inv_c, n)             # <<<<<<<<<<<<<<
 * 
 * 		if result == 0:  # C functions return 0 on success
 */
    __pyx_v_result = matrix_invert(__pyx_v_A_c, __pyx_v_A_inv_c, __pyx_v_n);

    /* "pyroxa/pybindings.pyx":1172
 * 		result = matrix_invert(A_c, A_inv_c, n)
 * 
 * 		if result == 0:  # C functions return 0 on success             # <<<<<<<<<<<<<<
 * 			# Convert back to Python matrix
 * 			A_inv = np.zeros((n, n))
 */
    __pyx_t_4 = ((__pyx_v_result == 0) != 0);
    if (likely(__pyx_t_4)) {

      /* "pyroxa/pybindings.pyx":1174
 * 		if result == 0:  # C functions return 0 on success
 * 			# Convert back to Python matrix
 * 			A_inv = np.zeros((n, n))             # <<<<<<<<<<<<<<
 * 			for i in range(n):
 * 				for j in range(n):
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1174, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1174, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1174, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1174, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_1);
      __pyx_t_11 = 0;
      __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_t_14) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_14);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1174, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_A_inv = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1175
 * 			# Convert back to Python matrix
 * 			A_inv = np.zeros((n, n))
 * 			for i in range(n):             # <<<<<<<<<<<<<<
 * 				for j in range(n):
 * 					A_inv[i, j] = A_inv_c[i * n + j]
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1175, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1175, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1175, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1175, __pyx_L7_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1175, __pyx_L7_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1175, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1175, __pyx_L7_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1175, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_8(__pyx_t_3);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 1175, __pyx_L7_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "pyroxa/pybindings.pyx":1176
 * 			A_inv = np.zeros((n, n))
 * 			for i in range(n):
 * 				for j in range(n):             # <<<<<<<<<<<<<<
 * 					A_inv[i, j] = A_inv_c[i * n + j]
 * 			return A_inv.tolist()
 */
        __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1176, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1176, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (likely(PyList_CheckExact(__pyx_t_14)) || PyTuple_CheckExact(__pyx_t_14)) {
          __pyx_t_2 = __pyx_t_14; __Pyx_INCREF(__pyx_t_2); __pyx_t_9 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_9 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1176, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1176, __pyx_L7_error)
        }
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        for (;;) {
          if (likely(!__pyx_t_10)) {
            if (likely(PyList_CheckExact(__pyx_t_2))) {
              if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_2)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_14 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_14); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1176, __pyx_L7_error)
              #else
              __pyx_t_14 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1176, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_14);
              #endif
            } else {
              if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_14); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1176, __pyx_L7_error)
              #else
              __pyx_t_14 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1176, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_14);
              #endif
            }
          } else {
            __pyx_t_14 = __pyx_t_10(__pyx_t_2);
            if (unlikely(!__pyx_t_14)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(1, 1176, __pyx_L7_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_14);
          }
          __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_14);
          __pyx_t_14 = 0;

          /* "pyroxa/pybindings.pyx":1177
 * 			for i in range(n):
 * 				for j in range(n):
 * 					A_inv[i, j] = A_inv_c[i * n + j]             # <<<<<<<<<<<<<<
 * 			return A_inv.tolist()
 * 		else:
 */
          __pyx_t_14 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1177, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_1 = PyNumber_Multiply(__pyx_v_i, __pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1177, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_14 = PyNumber_Add(__pyx_t_1, __pyx_v_j); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1177, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_t_14); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1177, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_14 = PyFloat_FromDouble((__pyx_v_A_inv_c[__pyx_t_13])); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1177, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1177, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_v_i);
          __Pyx_GIVEREF(__pyx_v_i);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_i);
          __Pyx_INCREF(__pyx_v_j);
          __Pyx_GIVEREF(__pyx_v_j);
          PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_j);
          if (unlikely(PyObject_SetItem(__pyx_v_A_inv, __pyx_t_1, __pyx_t_14) < 0)) __PYX_ERR(1, 1177, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "pyroxa/pybindings.pyx":1176
 * 			A_inv = np.zeros((n, n))
 * 			for i in range(n):
 * 				for j in range(n):             # <<<<<<<<<<<<<<
 * 					A_inv[i, j] = A_inv_c[i * n + j]
 * 			return A_inv.tolist()
 */
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "pyroxa/pybindings.pyx":1175
 * 			# Convert back to Python matrix
 * 			A_inv = np.zeros((n, n))
 * 			for i in range(n):             # <<<<<<<<<<<<<<
 * 				for j in range(n):
 * 					A_inv[i, j] = A_inv_c[i * n + j]
 */
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1178
 * 				for j in range(n):
 * 					A_inv[i, j] = A_inv_c[i * n + j]
 * 			return A_inv.tolist()             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise RuntimeError("Matrix inversion failed (matrix may be singular)")
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_A_inv, __pyx_n_s_tolist); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1178, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_14 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_3 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1178, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L6_return;

      /* "pyroxa/pybindings.pyx":1172
 * 		result = matrix_invert(A_c, A_inv_c, n)
 * 
 * 		if result == 0:  # C functions return 0 on success             # <<<<<<<<<<<<<<
 * 			# Convert back to Python matrix
 * 			A_inv = np.zeros((n, n))
 */
    }

    /* "pyroxa/pybindings.pyx":1180
 * 			return A_inv.tolist()
 * 		else:
 * 			raise RuntimeError("Matrix inversion failed (matrix may be singular)")             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(A_c)
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1180, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 1180, __pyx_L7_error)
    }
  }

  /* "pyroxa/pybindings.pyx":1182
 * 			raise RuntimeError("Matrix inversion failed (matrix may be singular)")
 * 	finally:
 * 		free(A_c)             # <<<<<<<<<<<<<<
 * 		free(A_inv_c)
 * 
 */
  /*finally:*/ {
    __pyx_L7_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __pyx_t_6 = __pyx_lineno; __pyx_t_15 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
      {
        free(__pyx_v_A_c);

        /* "pyroxa/pybindings.pyx":1183
 * 	finally:
 * 		free(A_c)
 * 		free(A_inv_c)             # <<<<<<<<<<<<<<
 * 
 * # Simplified version using NumPy
 */
        free(__pyx_v_A_inv_c);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_XGIVEREF(__pyx_t_22);
        __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      }
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_15; __pyx_filename = __pyx_t_16;
      goto __pyx_L1_error;
    }
    __pyx_L6_return: {
      __pyx_t_22 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1182
 * 			raise RuntimeError("Matrix inversion failed (matrix may be singular)")
 * 	finally:
 * 		free(A_c)             # <<<<<<<<<<<<<<
 * 		free(A_inv_c)
 * 
 */
      free(__pyx_v_A_c);

      /* "pyroxa/pybindings.pyx":1183
 * 	finally:
 * 		free(A_c)
 * 		free(A_inv_c)             # <<<<<<<<<<<<<<
 * 
 * # Simplified version using NumPy
 */
      free(__pyx_v_A_inv_c);
      __pyx_r = __pyx_t_22;
      __pyx_t_22 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1152
 * 		free(C_c)
 * 
 * def py_matrix_invert(A):             # <<<<<<<<<<<<<<
 * 	"""Matrix inversion A_inv = A^(-1)"""
 * 	import numpy as np
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("pyroxa._pybindings.py_matrix_invert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_A_inv);
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1186
 * 
 * # Simplified version using NumPy
 * def py_solve_linear_system(A, b):             # <<<<<<<<<<<<<<
 * 	"""Solve linear system Ax = b"""
 * 	import numpy as np
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_93py_solve_linear_system(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_92py_solve_linear_system[] = "py_solve_linear_system(A, b)\nSolve linear system Ax = b";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_93py_solve_linear_system = {"py_solve_linear_system", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_93py_solve_linear_system, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_92py_solve_linear_system};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_93py_solve_linear_system(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_A = 0;
  PyObject *__pyx_v_b = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_solve_linear_system (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_b,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_solve_linear_system", 1, 2, 2, 1); __PYX_ERR(1, 1186, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_solve_linear_system") < 0)) __PYX_ERR(1, 1186, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_A = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_solve_linear_system", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1186, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_solve_linear_system", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_92py_solve_linear_system(__pyx_self, __pyx_v_A, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_92py_solve_linear_system(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_A, PyObject *__pyx_v_b) {
  PyObject *__pyx_v_np = NULL;
  int __pyx_v_n;
  double *__pyx_v_A_c;
  double *__pyx_v_b_c;
  double *__pyx_v_x_c;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_x = NULL;
  int __pyx_9genexpr25__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  double __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_solve_linear_system", 0);
  __Pyx_INCREF(__pyx_v_A);
  __Pyx_INCREF(__pyx_v_b);

  /* "pyroxa/pybindings.pyx":1188
 * def py_solve_linear_system(A, b):
 * 	"""Solve linear system Ax = b"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 	A = np.array(A)
 * 	b = np.array(b)
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1189
 * 	"""Solve linear system Ax = b"""
 * 	import numpy as np
 * 	A = np.array(A)             # <<<<<<<<<<<<<<
 * 	b = np.array(b)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_A) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_A);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_A, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1190
 * 	import numpy as np
 * 	A = np.array(A)
 * 	b = np.array(b)             # <<<<<<<<<<<<<<
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_b) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_b);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_b, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1192
 * 	b = np.array(b)
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("A must be a square matrix")
 * 	if b.ndim != 1 or len(b) != A.shape[0]:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_NeObjC(__pyx_t_1, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 1192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 1192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "pyroxa/pybindings.pyx":1193
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:
 * 		raise ValueError("A must be a square matrix")             # <<<<<<<<<<<<<<
 * 	if b.ndim != 1 or len(b) != A.shape[0]:
 * 		raise ValueError("b must be a vector with length equal to A's dimension")
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1193, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1192
 * 	b = np.array(b)
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("A must be a square matrix")
 * 	if b.ndim != 1 or len(b) != A.shape[0]:
 */
  }

  /* "pyroxa/pybindings.pyx":1194
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:
 * 		raise ValueError("A must be a square matrix")
 * 	if b.ndim != 1 or len(b) != A.shape[0]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("b must be a vector with length equal to A's dimension")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_b, __pyx_n_s_ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_NeObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 1194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_6 = PyObject_Length(__pyx_v_b); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1194, __pyx_L1_error)
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(1, 1194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "pyroxa/pybindings.pyx":1195
 * 		raise ValueError("A must be a square matrix")
 * 	if b.ndim != 1 or len(b) != A.shape[0]:
 * 		raise ValueError("b must be a vector with length equal to A's dimension")             # <<<<<<<<<<<<<<
 * 
 * 	cdef int n = A.shape[0]
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1195, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1194
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:
 * 		raise ValueError("A must be a square matrix")
 * 	if b.ndim != 1 or len(b) != A.shape[0]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("b must be a vector with length equal to A's dimension")
 * 
 */
  }

  /* "pyroxa/pybindings.pyx":1197
 * 		raise ValueError("b must be a vector with length equal to A's dimension")
 * 
 * 	cdef int n = A.shape[0]             # <<<<<<<<<<<<<<
 * 	cdef double* A_c = <double*>malloc(n * n * sizeof(double))
 * 	cdef double* b_c = <double*>malloc(n * sizeof(double))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n = __pyx_t_7;

  /* "pyroxa/pybindings.pyx":1198
 * 
 * 	cdef int n = A.shape[0]
 * 	cdef double* A_c = <double*>malloc(n * n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* b_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* x_c = <double*>malloc(n * sizeof(double))
 */
  __pyx_v_A_c = ((double *)malloc(((__pyx_v_n * __pyx_v_n) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1199
 * 	cdef int n = A.shape[0]
 * 	cdef double* A_c = <double*>malloc(n * n * sizeof(double))
 * 	cdef double* b_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* x_c = <double*>malloc(n * sizeof(double))
 * 
 */
  __pyx_v_b_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1200
 * 	cdef double* A_c = <double*>malloc(n * n * sizeof(double))
 * 	cdef double* b_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* x_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_x_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1202
 * 	cdef double* x_c = <double*>malloc(n * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Flatten to C arrays
 * 		for i in range(n):
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1204
 * 	try:
 * 		# Flatten to C arrays
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1204, __pyx_L10_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1204, __pyx_L10_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1204, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1204, __pyx_L10_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 1204, __pyx_L10_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1204, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 1204, __pyx_L10_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1204, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_8(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1204, __pyx_L10_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1205
 * 		# Flatten to C arrays
 * 		for i in range(n):
 * 			for j in range(n):             # <<<<<<<<<<<<<<
 * 				A_c[i * n + j] = A[i, j]
 * 			b_c[i] = b[i]
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1205, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1205, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1205, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1205, __pyx_L10_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1205, __pyx_L10_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1205, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_9); __Pyx_INCREF(__pyx_t_3); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(1, 1205, __pyx_L10_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1205, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_10(__pyx_t_2);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 1205, __pyx_L10_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "pyroxa/pybindings.pyx":1206
 * 		for i in range(n):
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]             # <<<<<<<<<<<<<<
 * 			b_c[i] = b[i]
 * 
 */
        __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1206, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_i);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_j);
        __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_A, __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1206, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1206, __pyx_L10_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1206, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_3 = PyNumber_Multiply(__pyx_v_i, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1206, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyNumber_Add(__pyx_t_3, __pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1206, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_13 = __Pyx_PyIndex_AsSsize_t(__pyx_t_11); if (unlikely((__pyx_t_13 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1206, __pyx_L10_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        (__pyx_v_A_c[__pyx_t_13]) = __pyx_t_12;

        /* "pyroxa/pybindings.pyx":1205
 * 		# Flatten to C arrays
 * 		for i in range(n):
 * 			for j in range(n):             # <<<<<<<<<<<<<<
 * 				A_c[i * n + j] = A[i, j]
 * 			b_c[i] = b[i]
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1207
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]
 * 			b_c[i] = b[i]             # <<<<<<<<<<<<<<
 * 
 * 		result = solve_linear_system(A_c, b_c, x_c, n)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_b, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1207, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1207, __pyx_L10_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1207, __pyx_L10_error)
      (__pyx_v_b_c[__pyx_t_9]) = __pyx_t_12;

      /* "pyroxa/pybindings.pyx":1204
 * 	try:
 * 		# Flatten to C arrays
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyroxa/pybindings.pyx":1209
 * 			b_c[i] = b[i]
 * 
 * 		result = solve_linear_system(A_c, b_c, x_c, n)             # <<<<<<<<<<<<<<
 * 
 * 		if result == 0:  # C functions return 0 on success
 */
    __pyx_v_result = solve_linear_system(__pyx_v_A_c, __pyx_v_b_c, __pyx_v_x_c, __pyx_v_n);

    /* "pyroxa/pybindings.pyx":1211
 * 		result = solve_linear_system(A_c, b_c, x_c, n)
 * 
 * 		if result == 0:  # C functions return 0 on success             # <<<<<<<<<<<<<<
 * 			# Convert solution to Python list
 * 			x = [x_c[i] for i in range(n)]
 */
    __pyx_t_4 = ((__pyx_v_result == 0) != 0);
    if (likely(__pyx_t_4)) {

      /* "pyroxa/pybindings.pyx":1213
 * 		if result == 0:  # C functions return 0 on success
 * 			# Convert solution to Python list
 * 			x = [x_c[i] for i in range(n)]             # <<<<<<<<<<<<<<
 * 			return x
 * 		else:
 */
      { /* enter inner scope */
        __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1213, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = __pyx_v_n;
        __pyx_t_14 = __pyx_t_7;
        for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
          __pyx_9genexpr25__pyx_v_i = __pyx_t_15;
          __pyx_t_2 = PyFloat_FromDouble((__pyx_v_x_c[__pyx_9genexpr25__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1213, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_2);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 1213, __pyx_L10_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
      } /* exit inner scope */
      __pyx_v_x = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":1214
 * 			# Convert solution to Python list
 * 			x = [x_c[i] for i in range(n)]
 * 			return x             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise RuntimeError("Linear system solve failed (matrix may be singular)")
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_x);
      __pyx_r = __pyx_v_x;
      goto __pyx_L9_return;

      /* "pyroxa/pybindings.pyx":1211
 * 		result = solve_linear_system(A_c, b_c, x_c, n)
 * 
 * 		if result == 0:  # C functions return 0 on success             # <<<<<<<<<<<<<<
 * 			# Convert solution to Python list
 * 			x = [x_c[i] for i in range(n)]
 */
    }

    /* "pyroxa/pybindings.pyx":1216
 * 			return x
 * 		else:
 * 			raise RuntimeError("Linear system solve failed (matrix may be singular)")             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(A_c)
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1216, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(1, 1216, __pyx_L10_error)
    }
  }

  /* "pyroxa/pybindings.pyx":1218
 * 			raise RuntimeError("Linear system solve failed (matrix may be singular)")
 * 	finally:
 * 		free(A_c)             # <<<<<<<<<<<<<<
 * 		free(b_c)
 * 		free(x_c)
 */
  /*finally:*/ {
    __pyx_L10_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __pyx_t_7 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
      {
        free(__pyx_v_A_c);

        /* "pyroxa/pybindings.pyx":1219
 * 	finally:
 * 		free(A_c)
 * 		free(b_c)             # <<<<<<<<<<<<<<
 * 		free(x_c)
 * 
 */
        free(__pyx_v_b_c);

        /* "pyroxa/pybindings.pyx":1220
 * 		free(A_c)
 * 		free(b_c)
 * 		free(x_c)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 11: Advanced optimization and sensitivity analysis
 */
        free(__pyx_v_x_c);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_XGIVEREF(__pyx_t_22);
        __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      }
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_16;
      goto __pyx_L1_error;
    }
    __pyx_L9_return: {
      __pyx_t_22 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1218
 * 			raise RuntimeError("Linear system solve failed (matrix may be singular)")
 * 	finally:
 * 		free(A_c)             # <<<<<<<<<<<<<<
 * 		free(b_c)
 * 		free(x_c)
 */
      free(__pyx_v_A_c);

      /* "pyroxa/pybindings.pyx":1219
 * 	finally:
 * 		free(A_c)
 * 		free(b_c)             # <<<<<<<<<<<<<<
 * 		free(x_c)
 * 
 */
      free(__pyx_v_b_c);

      /* "pyroxa/pybindings.pyx":1220
 * 		free(A_c)
 * 		free(b_c)
 * 		free(x_c)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 11: Advanced optimization and sensitivity analysis
 */
      free(__pyx_v_x_c);
      __pyx_r = __pyx_t_22;
      __pyx_t_22 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1186
 * 
 * # Simplified version using NumPy
 * def py_solve_linear_system(A, b):             # <<<<<<<<<<<<<<
 * 	"""Solve linear system Ax = b"""
 * 	import numpy as np
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyroxa._pybindings.py_solve_linear_system", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1223
 * 
 * # BATCH 11: Advanced optimization and sensitivity analysis
 * def py_calculate_sensitivity(params, concentrations, rates, n_params, n_species):             # <<<<<<<<<<<<<<
 * 	"""Calculate sensitivity matrix for parameter estimation"""
 * 	# Simple implementation matching test interface
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_95py_calculate_sensitivity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_94py_calculate_sensitivity[] = "py_calculate_sensitivity(params, concentrations, rates, n_params, n_species)\nCalculate sensitivity matrix for parameter estimation";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_95py_calculate_sensitivity = {"py_calculate_sensitivity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_95py_calculate_sensitivity, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_94py_calculate_sensitivity};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_95py_calculate_sensitivity(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_params = 0;
  PyObject *__pyx_v_concentrations = 0;
  PyObject *__pyx_v_rates = 0;
  PyObject *__pyx_v_n_params = 0;
  PyObject *__pyx_v_n_species = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_sensitivity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_params,&__pyx_n_s_concentrations,&__pyx_n_s_rates,&__pyx_n_s_n_params,&__pyx_n_s_n_species,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_params)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_concentrations)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_sensitivity", 1, 5, 5, 1); __PYX_ERR(1, 1223, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rates)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_sensitivity", 1, 5, 5, 2); __PYX_ERR(1, 1223, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_params)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_sensitivity", 1, 5, 5, 3); __PYX_ERR(1, 1223, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_species)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_sensitivity", 1, 5, 5, 4); __PYX_ERR(1, 1223, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_calculate_sensitivity") < 0)) __PYX_ERR(1, 1223, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_params = values[0];
    __pyx_v_concentrations = values[1];
    __pyx_v_rates = values[2];
    __pyx_v_n_params = values[3];
    __pyx_v_n_species = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_sensitivity", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1223, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_sensitivity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_94py_calculate_sensitivity(__pyx_self, __pyx_v_params, __pyx_v_concentrations, __pyx_v_rates, __pyx_v_n_params, __pyx_v_n_species);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_94py_calculate_sensitivity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_params, PyObject *__pyx_v_concentrations, PyObject *__pyx_v_rates, PyObject *__pyx_v_n_params, PyObject *__pyx_v_n_species) {
  PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_sensitivity_matrix = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_sensitivity", 0);

  /* "pyroxa/pybindings.pyx":1226
 * 	"""Calculate sensitivity matrix for parameter estimation"""
 * 	# Simple implementation matching test interface
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 	# Create a simple sensitivity matrix as output
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1229
 * 
 * 	# Create a simple sensitivity matrix as output
 * 	sensitivity_matrix = np.zeros((n_params, n_species))             # <<<<<<<<<<<<<<
 * 
 * 	# Fill with simple finite difference approximation
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_n_params);
  __Pyx_GIVEREF(__pyx_v_n_params);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_n_params);
  __Pyx_INCREF(__pyx_v_n_species);
  __Pyx_GIVEREF(__pyx_v_n_species);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_n_species);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_sensitivity_matrix = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1232
 * 
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_params):             # <<<<<<<<<<<<<<
 * 		for j in range(n_species):
 * 			# Simple sensitivity: how concentration j changes with parameter i
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_n_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1232, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 1232, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 1232, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1232, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1232, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyroxa/pybindings.pyx":1233
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_params):
 * 		for j in range(n_species):             # <<<<<<<<<<<<<<
 * 			# Simple sensitivity: how concentration j changes with parameter i
 * 			sensitivity_matrix[i, j] = concentrations[j] * rates[j] * params[i] * 0.01
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_n_species); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1233, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1233, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1233, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1233, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1233, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1233, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_8(__pyx_t_3);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1233, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":1235
 * 		for j in range(n_species):
 * 			# Simple sensitivity: how concentration j changes with parameter i
 * 			sensitivity_matrix[i, j] = concentrations[j] * rates[j] * params[i] * 0.01             # <<<<<<<<<<<<<<
 * 
 * 	return sensitivity_matrix.tolist()
 */
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_concentrations, __pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_rates, __pyx_v_j); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = PyNumber_Multiply(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_params, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyNumber_Multiply(__pyx_t_9, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_float_0_01); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_i);
      __Pyx_INCREF(__pyx_v_j);
      __Pyx_GIVEREF(__pyx_v_j);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_j);
      if (unlikely(PyObject_SetItem(__pyx_v_sensitivity_matrix, __pyx_t_1, __pyx_t_4) < 0)) __PYX_ERR(1, 1235, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1233
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_params):
 * 		for j in range(n_species):             # <<<<<<<<<<<<<<
 * 			# Simple sensitivity: how concentration j changes with parameter i
 * 			sensitivity_matrix[i, j] = concentrations[j] * rates[j] * params[i] * 0.01
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":1232
 * 
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_params):             # <<<<<<<<<<<<<<
 * 		for j in range(n_species):
 * 			# Simple sensitivity: how concentration j changes with parameter i
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1237
 * 			sensitivity_matrix[i, j] = concentrations[j] * rates[j] * params[i] * 0.01
 * 
 * 	return sensitivity_matrix.tolist()             # <<<<<<<<<<<<<<
 * 
 * 	# Simplified reaction indices (assumes single reactant/product)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_sensitivity_matrix, __pyx_n_s_tolist); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":1223
 * 
 * # BATCH 11: Advanced optimization and sensitivity analysis
 * def py_calculate_sensitivity(params, concentrations, rates, n_params, n_species):             # <<<<<<<<<<<<<<
 * 	"""Calculate sensitivity matrix for parameter estimation"""
 * 	# Simple implementation matching test interface
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_sensitivity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_sensitivity_matrix);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1286
 * 		free(prod_idx); free(prod_nu); free(prod_off)
 * 
 * def py_calculate_jacobian(y, dydt, n_species):             # <<<<<<<<<<<<<<
 * 	"""Calculate Jacobian matrix for parameter estimation"""
 * 	import numpy as np
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_97py_calculate_jacobian(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_96py_calculate_jacobian[] = "py_calculate_jacobian(y, dydt, n_species)\nCalculate Jacobian matrix for parameter estimation";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_97py_calculate_jacobian = {"py_calculate_jacobian", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_97py_calculate_jacobian, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_96py_calculate_jacobian};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_97py_calculate_jacobian(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_dydt = 0;
  PyObject *__pyx_v_n_species = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_jacobian (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_dydt,&__pyx_n_s_n_species,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dydt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_jacobian", 1, 3, 3, 1); __PYX_ERR(1, 1286, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_species)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_jacobian", 1, 3, 3, 2); __PYX_ERR(1, 1286, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_calculate_jacobian") < 0)) __PYX_ERR(1, 1286, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_y = values[0];
    __pyx_v_dydt = values[1];
    __pyx_v_n_species = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_jacobian", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1286, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_jacobian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_96py_calculate_jacobian(__pyx_self, __pyx_v_y, __pyx_v_dydt, __pyx_v_n_species);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_96py_calculate_jacobian(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_dydt, PyObject *__pyx_v_n_species) {
  PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_jacobian = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_jacobian", 0);

  /* "pyroxa/pybindings.pyx":1288
 * def py_calculate_jacobian(y, dydt, n_species):
 * 	"""Calculate Jacobian matrix for parameter estimation"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 	# Create a simple Jacobian matrix
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1291
 * 
 * 	# Create a simple Jacobian matrix
 * 	jacobian = np.zeros((n_species, n_species))             # <<<<<<<<<<<<<<
 * 
 * 	# Fill with simple finite difference approximation
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_n_species);
  __Pyx_GIVEREF(__pyx_v_n_species);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_n_species);
  __Pyx_INCREF(__pyx_v_n_species);
  __Pyx_GIVEREF(__pyx_v_n_species);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_n_species);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_jacobian = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1294
 * 
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_species):             # <<<<<<<<<<<<<<
 * 		for j in range(n_species):
 * 			if i == j:
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_n_species); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1294, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 1294, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1294, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 1294, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1294, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1294, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyroxa/pybindings.pyx":1295
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_species):
 * 		for j in range(n_species):             # <<<<<<<<<<<<<<
 * 			if i == j:
 * 				jacobian[i, j] = -dydt[i] / y[i] if y[i] != 0 else -1.0
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_n_species); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1295, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1295, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1295, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 1295, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1295, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_8(__pyx_t_3);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1295, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":1296
 * 	for i in range(n_species):
 * 		for j in range(n_species):
 * 			if i == j:             # <<<<<<<<<<<<<<
 * 				jacobian[i, j] = -dydt[i] / y[i] if y[i] != 0 else -1.0
 * 			else:
 */
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_i, __pyx_v_j, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1296, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 1296, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_9) {

        /* "pyroxa/pybindings.pyx":1297
 * 		for j in range(n_species):
 * 			if i == j:
 * 				jacobian[i, j] = -dydt[i] / y[i] if y[i] != 0 else -1.0             # <<<<<<<<<<<<<<
 * 			else:
 * 				jacobian[i, j] = 0.1 * dydt[j] / y[i] if y[i] != 0 else 0.0
 */
        __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_y, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1297, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = __Pyx_PyInt_NeObjC(__pyx_t_4, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1297, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 1297, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_9) {
          __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_v_dydt, __pyx_v_i); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1297, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_4 = PyNumber_Negative(__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1297, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_v_y, __pyx_v_i); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1297, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1297, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_1 = __pyx_t_11;
          __pyx_t_11 = 0;
        } else {
          __Pyx_INCREF(__pyx_float_neg_1_0);
          __pyx_t_1 = __pyx_float_neg_1_0;
        }
        __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1297, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_i);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_j);
        if (unlikely(PyObject_SetItem(__pyx_v_jacobian, __pyx_t_11, __pyx_t_1) < 0)) __PYX_ERR(1, 1297, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "pyroxa/pybindings.pyx":1296
 * 	for i in range(n_species):
 * 		for j in range(n_species):
 * 			if i == j:             # <<<<<<<<<<<<<<
 * 				jacobian[i, j] = -dydt[i] / y[i] if y[i] != 0 else -1.0
 * 			else:
 */
        goto __pyx_L7;
      }

      /* "pyroxa/pybindings.pyx":1299
 * 				jacobian[i, j] = -dydt[i] / y[i] if y[i] != 0 else -1.0
 * 			else:
 * 				jacobian[i, j] = 0.1 * dydt[j] / y[i] if y[i] != 0 else 0.0             # <<<<<<<<<<<<<<
 * 
 * 	return jacobian.tolist()
 */
      /*else*/ {
        __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_y, __pyx_v_i); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = __Pyx_PyInt_NeObjC(__pyx_t_11, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 1299, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_9) {
          __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_v_dydt, __pyx_v_j); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1299, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = PyNumber_Multiply(__pyx_float_0_1, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1299, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_v_y, __pyx_v_i); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1299, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_11, __pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1299, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_1 = __pyx_t_4;
          __pyx_t_4 = 0;
        } else {
          __Pyx_INCREF(__pyx_float_0_0);
          __pyx_t_1 = __pyx_float_0_0;
        }
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1299, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_i);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_j);
        if (unlikely(PyObject_SetItem(__pyx_v_jacobian, __pyx_t_4, __pyx_t_1) < 0)) __PYX_ERR(1, 1299, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L7:;

      /* "pyroxa/pybindings.pyx":1295
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_species):
 * 		for j in range(n_species):             # <<<<<<<<<<<<<<
 * 			if i == j:
 * 				jacobian[i, j] = -dydt[i] / y[i] if y[i] != 0 else -1.0
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":1294
 * 
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_species):             # <<<<<<<<<<<<<<
 * 		for j in range(n_species):
 * 			if i == j:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1301
 * 				jacobian[i, j] = 0.1 * dydt[j] / y[i] if y[i] != 0 else 0.0
 * 
 * 	return jacobian.tolist()             # <<<<<<<<<<<<<<
 * 
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_jacobian, __pyx_n_s_tolist); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":1286
 * 		free(prod_idx); free(prod_nu); free(prod_off)
 * 
 * def py_calculate_jacobian(y, dydt, n_species):             # <<<<<<<<<<<<<<
 * 	"""Calculate Jacobian matrix for parameter estimation"""
 * 	import numpy as np
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_jacobian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_jacobian);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1303
 * 	return jacobian.tolist()
 * 
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):             # <<<<<<<<<<<<<<
 * 	"""Perform stability analysis around steady state"""
 * 	import numpy as np
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_99py_stability_analysis(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_98py_stability_analysis[] = "py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0)\nPerform stability analysis around steady state";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_99py_stability_analysis = {"py_stability_analysis", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_99py_stability_analysis, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_98py_stability_analysis};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_99py_stability_analysis(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_steady_state = 0;
  PyObject *__pyx_v_n_species = 0;
  PyObject *__pyx_v_temperature = 0;
  PyObject *__pyx_v_pressure = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_stability_analysis (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_steady_state,&__pyx_n_s_n_species,&__pyx_n_s_temperature,&__pyx_n_s_pressure,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)__pyx_float_298_15);
    values[3] = ((PyObject *)__pyx_float_101325_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_steady_state)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_species)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_stability_analysis", 0, 2, 4, 1); __PYX_ERR(1, 1303, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_temperature);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pressure);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_stability_analysis") < 0)) __PYX_ERR(1, 1303, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_steady_state = values[0];
    __pyx_v_n_species = values[1];
    __pyx_v_temperature = values[2];
    __pyx_v_pressure = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_stability_analysis", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1303, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_stability_analysis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_98py_stability_analysis(__pyx_self, __pyx_v_steady_state, __pyx_v_n_species, __pyx_v_temperature, __pyx_v_pressure);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pyroxa_11_pybindings_21py_stability_analysis_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyroxa/pybindings.pyx":1314
 * 		eigenvalues.append(eigenval)
 * 
 * 	is_stable = all(ev < 0 for ev in eigenvalues)             # <<<<<<<<<<<<<<
 * 
 * 	return {
 */

static PyObject *__pyx_pf_6pyroxa_11_pybindings_21py_stability_analysis_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr(__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 1314, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pyroxa_11_pybindings_21py_stability_analysis_2generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_py_stability_analysis_locals_gen, __pyx_n_s_pyroxa__pybindings); if (unlikely(!gen)) __PYX_ERR(1, 1314, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_stability_analysis.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pyroxa_11_pybindings_21py_stability_analysis_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1314, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_eigenvalues)) { __Pyx_RaiseClosureNameError("eigenvalues"); __PYX_ERR(1, 1314, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_eigenvalues == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 1314, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_eigenvalues; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1314, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ev);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ev, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_ev, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1314, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 1314, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = ((!__pyx_t_4) != 0);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1303
 * 	return jacobian.tolist()
 * 
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):             # <<<<<<<<<<<<<<
 * 	"""Perform stability analysis around steady state"""
 * 	import numpy as np
 */

static PyObject *__pyx_pf_6pyroxa_11_pybindings_98py_stability_analysis(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_steady_state, PyObject *__pyx_v_n_species, PyObject *__pyx_v_temperature, PyObject *__pyx_v_pressure) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis *__pyx_cur_scope;
  CYTHON_UNUSED PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_eigenval = NULL;
  PyObject *__pyx_v_is_stable = NULL;
  PyObject *__pyx_gb_6pyroxa_11_pybindings_21py_stability_analysis_2generator1 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_stability_analysis", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis(__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 1303, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "pyroxa/pybindings.pyx":1305
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):
 * 	"""Perform stability analysis around steady state"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 	# Create a simple stability analysis result
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1308
 * 
 * 	# Create a simple stability analysis result
 * 	eigenvalues = []             # <<<<<<<<<<<<<<
 * 	for i in range(n_species):
 * 		# Simple eigenvalue calculation based on steady state
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_eigenvalues = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1309
 * 	# Create a simple stability analysis result
 * 	eigenvalues = []
 * 	for i in range(n_species):             # <<<<<<<<<<<<<<
 * 		# Simple eigenvalue calculation based on steady state
 * 		eigenval = -steady_state[i] - 0.1 * i
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_n_species); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1309, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1309, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1309, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1309, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1309, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1309, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyroxa/pybindings.pyx":1311
 * 	for i in range(n_species):
 * 		# Simple eigenvalue calculation based on steady state
 * 		eigenval = -steady_state[i] - 0.1 * i             # <<<<<<<<<<<<<<
 * 		eigenvalues.append(eigenval)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_steady_state, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyNumber_Negative(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Multiply(__pyx_float_0_1, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_eigenval, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pyroxa/pybindings.pyx":1312
 * 		# Simple eigenvalue calculation based on steady state
 * 		eigenval = -steady_state[i] - 0.1 * i
 * 		eigenvalues.append(eigenval)             # <<<<<<<<<<<<<<
 * 
 * 	is_stable = all(ev < 0 for ev in eigenvalues)
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_eigenvalues, __pyx_v_eigenval); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(1, 1312, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1309
 * 	# Create a simple stability analysis result
 * 	eigenvalues = []
 * 	for i in range(n_species):             # <<<<<<<<<<<<<<
 * 		# Simple eigenvalue calculation based on steady state
 * 		eigenval = -steady_state[i] - 0.1 * i
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1314
 * 		eigenvalues.append(eigenval)
 * 
 * 	is_stable = all(ev < 0 for ev in eigenvalues)             # <<<<<<<<<<<<<<
 * 
 * 	return {
 */
  __pyx_t_2 = __pyx_pf_6pyroxa_11_pybindings_21py_stability_analysis_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_is_stable = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "pyroxa/pybindings.pyx":1316
 * 	is_stable = all(ev < 0 for ev in eigenvalues)
 * 
 * 	return {             # <<<<<<<<<<<<<<
 * 		'eigenvalues': eigenvalues,
 * 		'is_stable': is_stable,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "pyroxa/pybindings.pyx":1317
 * 
 * 	return {
 * 		'eigenvalues': eigenvalues,             # <<<<<<<<<<<<<<
 * 		'is_stable': is_stable,
 * 		'temperature': temperature,
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_eigenvalues, __pyx_cur_scope->__pyx_v_eigenvalues) < 0) __PYX_ERR(1, 1317, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1318
 * 	return {
 * 		'eigenvalues': eigenvalues,
 * 		'is_stable': is_stable,             # <<<<<<<<<<<<<<
 * 		'temperature': temperature,
 * 		'pressure': pressure
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_is_stable, __pyx_v_is_stable) < 0) __PYX_ERR(1, 1317, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1319
 * 		'eigenvalues': eigenvalues,
 * 		'is_stable': is_stable,
 * 		'temperature': temperature,             # <<<<<<<<<<<<<<
 * 		'pressure': pressure
 * 	}
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_temperature, __pyx_v_temperature) < 0) __PYX_ERR(1, 1317, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1320
 * 		'is_stable': is_stable,
 * 		'temperature': temperature,
 * 		'pressure': pressure             # <<<<<<<<<<<<<<
 * 	}
 * 
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_pressure, __pyx_v_pressure) < 0) __PYX_ERR(1, 1317, __pyx_L1_error)
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":1303
 * 	return jacobian.tolist()
 * 
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):             # <<<<<<<<<<<<<<
 * 	"""Perform stability analysis around steady state"""
 * 	import numpy as np
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyroxa._pybindings.py_stability_analysis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_eigenval);
  __Pyx_XDECREF(__pyx_v_is_stable);
  __Pyx_XDECREF(__pyx_gb_6pyroxa_11_pybindings_21py_stability_analysis_2generator1);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1323
 * 	}
 * 
 * def py_mpc_controller(current_state, setpoints, control_bounds, reaction_network, int horizon=10):             # <<<<<<<<<<<<<<
 * 	"""Model Predictive Control implementation"""
 * 	N = len(current_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_101py_mpc_controller(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_100py_mpc_controller[] = "py_mpc_controller(current_state, setpoints, control_bounds, reaction_network, int horizon=10)\nModel Predictive Control implementation";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_101py_mpc_controller = {"py_mpc_controller", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_101py_mpc_controller, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_100py_mpc_controller};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_101py_mpc_controller(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_current_state = 0;
  PyObject *__pyx_v_setpoints = 0;
  PyObject *__pyx_v_control_bounds = 0;
  PyObject *__pyx_v_reaction_network = 0;
  int __pyx_v_horizon;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_mpc_controller (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_current_state,&__pyx_n_s_setpoints,&__pyx_n_s_control_bounds,&__pyx_n_s_reaction_network,&__pyx_n_s_horizon,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_current_state)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_setpoints)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_mpc_controller", 0, 4, 5, 1); __PYX_ERR(1, 1323, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_control_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_mpc_controller", 0, 4, 5, 2); __PYX_ERR(1, 1323, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reaction_network)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_mpc_controller", 0, 4, 5, 3); __PYX_ERR(1, 1323, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_horizon);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_mpc_controller") < 0)) __PYX_ERR(1, 1323, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_current_state = values[0];
    __pyx_v_setpoints = values[1];
    __pyx_v_control_bounds = values[2];
    __pyx_v_reaction_network = values[3];
    if (values[4]) {
      __pyx_v_horizon = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_horizon == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1323, __pyx_L3_error)
    } else {
      __pyx_v_horizon = ((int)10);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_mpc_controller", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1323, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_mpc_controller", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_100py_mpc_controller(__pyx_self, __pyx_v_current_state, __pyx_v_setpoints, __pyx_v_control_bounds, __pyx_v_reaction_network, __pyx_v_horizon);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_100py_mpc_controller(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_current_state, PyObject *__pyx_v_setpoints, PyObject *__pyx_v_control_bounds, PyObject *__pyx_v_reaction_network, int __pyx_v_horizon) {
  PyObject *__pyx_v_N = NULL;
  PyObject *__pyx_v_M = NULL;
  double *__pyx_v_state;
  double *__pyx_v_setpts;
  double *__pyx_v_bounds;
  double *__pyx_v_kf;
  double *__pyx_v_kr;
  double *__pyx_v_optimal_controls;
  int *__pyx_v_reac_idx;
  double *__pyx_v_reac_nu;
  int *__pyx_v_reac_off;
  int *__pyx_v_prod_idx;
  double *__pyx_v_prod_nu;
  int *__pyx_v_prod_off;
  PyObject *__pyx_v_i = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_control_actions = NULL;
  PyObject *__pyx_9genexpr27__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  size_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  double __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  double __pyx_t_12;
  long __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_mpc_controller", 0);

  /* "pyroxa/pybindings.pyx":1325
 * def py_mpc_controller(current_state, setpoints, control_bounds, reaction_network, int horizon=10):
 * 	"""Model Predictive Control implementation"""
 * 	N = len(current_state)             # <<<<<<<<<<<<<<
 * 	M = len(reaction_network.get('reactions', []))
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_current_state); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1325, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_N = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1326
 * 	"""Model Predictive Control implementation"""
 * 	N = len(current_state)
 * 	M = len(reaction_network.get('reactions', []))             # <<<<<<<<<<<<<<
 * 
 * 	cdef double* state = <double*>malloc(N * sizeof(double))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_reaction_network, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_reactions, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1326, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_reactions, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1326, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_reactions);
    __Pyx_GIVEREF(__pyx_n_u_reactions);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_n_u_reactions);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_M = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1328
 * 	M = len(reaction_network.get('reactions', []))
 * 
 * 	cdef double* state = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* setpts = <double*>malloc(N * sizeof(double))
 * 	cdef double* bounds = <double*>malloc(2 * sizeof(double))  # [min, max]
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_N, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_state = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1329
 * 
 * 	cdef double* state = <double*>malloc(N * sizeof(double))
 * 	cdef double* setpts = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* bounds = <double*>malloc(2 * sizeof(double))  # [min, max]
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_N, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_setpts = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1330
 * 	cdef double* state = <double*>malloc(N * sizeof(double))
 * 	cdef double* setpts = <double*>malloc(N * sizeof(double))
 * 	cdef double* bounds = <double*>malloc(2 * sizeof(double))  # [min, max]             # <<<<<<<<<<<<<<
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))
 */
  __pyx_v_bounds = ((double *)malloc((2 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1331
 * 	cdef double* setpts = <double*>malloc(N * sizeof(double))
 * 	cdef double* bounds = <double*>malloc(2 * sizeof(double))  # [min, max]
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))
 * 	cdef double* optimal_controls = <double*>malloc(N * sizeof(double))
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_M, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1331, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_kf = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1332
 * 	cdef double* bounds = <double*>malloc(2 * sizeof(double))  # [min, max]
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* optimal_controls = <double*>malloc(N * sizeof(double))
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_M, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_kr = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1333
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))
 * 	cdef double* optimal_controls = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	# Simplified reaction indices
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_N, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_optimal_controls = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1336
 * 
 * 	# Simplified reaction indices
 * 	cdef int* reac_idx = <int*>malloc(M * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_M, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_reac_idx = ((int *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1337
 * 	# Simplified reaction indices
 * 	cdef int* reac_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_M, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_reac_nu = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1338
 * 	cdef int* reac_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))
 */
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_M, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_7); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_reac_off = ((int *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1339
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))
 */
  __pyx_t_7 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_M, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_prod_idx = ((int *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1340
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyNumber_Multiply(__pyx_v_M, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_7); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_prod_nu = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1341
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_M, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_7, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_prod_off = ((int *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1343
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(N):
 * 			state[i] = current_state[i]
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1344
 * 
 * 	try:
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			state[i] = current_state[i]
 * 			setpts[i] = setpoints[i]
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_N); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1344, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1344, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1344, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1344, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1344, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1344, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1344, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_9(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1344, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1345
 * 	try:
 * 		for i in range(N):
 * 			state[i] = current_state[i]             # <<<<<<<<<<<<<<
 * 			setpts[i] = setpoints[i]
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_current_state, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1345, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1345, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1345, __pyx_L4_error)
      (__pyx_v_state[__pyx_t_11]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1346
 * 		for i in range(N):
 * 			state[i] = current_state[i]
 * 			setpts[i] = setpoints[i]             # <<<<<<<<<<<<<<
 * 
 * 		bounds[0] = control_bounds[0] if len(control_bounds) > 0 else 0.0
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_setpoints, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1346, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1346, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1346, __pyx_L4_error)
      (__pyx_v_setpts[__pyx_t_11]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1344
 * 
 * 	try:
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			state[i] = current_state[i]
 * 			setpts[i] = setpoints[i]
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1348
 * 			setpts[i] = setpoints[i]
 * 
 * 		bounds[0] = control_bounds[0] if len(control_bounds) > 0 else 0.0             # <<<<<<<<<<<<<<
 * 		bounds[1] = control_bounds[1] if len(control_bounds) > 1 else 10.0
 * 
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_control_bounds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1348, __pyx_L4_error)
    if (((__pyx_t_1 > 0) != 0)) {
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_control_bounds, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1348, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1348, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = __pyx_t_12;
    } else {
      __pyx_t_10 = 0.0;
    }
    (__pyx_v_bounds[0]) = __pyx_t_10;

    /* "pyroxa/pybindings.pyx":1349
 * 
 * 		bounds[0] = control_bounds[0] if len(control_bounds) > 0 else 0.0
 * 		bounds[1] = control_bounds[1] if len(control_bounds) > 1 else 10.0             # <<<<<<<<<<<<<<
 * 
 * 		# Set up simplified reaction network
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_control_bounds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1349, __pyx_L4_error)
    if (((__pyx_t_1 > 1) != 0)) {
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_control_bounds, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1349, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1349, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_10 = __pyx_t_12;
    } else {
      __pyx_t_10 = 10.0;
    }
    (__pyx_v_bounds[1]) = __pyx_t_10;

    /* "pyroxa/pybindings.pyx":1352
 * 
 * 		# Set up simplified reaction network
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_M); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1352, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1352, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1352, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1352, __pyx_L4_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1352, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1352, __pyx_L4_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1352, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_9(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1352, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1353
 * 		# Set up simplified reaction network
 * 		for i in range(M):
 * 			kf[i] = 1.0             # <<<<<<<<<<<<<<
 * 			kr[i] = 0.1
 * 			reac_idx[i] = 0
 */
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1353, __pyx_L4_error)
      (__pyx_v_kf[__pyx_t_11]) = 1.0;

      /* "pyroxa/pybindings.pyx":1354
 * 		for i in range(M):
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1             # <<<<<<<<<<<<<<
 * 			reac_idx[i] = 0
 * 			reac_nu[i] = 1.0
 */
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1354, __pyx_L4_error)
      (__pyx_v_kr[__pyx_t_11]) = 0.1;

      /* "pyroxa/pybindings.pyx":1355
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1
 * 			reac_idx[i] = 0             # <<<<<<<<<<<<<<
 * 			reac_nu[i] = 1.0
 * 			reac_off[i] = i
 */
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1355, __pyx_L4_error)
      (__pyx_v_reac_idx[__pyx_t_11]) = 0;

      /* "pyroxa/pybindings.pyx":1356
 * 			kr[i] = 0.1
 * 			reac_idx[i] = 0
 * 			reac_nu[i] = 1.0             # <<<<<<<<<<<<<<
 * 			reac_off[i] = i
 * 			prod_idx[i] = min(1, N-1)
 */
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1356, __pyx_L4_error)
      (__pyx_v_reac_nu[__pyx_t_11]) = 1.0;

      /* "pyroxa/pybindings.pyx":1357
 * 			reac_idx[i] = 0
 * 			reac_nu[i] = 1.0
 * 			reac_off[i] = i             # <<<<<<<<<<<<<<
 * 			prod_idx[i] = min(1, N-1)
 * 			prod_nu[i] = 1.0
 */
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1357, __pyx_L4_error)
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1357, __pyx_L4_error)
      (__pyx_v_reac_off[__pyx_t_11]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":1358
 * 			reac_nu[i] = 1.0
 * 			reac_off[i] = i
 * 			prod_idx[i] = min(1, N-1)             # <<<<<<<<<<<<<<
 * 			prod_nu[i] = 1.0
 * 			prod_off[i] = i
 */
      __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_N, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1358, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_13 = 1;
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1358, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1358, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_14 < 0)) __PYX_ERR(1, 1358, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_14) {
        __Pyx_INCREF(__pyx_t_2);
        __pyx_t_7 = __pyx_t_2;
      } else {
        __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1358, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __pyx_t_5;
        __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1358, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1358, __pyx_L4_error)
      (__pyx_v_prod_idx[__pyx_t_11]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":1359
 * 			reac_off[i] = i
 * 			prod_idx[i] = min(1, N-1)
 * 			prod_nu[i] = 1.0             # <<<<<<<<<<<<<<
 * 			prod_off[i] = i
 * 		reac_off[M] = M
 */
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1359, __pyx_L4_error)
      (__pyx_v_prod_nu[__pyx_t_11]) = 1.0;

      /* "pyroxa/pybindings.pyx":1360
 * 			prod_idx[i] = min(1, N-1)
 * 			prod_nu[i] = 1.0
 * 			prod_off[i] = i             # <<<<<<<<<<<<<<
 * 		reac_off[M] = M
 * 		prod_off[M] = M
 */
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1360, __pyx_L4_error)
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1360, __pyx_L4_error)
      (__pyx_v_prod_off[__pyx_t_11]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":1352
 * 
 * 		# Set up simplified reaction network
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":1361
 * 			prod_nu[i] = 1.0
 * 			prod_off[i] = i
 * 		reac_off[M] = M             # <<<<<<<<<<<<<<
 * 		prod_off[M] = M
 * 
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_M); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1361, __pyx_L4_error)
    __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_M); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1361, __pyx_L4_error)
    (__pyx_v_reac_off[__pyx_t_1]) = __pyx_t_6;

    /* "pyroxa/pybindings.pyx":1362
 * 			prod_off[i] = i
 * 		reac_off[M] = M
 * 		prod_off[M] = M             # <<<<<<<<<<<<<<
 * 
 * 		result = mpc_controller(N, M, horizon, state, setpts, bounds,
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_M); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1362, __pyx_L4_error)
    __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_M); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1362, __pyx_L4_error)
    (__pyx_v_prod_off[__pyx_t_1]) = __pyx_t_6;

    /* "pyroxa/pybindings.pyx":1364
 * 		prod_off[M] = M
 * 
 * 		result = mpc_controller(N, M, horizon, state, setpts, bounds,             # <<<<<<<<<<<<<<
 * 							   kf, kr, reac_idx, reac_nu, reac_off,
 * 							   prod_idx, prod_nu, prod_off, optimal_controls)
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_N); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1364, __pyx_L4_error)
    __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_v_M); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1364, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":1366
 * 		result = mpc_controller(N, M, horizon, state, setpts, bounds,
 * 							   kf, kr, reac_idx, reac_nu, reac_off,
 * 							   prod_idx, prod_nu, prod_off, optimal_controls)             # <<<<<<<<<<<<<<
 * 
 * 		if result > 0:
 */
    __pyx_v_result = mpc_controller(__pyx_t_6, __pyx_t_15, __pyx_v_horizon, __pyx_v_state, __pyx_v_setpts, __pyx_v_bounds, __pyx_v_kf, __pyx_v_kr, __pyx_v_reac_idx, __pyx_v_reac_nu, __pyx_v_reac_off, __pyx_v_prod_idx, __pyx_v_prod_nu, __pyx_v_prod_off, __pyx_v_optimal_controls);

    /* "pyroxa/pybindings.pyx":1368
 * 							   prod_idx, prod_nu, prod_off, optimal_controls)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			control_actions = [optimal_controls[i] for i in range(N)]
 * 			return {'control_actions': control_actions, 'horizon': horizon, 'success': True}
 */
    __pyx_t_14 = ((__pyx_v_result > 0) != 0);
    if (__pyx_t_14) {

      /* "pyroxa/pybindings.pyx":1369
 * 
 * 		if result > 0:
 * 			control_actions = [optimal_controls[i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 			return {'control_actions': control_actions, 'horizon': horizon, 'success': True}
 * 		else:
 */
      { /* enter inner scope */
        __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1369, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_N); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1369, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
          __pyx_t_2 = __pyx_t_7; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1369, __pyx_L13_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1369, __pyx_L13_error)
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(PyList_CheckExact(__pyx_t_2))) {
              if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1369, __pyx_L13_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1369, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            } else {
              if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1369, __pyx_L13_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1369, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            }
          } else {
            __pyx_t_7 = __pyx_t_9(__pyx_t_2);
            if (unlikely(!__pyx_t_7)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(1, 1369, __pyx_L13_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_7);
          }
          __Pyx_XDECREF_SET(__pyx_9genexpr27__pyx_v_i, __pyx_t_7);
          __pyx_t_7 = 0;
          __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_9genexpr27__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1369, __pyx_L13_error)
          __pyx_t_7 = PyFloat_FromDouble((__pyx_v_optimal_controls[__pyx_t_11])); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1369, __pyx_L13_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_7))) __PYX_ERR(1, 1369, __pyx_L13_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_9genexpr27__pyx_v_i); __pyx_9genexpr27__pyx_v_i = 0;
        goto __pyx_L16_exit_scope;
        __pyx_L13_error:;
        __Pyx_XDECREF(__pyx_9genexpr27__pyx_v_i); __pyx_9genexpr27__pyx_v_i = 0;
        goto __pyx_L4_error;
        __pyx_L16_exit_scope:;
      } /* exit inner scope */
      __pyx_v_control_actions = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1370
 * 		if result > 0:
 * 			control_actions = [optimal_controls[i] for i in range(N)]
 * 			return {'control_actions': control_actions, 'horizon': horizon, 'success': True}             # <<<<<<<<<<<<<<
 * 		else:
 * 			return {'control_actions': [0.0] * N, 'horizon': horizon, 'success': False}
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1370, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_control_actions, __pyx_v_control_actions) < 0) __PYX_ERR(1, 1370, __pyx_L4_error)
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_horizon); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1370, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_horizon, __pyx_t_2) < 0) __PYX_ERR(1, 1370, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_success, Py_True) < 0) __PYX_ERR(1, 1370, __pyx_L4_error)
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1368
 * 							   prod_idx, prod_nu, prod_off, optimal_controls)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			control_actions = [optimal_controls[i] for i in range(N)]
 * 			return {'control_actions': control_actions, 'horizon': horizon, 'success': True}
 */
    }

    /* "pyroxa/pybindings.pyx":1372
 * 			return {'control_actions': control_actions, 'horizon': horizon, 'success': True}
 * 		else:
 * 			return {'control_actions': [0.0] * N, 'horizon': horizon, 'success': False}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(state); free(setpts); free(bounds); free(kf); free(kr); free(optimal_controls)
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1372, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1372, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_float_0_0);
      __Pyx_GIVEREF(__pyx_float_0_0);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_float_0_0);
      { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_N); if (unlikely(!__pyx_temp)) __PYX_ERR(1, 1372, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_temp);
        __Pyx_DECREF(__pyx_t_2);
        __pyx_t_2 = __pyx_temp;
      }
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_control_actions, __pyx_t_2) < 0) __PYX_ERR(1, 1372, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_horizon); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1372, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_horizon, __pyx_t_2) < 0) __PYX_ERR(1, 1372, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_success, Py_False) < 0) __PYX_ERR(1, 1372, __pyx_L4_error)
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1374
 * 			return {'control_actions': [0.0] * N, 'horizon': horizon, 'success': False}
 * 	finally:
 * 		free(state); free(setpts); free(bounds); free(kf); free(kr); free(optimal_controls)             # <<<<<<<<<<<<<<
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __pyx_t_15 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
      {
        free(__pyx_v_state);
        free(__pyx_v_setpts);
        free(__pyx_v_bounds);
        free(__pyx_v_kf);
        free(__pyx_v_kr);
        free(__pyx_v_optimal_controls);

        /* "pyroxa/pybindings.pyx":1375
 * 	finally:
 * 		free(state); free(setpts); free(bounds); free(kf); free(kr); free(optimal_controls)
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)             # <<<<<<<<<<<<<<
 * 
 * def py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network):
 */
        free(__pyx_v_reac_idx);
        free(__pyx_v_reac_nu);
        free(__pyx_v_reac_off);
        free(__pyx_v_prod_idx);
        free(__pyx_v_prod_nu);
        free(__pyx_v_prod_off);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_XGIVEREF(__pyx_t_22);
        __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      }
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __pyx_lineno = __pyx_t_15; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_16;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_22 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1374
 * 			return {'control_actions': [0.0] * N, 'horizon': horizon, 'success': False}
 * 	finally:
 * 		free(state); free(setpts); free(bounds); free(kf); free(kr); free(optimal_controls)             # <<<<<<<<<<<<<<
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
 */
      free(__pyx_v_state);
      free(__pyx_v_setpts);
      free(__pyx_v_bounds);
      free(__pyx_v_kf);
      free(__pyx_v_kr);
      free(__pyx_v_optimal_controls);

      /* "pyroxa/pybindings.pyx":1375
 * 	finally:
 * 		free(state); free(setpts); free(bounds); free(kf); free(kr); free(optimal_controls)
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)             # <<<<<<<<<<<<<<
 * 
 * def py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network):
 */
      free(__pyx_v_reac_idx);
      free(__pyx_v_reac_nu);
      free(__pyx_v_reac_off);
      free(__pyx_v_prod_idx);
      free(__pyx_v_prod_nu);
      free(__pyx_v_prod_off);
      __pyx_r = __pyx_t_22;
      __pyx_t_22 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1323
 * 	}
 * 
 * def py_mpc_controller(current_state, setpoints, control_bounds, reaction_network, int horizon=10):             # <<<<<<<<<<<<<<
 * 	"""Model Predictive Control implementation"""
 * 	N = len(current_state)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyroxa._pybindings.py_mpc_controller", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_N);
  __Pyx_XDECREF(__pyx_v_M);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_control_actions);
  __Pyx_XDECREF(__pyx_9genexpr27__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1377
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
 * def py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network):             # <<<<<<<<<<<<<<
 * 	"""Real-time optimization for process economics"""
 * 	N = len(current_concentrations)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_103py_real_time_optimization(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_102py_real_time_optimization[] = "py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network)\nReal-time optimization for process economics";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_103py_real_time_optimization = {"py_real_time_optimization", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_103py_real_time_optimization, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_102py_real_time_optimization};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_103py_real_time_optimization(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_current_concentrations = 0;
  PyObject *__pyx_v_economic_coefficients = 0;
  PyObject *__pyx_v_control_bounds = 0;
  PyObject *__pyx_v_reaction_network = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_real_time_optimization (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_current_concentrations,&__pyx_n_s_economic_coefficients,&__pyx_n_s_control_bounds,&__pyx_n_s_reaction_network,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_current_concentrations)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_economic_coefficients)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_real_time_optimization", 1, 4, 4, 1); __PYX_ERR(1, 1377, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_control_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_real_time_optimization", 1, 4, 4, 2); __PYX_ERR(1, 1377, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reaction_network)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_real_time_optimization", 1, 4, 4, 3); __PYX_ERR(1, 1377, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_real_time_optimization") < 0)) __PYX_ERR(1, 1377, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_current_concentrations = values[0];
    __pyx_v_economic_coefficients = values[1];
    __pyx_v_control_bounds = values[2];
    __pyx_v_reaction_network = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_real_time_optimization", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1377, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_real_time_optimization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_102py_real_time_optimization(__pyx_self, __pyx_v_current_concentrations, __pyx_v_economic_coefficients, __pyx_v_control_bounds, __pyx_v_reaction_network);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_102py_real_time_optimization(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_current_concentrations, PyObject *__pyx_v_economic_coefficients, PyObject *__pyx_v_control_bounds, PyObject *__pyx_v_reaction_network) {
  PyObject *__pyx_v_N = NULL;
  PyObject *__pyx_v_M = NULL;
  PyObject *__pyx_v_n_controls = NULL;
  double *__pyx_v_concs;
  double *__pyx_v_econ_coeffs;
  double *__pyx_v_bounds;
  double *__pyx_v_kf;
  double *__pyx_v_kr;
  double *__pyx_v_optimal_controls;
  double __pyx_v_predicted_profit;
  int *__pyx_v_reac_idx;
  double *__pyx_v_reac_nu;
  int *__pyx_v_reac_off;
  int *__pyx_v_prod_idx;
  double *__pyx_v_prod_nu;
  int *__pyx_v_prod_off;
  PyObject *__pyx_v_i = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_optimal_settings = NULL;
  PyObject *__pyx_9genexpr28__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  size_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  double __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  double __pyx_t_13;
  long __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_real_time_optimization", 0);

  /* "pyroxa/pybindings.pyx":1379
 * def py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network):
 * 	"""Real-time optimization for process economics"""
 * 	N = len(current_concentrations)             # <<<<<<<<<<<<<<
 * 	M = len(reaction_network.get('reactions', []))
 * 	n_controls = len(control_bounds)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_current_concentrations); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1379, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_N = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1380
 * 	"""Real-time optimization for process economics"""
 * 	N = len(current_concentrations)
 * 	M = len(reaction_network.get('reactions', []))             # <<<<<<<<<<<<<<
 * 	n_controls = len(control_bounds)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_reaction_network, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_reactions, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1380, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_n_u_reactions, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1380, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_reactions);
    __Pyx_GIVEREF(__pyx_n_u_reactions);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_n_u_reactions);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_M = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1381
 * 	N = len(current_concentrations)
 * 	M = len(reaction_network.get('reactions', []))
 * 	n_controls = len(control_bounds)             # <<<<<<<<<<<<<<
 * 
 * 	cdef double* concs = <double*>malloc(N * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_control_bounds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1381, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_n_controls = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1383
 * 	n_controls = len(control_bounds)
 * 
 * 	cdef double* concs = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* econ_coeffs = <double*>malloc(N * sizeof(double))
 * 	cdef double* bounds = <double*>malloc(2 * n_controls * sizeof(double))
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_N, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1383, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_concs = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1384
 * 
 * 	cdef double* concs = <double*>malloc(N * sizeof(double))
 * 	cdef double* econ_coeffs = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* bounds = <double*>malloc(2 * n_controls * sizeof(double))
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_N, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_econ_coeffs = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1385
 * 	cdef double* concs = <double*>malloc(N * sizeof(double))
 * 	cdef double* econ_coeffs = <double*>malloc(N * sizeof(double))
 * 	cdef double* bounds = <double*>malloc(2 * n_controls * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))
 */
  __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_v_n_controls); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_7); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_bounds = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1386
 * 	cdef double* econ_coeffs = <double*>malloc(N * sizeof(double))
 * 	cdef double* bounds = <double*>malloc(2 * n_controls * sizeof(double))
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))
 * 	cdef double* optimal_controls = <double*>malloc(n_controls * sizeof(double))
 */
  __pyx_t_7 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_M, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_kf = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1387
 * 	cdef double* bounds = <double*>malloc(2 * n_controls * sizeof(double))
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* optimal_controls = <double*>malloc(n_controls * sizeof(double))
 * 	cdef double predicted_profit = 0.0
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyNumber_Multiply(__pyx_v_M, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_7); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1387, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_kr = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1388
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))
 * 	cdef double* optimal_controls = <double*>malloc(n_controls * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double predicted_profit = 0.0
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_n_controls, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_optimal_controls = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1389
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))
 * 	cdef double* optimal_controls = <double*>malloc(n_controls * sizeof(double))
 * 	cdef double predicted_profit = 0.0             # <<<<<<<<<<<<<<
 * 
 * 	# Simplified reaction indices
 */
  __pyx_v_predicted_profit = 0.0;

  /* "pyroxa/pybindings.pyx":1392
 * 
 * 	# Simplified reaction indices
 * 	cdef int* reac_idx = <int*>malloc(M * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyNumber_Multiply(__pyx_v_M, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_7); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_reac_idx = ((int *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1393
 * 	# Simplified reaction indices
 * 	cdef int* reac_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
 */
  __pyx_t_7 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_M, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_reac_nu = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1394
 * 	cdef int* reac_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))
 */
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_M, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_reac_off = ((int *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1395
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PyNumber_Multiply(__pyx_v_M, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_7); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_prod_idx = ((int *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1396
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_M, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_prod_nu = ((double *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1397
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_M, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_prod_off = ((int *)malloc(__pyx_t_8));

  /* "pyroxa/pybindings.pyx":1399
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(N):
 * 			concs[i] = current_concentrations[i]
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1400
 * 
 * 	try:
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			concs[i] = current_concentrations[i]
 * 			econ_coeffs[i] = economic_coefficients[i] if i < len(economic_coefficients) else 0.0
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_N); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1400, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_7 = __pyx_t_3; __Pyx_INCREF(__pyx_t_7); __pyx_t_1 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1400, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1400, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1400, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_7, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1400, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1400, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_7, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1400, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_9(__pyx_t_7);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1400, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1401
 * 	try:
 * 		for i in range(N):
 * 			concs[i] = current_concentrations[i]             # <<<<<<<<<<<<<<
 * 			econ_coeffs[i] = economic_coefficients[i] if i < len(economic_coefficients) else 0.0
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_current_concentrations, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1401, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1401, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1401, __pyx_L4_error)
      (__pyx_v_concs[__pyx_t_11]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1402
 * 		for i in range(N):
 * 			concs[i] = current_concentrations[i]
 * 			econ_coeffs[i] = economic_coefficients[i] if i < len(economic_coefficients) else 0.0             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(n_controls):
 */
      __pyx_t_11 = PyObject_Length(__pyx_v_economic_coefficients); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1402, __pyx_L4_error)
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1402, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_i, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1402, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(1, 1402, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_12) {
        __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_economic_coefficients, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1402, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1402, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_10 = __pyx_t_13;
      } else {
        __pyx_t_10 = 0.0;
      }
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1402, __pyx_L4_error)
      (__pyx_v_econ_coeffs[__pyx_t_11]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1400
 * 
 * 	try:
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			concs[i] = current_concentrations[i]
 * 			econ_coeffs[i] = economic_coefficients[i] if i < len(economic_coefficients) else 0.0
 */
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyroxa/pybindings.pyx":1404
 * 			econ_coeffs[i] = economic_coefficients[i] if i < len(economic_coefficients) else 0.0
 * 
 * 		for i in range(n_controls):             # <<<<<<<<<<<<<<
 * 			bounds[2*i] = control_bounds[i][0]    # min
 * 			bounds[2*i+1] = control_bounds[i][1]  # max
 */
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_n_controls); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1404, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
      __pyx_t_2 = __pyx_t_7; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1404, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1404, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1404, __pyx_L4_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1404, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1404, __pyx_L4_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1404, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_9(__pyx_t_2);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1404, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "pyroxa/pybindings.pyx":1405
 * 
 * 		for i in range(n_controls):
 * 			bounds[2*i] = control_bounds[i][0]    # min             # <<<<<<<<<<<<<<
 * 			bounds[2*i+1] = control_bounds[i][1]  # max
 * 
 */
      __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_control_bounds, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1405, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1405, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1405, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Multiply(__pyx_int_2, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1405, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1405, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      (__pyx_v_bounds[__pyx_t_11]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1406
 * 		for i in range(n_controls):
 * 			bounds[2*i] = control_bounds[i][0]    # min
 * 			bounds[2*i+1] = control_bounds[i][1]  # max             # <<<<<<<<<<<<<<
 * 
 * 		# Set up simplified reaction network
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_control_bounds, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1406, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1406, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1406, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Multiply(__pyx_int_2, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1406, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1406, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1406, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      (__pyx_v_bounds[__pyx_t_11]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1404
 * 			econ_coeffs[i] = economic_coefficients[i] if i < len(economic_coefficients) else 0.0
 * 
 * 		for i in range(n_controls):             # <<<<<<<<<<<<<<
 * 			bounds[2*i] = control_bounds[i][0]    # min
 * 			bounds[2*i+1] = control_bounds[i][1]  # max
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1409
 * 
 * 		# Set up simplified reaction network
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_M); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1409, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1409, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1409, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1409, __pyx_L4_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1409, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1409, __pyx_L4_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1409, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_9(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1409, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1410
 * 		# Set up simplified reaction network
 * 		for i in range(M):
 * 			kf[i] = 1.0             # <<<<<<<<<<<<<<
 * 			kr[i] = 0.1
 * 			reac_idx[i] = 0
 */
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1410, __pyx_L4_error)
      (__pyx_v_kf[__pyx_t_11]) = 1.0;

      /* "pyroxa/pybindings.pyx":1411
 * 		for i in range(M):
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1             # <<<<<<<<<<<<<<
 * 			reac_idx[i] = 0
 * 			reac_nu[i] = 1.0
 */
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1411, __pyx_L4_error)
      (__pyx_v_kr[__pyx_t_11]) = 0.1;

      /* "pyroxa/pybindings.pyx":1412
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1
 * 			reac_idx[i] = 0             # <<<<<<<<<<<<<<
 * 			reac_nu[i] = 1.0
 * 			reac_off[i] = i
 */
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1412, __pyx_L4_error)
      (__pyx_v_reac_idx[__pyx_t_11]) = 0;

      /* "pyroxa/pybindings.pyx":1413
 * 			kr[i] = 0.1
 * 			reac_idx[i] = 0
 * 			reac_nu[i] = 1.0             # <<<<<<<<<<<<<<
 * 			reac_off[i] = i
 * 			prod_idx[i] = min(1, N-1)
 */
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1413, __pyx_L4_error)
      (__pyx_v_reac_nu[__pyx_t_11]) = 1.0;

      /* "pyroxa/pybindings.pyx":1414
 * 			reac_idx[i] = 0
 * 			reac_nu[i] = 1.0
 * 			reac_off[i] = i             # <<<<<<<<<<<<<<
 * 			prod_idx[i] = min(1, N-1)
 * 			prod_nu[i] = 1.0
 */
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1414, __pyx_L4_error)
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1414, __pyx_L4_error)
      (__pyx_v_reac_off[__pyx_t_11]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":1415
 * 			reac_nu[i] = 1.0
 * 			reac_off[i] = i
 * 			prod_idx[i] = min(1, N-1)             # <<<<<<<<<<<<<<
 * 			prod_nu[i] = 1.0
 * 			prod_off[i] = i
 */
      __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_N, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1415, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_14 = 1;
      __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1415, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1415, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(1, 1415, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_12) {
        __Pyx_INCREF(__pyx_t_2);
        __pyx_t_7 = __pyx_t_2;
      } else {
        __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1415, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __pyx_t_5;
        __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1415, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1415, __pyx_L4_error)
      (__pyx_v_prod_idx[__pyx_t_11]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":1416
 * 			reac_off[i] = i
 * 			prod_idx[i] = min(1, N-1)
 * 			prod_nu[i] = 1.0             # <<<<<<<<<<<<<<
 * 			prod_off[i] = i
 * 		reac_off[M] = M
 */
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1416, __pyx_L4_error)
      (__pyx_v_prod_nu[__pyx_t_11]) = 1.0;

      /* "pyroxa/pybindings.pyx":1417
 * 			prod_idx[i] = min(1, N-1)
 * 			prod_nu[i] = 1.0
 * 			prod_off[i] = i             # <<<<<<<<<<<<<<
 * 		reac_off[M] = M
 * 		prod_off[M] = M
 */
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1417, __pyx_L4_error)
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1417, __pyx_L4_error)
      (__pyx_v_prod_off[__pyx_t_11]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":1409
 * 
 * 		# Set up simplified reaction network
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":1418
 * 			prod_nu[i] = 1.0
 * 			prod_off[i] = i
 * 		reac_off[M] = M             # <<<<<<<<<<<<<<
 * 		prod_off[M] = M
 * 
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_M); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1418, __pyx_L4_error)
    __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_M); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1418, __pyx_L4_error)
    (__pyx_v_reac_off[__pyx_t_1]) = __pyx_t_6;

    /* "pyroxa/pybindings.pyx":1419
 * 			prod_off[i] = i
 * 		reac_off[M] = M
 * 		prod_off[M] = M             # <<<<<<<<<<<<<<
 * 
 * 		result = real_time_optimization(N, M, n_controls, concs, econ_coeffs, bounds,
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_M); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1419, __pyx_L4_error)
    __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_M); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1419, __pyx_L4_error)
    (__pyx_v_prod_off[__pyx_t_1]) = __pyx_t_6;

    /* "pyroxa/pybindings.pyx":1421
 * 		prod_off[M] = M
 * 
 * 		result = real_time_optimization(N, M, n_controls, concs, econ_coeffs, bounds,             # <<<<<<<<<<<<<<
 * 									   kf, kr, reac_idx, reac_nu, reac_off,
 * 									   prod_idx, prod_nu, prod_off, optimal_controls, &predicted_profit)
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_N); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1421, __pyx_L4_error)
    __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_v_M); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1421, __pyx_L4_error)
    __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_n_controls); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1421, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":1423
 * 		result = real_time_optimization(N, M, n_controls, concs, econ_coeffs, bounds,
 * 									   kf, kr, reac_idx, reac_nu, reac_off,
 * 									   prod_idx, prod_nu, prod_off, optimal_controls, &predicted_profit)             # <<<<<<<<<<<<<<
 * 
 * 		if result > 0:
 */
    __pyx_v_result = real_time_optimization(__pyx_t_6, __pyx_t_15, __pyx_t_16, __pyx_v_concs, __pyx_v_econ_coeffs, __pyx_v_bounds, __pyx_v_kf, __pyx_v_kr, __pyx_v_reac_idx, __pyx_v_reac_nu, __pyx_v_reac_off, __pyx_v_prod_idx, __pyx_v_prod_nu, __pyx_v_prod_off, __pyx_v_optimal_controls, (&__pyx_v_predicted_profit));

    /* "pyroxa/pybindings.pyx":1425
 * 									   prod_idx, prod_nu, prod_off, optimal_controls, &predicted_profit)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			optimal_settings = [optimal_controls[i] for i in range(n_controls)]
 * 			return {
 */
    __pyx_t_12 = ((__pyx_v_result > 0) != 0);
    if (__pyx_t_12) {

      /* "pyroxa/pybindings.pyx":1426
 * 
 * 		if result > 0:
 * 			optimal_settings = [optimal_controls[i] for i in range(n_controls)]             # <<<<<<<<<<<<<<
 * 			return {
 * 				'optimal_controls': optimal_settings,
 */
      { /* enter inner scope */
        __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1426, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_n_controls); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1426, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
          __pyx_t_2 = __pyx_t_7; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
          __pyx_t_9 = NULL;
        } else {
          __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1426, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1426, __pyx_L15_error)
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        for (;;) {
          if (likely(!__pyx_t_9)) {
            if (likely(PyList_CheckExact(__pyx_t_2))) {
              if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1426, __pyx_L15_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1426, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            } else {
              if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1426, __pyx_L15_error)
              #else
              __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1426, __pyx_L15_error)
              __Pyx_GOTREF(__pyx_t_7);
              #endif
            }
          } else {
            __pyx_t_7 = __pyx_t_9(__pyx_t_2);
            if (unlikely(!__pyx_t_7)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(1, 1426, __pyx_L15_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_7);
          }
          __Pyx_XDECREF_SET(__pyx_9genexpr28__pyx_v_i, __pyx_t_7);
          __pyx_t_7 = 0;
          __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_9genexpr28__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1426, __pyx_L15_error)
          __pyx_t_7 = PyFloat_FromDouble((__pyx_v_optimal_controls[__pyx_t_11])); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1426, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_7);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_7))) __PYX_ERR(1, 1426, __pyx_L15_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_i); __pyx_9genexpr28__pyx_v_i = 0;
        goto __pyx_L18_exit_scope;
        __pyx_L15_error:;
        __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_i); __pyx_9genexpr28__pyx_v_i = 0;
        goto __pyx_L4_error;
        __pyx_L18_exit_scope:;
      } /* exit inner scope */
      __pyx_v_optimal_settings = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1427
 * 		if result > 0:
 * 			optimal_settings = [optimal_controls[i] for i in range(n_controls)]
 * 			return {             # <<<<<<<<<<<<<<
 * 				'optimal_controls': optimal_settings,
 * 				'predicted_profit': predicted_profit,
 */
      __Pyx_XDECREF(__pyx_r);

      /* "pyroxa/pybindings.pyx":1428
 * 			optimal_settings = [optimal_controls[i] for i in range(n_controls)]
 * 			return {
 * 				'optimal_controls': optimal_settings,             # <<<<<<<<<<<<<<
 * 				'predicted_profit': predicted_profit,
 * 				'success': True
 */
      __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1428, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_optimal_controls, __pyx_v_optimal_settings) < 0) __PYX_ERR(1, 1428, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1429
 * 			return {
 * 				'optimal_controls': optimal_settings,
 * 				'predicted_profit': predicted_profit,             # <<<<<<<<<<<<<<
 * 				'success': True
 * 			}
 */
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_predicted_profit); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1429, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_predicted_profit, __pyx_t_2) < 0) __PYX_ERR(1, 1428, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1430
 * 				'optimal_controls': optimal_settings,
 * 				'predicted_profit': predicted_profit,
 * 				'success': True             # <<<<<<<<<<<<<<
 * 			}
 * 		else:
 */
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_success, Py_True) < 0) __PYX_ERR(1, 1428, __pyx_L4_error)
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1425
 * 									   prod_idx, prod_nu, prod_off, optimal_controls, &predicted_profit)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			optimal_settings = [optimal_controls[i] for i in range(n_controls)]
 * 			return {
 */
    }

    /* "pyroxa/pybindings.pyx":1433
 * 			}
 * 		else:
 * 			return {'optimal_controls': [0.0] * n_controls, 'predicted_profit': 0.0, 'success': False}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(concs); free(econ_coeffs); free(bounds); free(kf); free(kr); free(optimal_controls)
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1433, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1433, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_float_0_0);
      __Pyx_GIVEREF(__pyx_float_0_0);
      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_float_0_0);
      { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_n_controls); if (unlikely(!__pyx_temp)) __PYX_ERR(1, 1433, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_temp);
        __Pyx_DECREF(__pyx_t_2);
        __pyx_t_2 = __pyx_temp;
      }
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_optimal_controls, __pyx_t_2) < 0) __PYX_ERR(1, 1433, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_predicted_profit, __pyx_float_0_0) < 0) __PYX_ERR(1, 1433, __pyx_L4_error)
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_success, Py_False) < 0) __PYX_ERR(1, 1433, __pyx_L4_error)
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1435
 * 			return {'optimal_controls': [0.0] * n_controls, 'predicted_profit': 0.0, 'success': False}
 * 	finally:
 * 		free(concs); free(econ_coeffs); free(bounds); free(kf); free(kr); free(optimal_controls)             # <<<<<<<<<<<<<<
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_23);
      __pyx_t_16 = __pyx_lineno; __pyx_t_15 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
      {
        free(__pyx_v_concs);
        free(__pyx_v_econ_coeffs);
        free(__pyx_v_bounds);
        free(__pyx_v_kf);
        free(__pyx_v_kr);
        free(__pyx_v_optimal_controls);

        /* "pyroxa/pybindings.pyx":1436
 * 	finally:
 * 		free(concs); free(econ_coeffs); free(bounds); free(kf); free(kr); free(optimal_controls)
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)             # <<<<<<<<<<<<<<
 * 
 * """
 */
        free(__pyx_v_reac_idx);
        free(__pyx_v_reac_nu);
        free(__pyx_v_reac_off);
        free(__pyx_v_prod_idx);
        free(__pyx_v_prod_nu);
        free(__pyx_v_prod_off);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_XGIVEREF(__pyx_t_22);
        __Pyx_XGIVEREF(__pyx_t_23);
        __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
      }
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
      __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      __pyx_lineno = __pyx_t_16; __pyx_clineno = __pyx_t_15; __pyx_filename = __pyx_t_17;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_23 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1435
 * 			return {'optimal_controls': [0.0] * n_controls, 'predicted_profit': 0.0, 'success': False}
 * 	finally:
 * 		free(concs); free(econ_coeffs); free(bounds); free(kf); free(kr); free(optimal_controls)             # <<<<<<<<<<<<<<
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
 */
      free(__pyx_v_concs);
      free(__pyx_v_econ_coeffs);
      free(__pyx_v_bounds);
      free(__pyx_v_kf);
      free(__pyx_v_kr);
      free(__pyx_v_optimal_controls);

      /* "pyroxa/pybindings.pyx":1436
 * 	finally:
 * 		free(concs); free(econ_coeffs); free(bounds); free(kf); free(kr); free(optimal_controls)
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)             # <<<<<<<<<<<<<<
 * 
 * """
 */
      free(__pyx_v_reac_idx);
      free(__pyx_v_reac_nu);
      free(__pyx_v_reac_off);
      free(__pyx_v_prod_idx);
      free(__pyx_v_prod_nu);
      free(__pyx_v_prod_off);
      __pyx_r = __pyx_t_23;
      __pyx_t_23 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1377
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
 * def py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network):             # <<<<<<<<<<<<<<
 * 	"""Real-time optimization for process economics"""
 * 	N = len(current_concentrations)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyroxa._pybindings.py_real_time_optimization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_N);
  __Pyx_XDECREF(__pyx_v_M);
  __Pyx_XDECREF(__pyx_v_n_controls);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_optimal_settings);
  __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1447
 * 
 * # BATCH 12: Advanced reactor simulations
 * def py_simulate_packed_bed(int N, int M, int nseg, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 						   prod_idx, prod_nu, prod_off, conc0, double flow_rate,
 * 						   double bed_length, double bed_porosity, double particle_diameter,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_105py_simulate_packed_bed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_104py_simulate_packed_bed[] = "py_simulate_packed_bed(int N, int M, int nseg, kf, kr, reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off, conc0, double flow_rate, double bed_length, double bed_porosity, double particle_diameter, double catalyst_density, double effectiveness_factor, double time_span, double dt, int max_len=1000)\nSimulate packed bed reactor using original complex C++ implementation with full parameter exposure";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_105py_simulate_packed_bed = {"py_simulate_packed_bed", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_105py_simulate_packed_bed, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_104py_simulate_packed_bed};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_105py_simulate_packed_bed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_N;
  int __pyx_v_M;
  int __pyx_v_nseg;
  PyObject *__pyx_v_kf = 0;
  PyObject *__pyx_v_kr = 0;
  PyObject *__pyx_v_reac_idx = 0;
  PyObject *__pyx_v_reac_nu = 0;
  PyObject *__pyx_v_reac_off = 0;
  PyObject *__pyx_v_prod_idx = 0;
  PyObject *__pyx_v_prod_nu = 0;
  PyObject *__pyx_v_prod_off = 0;
  PyObject *__pyx_v_conc0 = 0;
  double __pyx_v_flow_rate;
  double __pyx_v_bed_length;
  double __pyx_v_bed_porosity;
  double __pyx_v_particle_diameter;
  double __pyx_v_catalyst_density;
  double __pyx_v_effectiveness_factor;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_v_max_len;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_simulate_packed_bed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_N,&__pyx_n_s_M,&__pyx_n_s_nseg,&__pyx_n_s_kf,&__pyx_n_s_kr,&__pyx_n_s_reac_idx,&__pyx_n_s_reac_nu,&__pyx_n_s_reac_off,&__pyx_n_s_prod_idx,&__pyx_n_s_prod_nu,&__pyx_n_s_prod_off,&__pyx_n_s_conc0,&__pyx_n_s_flow_rate,&__pyx_n_s_bed_length,&__pyx_n_s_bed_porosity,&__pyx_n_s_particle_diameter,&__pyx_n_s_catalyst_density,&__pyx_n_s_effectiveness_factor,&__pyx_n_s_time_span,&__pyx_n_s_dt,&__pyx_n_s_max_len,0};
    PyObject* values[21] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        CYTHON_FALLTHROUGH;
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_M)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 1); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nseg)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 2); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 3); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 4); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reac_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 5); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reac_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 6); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reac_off)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 7); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prod_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 8); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prod_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 9); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prod_off)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 10); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conc0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 11); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_rate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 12); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bed_length)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 13); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bed_porosity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 14); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particle_diameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 15); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_catalyst_density)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 16); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (likely((values[17] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_effectiveness_factor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 17); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 18:
        if (likely((values[18] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_span)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 18); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 19:
        if (likely((values[19] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, 19); __PYX_ERR(1, 1447, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 20:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_len);
          if (value) { values[20] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_simulate_packed_bed") < 0)) __PYX_ERR(1, 1447, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        CYTHON_FALLTHROUGH;
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_N = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1447, __pyx_L3_error)
    __pyx_v_M = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_M == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1447, __pyx_L3_error)
    __pyx_v_nseg = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nseg == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1447, __pyx_L3_error)
    __pyx_v_kf = values[3];
    __pyx_v_kr = values[4];
    __pyx_v_reac_idx = values[5];
    __pyx_v_reac_nu = values[6];
    __pyx_v_reac_off = values[7];
    __pyx_v_prod_idx = values[8];
    __pyx_v_prod_nu = values[9];
    __pyx_v_prod_off = values[10];
    __pyx_v_conc0 = values[11];
    __pyx_v_flow_rate = __pyx_PyFloat_AsDouble(values[12]); if (unlikely((__pyx_v_flow_rate == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1448, __pyx_L3_error)
    __pyx_v_bed_length = __pyx_PyFloat_AsDouble(values[13]); if (unlikely((__pyx_v_bed_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1449, __pyx_L3_error)
    __pyx_v_bed_porosity = __pyx_PyFloat_AsDouble(values[14]); if (unlikely((__pyx_v_bed_porosity == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1449, __pyx_L3_error)
    __pyx_v_particle_diameter = __pyx_PyFloat_AsDouble(values[15]); if (unlikely((__pyx_v_particle_diameter == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1449, __pyx_L3_error)
    __pyx_v_catalyst_density = __pyx_PyFloat_AsDouble(values[16]); if (unlikely((__pyx_v_catalyst_density == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1450, __pyx_L3_error)
    __pyx_v_effectiveness_factor = __pyx_PyFloat_AsDouble(values[17]); if (unlikely((__pyx_v_effectiveness_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1450, __pyx_L3_error)
    __pyx_v_time_span = __pyx_PyFloat_AsDouble(values[18]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1451, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[19]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1451, __pyx_L3_error)
    if (values[20]) {
      __pyx_v_max_len = __Pyx_PyInt_As_int(values[20]); if (unlikely((__pyx_v_max_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1451, __pyx_L3_error)
    } else {
      __pyx_v_max_len = ((int)0x3E8);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1447, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_packed_bed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_104py_simulate_packed_bed(__pyx_self, __pyx_v_N, __pyx_v_M, __pyx_v_nseg, __pyx_v_kf, __pyx_v_kr, __pyx_v_reac_idx, __pyx_v_reac_nu, __pyx_v_reac_off, __pyx_v_prod_idx, __pyx_v_prod_nu, __pyx_v_prod_off, __pyx_v_conc0, __pyx_v_flow_rate, __pyx_v_bed_length, __pyx_v_bed_porosity, __pyx_v_particle_diameter, __pyx_v_catalyst_density, __pyx_v_effectiveness_factor, __pyx_v_time_span, __pyx_v_dt, __pyx_v_max_len);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_104py_simulate_packed_bed(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, int __pyx_v_nseg, PyObject *__pyx_v_kf, PyObject *__pyx_v_kr, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_flow_rate, double __pyx_v_bed_length, double __pyx_v_bed_porosity, double __pyx_v_particle_diameter, double __pyx_v_catalyst_density, double __pyx_v_effectiveness_factor, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len) {
  double *__pyx_v_kf_arr;
  double *__pyx_v_kr_arr;
  int *__pyx_v_reac_idx_arr;
  double *__pyx_v_reac_nu_arr;
  int *__pyx_v_reac_off_arr;
  int *__pyx_v_prod_idx_arr;
  double *__pyx_v_prod_nu_arr;
  int *__pyx_v_prod_off_arr;
  double *__pyx_v_conc0_arr;
  double *__pyx_v_times;
  double *__pyx_v_conc_out_flat;
  double *__pyx_v_pressure_out;
  PyObject *__pyx_v_i = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_times_out = NULL;
  PyObject *__pyx_v_conc_matrix = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_conc_t = NULL;
  PyObject *__pyx_v_pressure_out_list = NULL;
  int __pyx_9genexpr29__pyx_v_i;
  int __pyx_9genexpr30__pyx_v_i;
  int __pyx_9genexpr31__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  double __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  char const *__pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_simulate_packed_bed", 0);

  /* "pyroxa/pybindings.pyx":1455
 * 
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 */
  __pyx_v_kf_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1456
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 */
  __pyx_v_kr_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1457
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1457, __pyx_L1_error)
  __pyx_v_reac_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1458
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1458, __pyx_L1_error)
  __pyx_v_reac_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1459
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1459, __pyx_L1_error)
  __pyx_v_reac_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1460
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1460, __pyx_L1_error)
  __pyx_v_prod_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1461
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1461, __pyx_L1_error)
  __pyx_v_prod_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1462
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1462, __pyx_L1_error)
  __pyx_v_prod_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1463
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 */
  __pyx_v_conc0_arr = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1464
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* pressure_out = <double*>malloc(max_len * sizeof(double))
 */
  __pyx_v_times = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1465
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* pressure_out = <double*>malloc(max_len * sizeof(double))
 * 
 */
  __pyx_v_conc_out_flat = ((double *)malloc(((__pyx_v_N * __pyx_v_max_len) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1466
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* pressure_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_pressure_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1468
 * 	cdef double* pressure_out = <double*>malloc(max_len * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Copy input arrays
 * 		for i in range(M):
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1470
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_M); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1470, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1470, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1470, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1470, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1470, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1470, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1470, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1470, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1470, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1471
 * 		# Copy input arrays
 * 		for i in range(M):
 * 			kf_arr[i] = kf[i]             # <<<<<<<<<<<<<<
 * 			kr_arr[i] = kr[i]
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_kf, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1471, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1471, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1471, __pyx_L4_error)
      (__pyx_v_kf_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1472
 * 		for i in range(M):
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(len(reac_idx)):
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_kr, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1472, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1472, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1472, __pyx_L4_error)
      (__pyx_v_kr_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1470
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1474
 * 			kr_arr[i] = kr[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1474, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1474, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1474, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1474, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1474, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1474, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1474, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1474, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1474, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1474, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1475
 * 
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_idx, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1475, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1475, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1475, __pyx_L4_error)
      (__pyx_v_reac_idx_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1474
 * 			kr_arr[i] = kr[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1476
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1476, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1476, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1476, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1476, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1476, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1476, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1476, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1476, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1476, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1476, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1477
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_nu, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1477, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1477, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1477, __pyx_L4_error)
      (__pyx_v_reac_nu_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1476
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1478
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1478, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1478, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1478, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1478, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1478, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1478, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1478, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1478, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1478, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1478, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1479
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_off, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1479, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1479, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1479, __pyx_L4_error)
      (__pyx_v_reac_off_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1478
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1480
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1480, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1480, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1480, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1480, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1480, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1480, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1480, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1480, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1480, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1480, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1481
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_prod_idx, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1481, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1481, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1481, __pyx_L4_error)
      (__pyx_v_prod_idx_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1480
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1482
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1482, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1482, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1482, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1482, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1482, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1482, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1482, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1482, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1482, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1482, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1483
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_prod_nu, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1483, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1483, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1483, __pyx_L4_error)
      (__pyx_v_prod_nu_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1482
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1484
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1484, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1484, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1484, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1484, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1484, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1484, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1484, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1484, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1484, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1484, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1485
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(N):
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_prod_off, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1485, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1485, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1485, __pyx_L4_error)
      (__pyx_v_prod_off_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1484
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1487
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1487, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1487, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1487, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1487, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1487, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1487, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1487, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1487, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1487, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1488
 * 
 * 		for i in range(N):
 * 			conc0_arr[i] = conc0[i]             # <<<<<<<<<<<<<<
 * 
 * 		# Call original complex C++ function (24 parameters)
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_conc0, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1488, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1488, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1488, __pyx_L4_error)
      (__pyx_v_conc0_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1487
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1491
 * 
 * 		# Call original complex C++ function (24 parameters)
 * 		result = simulate_packed_bed(N, M, nseg, kf_arr, kr_arr, reac_idx_arr, reac_nu_arr, reac_off_arr,             # <<<<<<<<<<<<<<
 * 									prod_idx_arr, prod_nu_arr, prod_off_arr, conc0_arr, flow_rate,
 * 									bed_length, bed_porosity, particle_diameter,
 */
    __pyx_v_result = simulate_packed_bed(__pyx_v_N, __pyx_v_M, __pyx_v_nseg, __pyx_v_kf_arr, __pyx_v_kr_arr, __pyx_v_reac_idx_arr, __pyx_v_reac_nu_arr, __pyx_v_reac_off_arr, __pyx_v_prod_idx_arr, __pyx_v_prod_nu_arr, __pyx_v_prod_off_arr, __pyx_v_conc0_arr, __pyx_v_flow_rate, __pyx_v_bed_length, __pyx_v_bed_porosity, __pyx_v_particle_diameter, __pyx_v_catalyst_density, __pyx_v_effectiveness_factor, __pyx_v_time_span, __pyx_v_dt, __pyx_v_times, __pyx_v_conc_out_flat, __pyx_v_pressure_out, __pyx_v_max_len);

    /* "pyroxa/pybindings.pyx":1497
 * 									times, conc_out_flat, pressure_out, max_len)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
 */
    __pyx_t_8 = ((__pyx_v_result > 0) != 0);
    if (__pyx_t_8) {

      /* "pyroxa/pybindings.pyx":1499
 * 		if result > 0:
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]             # <<<<<<<<<<<<<<
 * 			conc_matrix = []
 * 			for t in range(result):
 */
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1499, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __pyx_v_result;
        __pyx_t_9 = __pyx_t_7;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_9genexpr29__pyx_v_i = __pyx_t_10;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_times[__pyx_9genexpr29__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1499, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 1499, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_times_out = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1500
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
 * 			conc_matrix = []             # <<<<<<<<<<<<<<
 * 			for t in range(result):
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1500, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_conc_matrix = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1501
 * 			times_out = [times[i] for i in range(result)]
 * 			conc_matrix = []
 * 			for t in range(result):             # <<<<<<<<<<<<<<
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1501, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1501, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
        __pyx_t_4 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1501, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1501, __pyx_L4_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_4)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1501, __pyx_L4_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1501, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1501, __pyx_L4_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1501, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_4(__pyx_t_2);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 1501, __pyx_L4_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "pyroxa/pybindings.pyx":1502
 * 			conc_matrix = []
 * 			for t in range(result):
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 				conc_matrix.append(conc_t)
 * 			pressure_out_list = [pressure_out[i] for i in range(result)]
 */
        { /* enter inner scope */
          __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1502, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = __pyx_v_N;
          __pyx_t_9 = __pyx_t_7;
          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
            __pyx_9genexpr30__pyx_v_i = __pyx_t_10;
            __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1502, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_12 = PyNumber_Multiply(__pyx_v_t, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 1502, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_9genexpr30__pyx_v_i); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1502, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_13 = PyNumber_Add(__pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1502, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_13); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1502, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = PyFloat_FromDouble((__pyx_v_conc_out_flat[__pyx_t_6])); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1502, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_13);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_13))) __PYX_ERR(1, 1502, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_conc_t, ((PyObject*)__pyx_t_3));
        __pyx_t_3 = 0;

        /* "pyroxa/pybindings.pyx":1503
 * 			for t in range(result):
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)             # <<<<<<<<<<<<<<
 * 			pressure_out_list = [pressure_out[i] for i in range(result)]
 * 
 */
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_conc_matrix, __pyx_v_conc_t); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(1, 1503, __pyx_L4_error)

        /* "pyroxa/pybindings.pyx":1501
 * 			times_out = [times[i] for i in range(result)]
 * 			conc_matrix = []
 * 			for t in range(result):             # <<<<<<<<<<<<<<
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1504
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)
 * 			pressure_out_list = [pressure_out[i] for i in range(result)]             # <<<<<<<<<<<<<<
 * 
 * 			return {
 */
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1504, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __pyx_v_result;
        __pyx_t_9 = __pyx_t_7;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_9genexpr31__pyx_v_i = __pyx_t_10;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_pressure_out[__pyx_9genexpr31__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1504, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 1504, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_pressure_out_list = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1506
 * 			pressure_out_list = [pressure_out[i] for i in range(result)]
 * 
 * 			return {             # <<<<<<<<<<<<<<
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,
 */
      __Pyx_XDECREF(__pyx_r);

      /* "pyroxa/pybindings.pyx":1507
 * 
 * 			return {
 * 				'times': times_out,             # <<<<<<<<<<<<<<
 * 				'concentrations': conc_matrix,
 * 				'pressure_drop': pressure_out_list,
 */
      __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1507, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_times, __pyx_v_times_out) < 0) __PYX_ERR(1, 1507, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1508
 * 			return {
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,             # <<<<<<<<<<<<<<
 * 				'pressure_drop': pressure_out_list,
 * 				'n_points': result,
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_concentrations, __pyx_v_conc_matrix) < 0) __PYX_ERR(1, 1507, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1509
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,
 * 				'pressure_drop': pressure_out_list,             # <<<<<<<<<<<<<<
 * 				'n_points': result,
 * 				'success': True
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_pressure_drop, __pyx_v_pressure_out_list) < 0) __PYX_ERR(1, 1507, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1510
 * 				'concentrations': conc_matrix,
 * 				'pressure_drop': pressure_out_list,
 * 				'n_points': result,             # <<<<<<<<<<<<<<
 * 				'success': True
 * 			}
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1510, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_n_points, __pyx_t_3) < 0) __PYX_ERR(1, 1507, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1511
 * 				'pressure_drop': pressure_out_list,
 * 				'n_points': result,
 * 				'success': True             # <<<<<<<<<<<<<<
 * 			}
 * 		else:
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_success, Py_True) < 0) __PYX_ERR(1, 1507, __pyx_L4_error)
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1497
 * 									times, conc_out_flat, pressure_out, max_len)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
 */
    }

    /* "pyroxa/pybindings.pyx":1514
 * 			}
 * 		else:
 * 			return {'success': False, 'error': 'Simulation failed'}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(kf_arr)
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1514, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_success, Py_False) < 0) __PYX_ERR(1, 1514, __pyx_L4_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_error, __pyx_kp_u_Simulation_failed) < 0) __PYX_ERR(1, 1514, __pyx_L4_error)
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1516
 * 			return {'success': False, 'error': 'Simulation failed'}
 * 	finally:
 * 		free(kf_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __pyx_t_7 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
      {
        free(__pyx_v_kf_arr);

        /* "pyroxa/pybindings.pyx":1517
 * 	finally:
 * 		free(kf_arr)
 * 		free(kr_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 */
        free(__pyx_v_kr_arr);

        /* "pyroxa/pybindings.pyx":1518
 * 		free(kf_arr)
 * 		free(kr_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 */
        free(__pyx_v_reac_idx_arr);

        /* "pyroxa/pybindings.pyx":1519
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 */
        free(__pyx_v_reac_nu_arr);

        /* "pyroxa/pybindings.pyx":1520
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 */
        free(__pyx_v_reac_off_arr);

        /* "pyroxa/pybindings.pyx":1521
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 */
        free(__pyx_v_prod_idx_arr);

        /* "pyroxa/pybindings.pyx":1522
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 */
        free(__pyx_v_prod_nu_arr);

        /* "pyroxa/pybindings.pyx":1523
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(times)
 */
        free(__pyx_v_prod_off_arr);

        /* "pyroxa/pybindings.pyx":1524
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(times)
 * 		free(conc_out_flat)
 */
        free(__pyx_v_conc0_arr);

        /* "pyroxa/pybindings.pyx":1525
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(conc_out_flat)
 * 		free(pressure_out)
 */
        free(__pyx_v_times);

        /* "pyroxa/pybindings.pyx":1526
 * 		free(conc0_arr)
 * 		free(times)
 * 		free(conc_out_flat)             # <<<<<<<<<<<<<<
 * 		free(pressure_out)
 * 
 */
        free(__pyx_v_conc_out_flat);

        /* "pyroxa/pybindings.pyx":1527
 * 		free(times)
 * 		free(conc_out_flat)
 * 		free(pressure_out)             # <<<<<<<<<<<<<<
 * 
 * def py_simulate_fluidized_bed(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,
 */
        free(__pyx_v_pressure_out);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
      }
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
      __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
      __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_15;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_21 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1516
 * 			return {'success': False, 'error': 'Simulation failed'}
 * 	finally:
 * 		free(kf_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 */
      free(__pyx_v_kf_arr);

      /* "pyroxa/pybindings.pyx":1517
 * 	finally:
 * 		free(kf_arr)
 * 		free(kr_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 */
      free(__pyx_v_kr_arr);

      /* "pyroxa/pybindings.pyx":1518
 * 		free(kf_arr)
 * 		free(kr_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 */
      free(__pyx_v_reac_idx_arr);

      /* "pyroxa/pybindings.pyx":1519
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 */
      free(__pyx_v_reac_nu_arr);

      /* "pyroxa/pybindings.pyx":1520
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 */
      free(__pyx_v_reac_off_arr);

      /* "pyroxa/pybindings.pyx":1521
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 */
      free(__pyx_v_prod_idx_arr);

      /* "pyroxa/pybindings.pyx":1522
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 */
      free(__pyx_v_prod_nu_arr);

      /* "pyroxa/pybindings.pyx":1523
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(times)
 */
      free(__pyx_v_prod_off_arr);

      /* "pyroxa/pybindings.pyx":1524
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(times)
 * 		free(conc_out_flat)
 */
      free(__pyx_v_conc0_arr);

      /* "pyroxa/pybindings.pyx":1525
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(conc_out_flat)
 * 		free(pressure_out)
 */
      free(__pyx_v_times);

      /* "pyroxa/pybindings.pyx":1526
 * 		free(conc0_arr)
 * 		free(times)
 * 		free(conc_out_flat)             # <<<<<<<<<<<<<<
 * 		free(pressure_out)
 * 
 */
      free(__pyx_v_conc_out_flat);

      /* "pyroxa/pybindings.pyx":1527
 * 		free(times)
 * 		free(conc_out_flat)
 * 		free(pressure_out)             # <<<<<<<<<<<<<<
 * 
 * def py_simulate_fluidized_bed(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,
 */
      free(__pyx_v_pressure_out);
      __pyx_r = __pyx_t_21;
      __pyx_t_21 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1447
 * 
 * # BATCH 12: Advanced reactor simulations
 * def py_simulate_packed_bed(int N, int M, int nseg, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 						   prod_idx, prod_nu, prod_off, conc0, double flow_rate,
 * 						   double bed_length, double bed_porosity, double particle_diameter,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_packed_bed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_times_out);
  __Pyx_XDECREF(__pyx_v_conc_matrix);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_conc_t);
  __Pyx_XDECREF(__pyx_v_pressure_out_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1529
 * 		free(pressure_out)
 * 
 * def py_simulate_fluidized_bed(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 							  prod_idx, prod_nu, prod_off, conc0, double gas_velocity,
 * 							  double bed_height, double bed_porosity, double bubble_fraction,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_107py_simulate_fluidized_bed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_106py_simulate_fluidized_bed[] = "py_simulate_fluidized_bed(int N, int M, kf, kr, reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off, conc0, double gas_velocity, double bed_height, double bed_porosity, double bubble_fraction, double particle_diameter, double catalyst_density, double time_span, double dt, int max_len=1000)\nSimulate fluidized bed reactor using original complex C++ implementation with full parameter exposure";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_107py_simulate_fluidized_bed = {"py_simulate_fluidized_bed", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_107py_simulate_fluidized_bed, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_106py_simulate_fluidized_bed};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_107py_simulate_fluidized_bed(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_N;
  int __pyx_v_M;
  PyObject *__pyx_v_kf = 0;
  PyObject *__pyx_v_kr = 0;
  PyObject *__pyx_v_reac_idx = 0;
  PyObject *__pyx_v_reac_nu = 0;
  PyObject *__pyx_v_reac_off = 0;
  PyObject *__pyx_v_prod_idx = 0;
  PyObject *__pyx_v_prod_nu = 0;
  PyObject *__pyx_v_prod_off = 0;
  PyObject *__pyx_v_conc0 = 0;
  double __pyx_v_gas_velocity;
  double __pyx_v_bed_height;
  double __pyx_v_bed_porosity;
  double __pyx_v_bubble_fraction;
  double __pyx_v_particle_diameter;
  double __pyx_v_catalyst_density;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_v_max_len;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_simulate_fluidized_bed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_N,&__pyx_n_s_M,&__pyx_n_s_kf,&__pyx_n_s_kr,&__pyx_n_s_reac_idx,&__pyx_n_s_reac_nu,&__pyx_n_s_reac_off,&__pyx_n_s_prod_idx,&__pyx_n_s_prod_nu,&__pyx_n_s_prod_off,&__pyx_n_s_conc0,&__pyx_n_s_gas_velocity,&__pyx_n_s_bed_height,&__pyx_n_s_bed_porosity,&__pyx_n_s_bubble_fraction,&__pyx_n_s_particle_diameter,&__pyx_n_s_catalyst_density,&__pyx_n_s_time_span,&__pyx_n_s_dt,&__pyx_n_s_max_len,0};
    PyObject* values[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_M)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 1); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 2); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 3); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reac_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 4); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reac_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 5); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reac_off)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 6); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prod_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 7); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prod_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 8); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prod_off)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 9); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conc0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 10); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gas_velocity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 11); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bed_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 12); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bed_porosity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 13); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bubble_fraction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 14); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particle_diameter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 15); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_catalyst_density)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 16); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (likely((values[17] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_span)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 17); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 18:
        if (likely((values[18] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, 18); __PYX_ERR(1, 1529, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 19:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_len);
          if (value) { values[19] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_simulate_fluidized_bed") < 0)) __PYX_ERR(1, 1529, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_N = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1529, __pyx_L3_error)
    __pyx_v_M = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_M == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1529, __pyx_L3_error)
    __pyx_v_kf = values[2];
    __pyx_v_kr = values[3];
    __pyx_v_reac_idx = values[4];
    __pyx_v_reac_nu = values[5];
    __pyx_v_reac_off = values[6];
    __pyx_v_prod_idx = values[7];
    __pyx_v_prod_nu = values[8];
    __pyx_v_prod_off = values[9];
    __pyx_v_conc0 = values[10];
    __pyx_v_gas_velocity = __pyx_PyFloat_AsDouble(values[11]); if (unlikely((__pyx_v_gas_velocity == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1530, __pyx_L3_error)
    __pyx_v_bed_height = __pyx_PyFloat_AsDouble(values[12]); if (unlikely((__pyx_v_bed_height == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1531, __pyx_L3_error)
    __pyx_v_bed_porosity = __pyx_PyFloat_AsDouble(values[13]); if (unlikely((__pyx_v_bed_porosity == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1531, __pyx_L3_error)
    __pyx_v_bubble_fraction = __pyx_PyFloat_AsDouble(values[14]); if (unlikely((__pyx_v_bubble_fraction == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1531, __pyx_L3_error)
    __pyx_v_particle_diameter = __pyx_PyFloat_AsDouble(values[15]); if (unlikely((__pyx_v_particle_diameter == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1532, __pyx_L3_error)
    __pyx_v_catalyst_density = __pyx_PyFloat_AsDouble(values[16]); if (unlikely((__pyx_v_catalyst_density == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1532, __pyx_L3_error)
    __pyx_v_time_span = __pyx_PyFloat_AsDouble(values[17]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1533, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[18]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1533, __pyx_L3_error)
    if (values[19]) {
      __pyx_v_max_len = __Pyx_PyInt_As_int(values[19]); if (unlikely((__pyx_v_max_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1533, __pyx_L3_error)
    } else {
      __pyx_v_max_len = ((int)0x3E8);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1529, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_fluidized_bed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_106py_simulate_fluidized_bed(__pyx_self, __pyx_v_N, __pyx_v_M, __pyx_v_kf, __pyx_v_kr, __pyx_v_reac_idx, __pyx_v_reac_nu, __pyx_v_reac_off, __pyx_v_prod_idx, __pyx_v_prod_nu, __pyx_v_prod_off, __pyx_v_conc0, __pyx_v_gas_velocity, __pyx_v_bed_height, __pyx_v_bed_porosity, __pyx_v_bubble_fraction, __pyx_v_particle_diameter, __pyx_v_catalyst_density, __pyx_v_time_span, __pyx_v_dt, __pyx_v_max_len);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_106py_simulate_fluidized_bed(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, PyObject *__pyx_v_kf, PyObject *__pyx_v_kr, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_gas_velocity, double __pyx_v_bed_height, double __pyx_v_bed_porosity, double __pyx_v_bubble_fraction, double __pyx_v_particle_diameter, double __pyx_v_catalyst_density, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len) {
  double *__pyx_v_kf_arr;
  double *__pyx_v_kr_arr;
  int *__pyx_v_reac_idx_arr;
  double *__pyx_v_reac_nu_arr;
  int *__pyx_v_reac_off_arr;
  int *__pyx_v_prod_idx_arr;
  double *__pyx_v_prod_nu_arr;
  int *__pyx_v_prod_off_arr;
  double *__pyx_v_conc0_arr;
  double *__pyx_v_times;
  double *__pyx_v_conc_out_flat;
  double *__pyx_v_bubble_conc_out;
  double *__pyx_v_emulsion_conc_out;
  PyObject *__pyx_v_i = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_times_out = NULL;
  PyObject *__pyx_v_conc_matrix = NULL;
  PyObject *__pyx_v_bubble_matrix = NULL;
  PyObject *__pyx_v_emulsion_matrix = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_conc_t = NULL;
  PyObject *__pyx_v_bubble_t = NULL;
  PyObject *__pyx_v_emulsion_t = NULL;
  int __pyx_9genexpr32__pyx_v_i;
  int __pyx_9genexpr33__pyx_v_i;
  int __pyx_9genexpr34__pyx_v_i;
  int __pyx_9genexpr35__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  double __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  char const *__pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_simulate_fluidized_bed", 0);

  /* "pyroxa/pybindings.pyx":1537
 * 
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 */
  __pyx_v_kf_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1538
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 */
  __pyx_v_kr_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1539
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1539, __pyx_L1_error)
  __pyx_v_reac_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1540
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1540, __pyx_L1_error)
  __pyx_v_reac_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1541
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1541, __pyx_L1_error)
  __pyx_v_reac_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1542
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1542, __pyx_L1_error)
  __pyx_v_prod_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1543
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1543, __pyx_L1_error)
  __pyx_v_prod_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1544
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1544, __pyx_L1_error)
  __pyx_v_prod_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1545
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 */
  __pyx_v_conc0_arr = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1546
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* bubble_conc_out = <double*>malloc(N * max_len * sizeof(double))
 */
  __pyx_v_times = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1547
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* bubble_conc_out = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* emulsion_conc_out = <double*>malloc(N * max_len * sizeof(double))
 */
  __pyx_v_conc_out_flat = ((double *)malloc(((__pyx_v_N * __pyx_v_max_len) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1548
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* bubble_conc_out = <double*>malloc(N * max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* emulsion_conc_out = <double*>malloc(N * max_len * sizeof(double))
 * 
 */
  __pyx_v_bubble_conc_out = ((double *)malloc(((__pyx_v_N * __pyx_v_max_len) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1549
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* bubble_conc_out = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* emulsion_conc_out = <double*>malloc(N * max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_emulsion_conc_out = ((double *)malloc(((__pyx_v_N * __pyx_v_max_len) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1551
 * 	cdef double* emulsion_conc_out = <double*>malloc(N * max_len * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Copy input arrays
 * 		for i in range(M):
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1553
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_M); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1553, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1553, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1553, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1553, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1553, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1553, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1553, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1553, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1553, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1554
 * 		# Copy input arrays
 * 		for i in range(M):
 * 			kf_arr[i] = kf[i]             # <<<<<<<<<<<<<<
 * 			kr_arr[i] = kr[i]
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_kf, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1554, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1554, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1554, __pyx_L4_error)
      (__pyx_v_kf_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1555
 * 		for i in range(M):
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(len(reac_idx)):
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_kr, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1555, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1555, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1555, __pyx_L4_error)
      (__pyx_v_kr_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1553
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1557
 * 			kr_arr[i] = kr[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1557, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1557, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1557, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1557, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1557, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1557, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1557, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1557, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1557, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1557, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1558
 * 
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_idx, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1558, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1558, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1558, __pyx_L4_error)
      (__pyx_v_reac_idx_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1557
 * 			kr_arr[i] = kr[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1559
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1559, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1559, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1559, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1559, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1559, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1559, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1559, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1559, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1559, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1559, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1560
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_nu, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1560, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1560, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1560, __pyx_L4_error)
      (__pyx_v_reac_nu_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1559
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1561
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1561, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1561, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1561, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1561, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1561, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1561, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1561, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1561, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1561, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1561, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1562
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_off, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1562, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1562, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1562, __pyx_L4_error)
      (__pyx_v_reac_off_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1561
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1563
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1563, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1563, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1563, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1563, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1563, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1563, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1563, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1563, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1563, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1563, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1564
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_prod_idx, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1564, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1564, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1564, __pyx_L4_error)
      (__pyx_v_prod_idx_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1563
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1565
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1565, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1565, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1565, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1565, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1565, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1565, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1565, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1565, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1565, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1565, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1566
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_prod_nu, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1566, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1566, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1566, __pyx_L4_error)
      (__pyx_v_prod_nu_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1565
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1567
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1567, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1567, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1567, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1567, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1567, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1567, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1567, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1567, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1567, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1567, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1568
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(N):
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_prod_off, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1568, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1568, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1568, __pyx_L4_error)
      (__pyx_v_prod_off_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1567
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1570
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1570, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1570, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1570, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1570, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1570, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1570, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1570, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1570, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1570, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1571
 * 
 * 		for i in range(N):
 * 			conc0_arr[i] = conc0[i]             # <<<<<<<<<<<<<<
 * 
 * 		# Call original complex C++ function (24 parameters)
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_conc0, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1571, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1571, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1571, __pyx_L4_error)
      (__pyx_v_conc0_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1570
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1574
 * 
 * 		# Call original complex C++ function (24 parameters)
 * 		result = simulate_fluidized_bed(N, M, kf_arr, kr_arr, reac_idx_arr, reac_nu_arr, reac_off_arr,             # <<<<<<<<<<<<<<
 * 										prod_idx_arr, prod_nu_arr, prod_off_arr, conc0_arr,
 * 										gas_velocity, bed_height, bed_porosity, bubble_fraction,
 */
    __pyx_v_result = simulate_fluidized_bed(__pyx_v_N, __pyx_v_M, __pyx_v_kf_arr, __pyx_v_kr_arr, __pyx_v_reac_idx_arr, __pyx_v_reac_nu_arr, __pyx_v_reac_off_arr, __pyx_v_prod_idx_arr, __pyx_v_prod_nu_arr, __pyx_v_prod_off_arr, __pyx_v_conc0_arr, __pyx_v_gas_velocity, __pyx_v_bed_height, __pyx_v_bed_porosity, __pyx_v_bubble_fraction, __pyx_v_particle_diameter, __pyx_v_catalyst_density, __pyx_v_time_span, __pyx_v_dt, __pyx_v_times, __pyx_v_conc_out_flat, __pyx_v_bubble_conc_out, __pyx_v_emulsion_conc_out, __pyx_v_max_len);

    /* "pyroxa/pybindings.pyx":1580
 * 										times, conc_out_flat, bubble_conc_out, emulsion_conc_out, max_len)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
 */
    __pyx_t_8 = ((__pyx_v_result > 0) != 0);
    if (__pyx_t_8) {

      /* "pyroxa/pybindings.pyx":1582
 * 		if result > 0:
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]             # <<<<<<<<<<<<<<
 * 			conc_matrix = []
 * 			bubble_matrix = []
 */
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1582, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __pyx_v_result;
        __pyx_t_9 = __pyx_t_7;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_9genexpr32__pyx_v_i = __pyx_t_10;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_times[__pyx_9genexpr32__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1582, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 1582, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_times_out = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1583
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
 * 			conc_matrix = []             # <<<<<<<<<<<<<<
 * 			bubble_matrix = []
 * 			emulsion_matrix = []
 */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1583, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_conc_matrix = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1584
 * 			times_out = [times[i] for i in range(result)]
 * 			conc_matrix = []
 * 			bubble_matrix = []             # <<<<<<<<<<<<<<
 * 			emulsion_matrix = []
 * 
 */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1584, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_bubble_matrix = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1585
 * 			conc_matrix = []
 * 			bubble_matrix = []
 * 			emulsion_matrix = []             # <<<<<<<<<<<<<<
 * 
 * 			for t in range(result):
 */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1585, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_emulsion_matrix = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1587
 * 			emulsion_matrix = []
 * 
 * 			for t in range(result):             # <<<<<<<<<<<<<<
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				bubble_t = [bubble_conc_out[t*N + i] for i in range(N)]
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1587, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1587, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
        __pyx_t_4 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1587, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1587, __pyx_L4_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_4)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1587, __pyx_L4_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1587, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1587, __pyx_L4_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1587, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_4(__pyx_t_2);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 1587, __pyx_L4_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "pyroxa/pybindings.pyx":1588
 * 
 * 			for t in range(result):
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 				bubble_t = [bubble_conc_out[t*N + i] for i in range(N)]
 * 				emulsion_t = [emulsion_conc_out[t*N + i] for i in range(N)]
 */
        { /* enter inner scope */
          __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1588, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = __pyx_v_N;
          __pyx_t_9 = __pyx_t_7;
          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
            __pyx_9genexpr33__pyx_v_i = __pyx_t_10;
            __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1588, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_12 = PyNumber_Multiply(__pyx_v_t, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 1588, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_9genexpr33__pyx_v_i); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1588, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_13 = PyNumber_Add(__pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1588, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_13); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1588, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = PyFloat_FromDouble((__pyx_v_conc_out_flat[__pyx_t_6])); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1588, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_13);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_13))) __PYX_ERR(1, 1588, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_conc_t, ((PyObject*)__pyx_t_3));
        __pyx_t_3 = 0;

        /* "pyroxa/pybindings.pyx":1589
 * 			for t in range(result):
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				bubble_t = [bubble_conc_out[t*N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 				emulsion_t = [emulsion_conc_out[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)
 */
        { /* enter inner scope */
          __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1589, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = __pyx_v_N;
          __pyx_t_9 = __pyx_t_7;
          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
            __pyx_9genexpr34__pyx_v_i = __pyx_t_10;
            __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1589, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_11 = PyNumber_Multiply(__pyx_v_t, __pyx_t_13); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1589, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_9genexpr34__pyx_v_i); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1589, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_12 = PyNumber_Add(__pyx_t_11, __pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 1589, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_12); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1589, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = PyFloat_FromDouble((__pyx_v_bubble_conc_out[__pyx_t_6])); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 1589, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_12);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_12))) __PYX_ERR(1, 1589, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_bubble_t, ((PyObject*)__pyx_t_3));
        __pyx_t_3 = 0;

        /* "pyroxa/pybindings.pyx":1590
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				bubble_t = [bubble_conc_out[t*N + i] for i in range(N)]
 * 				emulsion_t = [emulsion_conc_out[t*N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 				conc_matrix.append(conc_t)
 * 				bubble_matrix.append(bubble_t)
 */
        { /* enter inner scope */
          __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1590, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = __pyx_v_N;
          __pyx_t_9 = __pyx_t_7;
          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
            __pyx_9genexpr35__pyx_v_i = __pyx_t_10;
            __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 1590, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_13 = PyNumber_Multiply(__pyx_v_t, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1590, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_12 = __Pyx_PyInt_From_int(__pyx_9genexpr35__pyx_v_i); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 1590, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_11 = PyNumber_Add(__pyx_t_13, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1590, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_11); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1590, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_11 = PyFloat_FromDouble((__pyx_v_emulsion_conc_out[__pyx_t_6])); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1590, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_11);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_11))) __PYX_ERR(1, 1590, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_emulsion_t, ((PyObject*)__pyx_t_3));
        __pyx_t_3 = 0;

        /* "pyroxa/pybindings.pyx":1591
 * 				bubble_t = [bubble_conc_out[t*N + i] for i in range(N)]
 * 				emulsion_t = [emulsion_conc_out[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)             # <<<<<<<<<<<<<<
 * 				bubble_matrix.append(bubble_t)
 * 				emulsion_matrix.append(emulsion_t)
 */
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_conc_matrix, __pyx_v_conc_t); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(1, 1591, __pyx_L4_error)

        /* "pyroxa/pybindings.pyx":1592
 * 				emulsion_t = [emulsion_conc_out[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)
 * 				bubble_matrix.append(bubble_t)             # <<<<<<<<<<<<<<
 * 				emulsion_matrix.append(emulsion_t)
 * 
 */
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_bubble_matrix, __pyx_v_bubble_t); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(1, 1592, __pyx_L4_error)

        /* "pyroxa/pybindings.pyx":1593
 * 				conc_matrix.append(conc_t)
 * 				bubble_matrix.append(bubble_t)
 * 				emulsion_matrix.append(emulsion_t)             # <<<<<<<<<<<<<<
 * 
 * 			return {
 */
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_emulsion_matrix, __pyx_v_emulsion_t); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(1, 1593, __pyx_L4_error)

        /* "pyroxa/pybindings.pyx":1587
 * 			emulsion_matrix = []
 * 
 * 			for t in range(result):             # <<<<<<<<<<<<<<
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				bubble_t = [bubble_conc_out[t*N + i] for i in range(N)]
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1595
 * 				emulsion_matrix.append(emulsion_t)
 * 
 * 			return {             # <<<<<<<<<<<<<<
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,
 */
      __Pyx_XDECREF(__pyx_r);

      /* "pyroxa/pybindings.pyx":1596
 * 
 * 			return {
 * 				'times': times_out,             # <<<<<<<<<<<<<<
 * 				'concentrations': conc_matrix,
 * 				'bubble_concentrations': bubble_matrix,
 */
      __pyx_t_2 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1596, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_times, __pyx_v_times_out) < 0) __PYX_ERR(1, 1596, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1597
 * 			return {
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,             # <<<<<<<<<<<<<<
 * 				'bubble_concentrations': bubble_matrix,
 * 				'emulsion_concentrations': emulsion_matrix,
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_concentrations, __pyx_v_conc_matrix) < 0) __PYX_ERR(1, 1596, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1598
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,
 * 				'bubble_concentrations': bubble_matrix,             # <<<<<<<<<<<<<<
 * 				'emulsion_concentrations': emulsion_matrix,
 * 				'n_points': result,
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_bubble_concentrations, __pyx_v_bubble_matrix) < 0) __PYX_ERR(1, 1596, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1599
 * 				'concentrations': conc_matrix,
 * 				'bubble_concentrations': bubble_matrix,
 * 				'emulsion_concentrations': emulsion_matrix,             # <<<<<<<<<<<<<<
 * 				'n_points': result,
 * 				'success': True
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_emulsion_concentrations, __pyx_v_emulsion_matrix) < 0) __PYX_ERR(1, 1596, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1600
 * 				'bubble_concentrations': bubble_matrix,
 * 				'emulsion_concentrations': emulsion_matrix,
 * 				'n_points': result,             # <<<<<<<<<<<<<<
 * 				'success': True
 * 			}
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1600, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_n_points, __pyx_t_3) < 0) __PYX_ERR(1, 1596, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1601
 * 				'emulsion_concentrations': emulsion_matrix,
 * 				'n_points': result,
 * 				'success': True             # <<<<<<<<<<<<<<
 * 			}
 * 		else:
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_success, Py_True) < 0) __PYX_ERR(1, 1596, __pyx_L4_error)
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1580
 * 										times, conc_out_flat, bubble_conc_out, emulsion_conc_out, max_len)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
 */
    }

    /* "pyroxa/pybindings.pyx":1604
 * 			}
 * 		else:
 * 			return {'success': False, 'error': 'Simulation failed'}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(kf_arr)
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1604, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_success, Py_False) < 0) __PYX_ERR(1, 1604, __pyx_L4_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_error, __pyx_kp_u_Simulation_failed) < 0) __PYX_ERR(1, 1604, __pyx_L4_error)
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1606
 * 			return {'success': False, 'error': 'Simulation failed'}
 * 	finally:
 * 		free(kf_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __pyx_t_7 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
      {
        free(__pyx_v_kf_arr);

        /* "pyroxa/pybindings.pyx":1607
 * 	finally:
 * 		free(kf_arr)
 * 		free(kr_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 */
        free(__pyx_v_kr_arr);

        /* "pyroxa/pybindings.pyx":1608
 * 		free(kf_arr)
 * 		free(kr_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 */
        free(__pyx_v_reac_idx_arr);

        /* "pyroxa/pybindings.pyx":1609
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 */
        free(__pyx_v_reac_nu_arr);

        /* "pyroxa/pybindings.pyx":1610
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 */
        free(__pyx_v_reac_off_arr);

        /* "pyroxa/pybindings.pyx":1611
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 */
        free(__pyx_v_prod_idx_arr);

        /* "pyroxa/pybindings.pyx":1612
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 */
        free(__pyx_v_prod_nu_arr);

        /* "pyroxa/pybindings.pyx":1613
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(times)
 */
        free(__pyx_v_prod_off_arr);

        /* "pyroxa/pybindings.pyx":1614
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(times)
 * 		free(conc_out_flat)
 */
        free(__pyx_v_conc0_arr);

        /* "pyroxa/pybindings.pyx":1615
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(conc_out_flat)
 * 		free(bubble_conc_out)
 */
        free(__pyx_v_times);

        /* "pyroxa/pybindings.pyx":1616
 * 		free(conc0_arr)
 * 		free(times)
 * 		free(conc_out_flat)             # <<<<<<<<<<<<<<
 * 		free(bubble_conc_out)
 * 		free(emulsion_conc_out)
 */
        free(__pyx_v_conc_out_flat);

        /* "pyroxa/pybindings.pyx":1617
 * 		free(times)
 * 		free(conc_out_flat)
 * 		free(bubble_conc_out)             # <<<<<<<<<<<<<<
 * 		free(emulsion_conc_out)
 * 
 */
        free(__pyx_v_bubble_conc_out);

        /* "pyroxa/pybindings.pyx":1618
 * 		free(conc_out_flat)
 * 		free(bubble_conc_out)
 * 		free(emulsion_conc_out)             # <<<<<<<<<<<<<<
 * 
 * def py_simulate_homogeneous_batch(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,
 */
        free(__pyx_v_emulsion_conc_out);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
      }
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
      __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
      __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_15;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_21 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1606
 * 			return {'success': False, 'error': 'Simulation failed'}
 * 	finally:
 * 		free(kf_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 */
      free(__pyx_v_kf_arr);

      /* "pyroxa/pybindings.pyx":1607
 * 	finally:
 * 		free(kf_arr)
 * 		free(kr_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 */
      free(__pyx_v_kr_arr);

      /* "pyroxa/pybindings.pyx":1608
 * 		free(kf_arr)
 * 		free(kr_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 */
      free(__pyx_v_reac_idx_arr);

      /* "pyroxa/pybindings.pyx":1609
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 */
      free(__pyx_v_reac_nu_arr);

      /* "pyroxa/pybindings.pyx":1610
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 */
      free(__pyx_v_reac_off_arr);

      /* "pyroxa/pybindings.pyx":1611
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 */
      free(__pyx_v_prod_idx_arr);

      /* "pyroxa/pybindings.pyx":1612
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 */
      free(__pyx_v_prod_nu_arr);

      /* "pyroxa/pybindings.pyx":1613
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(times)
 */
      free(__pyx_v_prod_off_arr);

      /* "pyroxa/pybindings.pyx":1614
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(times)
 * 		free(conc_out_flat)
 */
      free(__pyx_v_conc0_arr);

      /* "pyroxa/pybindings.pyx":1615
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(conc_out_flat)
 * 		free(bubble_conc_out)
 */
      free(__pyx_v_times);

      /* "pyroxa/pybindings.pyx":1616
 * 		free(conc0_arr)
 * 		free(times)
 * 		free(conc_out_flat)             # <<<<<<<<<<<<<<
 * 		free(bubble_conc_out)
 * 		free(emulsion_conc_out)
 */
      free(__pyx_v_conc_out_flat);

      /* "pyroxa/pybindings.pyx":1617
 * 		free(times)
 * 		free(conc_out_flat)
 * 		free(bubble_conc_out)             # <<<<<<<<<<<<<<
 * 		free(emulsion_conc_out)
 * 
 */
      free(__pyx_v_bubble_conc_out);

      /* "pyroxa/pybindings.pyx":1618
 * 		free(conc_out_flat)
 * 		free(bubble_conc_out)
 * 		free(emulsion_conc_out)             # <<<<<<<<<<<<<<
 * 
 * def py_simulate_homogeneous_batch(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,
 */
      free(__pyx_v_emulsion_conc_out);
      __pyx_r = __pyx_t_21;
      __pyx_t_21 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1529
 * 		free(pressure_out)
 * 
 * def py_simulate_fluidized_bed(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 							  prod_idx, prod_nu, prod_off, conc0, double gas_velocity,
 * 							  double bed_height, double bed_porosity, double bubble_fraction,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_fluidized_bed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_times_out);
  __Pyx_XDECREF(__pyx_v_conc_matrix);
  __Pyx_XDECREF(__pyx_v_bubble_matrix);
  __Pyx_XDECREF(__pyx_v_emulsion_matrix);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_conc_t);
  __Pyx_XDECREF(__pyx_v_bubble_t);
  __Pyx_XDECREF(__pyx_v_emulsion_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1620
 * 		free(emulsion_conc_out)
 * 
 * def py_simulate_homogeneous_batch(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 								  prod_idx, prod_nu, prod_off, conc0, double volume,
 * 								  double mixing_intensity, double time_span, double dt,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_109py_simulate_homogeneous_batch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_108py_simulate_homogeneous_batch[] = "py_simulate_homogeneous_batch(int N, int M, kf, kr, reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off, conc0, double volume, double mixing_intensity, double time_span, double dt, int max_len=1000)\nSimulate homogeneous batch reactor using original complex C++ implementation with full parameter exposure";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_109py_simulate_homogeneous_batch = {"py_simulate_homogeneous_batch", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_109py_simulate_homogeneous_batch, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_108py_simulate_homogeneous_batch};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_109py_simulate_homogeneous_batch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_N;
  int __pyx_v_M;
  PyObject *__pyx_v_kf = 0;
  PyObject *__pyx_v_kr = 0;
  PyObject *__pyx_v_reac_idx = 0;
  PyObject *__pyx_v_reac_nu = 0;
  PyObject *__pyx_v_reac_off = 0;
  PyObject *__pyx_v_prod_idx = 0;
  PyObject *__pyx_v_prod_nu = 0;
  PyObject *__pyx_v_prod_off = 0;
  PyObject *__pyx_v_conc0 = 0;
  double __pyx_v_volume;
  double __pyx_v_mixing_intensity;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_v_max_len;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_simulate_homogeneous_batch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_N,&__pyx_n_s_M,&__pyx_n_s_kf,&__pyx_n_s_kr,&__pyx_n_s_reac_idx,&__pyx_n_s_reac_nu,&__pyx_n_s_reac_off,&__pyx_n_s_prod_idx,&__pyx_n_s_prod_nu,&__pyx_n_s_prod_off,&__pyx_n_s_conc0,&__pyx_n_s_volume,&__pyx_n_s_mixing_intensity,&__pyx_n_s_time_span,&__pyx_n_s_dt,&__pyx_n_s_max_len,0};
    PyObject* values[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_M)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, 1); __PYX_ERR(1, 1620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kf)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, 2); __PYX_ERR(1, 1620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, 3); __PYX_ERR(1, 1620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reac_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, 4); __PYX_ERR(1, 1620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reac_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, 5); __PYX_ERR(1, 1620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reac_off)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, 6); __PYX_ERR(1, 1620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prod_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, 7); __PYX_ERR(1, 1620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prod_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, 8); __PYX_ERR(1, 1620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prod_off)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, 9); __PYX_ERR(1, 1620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conc0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, 10); __PYX_ERR(1, 1620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, 11); __PYX_ERR(1, 1620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mixing_intensity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, 12); __PYX_ERR(1, 1620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_span)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, 13); __PYX_ERR(1, 1620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, 14); __PYX_ERR(1, 1620, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_len);
          if (value) { values[15] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_simulate_homogeneous_batch") < 0)) __PYX_ERR(1, 1620, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_N = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1620, __pyx_L3_error)
    __pyx_v_M = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_M == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1620, __pyx_L3_error)
    __pyx_v_kf = values[2];
    __pyx_v_kr = values[3];
    __pyx_v_reac_idx = values[4];
    __pyx_v_reac_nu = values[5];
    __pyx_v_reac_off = values[6];
    __pyx_v_prod_idx = values[7];
    __pyx_v_prod_nu = values[8];
    __pyx_v_prod_off = values[9];
    __pyx_v_conc0 = values[10];
    __pyx_v_volume = __pyx_PyFloat_AsDouble(values[11]); if (unlikely((__pyx_v_volume == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1621, __pyx_L3_error)
    __pyx_v_mixing_intensity = __pyx_PyFloat_AsDouble(values[12]); if (unlikely((__pyx_v_mixing_intensity == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1622, __pyx_L3_error)
    __pyx_v_time_span = __pyx_PyFloat_AsDouble(values[13]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1622, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[14]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1622, __pyx_L3_error)
    if (values[15]) {
      __pyx_v_max_len = __Pyx_PyInt_As_int(values[15]); if (unlikely((__pyx_v_max_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1623, __pyx_L3_error)
    } else {
      __pyx_v_max_len = ((int)0x3E8);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1620, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_homogeneous_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_108py_simulate_homogeneous_batch(__pyx_self, __pyx_v_N, __pyx_v_M, __pyx_v_kf, __pyx_v_kr, __pyx_v_reac_idx, __pyx_v_reac_nu, __pyx_v_reac_off, __pyx_v_prod_idx, __pyx_v_prod_nu, __pyx_v_prod_off, __pyx_v_conc0, __pyx_v_volume, __pyx_v_mixing_intensity, __pyx_v_time_span, __pyx_v_dt, __pyx_v_max_len);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_108py_simulate_homogeneous_batch(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, PyObject *__pyx_v_kf, PyObject *__pyx_v_kr, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_volume, double __pyx_v_mixing_intensity, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len) {
  double *__pyx_v_kf_arr;
  double *__pyx_v_kr_arr;
  int *__pyx_v_reac_idx_arr;
  double *__pyx_v_reac_nu_arr;
  int *__pyx_v_reac_off_arr;
  int *__pyx_v_prod_idx_arr;
  double *__pyx_v_prod_nu_arr;
  int *__pyx_v_prod_off_arr;
  double *__pyx_v_conc0_arr;
  double *__pyx_v_times;
  double *__pyx_v_conc_out_flat;
  double *__pyx_v_mixing_efficiency_out;
  PyObject *__pyx_v_i = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_times_out = NULL;
  PyObject *__pyx_v_conc_matrix = NULL;
  PyObject *__pyx_v_mixing_efficiency = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_conc_t = NULL;
  int __pyx_9genexpr36__pyx_v_i;
  int __pyx_9genexpr37__pyx_v_i;
  int __pyx_9genexpr38__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  double __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  char const *__pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_simulate_homogeneous_batch", 0);

  /* "pyroxa/pybindings.pyx":1627
 * 
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 */
  __pyx_v_kf_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1628
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 */
  __pyx_v_kr_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1629
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1629, __pyx_L1_error)
  __pyx_v_reac_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1630
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1630, __pyx_L1_error)
  __pyx_v_reac_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1631
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1631, __pyx_L1_error)
  __pyx_v_reac_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1632
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1632, __pyx_L1_error)
  __pyx_v_prod_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1633
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1633, __pyx_L1_error)
  __pyx_v_prod_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1634
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1634, __pyx_L1_error)
  __pyx_v_prod_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1635
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 */
  __pyx_v_conc0_arr = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1636
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* mixing_efficiency_out = <double*>malloc(max_len * sizeof(double))
 */
  __pyx_v_times = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1637
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* mixing_efficiency_out = <double*>malloc(max_len * sizeof(double))
 * 
 */
  __pyx_v_conc_out_flat = ((double *)malloc(((__pyx_v_N * __pyx_v_max_len) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1638
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* mixing_efficiency_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_mixing_efficiency_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1640
 * 	cdef double* mixing_efficiency_out = <double*>malloc(max_len * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Copy input arrays
 * 		for i in range(M):
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1642
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_M); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1642, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1642, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1642, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1642, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1642, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1642, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1642, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1642, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1642, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1643
 * 		# Copy input arrays
 * 		for i in range(M):
 * 			kf_arr[i] = kf[i]             # <<<<<<<<<<<<<<
 * 			kr_arr[i] = kr[i]
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_kf, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1643, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1643, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1643, __pyx_L4_error)
      (__pyx_v_kf_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1644
 * 		for i in range(M):
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(len(reac_idx)):
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_kr, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1644, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1644, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1644, __pyx_L4_error)
      (__pyx_v_kr_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1642
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1646
 * 			kr_arr[i] = kr[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1646, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1646, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1646, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1646, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1646, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1646, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1646, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1646, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1646, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1646, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1647
 * 
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_idx, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1647, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1647, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1647, __pyx_L4_error)
      (__pyx_v_reac_idx_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1646
 * 			kr_arr[i] = kr[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1648
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1648, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1648, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1648, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1648, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1648, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1648, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1648, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1648, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1648, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1648, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1649
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_nu, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1649, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1649, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1649, __pyx_L4_error)
      (__pyx_v_reac_nu_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1648
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1650
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1650, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1650, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1650, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1650, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1650, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1650, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1650, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1650, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1650, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1650, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1651
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_off, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1651, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1651, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1651, __pyx_L4_error)
      (__pyx_v_reac_off_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1650
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1652
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1652, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1652, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1652, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1652, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1652, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1652, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1652, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1652, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1652, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1652, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1653
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_prod_idx, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1653, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1653, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1653, __pyx_L4_error)
      (__pyx_v_prod_idx_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1652
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1654
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1654, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1654, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1654, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1654, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1654, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1654, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1654, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1654, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1654, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1654, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1655
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_prod_nu, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1655, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1655, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1655, __pyx_L4_error)
      (__pyx_v_prod_nu_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1654
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1656
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1656, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1656, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1656, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1656, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1656, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1656, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1656, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1656, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1656, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1656, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1657
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(N):
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_prod_off, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1657, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1657, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1657, __pyx_L4_error)
      (__pyx_v_prod_off_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1656
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1659
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1659, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1659, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1659, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1659, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1659, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1659, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1659, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1659, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1659, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1660
 * 
 * 		for i in range(N):
 * 			conc0_arr[i] = conc0[i]             # <<<<<<<<<<<<<<
 * 
 * 		# Call original complex C++ function (19 parameters)
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_conc0, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1660, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1660, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1660, __pyx_L4_error)
      (__pyx_v_conc0_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1659
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1663
 * 
 * 		# Call original complex C++ function (19 parameters)
 * 		result = simulate_homogeneous_batch(N, M, kf_arr, kr_arr, reac_idx_arr, reac_nu_arr, reac_off_arr,             # <<<<<<<<<<<<<<
 * 											prod_idx_arr, prod_nu_arr, prod_off_arr, conc0_arr,
 * 											volume, mixing_intensity, time_span, dt,
 */
    __pyx_v_result = simulate_homogeneous_batch(__pyx_v_N, __pyx_v_M, __pyx_v_kf_arr, __pyx_v_kr_arr, __pyx_v_reac_idx_arr, __pyx_v_reac_nu_arr, __pyx_v_reac_off_arr, __pyx_v_prod_idx_arr, __pyx_v_prod_nu_arr, __pyx_v_prod_off_arr, __pyx_v_conc0_arr, __pyx_v_volume, __pyx_v_mixing_intensity, __pyx_v_time_span, __pyx_v_dt, __pyx_v_times, __pyx_v_conc_out_flat, __pyx_v_mixing_efficiency_out, __pyx_v_max_len);

    /* "pyroxa/pybindings.pyx":1668
 * 											times, conc_out_flat, mixing_efficiency_out, max_len)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
 */
    __pyx_t_8 = ((__pyx_v_result > 0) != 0);
    if (__pyx_t_8) {

      /* "pyroxa/pybindings.pyx":1670
 * 		if result > 0:
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]             # <<<<<<<<<<<<<<
 * 			conc_matrix = []
 * 			mixing_efficiency = [mixing_efficiency_out[i] for i in range(result)]
 */
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1670, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __pyx_v_result;
        __pyx_t_9 = __pyx_t_7;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_9genexpr36__pyx_v_i = __pyx_t_10;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_times[__pyx_9genexpr36__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1670, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 1670, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_times_out = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1671
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
 * 			conc_matrix = []             # <<<<<<<<<<<<<<
 * 			mixing_efficiency = [mixing_efficiency_out[i] for i in range(result)]
 * 
 */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1671, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_conc_matrix = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1672
 * 			times_out = [times[i] for i in range(result)]
 * 			conc_matrix = []
 * 			mixing_efficiency = [mixing_efficiency_out[i] for i in range(result)]             # <<<<<<<<<<<<<<
 * 
 * 			for t in range(result):
 */
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1672, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __pyx_v_result;
        __pyx_t_9 = __pyx_t_7;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_9genexpr37__pyx_v_i = __pyx_t_10;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_mixing_efficiency_out[__pyx_9genexpr37__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1672, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 1672, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_mixing_efficiency = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1674
 * 			mixing_efficiency = [mixing_efficiency_out[i] for i in range(result)]
 * 
 * 			for t in range(result):             # <<<<<<<<<<<<<<
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1674, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1674, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
        __pyx_t_4 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1674, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1674, __pyx_L4_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_4)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1674, __pyx_L4_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1674, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1674, __pyx_L4_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1674, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_4(__pyx_t_2);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 1674, __pyx_L4_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "pyroxa/pybindings.pyx":1675
 * 
 * 			for t in range(result):
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 				conc_matrix.append(conc_t)
 * 
 */
        { /* enter inner scope */
          __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1675, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_7 = __pyx_v_N;
          __pyx_t_9 = __pyx_t_7;
          for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
            __pyx_9genexpr38__pyx_v_i = __pyx_t_10;
            __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1675, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_12 = PyNumber_Multiply(__pyx_v_t, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 1675, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_9genexpr38__pyx_v_i); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1675, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_13 = PyNumber_Add(__pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1675, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_13); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1675, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = PyFloat_FromDouble((__pyx_v_conc_out_flat[__pyx_t_6])); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1675, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_13);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_13))) __PYX_ERR(1, 1675, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_conc_t, ((PyObject*)__pyx_t_3));
        __pyx_t_3 = 0;

        /* "pyroxa/pybindings.pyx":1676
 * 			for t in range(result):
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)             # <<<<<<<<<<<<<<
 * 
 * 			return {
 */
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_conc_matrix, __pyx_v_conc_t); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(1, 1676, __pyx_L4_error)

        /* "pyroxa/pybindings.pyx":1674
 * 			mixing_efficiency = [mixing_efficiency_out[i] for i in range(result)]
 * 
 * 			for t in range(result):             # <<<<<<<<<<<<<<
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1678
 * 				conc_matrix.append(conc_t)
 * 
 * 			return {             # <<<<<<<<<<<<<<
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,
 */
      __Pyx_XDECREF(__pyx_r);

      /* "pyroxa/pybindings.pyx":1679
 * 
 * 			return {
 * 				'times': times_out,             # <<<<<<<<<<<<<<
 * 				'concentrations': conc_matrix,
 * 				'mixing_efficiency': mixing_efficiency,
 */
      __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1679, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_times, __pyx_v_times_out) < 0) __PYX_ERR(1, 1679, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1680
 * 			return {
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,             # <<<<<<<<<<<<<<
 * 				'mixing_efficiency': mixing_efficiency,
 * 				'n_points': result,
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_concentrations, __pyx_v_conc_matrix) < 0) __PYX_ERR(1, 1679, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1681
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,
 * 				'mixing_efficiency': mixing_efficiency,             # <<<<<<<<<<<<<<
 * 				'n_points': result,
 * 				'success': True
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_mixing_efficiency, __pyx_v_mixing_efficiency) < 0) __PYX_ERR(1, 1679, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1682
 * 				'concentrations': conc_matrix,
 * 				'mixing_efficiency': mixing_efficiency,
 * 				'n_points': result,             # <<<<<<<<<<<<<<
 * 				'success': True
 * 			}
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1682, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_n_points, __pyx_t_3) < 0) __PYX_ERR(1, 1679, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1683
 * 				'mixing_efficiency': mixing_efficiency,
 * 				'n_points': result,
 * 				'success': True             # <<<<<<<<<<<<<<
 * 			}
 * 		else:
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_success, Py_True) < 0) __PYX_ERR(1, 1679, __pyx_L4_error)
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1668
 * 											times, conc_out_flat, mixing_efficiency_out, max_len)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
 */
    }

    /* "pyroxa/pybindings.pyx":1686
 * 			}
 * 		else:
 * 			return {'success': False, 'error': 'Simulation failed'}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(kf_arr)
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1686, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_success, Py_False) < 0) __PYX_ERR(1, 1686, __pyx_L4_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_error, __pyx_kp_u_Simulation_failed) < 0) __PYX_ERR(1, 1686, __pyx_L4_error)
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1688
 * 			return {'success': False, 'error': 'Simulation failed'}
 * 	finally:
 * 		free(kf_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __pyx_t_7 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
      {
        free(__pyx_v_kf_arr);

        /* "pyroxa/pybindings.pyx":1689
 * 	finally:
 * 		free(kf_arr)
 * 		free(kr_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 */
        free(__pyx_v_kr_arr);

        /* "pyroxa/pybindings.pyx":1690
 * 		free(kf_arr)
 * 		free(kr_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 */
        free(__pyx_v_reac_idx_arr);

        /* "pyroxa/pybindings.pyx":1691
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 */
        free(__pyx_v_reac_nu_arr);

        /* "pyroxa/pybindings.pyx":1692
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 */
        free(__pyx_v_reac_off_arr);

        /* "pyroxa/pybindings.pyx":1693
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 */
        free(__pyx_v_prod_idx_arr);

        /* "pyroxa/pybindings.pyx":1694
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 */
        free(__pyx_v_prod_nu_arr);

        /* "pyroxa/pybindings.pyx":1695
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(times)
 */
        free(__pyx_v_prod_off_arr);

        /* "pyroxa/pybindings.pyx":1696
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(times)
 * 		free(conc_out_flat)
 */
        free(__pyx_v_conc0_arr);

        /* "pyroxa/pybindings.pyx":1697
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(conc_out_flat)
 * 		free(mixing_efficiency_out)
 */
        free(__pyx_v_times);

        /* "pyroxa/pybindings.pyx":1698
 * 		free(conc0_arr)
 * 		free(times)
 * 		free(conc_out_flat)             # <<<<<<<<<<<<<<
 * 		free(mixing_efficiency_out)
 * 
 */
        free(__pyx_v_conc_out_flat);

        /* "pyroxa/pybindings.pyx":1699
 * 		free(times)
 * 		free(conc_out_flat)
 * 		free(mixing_efficiency_out)             # <<<<<<<<<<<<<<
 * 
 * def py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None):
 */
        free(__pyx_v_mixing_efficiency_out);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
      }
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
      __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
      __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_15;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_21 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1688
 * 			return {'success': False, 'error': 'Simulation failed'}
 * 	finally:
 * 		free(kf_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 */
      free(__pyx_v_kf_arr);

      /* "pyroxa/pybindings.pyx":1689
 * 	finally:
 * 		free(kf_arr)
 * 		free(kr_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 */
      free(__pyx_v_kr_arr);

      /* "pyroxa/pybindings.pyx":1690
 * 		free(kf_arr)
 * 		free(kr_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 */
      free(__pyx_v_reac_idx_arr);

      /* "pyroxa/pybindings.pyx":1691
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 */
      free(__pyx_v_reac_nu_arr);

      /* "pyroxa/pybindings.pyx":1692
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 */
      free(__pyx_v_reac_off_arr);

      /* "pyroxa/pybindings.pyx":1693
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 */
      free(__pyx_v_prod_idx_arr);

      /* "pyroxa/pybindings.pyx":1694
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 */
      free(__pyx_v_prod_nu_arr);

      /* "pyroxa/pybindings.pyx":1695
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(times)
 */
      free(__pyx_v_prod_off_arr);

      /* "pyroxa/pybindings.pyx":1696
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(times)
 * 		free(conc_out_flat)
 */
      free(__pyx_v_conc0_arr);

      /* "pyroxa/pybindings.pyx":1697
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(conc_out_flat)
 * 		free(mixing_efficiency_out)
 */
      free(__pyx_v_times);

      /* "pyroxa/pybindings.pyx":1698
 * 		free(conc0_arr)
 * 		free(times)
 * 		free(conc_out_flat)             # <<<<<<<<<<<<<<
 * 		free(mixing_efficiency_out)
 * 
 */
      free(__pyx_v_conc_out_flat);

      /* "pyroxa/pybindings.pyx":1699
 * 		free(times)
 * 		free(conc_out_flat)
 * 		free(mixing_efficiency_out)             # <<<<<<<<<<<<<<
 * 
 * def py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None):
 */
      free(__pyx_v_mixing_efficiency_out);
      __pyx_r = __pyx_t_21;
      __pyx_t_21 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1620
 * 		free(emulsion_conc_out)
 * 
 * def py_simulate_homogeneous_batch(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 								  prod_idx, prod_nu, prod_off, conc0, double volume,
 * 								  double mixing_intensity, double time_span, double dt,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_homogeneous_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_times_out);
  __Pyx_XDECREF(__pyx_v_conc_matrix);
  __Pyx_XDECREF(__pyx_v_mixing_efficiency);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_conc_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1701
 * 		free(mixing_efficiency_out)
 * 
 * def py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None):             # <<<<<<<<<<<<<<
 * 	"""Simulate multi-reactor system with adaptive control"""
 * 	import numpy as np
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_111py_simulate_multi_reactor_adaptive(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_110py_simulate_multi_reactor_adaptive[] = "py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None)\nSimulate multi-reactor system with adaptive control";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_111py_simulate_multi_reactor_adaptive = {"py_simulate_multi_reactor_adaptive", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_111py_simulate_multi_reactor_adaptive, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_110py_simulate_multi_reactor_adaptive};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_111py_simulate_multi_reactor_adaptive(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_reactor_config = 0;
  CYTHON_UNUSED PyObject *__pyx_v_feed_conditions = 0;
  CYTHON_UNUSED PyObject *__pyx_v_control_strategy = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_simulate_multi_reactor_adaptive (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_reactor_config,&__pyx_n_s_feed_conditions,&__pyx_n_s_control_strategy,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reactor_config)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_feed_conditions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_simulate_multi_reactor_adaptive", 0, 2, 3, 1); __PYX_ERR(1, 1701, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_control_strategy);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_simulate_multi_reactor_adaptive") < 0)) __PYX_ERR(1, 1701, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_reactor_config = values[0];
    __pyx_v_feed_conditions = values[1];
    __pyx_v_control_strategy = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_simulate_multi_reactor_adaptive", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1701, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_multi_reactor_adaptive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_110py_simulate_multi_reactor_adaptive(__pyx_self, __pyx_v_reactor_config, __pyx_v_feed_conditions, __pyx_v_control_strategy);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_110py_simulate_multi_reactor_adaptive(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_reactor_config, CYTHON_UNUSED PyObject *__pyx_v_feed_conditions, CYTHON_UNUSED PyObject *__pyx_v_control_strategy) {
  CYTHON_UNUSED PyObject *__pyx_v_np = NULL;
  Py_ssize_t __pyx_v_n_reactors;
  PyObject *__pyx_v_reactor_outputs = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_reactor_output = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_simulate_multi_reactor_adaptive", 0);

  /* "pyroxa/pybindings.pyx":1703
 * def py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None):
 * 	"""Simulate multi-reactor system with adaptive control"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 	n_reactors = len(reactor_config) if isinstance(reactor_config, list) else 3
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1705
 * 	import numpy as np
 * 
 * 	n_reactors = len(reactor_config) if isinstance(reactor_config, list) else 3             # <<<<<<<<<<<<<<
 * 
 * 	# Create simple multi-reactor simulation result
 */
  __pyx_t_3 = PyList_Check(__pyx_v_reactor_config); 
  if ((__pyx_t_3 != 0)) {
    __pyx_t_4 = PyObject_Length(__pyx_v_reactor_config); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1705, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_4;
  } else {
    __pyx_t_2 = 3;
  }
  __pyx_v_n_reactors = __pyx_t_2;

  /* "pyroxa/pybindings.pyx":1708
 * 
 * 	# Create simple multi-reactor simulation result
 * 	reactor_outputs = []             # <<<<<<<<<<<<<<
 * 	for i in range(n_reactors):
 * 		reactor_output = {
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_reactor_outputs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1709
 * 	# Create simple multi-reactor simulation result
 * 	reactor_outputs = []
 * 	for i in range(n_reactors):             # <<<<<<<<<<<<<<
 * 		reactor_output = {
 * 			'reactor_id': i + 1,
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_n_reactors); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_1 = __pyx_t_5; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1709, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1709, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1709, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1709, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1709, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1709, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1709, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":1711
 * 	for i in range(n_reactors):
 * 		reactor_output = {
 * 			'reactor_id': i + 1,             # <<<<<<<<<<<<<<
 * 			'conversion': 0.7 + i * 0.1,  # Increasing conversion
 * 			'temperature': 298.15 + i * 50,  # Temperature profile
 */
    __pyx_t_5 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_reactor_id, __pyx_t_7) < 0) __PYX_ERR(1, 1711, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyroxa/pybindings.pyx":1712
 * 		reactor_output = {
 * 			'reactor_id': i + 1,
 * 			'conversion': 0.7 + i * 0.1,  # Increasing conversion             # <<<<<<<<<<<<<<
 * 			'temperature': 298.15 + i * 50,  # Temperature profile
 * 			'concentrations': [1.0 - (i + 1) * 0.2, (i + 1) * 0.15, (i + 1) * 0.05]
 */
    __pyx_t_7 = PyNumber_Multiply(__pyx_v_i, __pyx_float_0_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1712, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyFloat_AddCObj(__pyx_float_0_7, __pyx_t_7, 0.7, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1712, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_conversion, __pyx_t_8) < 0) __PYX_ERR(1, 1711, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "pyroxa/pybindings.pyx":1713
 * 			'reactor_id': i + 1,
 * 			'conversion': 0.7 + i * 0.1,  # Increasing conversion
 * 			'temperature': 298.15 + i * 50,  # Temperature profile             # <<<<<<<<<<<<<<
 * 			'concentrations': [1.0 - (i + 1) * 0.2, (i + 1) * 0.15, (i + 1) * 0.05]
 * 		}
 */
    __pyx_t_8 = PyNumber_Multiply(__pyx_v_i, __pyx_int_50); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyFloat_AddCObj(__pyx_float_298_15, __pyx_t_8, 298.15, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_temperature, __pyx_t_7) < 0) __PYX_ERR(1, 1711, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyroxa/pybindings.pyx":1714
 * 			'conversion': 0.7 + i * 0.1,  # Increasing conversion
 * 			'temperature': 298.15 + i * 50,  # Temperature profile
 * 			'concentrations': [1.0 - (i + 1) * 0.2, (i + 1) * 0.15, (i + 1) * 0.05]             # <<<<<<<<<<<<<<
 * 		}
 * 		reactor_outputs.append(reactor_output)
 */
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_Multiply(__pyx_t_7, __pyx_float_0_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyFloat_SubtractCObj(__pyx_float_1_0, __pyx_t_8, 1.0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyNumber_Multiply(__pyx_t_8, __pyx_float_0_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = PyNumber_Multiply(__pyx_t_8, __pyx_float_0_05); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_10);
    __pyx_t_7 = 0;
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_concentrations, __pyx_t_8) < 0) __PYX_ERR(1, 1711, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_reactor_output, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":1716
 * 			'concentrations': [1.0 - (i + 1) * 0.2, (i + 1) * 0.15, (i + 1) * 0.05]
 * 		}
 * 		reactor_outputs.append(reactor_output)             # <<<<<<<<<<<<<<
 * 
 * 	return {
 */
    __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_reactor_outputs, __pyx_v_reactor_output); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 1716, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1709
 * 	# Create simple multi-reactor simulation result
 * 	reactor_outputs = []
 * 	for i in range(n_reactors):             # <<<<<<<<<<<<<<
 * 		reactor_output = {
 * 			'reactor_id': i + 1,
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1718
 * 		reactor_outputs.append(reactor_output)
 * 
 * 	return {             # <<<<<<<<<<<<<<
 * 		'reactor_outputs': reactor_outputs,
 * 		'overall_conversion': 0.9,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "pyroxa/pybindings.pyx":1719
 * 
 * 	return {
 * 		'reactor_outputs': reactor_outputs,             # <<<<<<<<<<<<<<
 * 		'overall_conversion': 0.9,
 * 		'control_actions': ['temperature_adjust', 'flow_rate_adjust'],
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_reactor_outputs, __pyx_v_reactor_outputs) < 0) __PYX_ERR(1, 1719, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_overall_conversion, __pyx_float_0_9) < 0) __PYX_ERR(1, 1719, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1721
 * 		'reactor_outputs': reactor_outputs,
 * 		'overall_conversion': 0.9,
 * 		'control_actions': ['temperature_adjust', 'flow_rate_adjust'],             # <<<<<<<<<<<<<<
 * 		'success': True
 * 	}
 */
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_u_temperature_adjust);
  __Pyx_GIVEREF(__pyx_n_u_temperature_adjust);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_u_temperature_adjust);
  __Pyx_INCREF(__pyx_n_u_flow_rate_adjust);
  __Pyx_GIVEREF(__pyx_n_u_flow_rate_adjust);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_n_u_flow_rate_adjust);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_control_actions, __pyx_t_5) < 0) __PYX_ERR(1, 1719, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pyroxa/pybindings.pyx":1722
 * 		'overall_conversion': 0.9,
 * 		'control_actions': ['temperature_adjust', 'flow_rate_adjust'],
 * 		'success': True             # <<<<<<<<<<<<<<
 * 	}
 * 
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_success, Py_True) < 0) __PYX_ERR(1, 1719, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":1701
 * 		free(mixing_efficiency_out)
 * 
 * def py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None):             # <<<<<<<<<<<<<<
 * 	"""Simulate multi-reactor system with adaptive control"""
 * 	import numpy as np
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_multi_reactor_adaptive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_reactor_outputs);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_reactor_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1726
 * 
 * # BATCH 13: Energy analysis and statistical methods
 * def py_calculate_energy_balance(int N, int M, conc, reaction_rates,             # <<<<<<<<<<<<<<
 * 								enthalpies_formation, heat_capacities, double T):
 * 	"""Calculate energy balance using original complex C++ implementation with full parameter exposure"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_113py_calculate_energy_balance(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_112py_calculate_energy_balance[] = "py_calculate_energy_balance(int N, int M, conc, reaction_rates, enthalpies_formation, heat_capacities, double T)\nCalculate energy balance using original complex C++ implementation with full parameter exposure";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_113py_calculate_energy_balance = {"py_calculate_energy_balance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_113py_calculate_energy_balance, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_112py_calculate_energy_balance};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_113py_calculate_energy_balance(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_N;
  int __pyx_v_M;
  PyObject *__pyx_v_conc = 0;
  PyObject *__pyx_v_reaction_rates = 0;
  PyObject *__pyx_v_enthalpies_formation = 0;
  PyObject *__pyx_v_heat_capacities = 0;
  double __pyx_v_T;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_energy_balance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_N,&__pyx_n_s_M,&__pyx_n_s_conc,&__pyx_n_s_reaction_rates,&__pyx_n_s_enthalpies_formation,&__pyx_n_s_heat_capacities,&__pyx_n_s_T,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_M)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_energy_balance", 1, 7, 7, 1); __PYX_ERR(1, 1726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_energy_balance", 1, 7, 7, 2); __PYX_ERR(1, 1726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reaction_rates)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_energy_balance", 1, 7, 7, 3); __PYX_ERR(1, 1726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enthalpies_formation)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_energy_balance", 1, 7, 7, 4); __PYX_ERR(1, 1726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_heat_capacities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_energy_balance", 1, 7, 7, 5); __PYX_ERR(1, 1726, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_T)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_calculate_energy_balance", 1, 7, 7, 6); __PYX_ERR(1, 1726, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_calculate_energy_balance") < 0)) __PYX_ERR(1, 1726, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_N = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1726, __pyx_L3_error)
    __pyx_v_M = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_M == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1726, __pyx_L3_error)
    __pyx_v_conc = values[2];
    __pyx_v_reaction_rates = values[3];
    __pyx_v_enthalpies_formation = values[4];
    __pyx_v_heat_capacities = values[5];
    __pyx_v_T = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1727, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_energy_balance", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1726, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_energy_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_112py_calculate_energy_balance(__pyx_self, __pyx_v_N, __pyx_v_M, __pyx_v_conc, __pyx_v_reaction_rates, __pyx_v_enthalpies_formation, __pyx_v_heat_capacities, __pyx_v_T);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_112py_calculate_energy_balance(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, PyObject *__pyx_v_conc, PyObject *__pyx_v_reaction_rates, PyObject *__pyx_v_enthalpies_formation, PyObject *__pyx_v_heat_capacities, double __pyx_v_T) {
  double *__pyx_v_conc_arr;
  double *__pyx_v_rates_arr;
  double *__pyx_v_enthalpies_arr;
  double *__pyx_v_cp_arr;
  double __pyx_v_heat_generation_val;
  int __pyx_v_i;
  int __pyx_v_result;
  int __pyx_9genexpr39__pyx_v_i;
  int __pyx_9genexpr40__pyx_v_i;
  int __pyx_9genexpr41__pyx_v_i;
  int __pyx_9genexpr42__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  char const *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_energy_balance", 0);

  /* "pyroxa/pybindings.pyx":1731
 * 
 * 	# Allocate arrays for the complex function
 * 	cdef double* conc_arr = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* rates_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* enthalpies_arr = <double*>malloc(N * sizeof(double))
 */
  __pyx_v_conc_arr = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1732
 * 	# Allocate arrays for the complex function
 * 	cdef double* conc_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* rates_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* enthalpies_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* cp_arr = <double*>malloc(N * sizeof(double))
 */
  __pyx_v_rates_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1733
 * 	cdef double* conc_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* rates_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* enthalpies_arr = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* cp_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double heat_generation_val = 0.0
 */
  __pyx_v_enthalpies_arr = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1734
 * 	cdef double* rates_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* enthalpies_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* cp_arr = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double heat_generation_val = 0.0
 * 
 */
  __pyx_v_cp_arr = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1735
 * 	cdef double* enthalpies_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* cp_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double heat_generation_val = 0.0             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_heat_generation_val = 0.0;

  /* "pyroxa/pybindings.pyx":1737
 * 	cdef double heat_generation_val = 0.0
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Copy input arrays
 * 		for i in range(N):
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1739
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc_arr[i] = conc[i]
 * 			enthalpies_arr[i] = enthalpies_formation[i]
 */
    __pyx_t_1 = __pyx_v_N;
    __pyx_t_2 = __pyx_t_1;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "pyroxa/pybindings.pyx":1740
 * 		# Copy input arrays
 * 		for i in range(N):
 * 			conc_arr[i] = conc[i]             # <<<<<<<<<<<<<<
 * 			enthalpies_arr[i] = enthalpies_formation[i]
 * 			cp_arr[i] = heat_capacities[i]
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_conc, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1740, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1740, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_conc_arr[__pyx_v_i]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1741
 * 		for i in range(N):
 * 			conc_arr[i] = conc[i]
 * 			enthalpies_arr[i] = enthalpies_formation[i]             # <<<<<<<<<<<<<<
 * 			cp_arr[i] = heat_capacities[i]
 * 
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_enthalpies_formation, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1741, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1741, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_enthalpies_arr[__pyx_v_i]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1742
 * 			conc_arr[i] = conc[i]
 * 			enthalpies_arr[i] = enthalpies_formation[i]
 * 			cp_arr[i] = heat_capacities[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(M):
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_heat_capacities, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1742, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1742, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_cp_arr[__pyx_v_i]) = __pyx_t_5;
    }

    /* "pyroxa/pybindings.pyx":1744
 * 			cp_arr[i] = heat_capacities[i]
 * 
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			rates_arr[i] = reaction_rates[i]
 * 
 */
    __pyx_t_1 = __pyx_v_M;
    __pyx_t_2 = __pyx_t_1;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "pyroxa/pybindings.pyx":1745
 * 
 * 		for i in range(M):
 * 			rates_arr[i] = reaction_rates[i]             # <<<<<<<<<<<<<<
 * 
 * 		# Call original complex C++ function (8 parameters)
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_reaction_rates, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1745, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1745, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_rates_arr[__pyx_v_i]) = __pyx_t_5;
    }

    /* "pyroxa/pybindings.pyx":1748
 * 
 * 		# Call original complex C++ function (8 parameters)
 * 		result = calculate_energy_balance(N, M, conc_arr, rates_arr,             # <<<<<<<<<<<<<<
 * 										 enthalpies_arr, cp_arr, T, &heat_generation_val)
 * 
 */
    __pyx_v_result = calculate_energy_balance(__pyx_v_N, __pyx_v_M, __pyx_v_conc_arr, __pyx_v_rates_arr, __pyx_v_enthalpies_arr, __pyx_v_cp_arr, __pyx_v_T, (&__pyx_v_heat_generation_val));

    /* "pyroxa/pybindings.pyx":1751
 * 										 enthalpies_arr, cp_arr, T, &heat_generation_val)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			return {
 * 				'heat_generation': heat_generation_val,
 */
    __pyx_t_6 = ((__pyx_v_result > 0) != 0);
    if (__pyx_t_6) {

      /* "pyroxa/pybindings.pyx":1752
 * 
 * 		if result > 0:
 * 			return {             # <<<<<<<<<<<<<<
 * 				'heat_generation': heat_generation_val,
 * 				'temperature': T,
 */
      __Pyx_XDECREF(__pyx_r);

      /* "pyroxa/pybindings.pyx":1753
 * 		if result > 0:
 * 			return {
 * 				'heat_generation': heat_generation_val,             # <<<<<<<<<<<<<<
 * 				'temperature': T,
 * 				'concentrations': [conc_arr[i] for i in range(N)],
 */
      __pyx_t_4 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1753, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_heat_generation_val); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1753, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_heat_generation, __pyx_t_7) < 0) __PYX_ERR(1, 1753, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "pyroxa/pybindings.pyx":1754
 * 			return {
 * 				'heat_generation': heat_generation_val,
 * 				'temperature': T,             # <<<<<<<<<<<<<<
 * 				'concentrations': [conc_arr[i] for i in range(N)],
 * 				'reaction_rates': [rates_arr[i] for i in range(M)],
 */
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_T); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1754, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_temperature, __pyx_t_7) < 0) __PYX_ERR(1, 1753, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      { /* enter inner scope */

        /* "pyroxa/pybindings.pyx":1755
 * 				'heat_generation': heat_generation_val,
 * 				'temperature': T,
 * 				'concentrations': [conc_arr[i] for i in range(N)],             # <<<<<<<<<<<<<<
 * 				'reaction_rates': [rates_arr[i] for i in range(M)],
 * 				'enthalpies_formation': [enthalpies_arr[i] for i in range(N)],
 */
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1755, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __pyx_v_N;
        __pyx_t_2 = __pyx_t_1;
        for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
          __pyx_9genexpr39__pyx_v_i = __pyx_t_3;
          __pyx_t_8 = PyFloat_FromDouble((__pyx_v_conc_arr[__pyx_9genexpr39__pyx_v_i])); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1755, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_8))) __PYX_ERR(1, 1755, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      } /* exit inner scope */
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_concentrations, __pyx_t_7) < 0) __PYX_ERR(1, 1753, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      { /* enter inner scope */

        /* "pyroxa/pybindings.pyx":1756
 * 				'temperature': T,
 * 				'concentrations': [conc_arr[i] for i in range(N)],
 * 				'reaction_rates': [rates_arr[i] for i in range(M)],             # <<<<<<<<<<<<<<
 * 				'enthalpies_formation': [enthalpies_arr[i] for i in range(N)],
 * 				'heat_capacities': [cp_arr[i] for i in range(N)],
 */
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1756, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __pyx_v_M;
        __pyx_t_2 = __pyx_t_1;
        for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
          __pyx_9genexpr40__pyx_v_i = __pyx_t_3;
          __pyx_t_8 = PyFloat_FromDouble((__pyx_v_rates_arr[__pyx_9genexpr40__pyx_v_i])); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1756, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_8))) __PYX_ERR(1, 1756, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      } /* exit inner scope */
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_reaction_rates, __pyx_t_7) < 0) __PYX_ERR(1, 1753, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      { /* enter inner scope */

        /* "pyroxa/pybindings.pyx":1757
 * 				'concentrations': [conc_arr[i] for i in range(N)],
 * 				'reaction_rates': [rates_arr[i] for i in range(M)],
 * 				'enthalpies_formation': [enthalpies_arr[i] for i in range(N)],             # <<<<<<<<<<<<<<
 * 				'heat_capacities': [cp_arr[i] for i in range(N)],
 * 				'success': True
 */
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1757, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __pyx_v_N;
        __pyx_t_2 = __pyx_t_1;
        for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
          __pyx_9genexpr41__pyx_v_i = __pyx_t_3;
          __pyx_t_8 = PyFloat_FromDouble((__pyx_v_enthalpies_arr[__pyx_9genexpr41__pyx_v_i])); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1757, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_8))) __PYX_ERR(1, 1757, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      } /* exit inner scope */
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_enthalpies_formation, __pyx_t_7) < 0) __PYX_ERR(1, 1753, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      { /* enter inner scope */

        /* "pyroxa/pybindings.pyx":1758
 * 				'reaction_rates': [rates_arr[i] for i in range(M)],
 * 				'enthalpies_formation': [enthalpies_arr[i] for i in range(N)],
 * 				'heat_capacities': [cp_arr[i] for i in range(N)],             # <<<<<<<<<<<<<<
 * 				'success': True
 * 			}
 */
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1758, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __pyx_v_N;
        __pyx_t_2 = __pyx_t_1;
        for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
          __pyx_9genexpr42__pyx_v_i = __pyx_t_3;
          __pyx_t_8 = PyFloat_FromDouble((__pyx_v_cp_arr[__pyx_9genexpr42__pyx_v_i])); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1758, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_8))) __PYX_ERR(1, 1758, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      } /* exit inner scope */
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_heat_capacities, __pyx_t_7) < 0) __PYX_ERR(1, 1753, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "pyroxa/pybindings.pyx":1759
 * 				'enthalpies_formation': [enthalpies_arr[i] for i in range(N)],
 * 				'heat_capacities': [cp_arr[i] for i in range(N)],
 * 				'success': True             # <<<<<<<<<<<<<<
 * 			}
 * 		else:
 */
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_success, Py_True) < 0) __PYX_ERR(1, 1753, __pyx_L4_error)
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1751
 * 										 enthalpies_arr, cp_arr, T, &heat_generation_val)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			return {
 * 				'heat_generation': heat_generation_val,
 */
    }

    /* "pyroxa/pybindings.pyx":1762
 * 			}
 * 		else:
 * 			return {'success': False, 'error': 'Energy balance calculation failed'}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(conc_arr)
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1762, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_success, Py_False) < 0) __PYX_ERR(1, 1762, __pyx_L4_error)
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_error, __pyx_kp_u_Energy_balance_calculation_faile) < 0) __PYX_ERR(1, 1762, __pyx_L4_error)
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1764
 * 			return {'success': False, 'error': 'Energy balance calculation failed'}
 * 	finally:
 * 		free(conc_arr)             # <<<<<<<<<<<<<<
 * 		free(rates_arr)
 * 		free(enthalpies_arr)
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __pyx_t_1 = __pyx_lineno; __pyx_t_2 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
      {
        free(__pyx_v_conc_arr);

        /* "pyroxa/pybindings.pyx":1765
 * 	finally:
 * 		free(conc_arr)
 * 		free(rates_arr)             # <<<<<<<<<<<<<<
 * 		free(enthalpies_arr)
 * 		free(cp_arr)
 */
        free(__pyx_v_rates_arr);

        /* "pyroxa/pybindings.pyx":1766
 * 		free(conc_arr)
 * 		free(rates_arr)
 * 		free(enthalpies_arr)             # <<<<<<<<<<<<<<
 * 		free(cp_arr)
 * 
 */
        free(__pyx_v_enthalpies_arr);

        /* "pyroxa/pybindings.pyx":1767
 * 		free(rates_arr)
 * 		free(enthalpies_arr)
 * 		free(cp_arr)             # <<<<<<<<<<<<<<
 * 
 * def py_monte_carlo_simulation(int N, int M, int nsamples, kf_mean, kr_mean, kf_std, kr_std,
 */
        free(__pyx_v_cp_arr);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      }
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __pyx_lineno = __pyx_t_1; __pyx_clineno = __pyx_t_2; __pyx_filename = __pyx_t_9;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_15 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1764
 * 			return {'success': False, 'error': 'Energy balance calculation failed'}
 * 	finally:
 * 		free(conc_arr)             # <<<<<<<<<<<<<<
 * 		free(rates_arr)
 * 		free(enthalpies_arr)
 */
      free(__pyx_v_conc_arr);

      /* "pyroxa/pybindings.pyx":1765
 * 	finally:
 * 		free(conc_arr)
 * 		free(rates_arr)             # <<<<<<<<<<<<<<
 * 		free(enthalpies_arr)
 * 		free(cp_arr)
 */
      free(__pyx_v_rates_arr);

      /* "pyroxa/pybindings.pyx":1766
 * 		free(conc_arr)
 * 		free(rates_arr)
 * 		free(enthalpies_arr)             # <<<<<<<<<<<<<<
 * 		free(cp_arr)
 * 
 */
      free(__pyx_v_enthalpies_arr);

      /* "pyroxa/pybindings.pyx":1767
 * 		free(rates_arr)
 * 		free(enthalpies_arr)
 * 		free(cp_arr)             # <<<<<<<<<<<<<<
 * 
 * def py_monte_carlo_simulation(int N, int M, int nsamples, kf_mean, kr_mean, kf_std, kr_std,
 */
      free(__pyx_v_cp_arr);
      __pyx_r = __pyx_t_15;
      __pyx_t_15 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1726
 * 
 * # BATCH 13: Energy analysis and statistical methods
 * def py_calculate_energy_balance(int N, int M, conc, reaction_rates,             # <<<<<<<<<<<<<<
 * 								enthalpies_formation, heat_capacities, double T):
 * 	"""Calculate energy balance using original complex C++ implementation with full parameter exposure"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_energy_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1769
 * 		free(cp_arr)
 * 
 * def py_monte_carlo_simulation(int N, int M, int nsamples, kf_mean, kr_mean, kf_std, kr_std,             # <<<<<<<<<<<<<<
 * 							  reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off,
 * 							  conc0, double time_span, double dt, int nthreads=1):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_115py_monte_carlo_simulation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_114py_monte_carlo_simulation[] = "py_monte_carlo_simulation(int N, int M, int nsamples, kf_mean, kr_mean, kf_std, kr_std, reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off, conc0, double time_span, double dt, int nthreads=1)\nMonte Carlo simulation using original complex C++ implementation with full parameter exposure";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_115py_monte_carlo_simulation = {"py_monte_carlo_simulation", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_115py_monte_carlo_simulation, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_114py_monte_carlo_simulation};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_115py_monte_carlo_simulation(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_N;
  int __pyx_v_M;
  int __pyx_v_nsamples;
  PyObject *__pyx_v_kf_mean = 0;
  PyObject *__pyx_v_kr_mean = 0;
  PyObject *__pyx_v_kf_std = 0;
  PyObject *__pyx_v_kr_std = 0;
  PyObject *__pyx_v_reac_idx = 0;
  PyObject *__pyx_v_reac_nu = 0;
  PyObject *__pyx_v_reac_off = 0;
  PyObject *__pyx_v_prod_idx = 0;
  PyObject *__pyx_v_prod_nu = 0;
  PyObject *__pyx_v_prod_off = 0;
  PyObject *__pyx_v_conc0 = 0;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_v_nthreads;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_monte_carlo_simulation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_N,&__pyx_n_s_M,&__pyx_n_s_nsamples,&__pyx_n_s_kf_mean,&__pyx_n_s_kr_mean,&__pyx_n_s_kf_std,&__pyx_n_s_kr_std,&__pyx_n_s_reac_idx,&__pyx_n_s_reac_nu,&__pyx_n_s_reac_off,&__pyx_n_s_prod_idx,&__pyx_n_s_prod_nu,&__pyx_n_s_prod_off,&__pyx_n_s_conc0,&__pyx_n_s_time_span,&__pyx_n_s_dt,&__pyx_n_s_nthreads,0};
    PyObject* values[17] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_M)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 1); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nsamples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 2); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kf_mean)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 3); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kr_mean)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 4); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kf_std)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 5); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kr_std)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 6); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reac_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 7); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reac_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 8); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_reac_off)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 9); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prod_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 10); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prod_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 11); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prod_off)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 12); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conc0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 13); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_span)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 14); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, 15); __PYX_ERR(1, 1769, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nthreads);
          if (value) { values[16] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_monte_carlo_simulation") < 0)) __PYX_ERR(1, 1769, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_N = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1769, __pyx_L3_error)
    __pyx_v_M = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_M == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1769, __pyx_L3_error)
    __pyx_v_nsamples = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nsamples == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1769, __pyx_L3_error)
    __pyx_v_kf_mean = values[3];
    __pyx_v_kr_mean = values[4];
    __pyx_v_kf_std = values[5];
    __pyx_v_kr_std = values[6];
    __pyx_v_reac_idx = values[7];
    __pyx_v_reac_nu = values[8];
    __pyx_v_reac_off = values[9];
    __pyx_v_prod_idx = values[10];
    __pyx_v_prod_nu = values[11];
    __pyx_v_prod_off = values[12];
    __pyx_v_conc0 = values[13];
    __pyx_v_time_span = __pyx_PyFloat_AsDouble(values[14]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1771, __pyx_L3_error)
    __pyx_v_dt = __pyx_PyFloat_AsDouble(values[15]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1771, __pyx_L3_error)
    if (values[16]) {
      __pyx_v_nthreads = __Pyx_PyInt_As_int(values[16]); if (unlikely((__pyx_v_nthreads == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1771, __pyx_L3_error)
    } else {
      __pyx_v_nthreads = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1769, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_monte_carlo_simulation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_114py_monte_carlo_simulation(__pyx_self, __pyx_v_N, __pyx_v_M, __pyx_v_nsamples, __pyx_v_kf_mean, __pyx_v_kr_mean, __pyx_v_kf_std, __pyx_v_kr_std, __pyx_v_reac_idx, __pyx_v_reac_nu, __pyx_v_reac_off, __pyx_v_prod_idx, __pyx_v_prod_nu, __pyx_v_prod_off, __pyx_v_conc0, __pyx_v_time_span, __pyx_v_dt, __pyx_v_nthreads);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_114py_monte_carlo_simulation(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, int __pyx_v_nsamples, PyObject *__pyx_v_kf_mean, PyObject *__pyx_v_kr_mean, PyObject *__pyx_v_kf_std, PyObject *__pyx_v_kr_std, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_nthreads) {
  double *__pyx_v_kf_mean_arr;
  double *__pyx_v_kr_mean_arr;
  double *__pyx_v_kf_std_arr;
  double *__pyx_v_kr_std_arr;
  int *__pyx_v_reac_idx_arr;
  double *__pyx_v_reac_nu_arr;
  int *__pyx_v_reac_off_arr;
  int *__pyx_v_prod_idx_arr;
  double *__pyx_v_prod_nu_arr;
  int *__pyx_v_prod_off_arr;
  double *__pyx_v_conc0_arr;
  double *__pyx_v_statistics_output;
  PyObject *__pyx_v_i = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_mean_list = NULL;
  PyObject *__pyx_v_std_list = NULL;
  PyObject *__pyx_v_min_list = NULL;
  PyObject *__pyx_v_max_list = NULL;
  int __pyx_9genexpr43__pyx_v_i;
  int __pyx_9genexpr44__pyx_v_i;
  int __pyx_9genexpr45__pyx_v_i;
  int __pyx_9genexpr46__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  double __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  char const *__pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_monte_carlo_simulation", 0);

  /* "pyroxa/pybindings.pyx":1775
 * 
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_mean_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr_mean_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kf_std_arr = <double*>malloc(M * sizeof(double))
 */
  __pyx_v_kf_mean_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1776
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_mean_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_mean_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kf_std_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_std_arr = <double*>malloc(M * sizeof(double))
 */
  __pyx_v_kr_mean_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1777
 * 	cdef double* kf_mean_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_mean_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kf_std_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr_std_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 */
  __pyx_v_kf_std_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1778
 * 	cdef double* kr_mean_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kf_std_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_std_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 */
  __pyx_v_kr_std_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1779
 * 	cdef double* kf_std_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_std_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1779, __pyx_L1_error)
  __pyx_v_reac_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1780
 * 	cdef double* kr_std_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1780, __pyx_L1_error)
  __pyx_v_reac_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1781
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1781, __pyx_L1_error)
  __pyx_v_reac_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1782
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1782, __pyx_L1_error)
  __pyx_v_prod_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1783
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1783, __pyx_L1_error)
  __pyx_v_prod_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1784
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* statistics_output = <double*>malloc(N * 4 * sizeof(double))  # mean, std, min, max for each species
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1784, __pyx_L1_error)
  __pyx_v_prod_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1785
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* statistics_output = <double*>malloc(N * 4 * sizeof(double))  # mean, std, min, max for each species
 * 
 */
  __pyx_v_conc0_arr = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1786
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* statistics_output = <double*>malloc(N * 4 * sizeof(double))  # mean, std, min, max for each species             # <<<<<<<<<<<<<<
 * 
 * 	try:
 */
  __pyx_v_statistics_output = ((double *)malloc(((__pyx_v_N * 4) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1788
 * 	cdef double* statistics_output = <double*>malloc(N * 4 * sizeof(double))  # mean, std, min, max for each species
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Copy input arrays
 * 		for i in range(M):
 */
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1790
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_mean_arr[i] = kf_mean[i]
 * 			kr_mean_arr[i] = kr_mean[i]
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_M); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1790, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1790, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1790, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1790, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1790, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1790, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1790, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1790, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1790, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1791
 * 		# Copy input arrays
 * 		for i in range(M):
 * 			kf_mean_arr[i] = kf_mean[i]             # <<<<<<<<<<<<<<
 * 			kr_mean_arr[i] = kr_mean[i]
 * 			kf_std_arr[i] = kf_std[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_kf_mean, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1791, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1791, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1791, __pyx_L4_error)
      (__pyx_v_kf_mean_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1792
 * 		for i in range(M):
 * 			kf_mean_arr[i] = kf_mean[i]
 * 			kr_mean_arr[i] = kr_mean[i]             # <<<<<<<<<<<<<<
 * 			kf_std_arr[i] = kf_std[i]
 * 			kr_std_arr[i] = kr_std[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_kr_mean, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1792, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1792, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1792, __pyx_L4_error)
      (__pyx_v_kr_mean_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1793
 * 			kf_mean_arr[i] = kf_mean[i]
 * 			kr_mean_arr[i] = kr_mean[i]
 * 			kf_std_arr[i] = kf_std[i]             # <<<<<<<<<<<<<<
 * 			kr_std_arr[i] = kr_std[i]
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_kf_std, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1793, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1793, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1793, __pyx_L4_error)
      (__pyx_v_kf_std_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1794
 * 			kr_mean_arr[i] = kr_mean[i]
 * 			kf_std_arr[i] = kf_std[i]
 * 			kr_std_arr[i] = kr_std[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(len(reac_idx)):
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_kr_std, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1794, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1794, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1794, __pyx_L4_error)
      (__pyx_v_kr_std_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1790
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_mean_arr[i] = kf_mean[i]
 * 			kr_mean_arr[i] = kr_mean[i]
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1796
 * 			kr_std_arr[i] = kr_std[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1796, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1796, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1796, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1796, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1796, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1796, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1796, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1796, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1796, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1796, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1797
 * 
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_idx, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1797, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1797, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1797, __pyx_L4_error)
      (__pyx_v_reac_idx_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1796
 * 			kr_std_arr[i] = kr_std[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1798
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1798, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1798, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1798, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1798, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1798, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1798, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1798, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1798, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1798, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1798, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1799
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_nu, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1799, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1799, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1799, __pyx_L4_error)
      (__pyx_v_reac_nu_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1798
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1800
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1800, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1800, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1800, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1800, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1800, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1800, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1800, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1800, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1800, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1800, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1801
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_off, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1801, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1801, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1801, __pyx_L4_error)
      (__pyx_v_reac_off_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1800
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1802
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1802, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1802, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1802, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1802, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1802, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1802, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1802, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1802, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1802, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1802, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1803
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_prod_idx, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1803, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1803, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1803, __pyx_L4_error)
      (__pyx_v_prod_idx_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1802
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1804
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1804, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1804, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1804, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1804, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1804, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1804, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1804, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1804, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1804, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1804, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1805
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_prod_nu, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1805, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1805, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1805, __pyx_L4_error)
      (__pyx_v_prod_nu_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1804
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1806
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
 */
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1806, __pyx_L4_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1806, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1806, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1806, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1806, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1806, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1806, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1806, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1806, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1806, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1807
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(N):
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_prod_off, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1807, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1807, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1807, __pyx_L4_error)
      (__pyx_v_prod_off_arr[__pyx_t_6]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1806
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1809
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1809, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1809, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1809, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1809, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1809, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1809, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 1809, __pyx_L4_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1809, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1809, __pyx_L4_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1810
 * 
 * 		for i in range(N):
 * 			conc0_arr[i] = conc0[i]             # <<<<<<<<<<<<<<
 * 
 * 		# Call original complex C++ function (18 parameters)
 */
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_conc0, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1810, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1810, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1810, __pyx_L4_error)
      (__pyx_v_conc0_arr[__pyx_t_6]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1809
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1813
 * 
 * 		# Call original complex C++ function (18 parameters)
 * 		result = monte_carlo_simulation(N, M, nsamples, kf_mean_arr, kr_mean_arr,             # <<<<<<<<<<<<<<
 * 										kf_std_arr, kr_std_arr, reac_idx_arr, reac_nu_arr, reac_off_arr,
 * 										prod_idx_arr, prod_nu_arr, prod_off_arr, conc0_arr,
 */
    __pyx_v_result = monte_carlo_simulation(__pyx_v_N, __pyx_v_M, __pyx_v_nsamples, __pyx_v_kf_mean_arr, __pyx_v_kr_mean_arr, __pyx_v_kf_std_arr, __pyx_v_kr_std_arr, __pyx_v_reac_idx_arr, __pyx_v_reac_nu_arr, __pyx_v_reac_off_arr, __pyx_v_prod_idx_arr, __pyx_v_prod_nu_arr, __pyx_v_prod_off_arr, __pyx_v_conc0_arr, __pyx_v_time_span, __pyx_v_dt, __pyx_v_statistics_output, __pyx_v_nthreads);

    /* "pyroxa/pybindings.pyx":1818
 * 										time_span, dt, statistics_output, nthreads)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract statistics (mean, std, min, max for each species)
 * 			mean_list = [statistics_output[i] for i in range(N)]
 */
    __pyx_t_8 = ((__pyx_v_result > 0) != 0);
    if (__pyx_t_8) {

      /* "pyroxa/pybindings.pyx":1820
 * 		if result > 0:
 * 			# Extract statistics (mean, std, min, max for each species)
 * 			mean_list = [statistics_output[i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 			std_list = [statistics_output[N + i] for i in range(N)]
 * 			min_list = [statistics_output[2*N + i] for i in range(N)]
 */
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1820, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __pyx_v_N;
        __pyx_t_9 = __pyx_t_7;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_9genexpr43__pyx_v_i = __pyx_t_10;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_statistics_output[__pyx_9genexpr43__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1820, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 1820, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_mean_list = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1821
 * 			# Extract statistics (mean, std, min, max for each species)
 * 			mean_list = [statistics_output[i] for i in range(N)]
 * 			std_list = [statistics_output[N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 			min_list = [statistics_output[2*N + i] for i in range(N)]
 * 			max_list = [statistics_output[3*N + i] for i in range(N)]
 */
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1821, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __pyx_v_N;
        __pyx_t_9 = __pyx_t_7;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_9genexpr44__pyx_v_i = __pyx_t_10;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_statistics_output[(__pyx_v_N + __pyx_9genexpr44__pyx_v_i)])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1821, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 1821, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_std_list = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1822
 * 			mean_list = [statistics_output[i] for i in range(N)]
 * 			std_list = [statistics_output[N + i] for i in range(N)]
 * 			min_list = [statistics_output[2*N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 			max_list = [statistics_output[3*N + i] for i in range(N)]
 * 
 */
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1822, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __pyx_v_N;
        __pyx_t_9 = __pyx_t_7;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_9genexpr45__pyx_v_i = __pyx_t_10;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_statistics_output[((2 * __pyx_v_N) + __pyx_9genexpr45__pyx_v_i)])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1822, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 1822, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_min_list = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1823
 * 			std_list = [statistics_output[N + i] for i in range(N)]
 * 			min_list = [statistics_output[2*N + i] for i in range(N)]
 * 			max_list = [statistics_output[3*N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 
 * 			return {
 */
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1823, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_7 = __pyx_v_N;
        __pyx_t_9 = __pyx_t_7;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_9genexpr46__pyx_v_i = __pyx_t_10;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_statistics_output[((3 * __pyx_v_N) + __pyx_9genexpr46__pyx_v_i)])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1823, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(1, 1823, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_max_list = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1825
 * 			max_list = [statistics_output[3*N + i] for i in range(N)]
 * 
 * 			return {             # <<<<<<<<<<<<<<
 * 				'statistics': {
 * 					'mean': mean_list,
 */
      __Pyx_XDECREF(__pyx_r);

      /* "pyroxa/pybindings.pyx":1826
 * 
 * 			return {
 * 				'statistics': {             # <<<<<<<<<<<<<<
 * 					'mean': mean_list,
 * 					'std': std_list,
 */
      __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1826, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "pyroxa/pybindings.pyx":1827
 * 			return {
 * 				'statistics': {
 * 					'mean': mean_list,             # <<<<<<<<<<<<<<
 * 					'std': std_list,
 * 					'min': min_list,
 */
      __pyx_t_3 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1827, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_mean, __pyx_v_mean_list) < 0) __PYX_ERR(1, 1827, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1828
 * 				'statistics': {
 * 					'mean': mean_list,
 * 					'std': std_list,             # <<<<<<<<<<<<<<
 * 					'min': min_list,
 * 					'max': max_list,
 */
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_std, __pyx_v_std_list) < 0) __PYX_ERR(1, 1827, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1829
 * 					'mean': mean_list,
 * 					'std': std_list,
 * 					'min': min_list,             # <<<<<<<<<<<<<<
 * 					'max': max_list,
 * 					'n_samples': nsamples,
 */
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_min, __pyx_v_min_list) < 0) __PYX_ERR(1, 1827, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1830
 * 					'std': std_list,
 * 					'min': min_list,
 * 					'max': max_list,             # <<<<<<<<<<<<<<
 * 					'n_samples': nsamples,
 * 					'n_species': N,
 */
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_max, __pyx_v_max_list) < 0) __PYX_ERR(1, 1827, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1831
 * 					'min': min_list,
 * 					'max': max_list,
 * 					'n_samples': nsamples,             # <<<<<<<<<<<<<<
 * 					'n_species': N,
 * 					'n_reactions': M
 */
      __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_nsamples); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1831, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_n_samples, __pyx_t_11) < 0) __PYX_ERR(1, 1827, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "pyroxa/pybindings.pyx":1832
 * 					'max': max_list,
 * 					'n_samples': nsamples,
 * 					'n_species': N,             # <<<<<<<<<<<<<<
 * 					'n_reactions': M
 * 				},
 */
      __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_N); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1832, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_n_species, __pyx_t_11) < 0) __PYX_ERR(1, 1827, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "pyroxa/pybindings.pyx":1833
 * 					'n_samples': nsamples,
 * 					'n_species': N,
 * 					'n_reactions': M             # <<<<<<<<<<<<<<
 * 				},
 * 				'convergence': True,
 */
      __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_M); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1833, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_n_reactions, __pyx_t_11) < 0) __PYX_ERR(1, 1827, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_statistics, __pyx_t_3) < 0) __PYX_ERR(1, 1826, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1835
 * 					'n_reactions': M
 * 				},
 * 				'convergence': True,             # <<<<<<<<<<<<<<
 * 				'nthreads': nthreads,
 * 				'success': True
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_convergence, Py_True) < 0) __PYX_ERR(1, 1826, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1836
 * 				},
 * 				'convergence': True,
 * 				'nthreads': nthreads,             # <<<<<<<<<<<<<<
 * 				'success': True
 * 			}
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_nthreads); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1836, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_nthreads, __pyx_t_3) < 0) __PYX_ERR(1, 1826, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1837
 * 				'convergence': True,
 * 				'nthreads': nthreads,
 * 				'success': True             # <<<<<<<<<<<<<<
 * 			}
 * 		else:
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_success, Py_True) < 0) __PYX_ERR(1, 1826, __pyx_L4_error)
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1818
 * 										time_span, dt, statistics_output, nthreads)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract statistics (mean, std, min, max for each species)
 * 			mean_list = [statistics_output[i] for i in range(N)]
 */
    }

    /* "pyroxa/pybindings.pyx":1840
 * 			}
 * 		else:
 * 			return {'success': False, 'error': 'Monte Carlo simulation failed'}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(kf_mean_arr)
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1840, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_success, Py_False) < 0) __PYX_ERR(1, 1840, __pyx_L4_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_error, __pyx_kp_u_Monte_Carlo_simulation_failed) < 0) __PYX_ERR(1, 1840, __pyx_L4_error)
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1842
 * 			return {'success': False, 'error': 'Monte Carlo simulation failed'}
 * 	finally:
 * 		free(kf_mean_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_mean_arr)
 * 		free(kf_std_arr)
 */
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __pyx_t_7 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_12 = __pyx_filename;
      {
        free(__pyx_v_kf_mean_arr);

        /* "pyroxa/pybindings.pyx":1843
 * 	finally:
 * 		free(kf_mean_arr)
 * 		free(kr_mean_arr)             # <<<<<<<<<<<<<<
 * 		free(kf_std_arr)
 * 		free(kr_std_arr)
 */
        free(__pyx_v_kr_mean_arr);

        /* "pyroxa/pybindings.pyx":1844
 * 		free(kf_mean_arr)
 * 		free(kr_mean_arr)
 * 		free(kf_std_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_std_arr)
 * 		free(reac_idx_arr)
 */
        free(__pyx_v_kf_std_arr);

        /* "pyroxa/pybindings.pyx":1845
 * 		free(kr_mean_arr)
 * 		free(kf_std_arr)
 * 		free(kr_std_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 */
        free(__pyx_v_kr_std_arr);

        /* "pyroxa/pybindings.pyx":1846
 * 		free(kf_std_arr)
 * 		free(kr_std_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 */
        free(__pyx_v_reac_idx_arr);

        /* "pyroxa/pybindings.pyx":1847
 * 		free(kr_std_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 */
        free(__pyx_v_reac_nu_arr);

        /* "pyroxa/pybindings.pyx":1848
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 */
        free(__pyx_v_reac_off_arr);

        /* "pyroxa/pybindings.pyx":1849
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 */
        free(__pyx_v_prod_idx_arr);

        /* "pyroxa/pybindings.pyx":1850
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 */
        free(__pyx_v_prod_nu_arr);

        /* "pyroxa/pybindings.pyx":1851
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(statistics_output)
 */
        free(__pyx_v_prod_off_arr);

        /* "pyroxa/pybindings.pyx":1852
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(statistics_output)
 * 
 */
        free(__pyx_v_conc0_arr);

        /* "pyroxa/pybindings.pyx":1853
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(statistics_output)             # <<<<<<<<<<<<<<
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):
 */
        free(__pyx_v_statistics_output);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
      }
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
      __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_12;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_18 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1842
 * 			return {'success': False, 'error': 'Monte Carlo simulation failed'}
 * 	finally:
 * 		free(kf_mean_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_mean_arr)
 * 		free(kf_std_arr)
 */
      free(__pyx_v_kf_mean_arr);

      /* "pyroxa/pybindings.pyx":1843
 * 	finally:
 * 		free(kf_mean_arr)
 * 		free(kr_mean_arr)             # <<<<<<<<<<<<<<
 * 		free(kf_std_arr)
 * 		free(kr_std_arr)
 */
      free(__pyx_v_kr_mean_arr);

      /* "pyroxa/pybindings.pyx":1844
 * 		free(kf_mean_arr)
 * 		free(kr_mean_arr)
 * 		free(kf_std_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_std_arr)
 * 		free(reac_idx_arr)
 */
      free(__pyx_v_kf_std_arr);

      /* "pyroxa/pybindings.pyx":1845
 * 		free(kr_mean_arr)
 * 		free(kf_std_arr)
 * 		free(kr_std_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 */
      free(__pyx_v_kr_std_arr);

      /* "pyroxa/pybindings.pyx":1846
 * 		free(kf_std_arr)
 * 		free(kr_std_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 */
      free(__pyx_v_reac_idx_arr);

      /* "pyroxa/pybindings.pyx":1847
 * 		free(kr_std_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 */
      free(__pyx_v_reac_nu_arr);

      /* "pyroxa/pybindings.pyx":1848
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 */
      free(__pyx_v_reac_off_arr);

      /* "pyroxa/pybindings.pyx":1849
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 */
      free(__pyx_v_prod_idx_arr);

      /* "pyroxa/pybindings.pyx":1850
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 */
      free(__pyx_v_prod_nu_arr);

      /* "pyroxa/pybindings.pyx":1851
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(statistics_output)
 */
      free(__pyx_v_prod_off_arr);

      /* "pyroxa/pybindings.pyx":1852
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(statistics_output)
 * 
 */
      free(__pyx_v_conc0_arr);

      /* "pyroxa/pybindings.pyx":1853
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(statistics_output)             # <<<<<<<<<<<<<<
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):
 */
      free(__pyx_v_statistics_output);
      __pyx_r = __pyx_t_18;
      __pyx_t_18 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1769
 * 		free(cp_arr)
 * 
 * def py_monte_carlo_simulation(int N, int M, int nsamples, kf_mean, kr_mean, kf_std, kr_std,             # <<<<<<<<<<<<<<
 * 							  reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off,
 * 							  conc0, double time_span, double dt, int nthreads=1):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyroxa._pybindings.py_monte_carlo_simulation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_mean_list);
  __Pyx_XDECREF(__pyx_v_std_list);
  __Pyx_XDECREF(__pyx_v_min_list);
  __Pyx_XDECREF(__pyx_v_max_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1855
 * 		free(statistics_output)
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):             # <<<<<<<<<<<<<<
 * 	"""Calculate residence time distribution for tank series"""
 * 	import numpy as np
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_117py_residence_time_distribution(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_116py_residence_time_distribution[] = "py_residence_time_distribution(flow_rates, volumes, n_tanks)\nCalculate residence time distribution for tank series";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_117py_residence_time_distribution = {"py_residence_time_distribution", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_117py_residence_time_distribution, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_116py_residence_time_distribution};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_117py_residence_time_distribution(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_flow_rates = 0;
  PyObject *__pyx_v_volumes = 0;
  PyObject *__pyx_v_n_tanks = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_residence_time_distribution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_flow_rates,&__pyx_n_s_volumes,&__pyx_n_s_n_tanks,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flow_rates)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_volumes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_residence_time_distribution", 1, 3, 3, 1); __PYX_ERR(1, 1855, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_tanks)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_residence_time_distribution", 1, 3, 3, 2); __PYX_ERR(1, 1855, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_residence_time_distribution") < 0)) __PYX_ERR(1, 1855, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_flow_rates = values[0];
    __pyx_v_volumes = values[1];
    __pyx_v_n_tanks = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_residence_time_distribution", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1855, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_residence_time_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_116py_residence_time_distribution(__pyx_self, __pyx_v_flow_rates, __pyx_v_volumes, __pyx_v_n_tanks);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyroxa/pybindings.pyx":1869
 * 
 * 	# Overall mean residence time
 * 	total_volume = sum(volumes[i] for i in range(n_tanks))             # <<<<<<<<<<<<<<
 * 	total_flow = sum(flow_rates[i] for i in range(n_tanks))
 * 	overall_mean_tau = total_volume / total_flow if total_flow > 0 else 0.0
 */

static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr(__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 1869, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_2generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_py_residence_time_distribution_l, __pyx_n_s_pyroxa__pybindings); if (unlikely(!gen)) __PYX_ERR(1, 1869, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_residence_time_distribution.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1869, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_n_tanks)) { __Pyx_RaiseClosureNameError("n_tanks"); __PYX_ERR(1, 1869, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_n_tanks); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1869, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1869, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1869, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1869, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1869, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1869, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_volumes)) { __Pyx_RaiseClosureNameError("volumes"); __PYX_ERR(1, 1869, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_volumes, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1869, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_5generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyroxa/pybindings.pyx":1870
 * 	# Overall mean residence time
 * 	total_volume = sum(volumes[i] for i in range(n_tanks))
 * 	total_flow = sum(flow_rates[i] for i in range(n_tanks))             # <<<<<<<<<<<<<<
 * 	overall_mean_tau = total_volume / total_flow if total_flow > 0 else 0.0
 * 
 */

static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr(__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 1870, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_5generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_py_residence_time_distribution_l, __pyx_n_s_pyroxa__pybindings); if (unlikely(!gen)) __PYX_ERR(1, 1870, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_residence_time_distribution.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_5generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1870, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_n_tanks)) { __Pyx_RaiseClosureNameError("n_tanks"); __PYX_ERR(1, 1870, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_n_tanks); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1870, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1870, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1870, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1870, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_flow_rates)) { __Pyx_RaiseClosureNameError("flow_rates"); __PYX_ERR(1, 1870, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_flow_rates, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1870, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_8generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyroxa/pybindings.pyx":1874
 * 
 * 	# Calculate variance (assuming CSTR in series)
 * 	variance = sum(tau**2 for tau in mean_residence_times)             # <<<<<<<<<<<<<<
 * 
 * 	return {
 */

static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_6genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr(__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 1874, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_8generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_py_residence_time_distribution_l, __pyx_n_s_pyroxa__pybindings); if (unlikely(!gen)) __PYX_ERR(1, 1874, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_residence_time_distribution.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_8generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1874, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mean_residence_times)) { __Pyx_RaiseClosureNameError("mean_residence_times"); __PYX_ERR(1, 1874, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_mean_residence_times == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 1874, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_mean_residence_times; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 1874, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tau);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tau, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Power(__pyx_cur_scope->__pyx_v_tau, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(1, 1874, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1855
 * 		free(statistics_output)
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):             # <<<<<<<<<<<<<<
 * 	"""Calculate residence time distribution for tank series"""
 * 	import numpy as np
 */

static PyObject *__pyx_pf_6pyroxa_11_pybindings_116py_residence_time_distribution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_rates, PyObject *__pyx_v_volumes, PyObject *__pyx_v_n_tanks) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *__pyx_cur_scope;
  CYTHON_UNUSED PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_tau = NULL;
  PyObject *__pyx_v_total_volume = NULL;
  PyObject *__pyx_v_total_flow = NULL;
  PyObject *__pyx_v_overall_mean_tau = NULL;
  PyObject *__pyx_v_variance = NULL;
  PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_2generator2 = 0;
  PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_5generator3 = 0;
  PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_8generator4 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_residence_time_distribution", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution(__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(1, 1855, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_flow_rates = __pyx_v_flow_rates;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_flow_rates);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_flow_rates);
  __pyx_cur_scope->__pyx_v_volumes = __pyx_v_volumes;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_volumes);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_volumes);
  __pyx_cur_scope->__pyx_v_n_tanks = __pyx_v_n_tanks;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_n_tanks);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_n_tanks);

  /* "pyroxa/pybindings.pyx":1857
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):
 * 	"""Calculate residence time distribution for tank series"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 	# Calculate mean residence time for each tank
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1860
 * 
 * 	# Calculate mean residence time for each tank
 * 	mean_residence_times = []             # <<<<<<<<<<<<<<
 * 	for i in range(n_tanks):
 * 		if flow_rates[i] > 0:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_mean_residence_times = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1861
 * 	# Calculate mean residence time for each tank
 * 	mean_residence_times = []
 * 	for i in range(n_tanks):             # <<<<<<<<<<<<<<
 * 		if flow_rates[i] > 0:
 * 			tau = volumes[i] / flow_rates[i]
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_cur_scope->__pyx_v_n_tanks); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1861, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1861, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 1861, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 1861, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyroxa/pybindings.pyx":1862
 * 	mean_residence_times = []
 * 	for i in range(n_tanks):
 * 		if flow_rates[i] > 0:             # <<<<<<<<<<<<<<
 * 			tau = volumes[i] / flow_rates[i]
 * 		else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_flow_rates, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1862, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 1862, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "pyroxa/pybindings.pyx":1863
 * 	for i in range(n_tanks):
 * 		if flow_rates[i] > 0:
 * 			tau = volumes[i] / flow_rates[i]             # <<<<<<<<<<<<<<
 * 		else:
 * 			tau = 0.0
 */
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_volumes, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_flow_rates, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1863, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_tau, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "pyroxa/pybindings.pyx":1862
 * 	mean_residence_times = []
 * 	for i in range(n_tanks):
 * 		if flow_rates[i] > 0:             # <<<<<<<<<<<<<<
 * 			tau = volumes[i] / flow_rates[i]
 * 		else:
 */
      goto __pyx_L5;
    }

    /* "pyroxa/pybindings.pyx":1865
 * 			tau = volumes[i] / flow_rates[i]
 * 		else:
 * 			tau = 0.0             # <<<<<<<<<<<<<<
 * 		mean_residence_times.append(tau)
 * 
 */
    /*else*/ {
      __Pyx_INCREF(__pyx_float_0_0);
      __Pyx_XDECREF_SET(__pyx_v_tau, __pyx_float_0_0);
    }
    __pyx_L5:;

    /* "pyroxa/pybindings.pyx":1866
 * 		else:
 * 			tau = 0.0
 * 		mean_residence_times.append(tau)             # <<<<<<<<<<<<<<
 * 
 * 	# Overall mean residence time
 */
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_mean_residence_times, __pyx_v_tau); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(1, 1866, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1861
 * 	# Calculate mean residence time for each tank
 * 	mean_residence_times = []
 * 	for i in range(n_tanks):             # <<<<<<<<<<<<<<
 * 		if flow_rates[i] > 0:
 * 			tau = volumes[i] / flow_rates[i]
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1869
 * 
 * 	# Overall mean residence time
 * 	total_volume = sum(volumes[i] for i in range(n_tanks))             # <<<<<<<<<<<<<<
 * 	total_flow = sum(flow_rates[i] for i in range(n_tanks))
 * 	overall_mean_tau = total_volume / total_flow if total_flow > 0 else 0.0
 */
  __pyx_t_2 = __pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_total_volume = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "pyroxa/pybindings.pyx":1870
 * 	# Overall mean residence time
 * 	total_volume = sum(volumes[i] for i in range(n_tanks))
 * 	total_flow = sum(flow_rates[i] for i in range(n_tanks))             # <<<<<<<<<<<<<<
 * 	overall_mean_tau = total_volume / total_flow if total_flow > 0 else 0.0
 * 
 */
  __pyx_t_7 = __pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_total_flow = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1871
 * 	total_volume = sum(volumes[i] for i in range(n_tanks))
 * 	total_flow = sum(flow_rates[i] for i in range(n_tanks))
 * 	overall_mean_tau = total_volume / total_flow if total_flow > 0 else 0.0             # <<<<<<<<<<<<<<
 * 
 * 	# Calculate variance (assuming CSTR in series)
 */
  __pyx_t_7 = PyObject_RichCompare(__pyx_v_total_flow, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1871, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 1871, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_6) {
    __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_v_total_volume, __pyx_v_total_flow); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __pyx_t_7;
    __pyx_t_7 = 0;
  } else {
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_t_2 = __pyx_float_0_0;
  }
  __pyx_v_overall_mean_tau = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1874
 * 
 * 	# Calculate variance (assuming CSTR in series)
 * 	variance = sum(tau**2 for tau in mean_residence_times)             # <<<<<<<<<<<<<<
 * 
 * 	return {
 */
  __pyx_t_2 = __pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_6genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_variance = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "pyroxa/pybindings.pyx":1876
 * 	variance = sum(tau**2 for tau in mean_residence_times)
 * 
 * 	return {             # <<<<<<<<<<<<<<
 * 		'mean_residence_time': overall_mean_tau,
 * 		'variance': variance,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "pyroxa/pybindings.pyx":1877
 * 
 * 	return {
 * 		'mean_residence_time': overall_mean_tau,             # <<<<<<<<<<<<<<
 * 		'variance': variance,
 * 		'tank_residence_times': mean_residence_times,
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_u_mean_residence_time, __pyx_v_overall_mean_tau) < 0) __PYX_ERR(1, 1877, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1878
 * 	return {
 * 		'mean_residence_time': overall_mean_tau,
 * 		'variance': variance,             # <<<<<<<<<<<<<<
 * 		'tank_residence_times': mean_residence_times,
 * 		'dimensionless_variance': variance / (overall_mean_tau**2) if overall_mean_tau > 0 else 0.0,
 */
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_u_variance, __pyx_v_variance) < 0) __PYX_ERR(1, 1877, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1879
 * 		'mean_residence_time': overall_mean_tau,
 * 		'variance': variance,
 * 		'tank_residence_times': mean_residence_times,             # <<<<<<<<<<<<<<
 * 		'dimensionless_variance': variance / (overall_mean_tau**2) if overall_mean_tau > 0 else 0.0,
 * 		'success': True
 */
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_u_tank_residence_times, __pyx_cur_scope->__pyx_v_mean_residence_times) < 0) __PYX_ERR(1, 1877, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1880
 * 		'variance': variance,
 * 		'tank_residence_times': mean_residence_times,
 * 		'dimensionless_variance': variance / (overall_mean_tau**2) if overall_mean_tau > 0 else 0.0,             # <<<<<<<<<<<<<<
 * 		'success': True
 * 	}
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_overall_mean_tau, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1880, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 1880, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {
    __pyx_t_1 = PyNumber_Power(__pyx_v_overall_mean_tau, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_variance, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;
  } else {
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_t_2 = __pyx_float_0_0;
  }
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_u_dimensionless_variance, __pyx_t_2) < 0) __PYX_ERR(1, 1877, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1881
 * 		'tank_residence_times': mean_residence_times,
 * 		'dimensionless_variance': variance / (overall_mean_tau**2) if overall_mean_tau > 0 else 0.0,
 * 		'success': True             # <<<<<<<<<<<<<<
 * 	}
 * 
 */
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_u_success, Py_True) < 0) __PYX_ERR(1, 1877, __pyx_L1_error)
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":1855
 * 		free(statistics_output)
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):             # <<<<<<<<<<<<<<
 * 	"""Calculate residence time distribution for tank series"""
 * 	import numpy as np
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyroxa._pybindings.py_residence_time_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_tau);
  __Pyx_XDECREF(__pyx_v_total_volume);
  __Pyx_XDECREF(__pyx_v_total_flow);
  __Pyx_XDECREF(__pyx_v_overall_mean_tau);
  __Pyx_XDECREF(__pyx_v_variance);
  __Pyx_XDECREF(__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_2generator2);
  __Pyx_XDECREF(__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_5generator3);
  __Pyx_XDECREF(__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_8generator4);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1885
 * 
 * # BATCH 14: Final functions
 * def py_catalyst_deactivation_model(initial_activity, deactivation_constant, time, temperature, partial_pressure_poison):             # <<<<<<<<<<<<<<
 * 	"""Model catalyst deactivation over time"""
 * 	import numpy as np
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_119py_catalyst_deactivation_model(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_118py_catalyst_deactivation_model[] = "py_catalyst_deactivation_model(initial_activity, deactivation_constant, time, temperature, partial_pressure_poison)\nModel catalyst deactivation over time";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_119py_catalyst_deactivation_model = {"py_catalyst_deactivation_model", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_119py_catalyst_deactivation_model, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_118py_catalyst_deactivation_model};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_119py_catalyst_deactivation_model(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_initial_activity = 0;
  PyObject *__pyx_v_deactivation_constant = 0;
  PyObject *__pyx_v_time = 0;
  PyObject *__pyx_v_temperature = 0;
  PyObject *__pyx_v_partial_pressure_poison = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_catalyst_deactivation_model (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_initial_activity,&__pyx_n_s_deactivation_constant,&__pyx_n_s_time,&__pyx_n_s_temperature,&__pyx_n_s_partial_pressure_poison,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_initial_activity)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_deactivation_constant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_catalyst_deactivation_model", 1, 5, 5, 1); __PYX_ERR(1, 1885, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_catalyst_deactivation_model", 1, 5, 5, 2); __PYX_ERR(1, 1885, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_temperature)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_catalyst_deactivation_model", 1, 5, 5, 3); __PYX_ERR(1, 1885, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_partial_pressure_poison)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_catalyst_deactivation_model", 1, 5, 5, 4); __PYX_ERR(1, 1885, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_catalyst_deactivation_model") < 0)) __PYX_ERR(1, 1885, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_initial_activity = values[0];
    __pyx_v_deactivation_constant = values[1];
    __pyx_v_time = values[2];
    __pyx_v_temperature = values[3];
    __pyx_v_partial_pressure_poison = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_catalyst_deactivation_model", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1885, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_catalyst_deactivation_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_118py_catalyst_deactivation_model(__pyx_self, __pyx_v_initial_activity, __pyx_v_deactivation_constant, __pyx_v_time, __pyx_v_temperature, __pyx_v_partial_pressure_poison);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_118py_catalyst_deactivation_model(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_initial_activity, PyObject *__pyx_v_deactivation_constant, PyObject *__pyx_v_time, PyObject *__pyx_v_temperature, PyObject *__pyx_v_partial_pressure_poison) {
  PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_temp_factor = NULL;
  PyObject *__pyx_v_poison_factor = NULL;
  PyObject *__pyx_v_effective_kd = NULL;
  PyObject *__pyx_v_current_activity = NULL;
  PyObject *__pyx_v_deactivation_rate = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_catalyst_deactivation_model", 0);

  /* "pyroxa/pybindings.pyx":1887
 * def py_catalyst_deactivation_model(initial_activity, deactivation_constant, time, temperature, partial_pressure_poison):
 * 	"""Model catalyst deactivation over time"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 	# Exponential deactivation model
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1893
 * 
 * 	# Temperature dependency (Arrhenius-type)
 * 	temp_factor = np.exp(-5000 / (8.314 * temperature))  # Simple activation energy             # <<<<<<<<<<<<<<
 * 
 * 	# Poison partial pressure effect
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_exp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_float_8_314, __pyx_v_temperature); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_int_neg_5000, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_temp_factor = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1896
 * 
 * 	# Poison partial pressure effect
 * 	poison_factor = 1 + 10 * partial_pressure_poison             # <<<<<<<<<<<<<<
 * 
 * 	# Overall deactivation
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_10, __pyx_v_partial_pressure_poison); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_poison_factor = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1899
 * 
 * 	# Overall deactivation
 * 	effective_kd = deactivation_constant * temp_factor * poison_factor             # <<<<<<<<<<<<<<
 * 	current_activity = initial_activity * np.exp(-effective_kd * time)
 * 
 */
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_deactivation_constant, __pyx_v_temp_factor); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_poison_factor); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_effective_kd = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1900
 * 	# Overall deactivation
 * 	effective_kd = deactivation_constant * temp_factor * poison_factor
 * 	current_activity = initial_activity * np.exp(-effective_kd * time)             # <<<<<<<<<<<<<<
 * 
 * 	# Deactivation rate
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_exp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Negative(__pyx_v_effective_kd); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_4, __pyx_v_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_initial_activity, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_current_activity = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1903
 * 
 * 	# Deactivation rate
 * 	deactivation_rate = -effective_kd * current_activity             # <<<<<<<<<<<<<<
 * 
 * 	return {
 */
  __pyx_t_2 = PyNumber_Negative(__pyx_v_effective_kd); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_current_activity); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_deactivation_rate = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1905
 * 	deactivation_rate = -effective_kd * current_activity
 * 
 * 	return {             # <<<<<<<<<<<<<<
 * 		'current_activity': current_activity,
 * 		'deactivation_rate': deactivation_rate,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "pyroxa/pybindings.pyx":1906
 * 
 * 	return {
 * 		'current_activity': current_activity,             # <<<<<<<<<<<<<<
 * 		'deactivation_rate': deactivation_rate,
 * 		'remaining_lifetime': -np.log(0.1) / effective_kd,  # Time to 10% activity
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_current_activity, __pyx_v_current_activity) < 0) __PYX_ERR(1, 1906, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1907
 * 	return {
 * 		'current_activity': current_activity,
 * 		'deactivation_rate': deactivation_rate,             # <<<<<<<<<<<<<<
 * 		'remaining_lifetime': -np.log(0.1) / effective_kd,  # Time to 10% activity
 * 		'temperature_factor': temp_factor,
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_deactivation_rate, __pyx_v_deactivation_rate) < 0) __PYX_ERR(1, 1906, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1908
 * 		'current_activity': current_activity,
 * 		'deactivation_rate': deactivation_rate,
 * 		'remaining_lifetime': -np.log(0.1) / effective_kd,  # Time to 10% activity             # <<<<<<<<<<<<<<
 * 		'temperature_factor': temp_factor,
 * 		'poison_factor': poison_factor,
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_np, __pyx_n_s_log); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_float_0_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_float_0_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Negative(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_effective_kd); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_remaining_lifetime, __pyx_t_2) < 0) __PYX_ERR(1, 1906, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1909
 * 		'deactivation_rate': deactivation_rate,
 * 		'remaining_lifetime': -np.log(0.1) / effective_kd,  # Time to 10% activity
 * 		'temperature_factor': temp_factor,             # <<<<<<<<<<<<<<
 * 		'poison_factor': poison_factor,
 * 		'success': True
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_temperature_factor, __pyx_v_temp_factor) < 0) __PYX_ERR(1, 1906, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1910
 * 		'remaining_lifetime': -np.log(0.1) / effective_kd,  # Time to 10% activity
 * 		'temperature_factor': temp_factor,
 * 		'poison_factor': poison_factor,             # <<<<<<<<<<<<<<
 * 		'success': True
 * 	}
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_poison_factor, __pyx_v_poison_factor) < 0) __PYX_ERR(1, 1906, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1911
 * 		'temperature_factor': temp_factor,
 * 		'poison_factor': poison_factor,
 * 		'success': True             # <<<<<<<<<<<<<<
 * 	}
 * 
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_success, Py_True) < 0) __PYX_ERR(1, 1906, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":1885
 * 
 * # BATCH 14: Final functions
 * def py_catalyst_deactivation_model(initial_activity, deactivation_constant, time, temperature, partial_pressure_poison):             # <<<<<<<<<<<<<<
 * 	"""Model catalyst deactivation over time"""
 * 	import numpy as np
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyroxa._pybindings.py_catalyst_deactivation_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_temp_factor);
  __Pyx_XDECREF(__pyx_v_poison_factor);
  __Pyx_XDECREF(__pyx_v_effective_kd);
  __Pyx_XDECREF(__pyx_v_current_activity);
  __Pyx_XDECREF(__pyx_v_deactivation_rate);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1914
 * 	}
 * 
 * def py_process_scale_up(lab_scale_volume, pilot_scale_volume, lab_conditions):             # <<<<<<<<<<<<<<
 * 	"""Scale up process from lab to pilot scale"""
 * 	import numpy as np
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_121py_process_scale_up(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pyroxa_11_pybindings_120py_process_scale_up[] = "py_process_scale_up(lab_scale_volume, pilot_scale_volume, lab_conditions)\nScale up process from lab to pilot scale";
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_121py_process_scale_up = {"py_process_scale_up", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_121py_process_scale_up, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_120py_process_scale_up};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_121py_process_scale_up(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_lab_scale_volume = 0;
  PyObject *__pyx_v_pilot_scale_volume = 0;
  PyObject *__pyx_v_lab_conditions = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_process_scale_up (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lab_scale_volume,&__pyx_n_s_pilot_scale_volume,&__pyx_n_s_lab_conditions,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lab_scale_volume)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pilot_scale_volume)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_process_scale_up", 1, 3, 3, 1); __PYX_ERR(1, 1914, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lab_conditions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("py_process_scale_up", 1, 3, 3, 2); __PYX_ERR(1, 1914, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "py_process_scale_up") < 0)) __PYX_ERR(1, 1914, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_lab_scale_volume = values[0];
    __pyx_v_pilot_scale_volume = values[1];
    __pyx_v_lab_conditions = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_process_scale_up", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1914, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_process_scale_up", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_120py_process_scale_up(__pyx_self, __pyx_v_lab_scale_volume, __pyx_v_pilot_scale_volume, __pyx_v_lab_conditions);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_120py_process_scale_up(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lab_scale_volume, PyObject *__pyx_v_pilot_scale_volume, PyObject *__pyx_v_lab_conditions) {
  CYTHON_UNUSED PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_scale_factor = NULL;
  PyObject *__pyx_v_length_scale = NULL;
  PyObject *__pyx_v_area_scale = NULL;
  PyObject *__pyx_v_pilot_conditions = NULL;
  PyObject *__pyx_v_power_scale = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_process_scale_up", 0);

  /* "pyroxa/pybindings.pyx":1916
 * def py_process_scale_up(lab_scale_volume, pilot_scale_volume, lab_conditions):
 * 	"""Scale up process from lab to pilot scale"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 	# Scale-up factor
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1919
 * 
 * 	# Scale-up factor
 * 	scale_factor = pilot_scale_volume / lab_scale_volume             # <<<<<<<<<<<<<<
 * 
 * 	# Geometric scaling (maintaining similar ratios)
 */
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_pilot_scale_volume, __pyx_v_lab_scale_volume); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_scale_factor = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1922
 * 
 * 	# Geometric scaling (maintaining similar ratios)
 * 	length_scale = scale_factor**(1/3)  # Cubic root for volume scaling             # <<<<<<<<<<<<<<
 * 	area_scale = scale_factor**(2/3)   # Surface area scaling
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_long((1 / 3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Power(__pyx_v_scale_factor, __pyx_t_1, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_length_scale = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1923
 * 	# Geometric scaling (maintaining similar ratios)
 * 	length_scale = scale_factor**(1/3)  # Cubic root for volume scaling
 * 	area_scale = scale_factor**(2/3)   # Surface area scaling             # <<<<<<<<<<<<<<
 * 
 * 	# Scale process conditions
 */
  __pyx_t_2 = __Pyx_PyInt_From_long((2 / 3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Power(__pyx_v_scale_factor, __pyx_t_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_area_scale = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1926
 * 
 * 	# Scale process conditions
 * 	pilot_conditions = {}             # <<<<<<<<<<<<<<
 * 
 * 	# Flow rate scales with volume
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pilot_conditions = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1929
 * 
 * 	# Flow rate scales with volume
 * 	pilot_conditions['flow_rate'] = lab_conditions['flow_rate'] * scale_factor             # <<<<<<<<<<<<<<
 * 
 * 	# Temperature and pressure remain the same
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_lab_conditions, __pyx_n_u_flow_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_scale_factor); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_pilot_conditions, __pyx_n_u_flow_rate, __pyx_t_2) < 0)) __PYX_ERR(1, 1929, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1932
 * 
 * 	# Temperature and pressure remain the same
 * 	pilot_conditions['temperature'] = lab_conditions['temperature']             # <<<<<<<<<<<<<<
 * 	pilot_conditions['pressure'] = lab_conditions['pressure']
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_lab_conditions, __pyx_n_u_temperature); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_pilot_conditions, __pyx_n_u_temperature, __pyx_t_2) < 0)) __PYX_ERR(1, 1932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1933
 * 	# Temperature and pressure remain the same
 * 	pilot_conditions['temperature'] = lab_conditions['temperature']
 * 	pilot_conditions['pressure'] = lab_conditions['pressure']             # <<<<<<<<<<<<<<
 * 
 * 	# Heat transfer coefficient decreases with scale (surface/volume effect)
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_lab_conditions, __pyx_n_u_pressure); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1933, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_pilot_conditions, __pyx_n_u_pressure, __pyx_t_2) < 0)) __PYX_ERR(1, 1933, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1936
 * 
 * 	# Heat transfer coefficient decreases with scale (surface/volume effect)
 * 	pilot_conditions['heat_transfer_coeff'] = lab_conditions['heat_transfer_coeff'] / length_scale             # <<<<<<<<<<<<<<
 * 
 * 	# Mixing time increases with scale
 */
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_lab_conditions, __pyx_n_u_heat_transfer_coeff); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_length_scale); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_pilot_conditions, __pyx_n_u_heat_transfer_coeff, __pyx_t_1) < 0)) __PYX_ERR(1, 1936, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1939
 * 
 * 	# Mixing time increases with scale
 * 	pilot_conditions['mixing_time'] = lab_conditions['mixing_time'] * length_scale             # <<<<<<<<<<<<<<
 * 
 * 	# Power requirements scale differently
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_lab_conditions, __pyx_n_u_mixing_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_length_scale); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(PyDict_SetItem(__pyx_v_pilot_conditions, __pyx_n_u_mixing_time, __pyx_t_2) < 0)) __PYX_ERR(1, 1939, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1942
 * 
 * 	# Power requirements scale differently
 * 	power_scale = scale_factor * length_scale  # Approximation             # <<<<<<<<<<<<<<
 * 
 * 	return {
 */
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_scale_factor, __pyx_v_length_scale); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_power_scale = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1944
 * 	power_scale = scale_factor * length_scale  # Approximation
 * 
 * 	return {             # <<<<<<<<<<<<<<
 * 		'pilot_conditions': pilot_conditions,
 * 		'scale_factor': scale_factor,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "pyroxa/pybindings.pyx":1945
 * 
 * 	return {
 * 		'pilot_conditions': pilot_conditions,             # <<<<<<<<<<<<<<
 * 		'scale_factor': scale_factor,
 * 		'length_scale': length_scale,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_pilot_conditions, __pyx_v_pilot_conditions) < 0) __PYX_ERR(1, 1945, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1946
 * 	return {
 * 		'pilot_conditions': pilot_conditions,
 * 		'scale_factor': scale_factor,             # <<<<<<<<<<<<<<
 * 		'length_scale': length_scale,
 * 		'area_scale': area_scale,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_scale_factor, __pyx_v_scale_factor) < 0) __PYX_ERR(1, 1945, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1947
 * 		'pilot_conditions': pilot_conditions,
 * 		'scale_factor': scale_factor,
 * 		'length_scale': length_scale,             # <<<<<<<<<<<<<<
 * 		'area_scale': area_scale,
 * 		'power_scale': power_scale,
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_length_scale, __pyx_v_length_scale) < 0) __PYX_ERR(1, 1945, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1948
 * 		'scale_factor': scale_factor,
 * 		'length_scale': length_scale,
 * 		'area_scale': area_scale,             # <<<<<<<<<<<<<<
 * 		'power_scale': power_scale,
 * 		'recommendations': {
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_area_scale, __pyx_v_area_scale) < 0) __PYX_ERR(1, 1945, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1949
 * 		'length_scale': length_scale,
 * 		'area_scale': area_scale,
 * 		'power_scale': power_scale,             # <<<<<<<<<<<<<<
 * 		'recommendations': {
 * 			'heat_transfer': 'Consider enhanced mixing at larger scale',
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_power_scale, __pyx_v_power_scale) < 0) __PYX_ERR(1, 1945, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1951
 * 		'power_scale': power_scale,
 * 		'recommendations': {
 * 			'heat_transfer': 'Consider enhanced mixing at larger scale',             # <<<<<<<<<<<<<<
 * 			'mass_transfer': 'Monitor for scale-up effects',
 * 			'residence_time': 'Verify similar residence time distribution'
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_heat_transfer, __pyx_kp_u_Consider_enhanced_mixing_at_larg) < 0) __PYX_ERR(1, 1951, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_mass_transfer, __pyx_kp_u_Monitor_for_scale_up_effects) < 0) __PYX_ERR(1, 1951, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_residence_time, __pyx_kp_u_Verify_similar_residence_time_di) < 0) __PYX_ERR(1, 1951, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_recommendations, __pyx_t_1) < 0) __PYX_ERR(1, 1945, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1955
 * 			'residence_time': 'Verify similar residence time distribution'
 * 		},
 * 		'success': True             # <<<<<<<<<<<<<<
 * 	}
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_success, Py_True) < 0) __PYX_ERR(1, 1945, __pyx_L1_error)
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":1914
 * 	}
 * 
 * def py_process_scale_up(lab_scale_volume, pilot_scale_volume, lab_conditions):             # <<<<<<<<<<<<<<
 * 	"""Scale up process from lab to pilot scale"""
 * 	import numpy as np
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyroxa._pybindings.py_process_scale_up", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_scale_factor);
  __Pyx_XDECREF(__pyx_v_length_scale);
  __Pyx_XDECREF(__pyx_v_area_scale);
  __Pyx_XDECREF(__pyx_v_pilot_conditions);
  __Pyx_XDECREF(__pyx_v_power_scale);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":691
 * ctypedef long double complex clongdouble_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":692
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":691
 * ctypedef long double complex clongdouble_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":694
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":695
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":694
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":697
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":698
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":697
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":700
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":701
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":700
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":703
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":704
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":703
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":706
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":707
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":708
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_d), __pyx_n_s_subarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(((PyObject*)__pyx_t_3));
    __pyx_r = ((PyObject*)__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":707
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":710
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":706
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("numpy.PyDataType_SHAPE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":907
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":908
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":909
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_t_1 = PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 909, __pyx_L1_error)

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":907
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":911
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":912
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":913
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":914
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":913
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":915
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":911
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":919
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":920
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":921
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 921, __pyx_L3_error)

      /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":920
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":922
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 922, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":923
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 923, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 923, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":920
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":919
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":925
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":926
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":927
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 927, __pyx_L3_error)

      /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":926
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":928
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 928, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":929
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 929, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 929, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":926
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":925
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":931
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":932
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":933
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 933, __pyx_L3_error)

      /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":932
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":934
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 934, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":935
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 935, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 935, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":932
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":931
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":938
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":950
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":938
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":953
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":965
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":953
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":968
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":975
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":968
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":978
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":982
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":978
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":985
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":989
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":985
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_Thermodynamics(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings_Thermodynamics(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pyroxa_11_pybindings_Thermodynamics[] = {
  {"enthalpy", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_3enthalpy, METH_O, __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_2enthalpy},
  {"entropy", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_5entropy, METH_O, __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_4entropy},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_7__reduce_cython__, METH_NOARGS, __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_9__setstate_cython__, METH_O, __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_8__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyroxa_11_pybindings_Thermodynamics = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.Thermodynamics", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings_Thermodynamics, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyroxa_11_pybindings_Thermodynamics, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings_Thermodynamics, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_Reaction(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pyroxa_11_pybindings_8Reaction_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings_Reaction(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pyroxa_11_pybindings_Reaction[] = {
  {"rate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_8Reaction_3rate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_8Reaction_2rate},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_8Reaction_5__reduce_cython__, METH_NOARGS, __pyx_doc_6pyroxa_11_pybindings_8Reaction_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_8Reaction_7__setstate_cython__, METH_O, __pyx_doc_6pyroxa_11_pybindings_8Reaction_6__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyroxa_11_pybindings_Reaction = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.Reaction", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_Reaction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings_Reaction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyroxa_11_pybindings_Reaction, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings_Reaction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6pyroxa_11_pybindings_ReactionMulti __pyx_vtable_6pyroxa_11_pybindings_ReactionMulti;

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_ReactionMulti(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pyroxa_11_pybindings_ReactionMulti;
  p->reactants = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->products = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings_ReactionMulti(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *p = (struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->reactants);
  Py_CLEAR(p->products);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings_ReactionMulti(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *p = (struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)o;
  if (p->reactants) {
    e = (*v)(p->reactants, a); if (e) return e;
  }
  if (p->products) {
    e = (*v)(p->products, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyroxa_11_pybindings_ReactionMulti(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *p = (struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)o;
  tmp = ((PyObject*)p->reactants);
  p->reactants = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->products);
  p->products = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6pyroxa_11_pybindings_ReactionMulti[] = {
  {"rate", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_3rate, METH_O, __pyx_doc_6pyroxa_11_pybindings_13ReactionMulti_2rate},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_5__reduce_cython__, METH_NOARGS, __pyx_doc_6pyroxa_11_pybindings_13ReactionMulti_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_7__setstate_cython__, METH_O, __pyx_doc_6pyroxa_11_pybindings_13ReactionMulti_6__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyroxa_11_pybindings_ReactionMulti = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.ReactionMulti", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings_ReactionMulti, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings_ReactionMulti, /*tp_traverse*/
  __pyx_tp_clear_6pyroxa_11_pybindings_ReactionMulti, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyroxa_11_pybindings_ReactionMulti, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings_ReactionMulti, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor __pyx_vtable_6pyroxa_11_pybindings_MultiReactor;

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_MultiReactor(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pyroxa_11_pybindings_MultiReactor;
  p->species = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->conc = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->reactions = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings_MultiReactor(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *p = (struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->species);
  Py_CLEAR(p->conc);
  Py_CLEAR(p->reactions);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings_MultiReactor(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *p = (struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)o;
  if (p->species) {
    e = (*v)(p->species, a); if (e) return e;
  }
  if (p->conc) {
    e = (*v)(p->conc, a); if (e) return e;
  }
  if (p->reactions) {
    e = (*v)(p->reactions, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyroxa_11_pybindings_MultiReactor(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *p = (struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)o;
  tmp = ((PyObject*)p->species);
  p->species = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->conc);
  p->conc = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->reactions);
  p->reactions = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6pyroxa_11_pybindings_MultiReactor[] = {
  {"_dcdt", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_3_dcdt, METH_O, __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_2_dcdt},
  {"step", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_5step, METH_O, __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_4step},
  {"run", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_7run, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_6run},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_9__reduce_cython__, METH_NOARGS, __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_11__setstate_cython__, METH_O, __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_10__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyroxa_11_pybindings_MultiReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.MultiReactor", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings_MultiReactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings_MultiReactor, /*tp_traverse*/
  __pyx_tp_clear_6pyroxa_11_pybindings_MultiReactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyroxa_11_pybindings_MultiReactor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings_MultiReactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_Reactor(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pyroxa_11_pybindings_7Reactor_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings_Reactor(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pyroxa_11_pybindings_Reactor[] = {
  {"run", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_7Reactor_3run, METH_NOARGS, __pyx_doc_6pyroxa_11_pybindings_7Reactor_2run},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_7Reactor_5__reduce_cython__, METH_NOARGS, __pyx_doc_6pyroxa_11_pybindings_7Reactor_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyroxa_11_pybindings_7Reactor_7__setstate_cython__, METH_O, __pyx_doc_6pyroxa_11_pybindings_7Reactor_6__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyroxa_11_pybindings_Reactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.Reactor", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_Reactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings_Reactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyroxa_11_pybindings_Reactor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings_Reactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation *__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation[8];
static int __pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation = 0;

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation)))) {
    o = (PyObject*)__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation[--__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation];
    memset(o, 0, sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_mass_balance_list);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation)))) {
    __pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation[__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation++] = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation *)o;
  if (p->__pyx_v_mass_balance_list) {
    e = (*v)(p->__pyx_v_mass_balance_list, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation *)o;
  tmp = ((PyObject*)p->__pyx_v_mass_balance_list);
  p->__pyx_v_mass_balance_list = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.__pyx_scope_struct__py_check_mass_conservation", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation, /*tp_traverse*/
  __pyx_tp_clear_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr[--__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_x);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr[__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis *__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis[8];
static int __pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis = 0;

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis)))) {
    o = (PyObject*)__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis[--__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis];
    memset(o, 0, sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_eigenvalues);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis)))) {
    __pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis[__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis++] = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis *)o;
  if (p->__pyx_v_eigenvalues) {
    e = (*v)(p->__pyx_v_eigenvalues, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis *)o;
  tmp = ((PyObject*)p->__pyx_v_eigenvalues);
  p->__pyx_v_eigenvalues = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.__pyx_scope_struct_2_py_stability_analysis", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis, /*tp_traverse*/
  __pyx_tp_clear_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr[--__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_ev);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr[__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_ev) {
    e = (*v)(p->__pyx_v_ev, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution[8];
static int __pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution = 0;

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution)))) {
    o = (PyObject*)__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution[--__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution];
    memset(o, 0, sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_flow_rates);
  Py_CLEAR(p->__pyx_v_mean_residence_times);
  Py_CLEAR(p->__pyx_v_n_tanks);
  Py_CLEAR(p->__pyx_v_volumes);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution)))) {
    __pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution[__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution++] = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *)o;
  if (p->__pyx_v_flow_rates) {
    e = (*v)(p->__pyx_v_flow_rates, a); if (e) return e;
  }
  if (p->__pyx_v_mean_residence_times) {
    e = (*v)(p->__pyx_v_mean_residence_times, a); if (e) return e;
  }
  if (p->__pyx_v_n_tanks) {
    e = (*v)(p->__pyx_v_n_tanks, a); if (e) return e;
  }
  if (p->__pyx_v_volumes) {
    e = (*v)(p->__pyx_v_volumes, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution *)o;
  tmp = ((PyObject*)p->__pyx_v_flow_rates);
  p->__pyx_v_flow_rates = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_mean_residence_times);
  p->__pyx_v_mean_residence_times = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_n_tanks);
  p->__pyx_v_n_tanks = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_volumes);
  p->__pyx_v_volumes = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.__pyx_scope_struct_4_py_residence_time_distribution", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution, /*tp_traverse*/
  __pyx_tp_clear_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr[8];
static int __pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr = 0;

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr[--__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr)))) {
    __pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr[__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr++] = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.__pyx_scope_struct_5_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr *__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr[8];
static int __pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr = 0;

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr[--__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr)))) {
    __pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr[__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr++] = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.__pyx_scope_struct_6_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr *__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr[8];
static int __pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr = 0;

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr[--__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_tau);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr)))) {
    __pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr[__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr++] = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_tau) {
    e = (*v)(p->__pyx_v_tau, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.__pyx_scope_struct_7_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__pybindings(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__pybindings},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_pybindings",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_u_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 1, 0, 1},
  {&__pyx_n_s_A0, __pyx_k_A0, sizeof(__pyx_k_A0), 0, 0, 1, 1},
  {&__pyx_n_s_A_c, __pyx_k_A_c, sizeof(__pyx_k_A_c), 0, 0, 1, 1},
  {&__pyx_n_s_A_inv, __pyx_k_A_inv, sizeof(__pyx_k_A_inv), 0, 0, 1, 1},
  {&__pyx_n_s_A_inv_c, __pyx_k_A_inv_c, sizeof(__pyx_k_A_inv_c), 0, 0, 1, 1},
  {&__pyx_n_s_A_list, __pyx_k_A_list, sizeof(__pyx_k_A_list), 0, 0, 1, 1},
  {&__pyx_kp_u_A_must_be_a_square_matrix, __pyx_k_A_must_be_a_square_matrix, sizeof(__pyx_k_A_must_be_a_square_matrix), 0, 1, 0, 0},
  {&__pyx_n_s_A_out, __pyx_k_A_out, sizeof(__pyx_k_A_out), 0, 0, 1, 1},
  {&__pyx_kp_u_Analytical_consecutive_first_ord, __pyx_k_Analytical_consecutive_first_ord, sizeof(__pyx_k_Analytical_consecutive_first_ord), 0, 1, 0, 0},
  {&__pyx_kp_u_Analytical_first_order_solution, __pyx_k_Analytical_first_order_solution, sizeof(__pyx_k_Analytical_first_order_solution), 0, 1, 0, 0},
  {&__pyx_kp_u_Analytical_reversible_first_orde, __pyx_k_Analytical_reversible_first_orde, sizeof(__pyx_k_Analytical_reversible_first_orde), 0, 1, 0, 0},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_n_u_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 1, 0, 1},
  {&__pyx_n_s_B0, __pyx_k_B0, sizeof(__pyx_k_B0), 0, 0, 1, 1},
  {&__pyx_n_s_B_c, __pyx_k_B_c, sizeof(__pyx_k_B_c), 0, 0, 1, 1},
  {&__pyx_n_s_B_list, __pyx_k_B_list, sizeof(__pyx_k_B_list), 0, 0, 1, 1},
  {&__pyx_n_s_B_out, __pyx_k_B_out, sizeof(__pyx_k_B_out), 0, 0, 1, 1},
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_n_u_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 1, 0, 1},
  {&__pyx_n_s_C_c, __pyx_k_C_c, sizeof(__pyx_k_C_c), 0, 0, 1, 1},
  {&__pyx_n_s_C_list, __pyx_k_C_list, sizeof(__pyx_k_C_list), 0, 0, 1, 1},
  {&__pyx_n_s_C_out, __pyx_k_C_out, sizeof(__pyx_k_C_out), 0, 0, 1, 1},
  {&__pyx_kp_u_Consider_enhanced_mixing_at_larg, __pyx_k_Consider_enhanced_mixing_at_larg, sizeof(__pyx_k_Consider_enhanced_mixing_at_larg), 0, 1, 0, 0},
  {&__pyx_n_s_Ea, __pyx_k_Ea, sizeof(__pyx_k_Ea), 0, 0, 1, 1},
  {&__pyx_n_s_Ea_f, __pyx_k_Ea_f, sizeof(__pyx_k_Ea_f), 0, 0, 1, 1},
  {&__pyx_n_s_Ea_f_c, __pyx_k_Ea_f_c, sizeof(__pyx_k_Ea_f_c), 0, 0, 1, 1},
  {&__pyx_n_s_Ea_r, __pyx_k_Ea_r, sizeof(__pyx_k_Ea_r), 0, 0, 1, 1},
  {&__pyx_n_s_Ea_r_c, __pyx_k_Ea_r_c, sizeof(__pyx_k_Ea_r_c), 0, 0, 1, 1},
  {&__pyx_kp_u_Empty_concentration_data, __pyx_k_Empty_concentration_data, sizeof(__pyx_k_Empty_concentration_data), 0, 1, 0, 0},
  {&__pyx_kp_u_Energy_balance_calculation_faile, __pyx_k_Energy_balance_calculation_faile, sizeof(__pyx_k_Energy_balance_calculation_faile), 0, 1, 0, 0},
  {&__pyx_n_s_HAS_NUMPY, __pyx_k_HAS_NUMPY, sizeof(__pyx_k_HAS_NUMPY), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_u_Input_must_be_a_square_matrix, __pyx_k_Input_must_be_a_square_matrix, sizeof(__pyx_k_Input_must_be_a_square_matrix), 0, 1, 0, 0},
  {&__pyx_kp_u_Inputs_must_be_2D_matrices, __pyx_k_Inputs_must_be_2D_matrices, sizeof(__pyx_k_Inputs_must_be_2D_matrices), 0, 1, 0, 0},
  {&__pyx_n_s_K_A, __pyx_k_K_A, sizeof(__pyx_k_K_A), 0, 0, 1, 1},
  {&__pyx_n_s_K_B, __pyx_k_K_B, sizeof(__pyx_k_K_B), 0, 0, 1, 1},
  {&__pyx_n_s_Kd, __pyx_k_Kd, sizeof(__pyx_k_Kd), 0, 0, 1, 1},
  {&__pyx_n_s_Ki, __pyx_k_Ki, sizeof(__pyx_k_Ki), 0, 0, 1, 1},
  {&__pyx_n_s_Km, __pyx_k_Km, sizeof(__pyx_k_Km), 0, 0, 1, 1},
  {&__pyx_n_s_Kp, __pyx_k_Kp, sizeof(__pyx_k_Kp), 0, 0, 1, 1},
  {&__pyx_kp_u_Linear_system_solve_failed_matri, __pyx_k_Linear_system_solve_failed_matri, sizeof(__pyx_k_Linear_system_solve_failed_matri), 0, 1, 0, 0},
  {&__pyx_n_s_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 0, 1, 1},
  {&__pyx_kp_u_Matrix_dimensions_incompatible_f, __pyx_k_Matrix_dimensions_incompatible_f, sizeof(__pyx_k_Matrix_dimensions_incompatible_f), 0, 1, 0, 0},
  {&__pyx_kp_u_Matrix_inversion_failed_matrix_m, __pyx_k_Matrix_inversion_failed_matrix_m, sizeof(__pyx_k_Matrix_inversion_failed_matrix_m), 0, 1, 0, 0},
  {&__pyx_kp_u_Matrix_multiplication_failed, __pyx_k_Matrix_multiplication_failed, sizeof(__pyx_k_Matrix_multiplication_failed), 0, 1, 0, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_u_Monitor_for_scale_up_effects, __pyx_k_Monitor_for_scale_up_effects, sizeof(__pyx_k_Monitor_for_scale_up_effects), 0, 1, 0, 0},
  {&__pyx_kp_u_Monte_Carlo_simulation_failed, __pyx_k_Monte_Carlo_simulation_failed, sizeof(__pyx_k_Monte_Carlo_simulation_failed), 0, 1, 0, 0},
  {&__pyx_n_s_MultiReactor, __pyx_k_MultiReactor, sizeof(__pyx_k_MultiReactor), 0, 0, 1, 1},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_n_s_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 0, 1, 1},
  {&__pyx_n_s_Pc, __pyx_k_Pc, sizeof(__pyx_k_Pc), 0, 0, 1, 1},
  {&__pyx_n_s_Pr, __pyx_k_Pr, sizeof(__pyx_k_Pr), 0, 0, 1, 1},
  {&__pyx_n_s_R, __pyx_k_R, sizeof(__pyx_k_R), 0, 0, 1, 1},
  {&__pyx_n_s_Re, __pyx_k_Re, sizeof(__pyx_k_Re), 0, 0, 1, 1},
  {&__pyx_n_s_Reaction, __pyx_k_Reaction, sizeof(__pyx_k_Reaction), 0, 0, 1, 1},
  {&__pyx_n_s_ReactionMulti, __pyx_k_ReactionMulti, sizeof(__pyx_k_ReactionMulti), 0, 0, 1, 1},
  {&__pyx_n_s_Reactor, __pyx_k_Reactor, sizeof(__pyx_k_Reactor), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_Sc, __pyx_k_Sc, sizeof(__pyx_k_Sc), 0, 0, 1, 1},
  {&__pyx_kp_u_Simulation_failed, __pyx_k_Simulation_failed, sizeof(__pyx_k_Simulation_failed), 0, 1, 0, 0},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_n_s_T_ref, __pyx_k_T_ref, sizeof(__pyx_k_T_ref), 0, 0, 1, 1},
  {&__pyx_n_s_Tc, __pyx_k_Tc, sizeof(__pyx_k_Tc), 0, 0, 1, 1},
  {&__pyx_n_s_Thermodynamics, __pyx_k_Thermodynamics, sizeof(__pyx_k_Thermodynamics), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_V, __pyx_k_V, sizeof(__pyx_k_V), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u_Verify_similar_residence_time_di, __pyx_k_Verify_similar_residence_time_di, sizeof(__pyx_k_Verify_similar_residence_time_di), 0, 1, 0, 0},
  {&__pyx_n_s_Vmax, __pyx_k_Vmax, sizeof(__pyx_k_Vmax), 0, 0, 1, 1},
  {&__pyx_n_s_activation_energy, __pyx_k_activation_energy, sizeof(__pyx_k_activation_energy), 0, 0, 1, 1},
  {&__pyx_kp_u_allocation_failed, __pyx_k_allocation_failed, sizeof(__pyx_k_allocation_failed), 0, 1, 0, 0},
  {&__pyx_kp_u_allocation_failed_for_coeffs, __pyx_k_allocation_failed_for_coeffs, sizeof(__pyx_k_allocation_failed_for_coeffs), 0, 1, 0, 0},
  {&__pyx_kp_u_allocation_failed_for_conc0, __pyx_k_allocation_failed_for_conc0, sizeof(__pyx_k_allocation_failed_for_conc0), 0, 1, 0, 0},
  {&__pyx_kp_u_allocation_failed_for_kf_kr, __pyx_k_allocation_failed_for_kf_kr, sizeof(__pyx_k_allocation_failed_for_kf_kr), 0, 1, 0, 0},
  {&__pyx_kp_u_allocation_failed_for_output_buf, __pyx_k_allocation_failed_for_output_buf, sizeof(__pyx_k_allocation_failed_for_output_buf), 0, 1, 0, 0},
  {&__pyx_kp_u_allocation_failed_for_products, __pyx_k_allocation_failed_for_products, sizeof(__pyx_k_allocation_failed_for_products), 0, 1, 0, 0},
  {&__pyx_kp_u_allocation_failed_for_reactants, __pyx_k_allocation_failed_for_reactants, sizeof(__pyx_k_allocation_failed_for_reactants), 0, 1, 0, 0},
  {&__pyx_n_s_area_scale, __pyx_k_area_scale, sizeof(__pyx_k_area_scale), 0, 0, 1, 1},
  {&__pyx_n_u_area_scale, __pyx_k_area_scale, sizeof(__pyx_k_area_scale), 0, 1, 0, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_b_c, __pyx_k_b_c, sizeof(__pyx_k_b_c), 0, 0, 1, 1},
  {&__pyx_kp_u_b_must_be_a_vector_with_length_e, __pyx_k_b_must_be_a_vector_with_length_e, sizeof(__pyx_k_b_must_be_a_vector_with_length_e), 0, 1, 0, 0},
  {&__pyx_n_s_bed_height, __pyx_k_bed_height, sizeof(__pyx_k_bed_height), 0, 0, 1, 1},
  {&__pyx_n_s_bed_length, __pyx_k_bed_length, sizeof(__pyx_k_bed_length), 0, 0, 1, 1},
  {&__pyx_n_s_bed_porosity, __pyx_k_bed_porosity, sizeof(__pyx_k_bed_porosity), 0, 0, 1, 1},
  {&__pyx_n_s_bounds, __pyx_k_bounds, sizeof(__pyx_k_bounds), 0, 0, 1, 1},
  {&__pyx_n_s_bubble_conc_out, __pyx_k_bubble_conc_out, sizeof(__pyx_k_bubble_conc_out), 0, 0, 1, 1},
  {&__pyx_n_u_bubble_concentrations, __pyx_k_bubble_concentrations, sizeof(__pyx_k_bubble_concentrations), 0, 1, 0, 1},
  {&__pyx_n_s_bubble_fraction, __pyx_k_bubble_fraction, sizeof(__pyx_k_bubble_fraction), 0, 0, 1, 1},
  {&__pyx_n_s_bubble_matrix, __pyx_k_bubble_matrix, sizeof(__pyx_k_bubble_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_bubble_t, __pyx_k_bubble_t, sizeof(__pyx_k_bubble_t), 0, 0, 1, 1},
  {&__pyx_n_s_c_coeffs, __pyx_k_c_coeffs, sizeof(__pyx_k_c_coeffs), 0, 0, 1, 1},
  {&__pyx_n_s_c_conc0, __pyx_k_c_conc0, sizeof(__pyx_k_c_conc0), 0, 0, 1, 1},
  {&__pyx_n_s_c_prod_idx, __pyx_k_c_prod_idx, sizeof(__pyx_k_c_prod_idx), 0, 0, 1, 1},
  {&__pyx_n_s_c_prod_nu, __pyx_k_c_prod_nu, sizeof(__pyx_k_c_prod_nu), 0, 0, 1, 1},
  {&__pyx_n_s_c_prod_off, __pyx_k_c_prod_off, sizeof(__pyx_k_c_prod_off), 0, 0, 1, 1},
  {&__pyx_n_s_c_reac_idx, __pyx_k_c_reac_idx, sizeof(__pyx_k_c_reac_idx), 0, 0, 1, 1},
  {&__pyx_n_s_c_reac_nu, __pyx_k_c_reac_nu, sizeof(__pyx_k_c_reac_nu), 0, 0, 1, 1},
  {&__pyx_n_s_c_reac_off, __pyx_k_c_reac_off, sizeof(__pyx_k_c_reac_off), 0, 0, 1, 1},
  {&__pyx_n_s_carr, __pyx_k_carr, sizeof(__pyx_k_carr), 0, 0, 1, 1},
  {&__pyx_n_s_catalyst_density, __pyx_k_catalyst_density, sizeof(__pyx_k_catalyst_density), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_coeffs, __pyx_k_coeffs, sizeof(__pyx_k_coeffs), 0, 0, 1, 1},
  {&__pyx_n_s_conc, __pyx_k_conc, sizeof(__pyx_k_conc), 0, 0, 1, 1},
  {&__pyx_n_u_conc, __pyx_k_conc, sizeof(__pyx_k_conc), 0, 1, 0, 1},
  {&__pyx_n_s_conc0, __pyx_k_conc0, sizeof(__pyx_k_conc0), 0, 0, 1, 1},
  {&__pyx_n_s_conc0_arr, __pyx_k_conc0_arr, sizeof(__pyx_k_conc0_arr), 0, 0, 1, 1},
  {&__pyx_n_s_conc0_py, __pyx_k_conc0_py, sizeof(__pyx_k_conc0_py), 0, 0, 1, 1},
  {&__pyx_n_s_conc_A, __pyx_k_conc_A, sizeof(__pyx_k_conc_A), 0, 0, 1, 1},
  {&__pyx_n_s_conc_B, __pyx_k_conc_B, sizeof(__pyx_k_conc_B), 0, 0, 1, 1},
  {&__pyx_n_s_conc_arr, __pyx_k_conc_arr, sizeof(__pyx_k_conc_arr), 0, 0, 1, 1},
  {&__pyx_n_s_conc_matrix, __pyx_k_conc_matrix, sizeof(__pyx_k_conc_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_conc_out_flat, __pyx_k_conc_out_flat, sizeof(__pyx_k_conc_out_flat), 0, 0, 1, 1},
  {&__pyx_n_s_conc_t, __pyx_k_conc_t, sizeof(__pyx_k_conc_t), 0, 0, 1, 1},
  {&__pyx_n_s_conc_traj, __pyx_k_conc_traj, sizeof(__pyx_k_conc_traj), 0, 0, 1, 1},
  {&__pyx_n_s_concentration, __pyx_k_concentration, sizeof(__pyx_k_concentration), 0, 0, 1, 1},
  {&__pyx_n_s_concentrations, __pyx_k_concentrations, sizeof(__pyx_k_concentrations), 0, 0, 1, 1},
  {&__pyx_n_u_concentrations, __pyx_k_concentrations, sizeof(__pyx_k_concentrations), 0, 1, 0, 1},
  {&__pyx_n_s_concs, __pyx_k_concs, sizeof(__pyx_k_concs), 0, 0, 1, 1},
  {&__pyx_n_s_constriction_factor, __pyx_k_constriction_factor, sizeof(__pyx_k_constriction_factor), 0, 0, 1, 1},
  {&__pyx_n_s_control_actions, __pyx_k_control_actions, sizeof(__pyx_k_control_actions), 0, 0, 1, 1},
  {&__pyx_n_u_control_actions, __pyx_k_control_actions, sizeof(__pyx_k_control_actions), 0, 1, 0, 1},
  {&__pyx_n_s_control_bounds, __pyx_k_control_bounds, sizeof(__pyx_k_control_bounds), 0, 0, 1, 1},
  {&__pyx_n_s_control_strategy, __pyx_k_control_strategy, sizeof(__pyx_k_control_strategy), 0, 0, 1, 1},
  {&__pyx_n_u_convergence, __pyx_k_convergence, sizeof(__pyx_k_convergence), 0, 1, 0, 1},
  {&__pyx_n_u_conversion, __pyx_k_conversion, sizeof(__pyx_k_conversion), 0, 1, 0, 1},
  {&__pyx_n_s_cp, __pyx_k_cp, sizeof(__pyx_k_cp), 0, 0, 1, 1},
  {&__pyx_n_s_cp_arr, __pyx_k_cp_arr, sizeof(__pyx_k_cp_arr), 0, 0, 1, 1},
  {&__pyx_n_s_ctypes, __pyx_k_ctypes, sizeof(__pyx_k_ctypes), 0, 0, 1, 1},
  {&__pyx_n_s_current_activity, __pyx_k_current_activity, sizeof(__pyx_k_current_activity), 0, 0, 1, 1},
  {&__pyx_n_u_current_activity, __pyx_k_current_activity, sizeof(__pyx_k_current_activity), 0, 1, 0, 1},
  {&__pyx_n_s_current_concentrations, __pyx_k_current_concentrations, sizeof(__pyx_k_current_concentrations), 0, 0, 1, 1},
  {&__pyx_n_s_current_state, __pyx_k_current_state, sizeof(__pyx_k_current_state), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_data_c, __pyx_k_data_c, sizeof(__pyx_k_data_c), 0, 0, 1, 1},
  {&__pyx_n_s_dcdt, __pyx_k_dcdt, sizeof(__pyx_k_dcdt), 0, 0, 1, 1},
  {&__pyx_n_s_deactivation_constant, __pyx_k_deactivation_constant, sizeof(__pyx_k_deactivation_constant), 0, 0, 1, 1},
  {&__pyx_n_s_deactivation_rate, __pyx_k_deactivation_rate, sizeof(__pyx_k_deactivation_rate), 0, 0, 1, 1},
  {&__pyx_n_u_deactivation_rate, __pyx_k_deactivation_rate, sizeof(__pyx_k_deactivation_rate), 0, 1, 0, 1},
  {&__pyx_n_s_delta_G, __pyx_k_delta_G, sizeof(__pyx_k_delta_G), 0, 0, 1, 1},
  {&__pyx_n_s_density, __pyx_k_density, sizeof(__pyx_k_density), 0, 0, 1, 1},
  {&__pyx_n_u_dimensionless_variance, __pyx_k_dimensionless_variance, sizeof(__pyx_k_dimensionless_variance), 0, 1, 0, 1},
  {&__pyx_n_s_distribution, __pyx_k_distribution, sizeof(__pyx_k_distribution), 0, 0, 1, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dydt, __pyx_k_dydt, sizeof(__pyx_k_dydt), 0, 0, 1, 1},
  {&__pyx_n_s_econ_coeffs, __pyx_k_econ_coeffs, sizeof(__pyx_k_econ_coeffs), 0, 0, 1, 1},
  {&__pyx_n_s_economic_coefficients, __pyx_k_economic_coefficients, sizeof(__pyx_k_economic_coefficients), 0, 0, 1, 1},
  {&__pyx_n_s_effective_kd, __pyx_k_effective_kd, sizeof(__pyx_k_effective_kd), 0, 0, 1, 1},
  {&__pyx_n_s_effectiveness_factor, __pyx_k_effectiveness_factor, sizeof(__pyx_k_effectiveness_factor), 0, 0, 1, 1},
  {&__pyx_n_s_eigenval, __pyx_k_eigenval, sizeof(__pyx_k_eigenval), 0, 0, 1, 1},
  {&__pyx_n_s_eigenvalues, __pyx_k_eigenvalues, sizeof(__pyx_k_eigenvalues), 0, 0, 1, 1},
  {&__pyx_n_u_eigenvalues, __pyx_k_eigenvalues, sizeof(__pyx_k_eigenvalues), 0, 1, 0, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_emulsion_conc_out, __pyx_k_emulsion_conc_out, sizeof(__pyx_k_emulsion_conc_out), 0, 0, 1, 1},
  {&__pyx_n_u_emulsion_concentrations, __pyx_k_emulsion_concentrations, sizeof(__pyx_k_emulsion_concentrations), 0, 1, 0, 1},
  {&__pyx_n_s_emulsion_matrix, __pyx_k_emulsion_matrix, sizeof(__pyx_k_emulsion_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_emulsion_t, __pyx_k_emulsion_t, sizeof(__pyx_k_emulsion_t), 0, 0, 1, 1},
  {&__pyx_n_s_enthalpies_arr, __pyx_k_enthalpies_arr, sizeof(__pyx_k_enthalpies_arr), 0, 0, 1, 1},
  {&__pyx_n_s_enthalpies_formation, __pyx_k_enthalpies_formation, sizeof(__pyx_k_enthalpies_formation), 0, 0, 1, 1},
  {&__pyx_n_u_enthalpies_formation, __pyx_k_enthalpies_formation, sizeof(__pyx_k_enthalpies_formation), 0, 1, 0, 1},
  {&__pyx_n_s_enthalpy, __pyx_k_enthalpy, sizeof(__pyx_k_enthalpy), 0, 0, 1, 1},
  {&__pyx_n_s_entropy, __pyx_k_entropy, sizeof(__pyx_k_entropy), 0, 0, 1, 1},
  {&__pyx_n_u_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 1, 0, 1},
  {&__pyx_n_s_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
  {&__pyx_n_s_exp_c, __pyx_k_exp_c, sizeof(__pyx_k_exp_c), 0, 0, 1, 1},
  {&__pyx_n_s_experimental, __pyx_k_experimental, sizeof(__pyx_k_experimental), 0, 0, 1, 1},
  {&__pyx_n_s_experimental_data, __pyx_k_experimental_data, sizeof(__pyx_k_experimental_data), 0, 0, 1, 1},
  {&__pyx_n_s_feed_conditions, __pyx_k_feed_conditions, sizeof(__pyx_k_feed_conditions), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_flow_rate, __pyx_k_flow_rate, sizeof(__pyx_k_flow_rate), 0, 0, 1, 1},
  {&__pyx_n_u_flow_rate, __pyx_k_flow_rate, sizeof(__pyx_k_flow_rate), 0, 1, 0, 1},
  {&__pyx_n_u_flow_rate_adjust, __pyx_k_flow_rate_adjust, sizeof(__pyx_k_flow_rate_adjust), 0, 1, 0, 1},
  {&__pyx_n_s_flow_rates, __pyx_k_flow_rates, sizeof(__pyx_k_flow_rates), 0, 0, 1, 1},
  {&__pyx_n_s_gas_constant, __pyx_k_gas_constant, sizeof(__pyx_k_gas_constant), 0, 0, 1, 1},
  {&__pyx_n_s_gas_velocity, __pyx_k_gas_velocity, sizeof(__pyx_k_gas_velocity), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_geometry_factor, __pyx_k_geometry_factor, sizeof(__pyx_k_geometry_factor), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_heat_capacities, __pyx_k_heat_capacities, sizeof(__pyx_k_heat_capacities), 0, 0, 1, 1},
  {&__pyx_n_u_heat_capacities, __pyx_k_heat_capacities, sizeof(__pyx_k_heat_capacities), 0, 1, 0, 1},
  {&__pyx_n_u_heat_generation, __pyx_k_heat_generation, sizeof(__pyx_k_heat_generation), 0, 1, 0, 1},
  {&__pyx_n_s_heat_generation_val, __pyx_k_heat_generation_val, sizeof(__pyx_k_heat_generation_val), 0, 0, 1, 1},
  {&__pyx_n_u_heat_transfer, __pyx_k_heat_transfer, sizeof(__pyx_k_heat_transfer), 0, 1, 0, 1},
  {&__pyx_n_u_heat_transfer_coeff, __pyx_k_heat_transfer_coeff, sizeof(__pyx_k_heat_transfer_coeff), 0, 1, 0, 1},
  {&__pyx_n_s_horizon, __pyx_k_horizon, sizeof(__pyx_k_horizon), 0, 0, 1, 1},
  {&__pyx_n_u_horizon, __pyx_k_horizon, sizeof(__pyx_k_horizon), 0, 1, 0, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_inhibitor_conc, __pyx_k_inhibitor_conc, sizeof(__pyx_k_inhibitor_conc), 0, 0, 1, 1},
  {&__pyx_n_s_initial, __pyx_k_initial, sizeof(__pyx_k_initial), 0, 0, 1, 1},
  {&__pyx_n_u_initial, __pyx_k_initial, sizeof(__pyx_k_initial), 0, 1, 0, 1},
  {&__pyx_n_s_initial_activity, __pyx_k_initial_activity, sizeof(__pyx_k_initial_activity), 0, 0, 1, 1},
  {&__pyx_n_s_integral_term, __pyx_k_integral_term, sizeof(__pyx_k_integral_term), 0, 0, 1, 1},
  {&__pyx_n_u_is_conserved, __pyx_k_is_conserved, sizeof(__pyx_k_is_conserved), 0, 1, 0, 1},
  {&__pyx_n_s_is_stable, __pyx_k_is_stable, sizeof(__pyx_k_is_stable), 0, 0, 1, 1},
  {&__pyx_n_u_is_stable, __pyx_k_is_stable, sizeof(__pyx_k_is_stable), 0, 1, 0, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_jacobian, __pyx_k_jacobian, sizeof(__pyx_k_jacobian), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_k1, __pyx_k_k1, sizeof(__pyx_k_k1), 0, 0, 1, 1},
  {&__pyx_n_s_k2, __pyx_k_k2, sizeof(__pyx_k_k2), 0, 0, 1, 1},
  {&__pyx_n_s_kf, __pyx_k_kf, sizeof(__pyx_k_kf), 0, 0, 1, 1},
  {&__pyx_n_u_kf, __pyx_k_kf, sizeof(__pyx_k_kf), 0, 1, 0, 1},
  {&__pyx_n_s_kf_arr, __pyx_k_kf_arr, sizeof(__pyx_k_kf_arr), 0, 0, 1, 1},
  {&__pyx_n_s_kf_c, __pyx_k_kf_c, sizeof(__pyx_k_kf_c), 0, 0, 1, 1},
  {&__pyx_n_s_kf_mean, __pyx_k_kf_mean, sizeof(__pyx_k_kf_mean), 0, 0, 1, 1},
  {&__pyx_n_s_kf_mean_arr, __pyx_k_kf_mean_arr, sizeof(__pyx_k_kf_mean_arr), 0, 0, 1, 1},
  {&__pyx_n_s_kf_out, __pyx_k_kf_out, sizeof(__pyx_k_kf_out), 0, 0, 1, 1},
  {&__pyx_n_s_kf_out_c, __pyx_k_kf_out_c, sizeof(__pyx_k_kf_out_c), 0, 0, 1, 1},
  {&__pyx_n_s_kf_ptr, __pyx_k_kf_ptr, sizeof(__pyx_k_kf_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_kf_ref, __pyx_k_kf_ref, sizeof(__pyx_k_kf_ref), 0, 0, 1, 1},
  {&__pyx_n_s_kf_ref_c, __pyx_k_kf_ref_c, sizeof(__pyx_k_kf_ref_c), 0, 0, 1, 1},
  {&__pyx_n_s_kf_std, __pyx_k_kf_std, sizeof(__pyx_k_kf_std), 0, 0, 1, 1},
  {&__pyx_n_s_kf_std_arr, __pyx_k_kf_std_arr, sizeof(__pyx_k_kf_std_arr), 0, 0, 1, 1},
  {&__pyx_n_s_kr, __pyx_k_kr, sizeof(__pyx_k_kr), 0, 0, 1, 1},
  {&__pyx_n_u_kr, __pyx_k_kr, sizeof(__pyx_k_kr), 0, 1, 0, 1},
  {&__pyx_n_s_kr_arr, __pyx_k_kr_arr, sizeof(__pyx_k_kr_arr), 0, 0, 1, 1},
  {&__pyx_n_s_kr_c, __pyx_k_kr_c, sizeof(__pyx_k_kr_c), 0, 0, 1, 1},
  {&__pyx_n_s_kr_mean, __pyx_k_kr_mean, sizeof(__pyx_k_kr_mean), 0, 0, 1, 1},
  {&__pyx_n_s_kr_mean_arr, __pyx_k_kr_mean_arr, sizeof(__pyx_k_kr_mean_arr), 0, 0, 1, 1},
  {&__pyx_n_s_kr_out, __pyx_k_kr_out, sizeof(__pyx_k_kr_out), 0, 0, 1, 1},
  {&__pyx_n_s_kr_out_c, __pyx_k_kr_out_c, sizeof(__pyx_k_kr_out_c), 0, 0, 1, 1},
  {&__pyx_n_s_kr_ptr, __pyx_k_kr_ptr, sizeof(__pyx_k_kr_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_kr_ref, __pyx_k_kr_ref, sizeof(__pyx_k_kr_ref), 0, 0, 1, 1},
  {&__pyx_n_s_kr_ref_c, __pyx_k_kr_ref_c, sizeof(__pyx_k_kr_ref_c), 0, 0, 1, 1},
  {&__pyx_n_s_kr_std, __pyx_k_kr_std, sizeof(__pyx_k_kr_std), 0, 0, 1, 1},
  {&__pyx_n_s_kr_std_arr, __pyx_k_kr_std_arr, sizeof(__pyx_k_kr_std_arr), 0, 0, 1, 1},
  {&__pyx_n_s_lab_conditions, __pyx_k_lab_conditions, sizeof(__pyx_k_lab_conditions), 0, 0, 1, 1},
  {&__pyx_n_s_lab_scale_volume, __pyx_k_lab_scale_volume, sizeof(__pyx_k_lab_scale_volume), 0, 0, 1, 1},
  {&__pyx_n_s_length_scale, __pyx_k_length_scale, sizeof(__pyx_k_length_scale), 0, 0, 1, 1},
  {&__pyx_n_u_length_scale, __pyx_k_length_scale, sizeof(__pyx_k_length_scale), 0, 1, 0, 1},
  {&__pyx_n_s_light_intensity, __pyx_k_light_intensity, sizeof(__pyx_k_light_intensity), 0, 0, 1, 1},
  {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mass_balance, __pyx_k_mass_balance, sizeof(__pyx_k_mass_balance), 0, 0, 1, 1},
  {&__pyx_n_u_mass_balance, __pyx_k_mass_balance, sizeof(__pyx_k_mass_balance), 0, 1, 0, 1},
  {&__pyx_n_s_mass_balance_list, __pyx_k_mass_balance_list, sizeof(__pyx_k_mass_balance_list), 0, 0, 1, 1},
  {&__pyx_n_u_mass_transfer, __pyx_k_mass_transfer, sizeof(__pyx_k_mass_transfer), 0, 1, 0, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_u_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 1, 0, 1},
  {&__pyx_n_s_max_len, __pyx_k_max_len, sizeof(__pyx_k_max_len), 0, 0, 1, 1},
  {&__pyx_n_s_max_list, __pyx_k_max_list, sizeof(__pyx_k_max_list), 0, 0, 1, 1},
  {&__pyx_n_u_max_violation, __pyx_k_max_violation, sizeof(__pyx_k_max_violation), 0, 1, 0, 1},
  {&__pyx_n_u_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 1, 0, 1},
  {&__pyx_n_s_mean_list, __pyx_k_mean_list, sizeof(__pyx_k_mean_list), 0, 0, 1, 1},
  {&__pyx_n_u_mean_residence_time, __pyx_k_mean_residence_time, sizeof(__pyx_k_mean_residence_time), 0, 1, 0, 1},
  {&__pyx_n_s_mean_residence_times, __pyx_k_mean_residence_times, sizeof(__pyx_k_mean_residence_times), 0, 0, 1, 1},
  {&__pyx_n_u_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 1, 0, 1},
  {&__pyx_n_s_min_list, __pyx_k_min_list, sizeof(__pyx_k_min_list), 0, 0, 1, 1},
  {&__pyx_n_s_mixing_efficiency, __pyx_k_mixing_efficiency, sizeof(__pyx_k_mixing_efficiency), 0, 0, 1, 1},
  {&__pyx_n_u_mixing_efficiency, __pyx_k_mixing_efficiency, sizeof(__pyx_k_mixing_efficiency), 0, 1, 0, 1},
  {&__pyx_n_s_mixing_efficiency_out, __pyx_k_mixing_efficiency_out, sizeof(__pyx_k_mixing_efficiency_out), 0, 0, 1, 1},
  {&__pyx_n_s_mixing_intensity, __pyx_k_mixing_intensity, sizeof(__pyx_k_mixing_intensity), 0, 0, 1, 1},
  {&__pyx_n_u_mixing_time, __pyx_k_mixing_time, sizeof(__pyx_k_mixing_time), 0, 1, 0, 1},
  {&__pyx_n_s_molar_absorptivity, __pyx_k_molar_absorptivity, sizeof(__pyx_k_molar_absorptivity), 0, 0, 1, 1},
  {&__pyx_n_s_molecular_diff, __pyx_k_molecular_diff, sizeof(__pyx_k_molecular_diff), 0, 0, 1, 1},
  {&__pyx_kp_u_multi_reactor_C_simulation_faile, __pyx_k_multi_reactor_C_simulation_faile, sizeof(__pyx_k_multi_reactor_C_simulation_faile), 0, 1, 0, 0},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_n_bootstrap, __pyx_k_n_bootstrap, sizeof(__pyx_k_n_bootstrap), 0, 0, 1, 1},
  {&__pyx_n_u_n_bootstrap, __pyx_k_n_bootstrap, sizeof(__pyx_k_n_bootstrap), 0, 1, 0, 1},
  {&__pyx_n_s_n_controls, __pyx_k_n_controls, sizeof(__pyx_k_n_controls), 0, 0, 1, 1},
  {&__pyx_n_s_n_data, __pyx_k_n_data, sizeof(__pyx_k_n_data), 0, 0, 1, 1},
  {&__pyx_n_s_n_folds, __pyx_k_n_folds, sizeof(__pyx_k_n_folds), 0, 0, 1, 1},
  {&__pyx_n_s_n_known, __pyx_k_n_known, sizeof(__pyx_k_n_known), 0, 0, 1, 1},
  {&__pyx_n_s_n_params, __pyx_k_n_params, sizeof(__pyx_k_n_params), 0, 0, 1, 1},
  {&__pyx_n_u_n_points, __pyx_k_n_points, sizeof(__pyx_k_n_points), 0, 1, 0, 1},
  {&__pyx_n_u_n_reactions, __pyx_k_n_reactions, sizeof(__pyx_k_n_reactions), 0, 1, 0, 1},
  {&__pyx_n_s_n_reactors, __pyx_k_n_reactors, sizeof(__pyx_k_n_reactors), 0, 0, 1, 1},
  {&__pyx_n_u_n_samples, __pyx_k_n_samples, sizeof(__pyx_k_n_samples), 0, 1, 0, 1},
  {&__pyx_n_s_n_species, __pyx_k_n_species, sizeof(__pyx_k_n_species), 0, 0, 1, 1},
  {&__pyx_n_u_n_species, __pyx_k_n_species, sizeof(__pyx_k_n_species), 0, 1, 0, 1},
  {&__pyx_n_s_n_tanks, __pyx_k_n_tanks, sizeof(__pyx_k_n_tanks), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_ndata, __pyx_k_ndata, sizeof(__pyx_k_ndata), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_nparams, __pyx_k_nparams, sizeof(__pyx_k_nparams), 0, 0, 1, 1},
  {&__pyx_n_s_npoints, __pyx_k_npoints, sizeof(__pyx_k_npoints), 0, 0, 1, 1},
  {&__pyx_n_s_npts, __pyx_k_npts, sizeof(__pyx_k_npts), 0, 0, 1, 1},
  {&__pyx_n_s_nsamples, __pyx_k_nsamples, sizeof(__pyx_k_nsamples), 0, 0, 1, 1},
  {&__pyx_n_s_nseg, __pyx_k_nseg, sizeof(__pyx_k_nseg), 0, 0, 1, 1},
  {&__pyx_n_s_nsteps, __pyx_k_nsteps, sizeof(__pyx_k_nsteps), 0, 0, 1, 1},
  {&__pyx_n_s_nthreads, __pyx_k_nthreads, sizeof(__pyx_k_nthreads), 0, 0, 1, 1},
  {&__pyx_n_u_nthreads, __pyx_k_nthreads, sizeof(__pyx_k_nthreads), 0, 1, 0, 1},
  {&__pyx_n_s_nu, __pyx_k_nu, sizeof(__pyx_k_nu), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy__core_multiarray_failed_to, __pyx_k_numpy__core_multiarray_failed_to, sizeof(__pyx_k_numpy__core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy__core_umath_failed_to_impo, __pyx_k_numpy__core_umath_failed_to_impo, sizeof(__pyx_k_numpy__core_umath_failed_to_impo), 0, 1, 0, 0},
  {&__pyx_n_s_omega, __pyx_k_omega, sizeof(__pyx_k_omega), 0, 0, 1, 1},
  {&__pyx_n_s_optimal_controls, __pyx_k_optimal_controls, sizeof(__pyx_k_optimal_controls), 0, 0, 1, 1},
  {&__pyx_n_u_optimal_controls, __pyx_k_optimal_controls, sizeof(__pyx_k_optimal_controls), 0, 1, 0, 1},
  {&__pyx_n_s_optimal_settings, __pyx_k_optimal_settings, sizeof(__pyx_k_optimal_settings), 0, 0, 1, 1},
  {&__pyx_n_u_overall_conversion, __pyx_k_overall_conversion, sizeof(__pyx_k_overall_conversion), 0, 1, 0, 1},
  {&__pyx_n_s_overall_mean_tau, __pyx_k_overall_mean_tau, sizeof(__pyx_k_overall_mean_tau), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_param_distribution, __pyx_k_param_distribution, sizeof(__pyx_k_param_distribution), 0, 0, 1, 1},
  {&__pyx_n_s_param_samples, __pyx_k_param_samples, sizeof(__pyx_k_param_samples), 0, 0, 1, 1},
  {&__pyx_n_u_parameter_distribution, __pyx_k_parameter_distribution, sizeof(__pyx_k_parameter_distribution), 0, 1, 0, 1},
  {&__pyx_n_s_parameters, __pyx_k_parameters, sizeof(__pyx_k_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_params, __pyx_k_params, sizeof(__pyx_k_params), 0, 0, 1, 1},
  {&__pyx_n_s_params_c, __pyx_k_params_c, sizeof(__pyx_k_params_c), 0, 0, 1, 1},
  {&__pyx_n_s_partial_pressure_poison, __pyx_k_partial_pressure_poison, sizeof(__pyx_k_partial_pressure_poison), 0, 0, 1, 1},
  {&__pyx_n_s_particle_diameter, __pyx_k_particle_diameter, sizeof(__pyx_k_particle_diameter), 0, 0, 1, 1},
  {&__pyx_n_s_path_length, __pyx_k_path_length, sizeof(__pyx_k_path_length), 0, 0, 1, 1},
  {&__pyx_n_s_pilot_conditions, __pyx_k_pilot_conditions, sizeof(__pyx_k_pilot_conditions), 0, 0, 1, 1},
  {&__pyx_n_u_pilot_conditions, __pyx_k_pilot_conditions, sizeof(__pyx_k_pilot_conditions), 0, 1, 0, 1},
  {&__pyx_n_s_pilot_scale_volume, __pyx_k_pilot_scale_volume, sizeof(__pyx_k_pilot_scale_volume), 0, 0, 1, 1},
  {&__pyx_n_s_poison_factor, __pyx_k_poison_factor, sizeof(__pyx_k_poison_factor), 0, 0, 1, 1},
  {&__pyx_n_u_poison_factor, __pyx_k_poison_factor, sizeof(__pyx_k_poison_factor), 0, 1, 0, 1},
  {&__pyx_n_s_porosity, __pyx_k_porosity, sizeof(__pyx_k_porosity), 0, 0, 1, 1},
  {&__pyx_n_s_power_scale, __pyx_k_power_scale, sizeof(__pyx_k_power_scale), 0, 0, 1, 1},
  {&__pyx_n_u_power_scale, __pyx_k_power_scale, sizeof(__pyx_k_power_scale), 0, 1, 0, 1},
  {&__pyx_n_s_pre_exponential, __pyx_k_pre_exponential, sizeof(__pyx_k_pre_exponential), 0, 0, 1, 1},
  {&__pyx_n_s_pred_c, __pyx_k_pred_c, sizeof(__pyx_k_pred_c), 0, 0, 1, 1},
  {&__pyx_n_s_predicted, __pyx_k_predicted, sizeof(__pyx_k_predicted), 0, 0, 1, 1},
  {&__pyx_n_s_predicted_profit, __pyx_k_predicted_profit, sizeof(__pyx_k_predicted_profit), 0, 0, 1, 1},
  {&__pyx_n_u_predicted_profit, __pyx_k_predicted_profit, sizeof(__pyx_k_predicted_profit), 0, 1, 0, 1},
  {&__pyx_n_s_pressure, __pyx_k_pressure, sizeof(__pyx_k_pressure), 0, 0, 1, 1},
  {&__pyx_n_u_pressure, __pyx_k_pressure, sizeof(__pyx_k_pressure), 0, 1, 0, 1},
  {&__pyx_n_u_pressure_drop, __pyx_k_pressure_drop, sizeof(__pyx_k_pressure_drop), 0, 1, 0, 1},
  {&__pyx_n_s_pressure_out, __pyx_k_pressure_out, sizeof(__pyx_k_pressure_out), 0, 0, 1, 1},
  {&__pyx_n_s_pressure_out_list, __pyx_k_pressure_out_list, sizeof(__pyx_k_pressure_out_list), 0, 0, 1, 1},
  {&__pyx_n_s_previous_error, __pyx_k_previous_error, sizeof(__pyx_k_previous_error), 0, 0, 1, 1},
  {&__pyx_n_s_process_variable, __pyx_k_process_variable, sizeof(__pyx_k_process_variable), 0, 0, 1, 1},
  {&__pyx_n_s_prod_idx, __pyx_k_prod_idx, sizeof(__pyx_k_prod_idx), 0, 0, 1, 1},
  {&__pyx_n_s_prod_idx_arr, __pyx_k_prod_idx_arr, sizeof(__pyx_k_prod_idx_arr), 0, 0, 1, 1},
  {&__pyx_n_s_prod_idx_list, __pyx_k_prod_idx_list, sizeof(__pyx_k_prod_idx_list), 0, 0, 1, 1},
  {&__pyx_n_s_prod_nu, __pyx_k_prod_nu, sizeof(__pyx_k_prod_nu), 0, 0, 1, 1},
  {&__pyx_n_s_prod_nu_arr, __pyx_k_prod_nu_arr, sizeof(__pyx_k_prod_nu_arr), 0, 0, 1, 1},
  {&__pyx_n_s_prod_nu_list, __pyx_k_prod_nu_list, sizeof(__pyx_k_prod_nu_list), 0, 0, 1, 1},
  {&__pyx_n_s_prod_off, __pyx_k_prod_off, sizeof(__pyx_k_prod_off), 0, 0, 1, 1},
  {&__pyx_n_s_prod_off_arr, __pyx_k_prod_off_arr, sizeof(__pyx_k_prod_off_arr), 0, 0, 1, 1},
  {&__pyx_n_s_products, __pyx_k_products, sizeof(__pyx_k_products), 0, 0, 1, 1},
  {&__pyx_n_u_products, __pyx_k_products, sizeof(__pyx_k_products), 0, 1, 0, 1},
  {&__pyx_n_s_py_analytical_consecutive_first, __pyx_k_py_analytical_consecutive_first, sizeof(__pyx_k_py_analytical_consecutive_first), 0, 0, 1, 1},
  {&__pyx_n_s_py_analytical_first_order, __pyx_k_py_analytical_first_order, sizeof(__pyx_k_py_analytical_first_order), 0, 0, 1, 1},
  {&__pyx_n_s_py_analytical_reversible_first_o, __pyx_k_py_analytical_reversible_first_o, sizeof(__pyx_k_py_analytical_reversible_first_o), 0, 0, 1, 1},
  {&__pyx_n_s_py_arrhenius_rate, __pyx_k_py_arrhenius_rate, sizeof(__pyx_k_py_arrhenius_rate), 0, 0, 1, 1},
  {&__pyx_n_s_py_autocatalytic_rate, __pyx_k_py_autocatalytic_rate, sizeof(__pyx_k_py_autocatalytic_rate), 0, 0, 1, 1},
  {&__pyx_n_s_py_bootstrap_uncertainty, __pyx_k_py_bootstrap_uncertainty, sizeof(__pyx_k_py_bootstrap_uncertainty), 0, 0, 1, 1},
  {&__pyx_n_s_py_calculate_aic, __pyx_k_py_calculate_aic, sizeof(__pyx_k_py_calculate_aic), 0, 0, 1, 1},
  {&__pyx_n_s_py_calculate_energy_balance, __pyx_k_py_calculate_energy_balance, sizeof(__pyx_k_py_calculate_energy_balance), 0, 0, 1, 1},
  {&__pyx_n_s_py_calculate_jacobian, __pyx_k_py_calculate_jacobian, sizeof(__pyx_k_py_calculate_jacobian), 0, 0, 1, 1},
  {&__pyx_n_s_py_calculate_objective_function, __pyx_k_py_calculate_objective_function, sizeof(__pyx_k_py_calculate_objective_function), 0, 0, 1, 1},
  {&__pyx_n_s_py_calculate_r_squared, __pyx_k_py_calculate_r_squared, sizeof(__pyx_k_py_calculate_r_squared), 0, 0, 1, 1},
  {&__pyx_n_s_py_calculate_rate_constants, __pyx_k_py_calculate_rate_constants, sizeof(__pyx_k_py_calculate_rate_constants), 0, 0, 1, 1},
  {&__pyx_n_s_py_calculate_rmse, __pyx_k_py_calculate_rmse, sizeof(__pyx_k_py_calculate_rmse), 0, 0, 1, 1},
  {&__pyx_n_s_py_calculate_sensitivity, __pyx_k_py_calculate_sensitivity, sizeof(__pyx_k_py_calculate_sensitivity), 0, 0, 1, 1},
  {&__pyx_n_s_py_catalyst_deactivation_model, __pyx_k_py_catalyst_deactivation_model, sizeof(__pyx_k_py_catalyst_deactivation_model), 0, 0, 1, 1},
  {&__pyx_n_s_py_check_mass_conservation, __pyx_k_py_check_mass_conservation, sizeof(__pyx_k_py_check_mass_conservation), 0, 0, 1, 1},
  {&__pyx_n_s_py_check_mass_conservation_local, __pyx_k_py_check_mass_conservation_local, sizeof(__pyx_k_py_check_mass_conservation_local), 0, 0, 1, 1},
  {&__pyx_n_s_py_competitive_inhibition_rate, __pyx_k_py_competitive_inhibition_rate, sizeof(__pyx_k_py_competitive_inhibition_rate), 0, 0, 1, 1},
  {&__pyx_n_s_py_cross_validation_score, __pyx_k_py_cross_validation_score, sizeof(__pyx_k_py_cross_validation_score), 0, 0, 1, 1},
  {&__pyx_n_s_py_cubic_spline_interpolate, __pyx_k_py_cubic_spline_interpolate, sizeof(__pyx_k_py_cubic_spline_interpolate), 0, 0, 1, 1},
  {&__pyx_n_s_py_effective_diffusivity, __pyx_k_py_effective_diffusivity, sizeof(__pyx_k_py_effective_diffusivity), 0, 0, 1, 1},
  {&__pyx_n_s_py_enthalpy_c, __pyx_k_py_enthalpy_c, sizeof(__pyx_k_py_enthalpy_c), 0, 0, 1, 1},
  {&__pyx_n_s_py_enthalpy_nasa, __pyx_k_py_enthalpy_nasa, sizeof(__pyx_k_py_enthalpy_nasa), 0, 0, 1, 1},
  {&__pyx_n_s_py_entropy_c, __pyx_k_py_entropy_c, sizeof(__pyx_k_py_entropy_c), 0, 0, 1, 1},
  {&__pyx_n_s_py_entropy_nasa, __pyx_k_py_entropy_nasa, sizeof(__pyx_k_py_entropy_nasa), 0, 0, 1, 1},
  {&__pyx_n_s_py_equilibrium_constant, __pyx_k_py_equilibrium_constant, sizeof(__pyx_k_py_equilibrium_constant), 0, 0, 1, 1},
  {&__pyx_n_s_py_fugacity_coefficient, __pyx_k_py_fugacity_coefficient, sizeof(__pyx_k_py_fugacity_coefficient), 0, 0, 1, 1},
  {&__pyx_n_s_py_gibbs_free_energy, __pyx_k_py_gibbs_free_energy, sizeof(__pyx_k_py_gibbs_free_energy), 0, 0, 1, 1},
  {&__pyx_n_s_py_heat_capacity_nasa, __pyx_k_py_heat_capacity_nasa, sizeof(__pyx_k_py_heat_capacity_nasa), 0, 0, 1, 1},
  {&__pyx_n_s_py_heat_transfer_correlation, __pyx_k_py_heat_transfer_correlation, sizeof(__pyx_k_py_heat_transfer_correlation), 0, 0, 1, 1},
  {&__pyx_n_s_py_kriging_interpolation, __pyx_k_py_kriging_interpolation, sizeof(__pyx_k_py_kriging_interpolation), 0, 0, 1, 1},
  {&__pyx_n_s_py_langmuir_hinshelwood_rate, __pyx_k_py_langmuir_hinshelwood_rate, sizeof(__pyx_k_py_langmuir_hinshelwood_rate), 0, 0, 1, 1},
  {&__pyx_n_s_py_linear_interpolate, __pyx_k_py_linear_interpolate, sizeof(__pyx_k_py_linear_interpolate), 0, 0, 1, 1},
  {&__pyx_n_s_py_mass_transfer_correlation, __pyx_k_py_mass_transfer_correlation, sizeof(__pyx_k_py_mass_transfer_correlation), 0, 0, 1, 1},
  {&__pyx_n_s_py_matrix_invert, __pyx_k_py_matrix_invert, sizeof(__pyx_k_py_matrix_invert), 0, 0, 1, 1},
  {&__pyx_n_s_py_matrix_multiply, __pyx_k_py_matrix_multiply, sizeof(__pyx_k_py_matrix_multiply), 0, 0, 1, 1},
  {&__pyx_n_s_py_michaelis_menten_rate, __pyx_k_py_michaelis_menten_rate, sizeof(__pyx_k_py_michaelis_menten_rate), 0, 0, 1, 1},
  {&__pyx_n_s_py_monte_carlo_simulation, __pyx_k_py_monte_carlo_simulation, sizeof(__pyx_k_py_monte_carlo_simulation), 0, 0, 1, 1},
  {&__pyx_n_s_py_mpc_controller, __pyx_k_py_mpc_controller, sizeof(__pyx_k_py_mpc_controller), 0, 0, 1, 1},
  {&__pyx_n_s_py_photochemical_rate, __pyx_k_py_photochemical_rate, sizeof(__pyx_k_py_photochemical_rate), 0, 0, 1, 1},
  {&__pyx_n_s_py_pid_controller, __pyx_k_py_pid_controller, sizeof(__pyx_k_py_pid_controller), 0, 0, 1, 1},
  {&__pyx_n_s_py_pressure_drop_ergun, __pyx_k_py_pressure_drop_ergun, sizeof(__pyx_k_py_pressure_drop_ergun), 0, 0, 1, 1},
  {&__pyx_n_s_py_pressure_peng_robinson, __pyx_k_py_pressure_peng_robinson, sizeof(__pyx_k_py_pressure_peng_robinson), 0, 0, 1, 1},
  {&__pyx_n_s_py_process_scale_up, __pyx_k_py_process_scale_up, sizeof(__pyx_k_py_process_scale_up), 0, 0, 1, 1},
  {&__pyx_n_s_py_real_time_optimization, __pyx_k_py_real_time_optimization, sizeof(__pyx_k_py_real_time_optimization), 0, 0, 1, 1},
  {&__pyx_n_s_py_residence_time_distribution, __pyx_k_py_residence_time_distribution, sizeof(__pyx_k_py_residence_time_distribution), 0, 0, 1, 1},
  {&__pyx_n_s_py_residence_time_distribution_l, __pyx_k_py_residence_time_distribution_l, sizeof(__pyx_k_py_residence_time_distribution_l), 0, 0, 1, 1},
  {&__pyx_n_s_py_simulate_fluidized_bed, __pyx_k_py_simulate_fluidized_bed, sizeof(__pyx_k_py_simulate_fluidized_bed), 0, 0, 1, 1},
  {&__pyx_n_s_py_simulate_homogeneous_batch, __pyx_k_py_simulate_homogeneous_batch, sizeof(__pyx_k_py_simulate_homogeneous_batch), 0, 0, 1, 1},
  {&__pyx_n_s_py_simulate_multi_reactor_adapti, __pyx_k_py_simulate_multi_reactor_adapti, sizeof(__pyx_k_py_simulate_multi_reactor_adapti), 0, 0, 1, 1},
  {&__pyx_n_s_py_simulate_packed_bed, __pyx_k_py_simulate_packed_bed, sizeof(__pyx_k_py_simulate_packed_bed), 0, 0, 1, 1},
  {&__pyx_n_s_py_solve_linear_system, __pyx_k_py_solve_linear_system, sizeof(__pyx_k_py_solve_linear_system), 0, 0, 1, 1},
  {&__pyx_n_s_py_stability_analysis, __pyx_k_py_stability_analysis, sizeof(__pyx_k_py_stability_analysis), 0, 0, 1, 1},
  {&__pyx_n_s_py_stability_analysis_locals_gen, __pyx_k_py_stability_analysis_locals_gen, sizeof(__pyx_k_py_stability_analysis_locals_gen), 0, 0, 1, 1},
  {&__pyx_n_s_pyroxa__pybindings, __pyx_k_pyroxa__pybindings, sizeof(__pyx_k_pyroxa__pybindings), 0, 0, 1, 1},
  {&__pyx_kp_s_pyroxa_pybindings_pyx, __pyx_k_pyroxa_pybindings_pyx, sizeof(__pyx_k_pyroxa_pybindings_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_quantum_yield, __pyx_k_quantum_yield, sizeof(__pyx_k_quantum_yield), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rate, __pyx_k_rate, sizeof(__pyx_k_rate), 0, 0, 1, 1},
  {&__pyx_n_s_rates, __pyx_k_rates, sizeof(__pyx_k_rates), 0, 0, 1, 1},
  {&__pyx_n_s_rates_arr, __pyx_k_rates_arr, sizeof(__pyx_k_rates_arr), 0, 0, 1, 1},
  {&__pyx_n_s_reac_idx, __pyx_k_reac_idx, sizeof(__pyx_k_reac_idx), 0, 0, 1, 1},
  {&__pyx_n_s_reac_idx_arr, __pyx_k_reac_idx_arr, sizeof(__pyx_k_reac_idx_arr), 0, 0, 1, 1},
  {&__pyx_n_s_reac_idx_list, __pyx_k_reac_idx_list, sizeof(__pyx_k_reac_idx_list), 0, 0, 1, 1},
  {&__pyx_n_s_reac_nu, __pyx_k_reac_nu, sizeof(__pyx_k_reac_nu), 0, 0, 1, 1},
  {&__pyx_n_s_reac_nu_arr, __pyx_k_reac_nu_arr, sizeof(__pyx_k_reac_nu_arr), 0, 0, 1, 1},
  {&__pyx_n_s_reac_nu_list, __pyx_k_reac_nu_list, sizeof(__pyx_k_reac_nu_list), 0, 0, 1, 1},
  {&__pyx_n_s_reac_off, __pyx_k_reac_off, sizeof(__pyx_k_reac_off), 0, 0, 1, 1},
  {&__pyx_n_s_reac_off_arr, __pyx_k_reac_off_arr, sizeof(__pyx_k_reac_off_arr), 0, 0, 1, 1},
  {&__pyx_n_s_reactants, __pyx_k_reactants, sizeof(__pyx_k_reactants), 0, 0, 1, 1},
  {&__pyx_n_u_reactants, __pyx_k_reactants, sizeof(__pyx_k_reactants), 0, 1, 0, 1},
  {&__pyx_n_s_reaction, __pyx_k_reaction, sizeof(__pyx_k_reaction), 0, 0, 1, 1},
  {&__pyx_n_u_reaction, __pyx_k_reaction, sizeof(__pyx_k_reaction), 0, 1, 0, 1},
  {&__pyx_n_s_reaction_network, __pyx_k_reaction_network, sizeof(__pyx_k_reaction_network), 0, 0, 1, 1},
  {&__pyx_n_s_reaction_rates, __pyx_k_reaction_rates, sizeof(__pyx_k_reaction_rates), 0, 0, 1, 1},
  {&__pyx_n_u_reaction_rates, __pyx_k_reaction_rates, sizeof(__pyx_k_reaction_rates), 0, 1, 0, 1},
  {&__pyx_n_s_reactions, __pyx_k_reactions, sizeof(__pyx_k_reactions), 0, 0, 1, 1},
  {&__pyx_n_u_reactions, __pyx_k_reactions, sizeof(__pyx_k_reactions), 0, 1, 0, 1},
  {&__pyx_n_s_reactor, __pyx_k_reactor, sizeof(__pyx_k_reactor), 0, 0, 1, 1},
  {&__pyx_n_s_reactor_config, __pyx_k_reactor_config, sizeof(__pyx_k_reactor_config), 0, 0, 1, 1},
  {&__pyx_n_u_reactor_id, __pyx_k_reactor_id, sizeof(__pyx_k_reactor_id), 0, 1, 0, 1},
  {&__pyx_n_s_reactor_output, __pyx_k_reactor_output, sizeof(__pyx_k_reactor_output), 0, 0, 1, 1},
  {&__pyx_n_s_reactor_outputs, __pyx_k_reactor_outputs, sizeof(__pyx_k_reactor_outputs), 0, 0, 1, 1},
  {&__pyx_n_u_reactor_outputs, __pyx_k_reactor_outputs, sizeof(__pyx_k_reactor_outputs), 0, 1, 0, 1},
  {&__pyx_n_u_recommendations, __pyx_k_recommendations, sizeof(__pyx_k_recommendations), 0, 1, 0, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_u_remaining_lifetime, __pyx_k_remaining_lifetime, sizeof(__pyx_k_remaining_lifetime), 0, 1, 0, 1},
  {&__pyx_n_u_residence_time, __pyx_k_residence_time, sizeof(__pyx_k_residence_time), 0, 1, 0, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
  {&__pyx_n_s_run, __pyx_k_run, sizeof(__pyx_k_run), 0, 0, 1, 1},
  {&__pyx_n_s_run_simulation_cpp, __pyx_k_run_simulation_cpp, sizeof(__pyx_k_run_simulation_cpp), 0, 0, 1, 1},
  {&__pyx_n_s_rxn, __pyx_k_rxn, sizeof(__pyx_k_rxn), 0, 0, 1, 1},
  {&__pyx_n_s_rxns, __pyx_k_rxns, sizeof(__pyx_k_rxns), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_scale_factor, __pyx_k_scale_factor, sizeof(__pyx_k_scale_factor), 0, 0, 1, 1},
  {&__pyx_n_u_scale_factor, __pyx_k_scale_factor, sizeof(__pyx_k_scale_factor), 0, 1, 0, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_sensitivity_matrix, __pyx_k_sensitivity_matrix, sizeof(__pyx_k_sensitivity_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_setpoint, __pyx_k_setpoint, sizeof(__pyx_k_setpoint), 0, 0, 1, 1},
  {&__pyx_n_s_setpoints, __pyx_k_setpoints, sizeof(__pyx_k_setpoints), 0, 0, 1, 1},
  {&__pyx_n_s_setpts, __pyx_k_setpts, sizeof(__pyx_k_setpts), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_sim, __pyx_k_sim, sizeof(__pyx_k_sim), 0, 0, 1, 1},
  {&__pyx_n_u_sim, __pyx_k_sim, sizeof(__pyx_k_sim), 0, 1, 0, 1},
  {&__pyx_n_s_sim_c, __pyx_k_sim_c, sizeof(__pyx_k_sim_c), 0, 0, 1, 1},
  {&__pyx_n_s_simulated_data, __pyx_k_simulated_data, sizeof(__pyx_k_simulated_data), 0, 0, 1, 1},
  {&__pyx_kp_u_simulation_failed_or_insufficien, __pyx_k_simulation_failed_or_insufficien, sizeof(__pyx_k_simulation_failed_or_insufficien), 0, 1, 0, 0},
  {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {&__pyx_kp_u_spec_must_be_a_dict, __pyx_k_spec_must_be_a_dict, sizeof(__pyx_k_spec_must_be_a_dict), 0, 1, 0, 0},
  {&__pyx_n_s_species, __pyx_k_species, sizeof(__pyx_k_species), 0, 0, 1, 1},
  {&__pyx_n_u_species, __pyx_k_species, sizeof(__pyx_k_species), 0, 1, 0, 1},
  {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {&__pyx_n_u_statistics, __pyx_k_statistics, sizeof(__pyx_k_statistics), 0, 1, 0, 1},
  {&__pyx_n_s_statistics_output, __pyx_k_statistics_output, sizeof(__pyx_k_statistics_output), 0, 0, 1, 1},
  {&__pyx_n_u_std, __pyx_k_std, sizeof(__pyx_k_std), 0, 1, 0, 1},
  {&__pyx_n_s_std_list, __pyx_k_std_list, sizeof(__pyx_k_std_list), 0, 0, 1, 1},
  {&__pyx_n_s_steady_state, __pyx_k_steady_state, sizeof(__pyx_k_steady_state), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_subarray, __pyx_k_subarray, sizeof(__pyx_k_subarray), 0, 0, 1, 1},
  {&__pyx_n_s_substrate_conc, __pyx_k_substrate_conc, sizeof(__pyx_k_substrate_conc), 0, 0, 1, 1},
  {&__pyx_n_u_success, __pyx_k_success, sizeof(__pyx_k_success), 0, 1, 0, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_u_tank_residence_times, __pyx_k_tank_residence_times, sizeof(__pyx_k_tank_residence_times), 0, 1, 0, 1},
  {&__pyx_n_s_tarr, __pyx_k_tarr, sizeof(__pyx_k_tarr), 0, 0, 1, 1},
  {&__pyx_n_s_tau, __pyx_k_tau, sizeof(__pyx_k_tau), 0, 0, 1, 1},
  {&__pyx_n_s_temp_factor, __pyx_k_temp_factor, sizeof(__pyx_k_temp_factor), 0, 0, 1, 1},
  {&__pyx_n_s_temperature, __pyx_k_temperature, sizeof(__pyx_k_temperature), 0, 0, 1, 1},
  {&__pyx_n_u_temperature, __pyx_k_temperature, sizeof(__pyx_k_temperature), 0, 1, 0, 1},
  {&__pyx_n_u_temperature_adjust, __pyx_k_temperature_adjust, sizeof(__pyx_k_temperature_adjust), 0, 1, 0, 1},
  {&__pyx_n_u_temperature_factor, __pyx_k_temperature_factor, sizeof(__pyx_k_temperature_factor), 0, 1, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_time_span, __pyx_k_time_span, sizeof(__pyx_k_time_span), 0, 0, 1, 1},
  {&__pyx_n_u_time_span, __pyx_k_time_span, sizeof(__pyx_k_time_span), 0, 1, 0, 1},
  {&__pyx_n_u_time_step, __pyx_k_time_step, sizeof(__pyx_k_time_step), 0, 1, 0, 1},
  {&__pyx_n_s_times, __pyx_k_times, sizeof(__pyx_k_times), 0, 0, 1, 1},
  {&__pyx_n_u_times, __pyx_k_times, sizeof(__pyx_k_times), 0, 1, 0, 1},
  {&__pyx_n_s_times_buf, __pyx_k_times_buf, sizeof(__pyx_k_times_buf), 0, 0, 1, 1},
  {&__pyx_n_s_times_list, __pyx_k_times_list, sizeof(__pyx_k_times_list), 0, 0, 1, 1},
  {&__pyx_n_s_times_out, __pyx_k_times_out, sizeof(__pyx_k_times_out), 0, 0, 1, 1},
  {&__pyx_n_s_times_py, __pyx_k_times_py, sizeof(__pyx_k_times_py), 0, 0, 1, 1},
  {&__pyx_n_s_tolerance, __pyx_k_tolerance, sizeof(__pyx_k_tolerance), 0, 0, 1, 1},
  {&__pyx_n_s_tolist, __pyx_k_tolist, sizeof(__pyx_k_tolist), 0, 0, 1, 1},
  {&__pyx_n_s_tortuosity, __pyx_k_tortuosity, sizeof(__pyx_k_tortuosity), 0, 0, 1, 1},
  {&__pyx_n_s_total_flow, __pyx_k_total_flow, sizeof(__pyx_k_total_flow), 0, 0, 1, 1},
  {&__pyx_n_s_total_prod, __pyx_k_total_prod, sizeof(__pyx_k_total_prod), 0, 0, 1, 1},
  {&__pyx_n_s_total_reac, __pyx_k_total_reac, sizeof(__pyx_k_total_reac), 0, 0, 1, 1},
  {&__pyx_n_s_total_volume, __pyx_k_total_volume, sizeof(__pyx_k_total_volume), 0, 0, 1, 1},
  {&__pyx_n_s_traj, __pyx_k_traj, sizeof(__pyx_k_traj), 0, 0, 1, 1},
  {&__pyx_n_s_var_params_c, __pyx_k_var_params_c, sizeof(__pyx_k_var_params_c), 0, 0, 1, 1},
  {&__pyx_n_s_variance, __pyx_k_variance, sizeof(__pyx_k_variance), 0, 0, 1, 1},
  {&__pyx_n_u_variance, __pyx_k_variance, sizeof(__pyx_k_variance), 0, 1, 0, 1},
  {&__pyx_n_s_variogram_params, __pyx_k_variogram_params, sizeof(__pyx_k_variogram_params), 0, 0, 1, 1},
  {&__pyx_n_s_velocity, __pyx_k_velocity, sizeof(__pyx_k_velocity), 0, 0, 1, 1},
  {&__pyx_n_s_viscosity, __pyx_k_viscosity, sizeof(__pyx_k_viscosity), 0, 0, 1, 1},
  {&__pyx_n_s_volume, __pyx_k_volume, sizeof(__pyx_k_volume), 0, 0, 1, 1},
  {&__pyx_n_s_volumes, __pyx_k_volumes, sizeof(__pyx_k_volumes), 0, 0, 1, 1},
  {&__pyx_n_s_weight_c, __pyx_k_weight_c, sizeof(__pyx_k_weight_c), 0, 0, 1, 1},
  {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
  {&__pyx_n_s_written, __pyx_k_written, sizeof(__pyx_k_written), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x_c, __pyx_k_x_c, sizeof(__pyx_k_x_c), 0, 0, 1, 1},
  {&__pyx_n_s_x_data, __pyx_k_x_data, sizeof(__pyx_k_x_data), 0, 0, 1, 1},
  {&__pyx_n_s_x_data_c, __pyx_k_x_data_c, sizeof(__pyx_k_x_data_c), 0, 0, 1, 1},
  {&__pyx_n_s_x_known, __pyx_k_x_known, sizeof(__pyx_k_x_known), 0, 0, 1, 1},
  {&__pyx_n_s_x_known_c, __pyx_k_x_known_c, sizeof(__pyx_k_x_known_c), 0, 0, 1, 1},
  {&__pyx_n_s_x_new, __pyx_k_x_new, sizeof(__pyx_k_x_new), 0, 0, 1, 1},
  {&__pyx_n_s_x_new_c, __pyx_k_x_new_c, sizeof(__pyx_k_x_new_c), 0, 0, 1, 1},
  {&__pyx_n_s_x_new_list, __pyx_k_x_new_list, sizeof(__pyx_k_x_new_list), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_y_data, __pyx_k_y_data, sizeof(__pyx_k_y_data), 0, 0, 1, 1},
  {&__pyx_n_s_y_data_c, __pyx_k_y_data_c, sizeof(__pyx_k_y_data_c), 0, 0, 1, 1},
  {&__pyx_n_s_y_known, __pyx_k_y_known, sizeof(__pyx_k_y_known), 0, 0, 1, 1},
  {&__pyx_n_s_y_known_c, __pyx_k_y_known_c, sizeof(__pyx_k_y_known_c), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 351, __pyx_L1_error)
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_n_s_round); if (!__pyx_builtin_round) __PYX_ERR(1, 357, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 395, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 399, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 947, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(1, 968, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(1, 1869, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 923, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "pyroxa/pybindings.pyx":395
 * 			if Aout: free(Aout)
 * 			if Bout: free(Bout)
 * 			raise MemoryError("allocation failed")             # <<<<<<<<<<<<<<
 * 		cdef int written
 * 		written = simulate_reactor(self.kf, self.kr, self.A0, self.B0, self.time_span, self.dt, times, Aout, Bout, max_len)
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_allocation_failed); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "pyroxa/pybindings.pyx":399
 * 		written = simulate_reactor(self.kf, self.kr, self.A0, self.B0, self.time_span, self.dt, times, Aout, Bout, max_len)
 * 		if written <= 0:
 * 			raise RuntimeError("simulation failed or insufficient buffer size")             # <<<<<<<<<<<<<<
 * 		try:
 * 			if _HAS_NUMPY:
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_simulation_failed_or_insufficien); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "pyroxa/pybindings.pyx":444
 * 	# pointers for buffers will be allocated with malloc below
 * 	if not isinstance(spec, dict):
 * 		raise TypeError('spec must be a dict')             # <<<<<<<<<<<<<<
 * 	reaction = spec.get('reaction', {})
 * 	initial = spec.get('initial', {})
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_spec_must_be_a_dict); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "pyroxa/pybindings.pyx":462
 * 				if kf_ptr: free(kf_ptr)
 * 				if kr_ptr: free(kr_ptr)
 * 				raise MemoryError('allocation failed for kf/kr')             # <<<<<<<<<<<<<<
 * 			for i in range(M):
 * 				kf_ptr[i] = float(rxns[i].get('kf', 1.0))
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_allocation_failed_for_kf_kr); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "pyroxa/pybindings.pyx":464
 * 				raise MemoryError('allocation failed for kf/kr')
 * 			for i in range(M):
 * 				kf_ptr[i] = float(rxns[i].get('kf', 1.0))             # <<<<<<<<<<<<<<
 * 				kr_ptr[i] = float(rxns[i].get('kr', 0.0))
 * 		else:
 */
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_n_u_kf, __pyx_float_1_0); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "pyroxa/pybindings.pyx":465
 * 			for i in range(M):
 * 				kf_ptr[i] = float(rxns[i].get('kf', 1.0))
 * 				kr_ptr[i] = float(rxns[i].get('kr', 0.0))             # <<<<<<<<<<<<<<
 * 		else:
 * 			kf_ptr = <double*>0
 */
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_n_u_kr, __pyx_float_0_0); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "pyroxa/pybindings.pyx":500
 * 				if c_reac_idx: free(c_reac_idx)
 * 				if c_reac_nu: free(c_reac_nu)
 * 				raise MemoryError('allocation failed for reactants')             # <<<<<<<<<<<<<<
 * 			for i in range(total_reac):
 * 				c_reac_idx[i] = reac_idx_list[i]
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_allocation_failed_for_reactants); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "pyroxa/pybindings.pyx":518
 * 				if c_prod_idx: free(c_prod_idx)
 * 				if c_prod_nu: free(c_prod_nu)
 * 				raise MemoryError('allocation failed for products')             # <<<<<<<<<<<<<<
 * 			for i in range(total_prod):
 * 				c_prod_idx[i] = prod_idx_list[i]
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_allocation_failed_for_products); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "pyroxa/pybindings.pyx":534
 * 			c_conc0 = <double*>malloc(N * sizeof(double))
 * 			if not c_conc0:
 * 				raise MemoryError('allocation failed for conc0')             # <<<<<<<<<<<<<<
 * 			for i in range(N):
 * 				c_conc0[i] = conc0_py[i]
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_allocation_failed_for_conc0); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "pyroxa/pybindings.pyx":540
 * 			c_conc0 = <double*>0
 * 		# output buffers
 * 		nsteps = int(round(float(sim.get('time_span', 10.0)) / float(sim.get('time_step', 0.01))))             # <<<<<<<<<<<<<<
 * 		npts = nsteps + 1
 * 		max_len = npts
 */
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_n_u_time_span, __pyx_float_10_0); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_n_u_time_step, __pyx_float_0_01); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "pyroxa/pybindings.pyx":556
 * 			if c_prod_off: free(c_prod_off)
 * 			if c_conc0 and c_conc0 != <double*>0: free(c_conc0)
 * 			raise MemoryError('allocation failed for output buffers')             # <<<<<<<<<<<<<<
 * 		# call
 * 		written = simulate_multi_reactor(N, M, kf_ptr, kr_ptr,
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_allocation_failed_for_output_buf); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "pyroxa/pybindings.pyx":565
 * 							 <double*>times_buf, <double*>conc_out_flat, max_len)
 * 		if written <= 0:
 * 			raise RuntimeError('multi-reactor C++ simulation failed')             # <<<<<<<<<<<<<<
 * 		# build numpy arrays if available
 * 		if _HAS_NUMPY:
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_multi_reactor_C_simulation_faile); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "pyroxa/pybindings.pyx":581
 * 	else:
 * 		kf = float(reaction.get('kf', 1.0))
 * 		kr = float(reaction.get('kr', 0.5))             # <<<<<<<<<<<<<<
 * 		conc = initial.get('conc', {})
 * 		A0 = float(conc.get('A', 1.0))
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_n_u_kr, __pyx_float_0_5); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "pyroxa/pybindings.pyx":583
 * 		kr = float(reaction.get('kr', 0.5))
 * 		conc = initial.get('conc', {})
 * 		A0 = float(conc.get('A', 1.0))             # <<<<<<<<<<<<<<
 * 		B0 = float(conc.get('B', 0.0))
 * 		time_span = float(sim.get('time_span', 10.0))
 */
  __pyx_tuple__25 = PyTuple_Pack(2, __pyx_n_u_A, __pyx_float_1_0); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "pyroxa/pybindings.pyx":584
 * 		conc = initial.get('conc', {})
 * 		A0 = float(conc.get('A', 1.0))
 * 		B0 = float(conc.get('B', 0.0))             # <<<<<<<<<<<<<<
 * 		time_span = float(sim.get('time_span', 10.0))
 * 		dt = float(sim.get('time_step', 0.01))
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_n_u_B, __pyx_float_0_0); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "pyroxa/pybindings.pyx":645
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')             # <<<<<<<<<<<<<<
 * 	try:
 * 		for i in range(7):
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_allocation_failed_for_coeffs); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "pyroxa/pybindings.pyx":847
 * 		written = analytical_first_order(k, A0, time_span, dt, times, A_out, B_out, max_len)
 * 		if written < 0:
 * 			raise RuntimeError("Analytical first order solution failed")             # <<<<<<<<<<<<<<
 * 
 * 		# Convert to Python lists
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_Analytical_first_order_solution); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "pyroxa/pybindings.pyx":875
 * 												   times, A_out, B_out, max_len)
 * 		if written < 0:
 * 			raise RuntimeError("Analytical reversible first order solution failed")             # <<<<<<<<<<<<<<
 * 
 * 		# Convert to Python lists
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_Analytical_reversible_first_orde); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "pyroxa/pybindings.pyx":904
 * 													times, A_out, B_out, C_out, max_len)
 * 		if written < 0:
 * 			raise RuntimeError("Analytical consecutive first order solution failed")             # <<<<<<<<<<<<<<
 * 
 * 		# Convert to Python lists
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_Analytical_consecutive_first_ord); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "pyroxa/pybindings.pyx":947
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:
 * 		raise ValueError("Empty concentration data")             # <<<<<<<<<<<<<<
 * 
 * 	cdef int N = len(concentrations[0])  # Number of species
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_u_Empty_concentration_data); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "pyroxa/pybindings.pyx":1113
 * 
 * 	if A.ndim != 2 or B.ndim != 2:
 * 		raise ValueError("Inputs must be 2D matrices")             # <<<<<<<<<<<<<<
 * 
 * 	cdef int m = A.shape[0]
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_u_Inputs_must_be_2D_matrices); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "pyroxa/pybindings.pyx":1120
 * 
 * 	if A.shape[1] != B.shape[0]:
 * 		raise ValueError("Matrix dimensions incompatible for multiplication")             # <<<<<<<<<<<<<<
 * 
 * 	cdef double* A_c = <double*>malloc(m * n * sizeof(double))
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_u_Matrix_dimensions_incompatible_f); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "pyroxa/pybindings.pyx":1146
 * 			return C.tolist()
 * 		else:
 * 			raise RuntimeError("Matrix multiplication failed")             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(A_c)
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_u_Matrix_multiplication_failed); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "pyroxa/pybindings.pyx":1158
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:
 * 		raise ValueError("Input must be a square matrix")             # <<<<<<<<<<<<<<
 * 
 * 	cdef int n = A.shape[0]
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_u_Input_must_be_a_square_matrix); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "pyroxa/pybindings.pyx":1180
 * 			return A_inv.tolist()
 * 		else:
 * 			raise RuntimeError("Matrix inversion failed (matrix may be singular)")             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(A_c)
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_u_Matrix_inversion_failed_matrix_m); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "pyroxa/pybindings.pyx":1193
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:
 * 		raise ValueError("A must be a square matrix")             # <<<<<<<<<<<<<<
 * 	if b.ndim != 1 or len(b) != A.shape[0]:
 * 		raise ValueError("b must be a vector with length equal to A's dimension")
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_u_A_must_be_a_square_matrix); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "pyroxa/pybindings.pyx":1195
 * 		raise ValueError("A must be a square matrix")
 * 	if b.ndim != 1 or len(b) != A.shape[0]:
 * 		raise ValueError("b must be a vector with length equal to A's dimension")             # <<<<<<<<<<<<<<
 * 
 * 	cdef int n = A.shape[0]
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_u_b_must_be_a_vector_with_length_e); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "pyroxa/pybindings.pyx":1216
 * 			return x
 * 		else:
 * 			raise RuntimeError("Linear system solve failed (matrix may be singular)")             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(A_c)
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_u_Linear_system_solve_failed_matri); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":923
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_u_numpy__core_multiarray_failed_to); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(2, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":929
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_u_numpy__core_umath_failed_to_impo); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(2, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "pyroxa/pybindings.pyx":419
 * 
 * 
 * def run_simulation_cpp(spec):             # <<<<<<<<<<<<<<
 * 	"""High-level helper that takes a Python dict spec and runs the C++ reactor.
 * 
 */
  __pyx_tuple__42 = PyTuple_Pack(59, __pyx_n_s_spec, __pyx_n_s_N, __pyx_n_s_M, __pyx_n_s_nsteps, __pyx_n_s_npts, __pyx_n_s_max_len, __pyx_n_s_written, __pyx_n_s_kf_ptr, __pyx_n_s_kr_ptr, __pyx_n_s_i, __pyx_n_s_total_reac, __pyx_n_s_total_prod, __pyx_n_s_c_reac_idx, __pyx_n_s_c_reac_nu, __pyx_n_s_c_reac_off, __pyx_n_s_c_prod_idx, __pyx_n_s_c_prod_nu, __pyx_n_s_c_prod_off, __pyx_n_s_c_conc0, __pyx_n_s_times_buf, __pyx_n_s_conc_out_flat, __pyx_n_s_reaction, __pyx_n_s_initial, __pyx_n_s_sim, __pyx_n_s_species, __pyx_n_s_rxns, __pyx_n_s_reac_idx_list, __pyx_n_s_reac_nu_list, __pyx_n_s_reac_off, __pyx_n_s_prod_idx_list, __pyx_n_s_prod_nu_list, __pyx_n_s_prod_off, __pyx_n_s_r, __pyx_n_s_reactants, __pyx_n_s_products, __pyx_n_s_s, __pyx_n_s_nu, __pyx_n_s_kf_c, __pyx_n_s_kr_c, __pyx_n_s_ctypes, __pyx_n_s_conc0_py, __pyx_n_s_tarr, __pyx_n_s_carr, __pyx_n_s_j, __pyx_n_s_times_py, __pyx_n_s_traj, __pyx_n_s_kf, __pyx_n_s_kr, __pyx_n_s_conc, __pyx_n_s_A0, __pyx_n_s_B0, __pyx_n_s_time_span, __pyx_n_s_dt, __pyx_n_s_rxn, __pyx_n_s_reactor, __pyx_n_s_s, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(1, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(1, 0, 59, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_run_simulation_cpp, 419, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(1, 419, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":597
 * 
 * # Enhanced thermodynamics functions
 * def py_gibbs_free_energy(double enthalpy, double entropy, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate Gibbs free energy"""
 * 	return gibbs_free_energy(enthalpy, entropy, T)
 */
  __pyx_tuple__44 = PyTuple_Pack(3, __pyx_n_s_enthalpy, __pyx_n_s_entropy, __pyx_n_s_T); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_gibbs_free_energy, 597, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(1, 597, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":601
 * 	return gibbs_free_energy(enthalpy, entropy, T)
 * 
 * def py_equilibrium_constant(double delta_G, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate equilibrium constant from Gibbs free energy"""
 * 	return equilibrium_constant(delta_G, T)
 */
  __pyx_tuple__46 = PyTuple_Pack(2, __pyx_n_s_delta_G, __pyx_n_s_T); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_equilibrium_constant, 601, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(1, 601, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":605
 * 	return equilibrium_constant(delta_G, T)
 * 
 * def py_arrhenius_rate(double A, double Ea, double T, double R=8.314):             # <<<<<<<<<<<<<<
 * 	"""Calculate Arrhenius rate constant"""
 * 	return arrhenius_rate(A, Ea, T, R)
 */
  __pyx_tuple__48 = PyTuple_Pack(4, __pyx_n_s_A, __pyx_n_s_Ea, __pyx_n_s_T, __pyx_n_s_R); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_arrhenius_rate, 605, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(1, 605, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":609
 * 	return arrhenius_rate(A, Ea, T, R)
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 */
  __pyx_tuple__50 = PyTuple_Pack(6, __pyx_n_s_n, __pyx_n_s_V, __pyx_n_s_T, __pyx_n_s_Tc, __pyx_n_s_Pc, __pyx_n_s_omega); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(1, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(6, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_pressure_peng_robinson, 609, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(1, 609, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":613
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate fugacity coefficient"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 */
  __pyx_tuple__52 = PyTuple_Pack(5, __pyx_n_s_P, __pyx_n_s_T, __pyx_n_s_Tc, __pyx_n_s_Pc, __pyx_n_s_omega); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_fugacity_coefficient, 613, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(1, 613, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":618
 * 
 * # Additional kinetics functions
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):             # <<<<<<<<<<<<<<
 * 	"""Calculate Langmuir-Hinshelwood surface reaction rate"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 */
  __pyx_tuple__54 = PyTuple_Pack(5, __pyx_n_s_k, __pyx_n_s_K_A, __pyx_n_s_K_B, __pyx_n_s_conc_A, __pyx_n_s_conc_B); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_langmuir_hinshelwood_rate, 618, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(1, 618, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":622
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,             # <<<<<<<<<<<<<<
 * 						 double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
 */
  __pyx_tuple__56 = PyTuple_Pack(5, __pyx_n_s_quantum_yield, __pyx_n_s_molar_absorptivity, __pyx_n_s_path_length, __pyx_n_s_light_intensity, __pyx_n_s_concentration); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_photochemical_rate, 622, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(1, 622, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":628
 * 
 * # Python wrapper functions for newly implemented C++ functions
 * def py_autocatalytic_rate(double k, double A, double B, double temperature=298.15):             # <<<<<<<<<<<<<<
 * 	"""Calculate autocatalytic reaction rate with temperature dependency"""
 * 	return autocatalytic_rate(k, A, B, temperature)
 */
  __pyx_tuple__58 = PyTuple_Pack(4, __pyx_n_s_k, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_temperature); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_autocatalytic_rate, 628, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(1, 628, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":632
 * 	return autocatalytic_rate(k, A, B, temperature)
 * 
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):             # <<<<<<<<<<<<<<
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 */
  __pyx_tuple__60 = PyTuple_Pack(3, __pyx_n_s_Vmax, __pyx_n_s_Km, __pyx_n_s_substrate_conc); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_michaelis_menten_rate, 632, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(1, 632, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":636
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,             # <<<<<<<<<<<<<<
 * 								   double inhibitor_conc, double Ki):
 * 	"""Calculate competitive inhibition rate"""
 */
  __pyx_tuple__62 = PyTuple_Pack(5, __pyx_n_s_Vmax, __pyx_n_s_Km, __pyx_n_s_substrate_conc, __pyx_n_s_inhibitor_conc, __pyx_n_s_Ki); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_competitive_inhibition_rate, 636, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(1, 636, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":641
 * 	return competitive_inhibition_rate(Vmax, Km, substrate_conc, inhibitor_conc, Ki)
 * 
 * def py_heat_capacity_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate heat capacity using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 */
  __pyx_tuple__64 = PyTuple_Pack(5, __pyx_n_s_T, __pyx_n_s_coeffs, __pyx_n_s_c_coeffs, __pyx_n_s_i, __pyx_n_s_result); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_heat_capacity_nasa, 641, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(1, 641, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":654
 * 		free(c_coeffs)
 * 
 * def py_enthalpy_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate enthalpy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 */
  __pyx_tuple__66 = PyTuple_Pack(5, __pyx_n_s_T, __pyx_n_s_coeffs, __pyx_n_s_c_coeffs, __pyx_n_s_i, __pyx_n_s_result); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(1, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_enthalpy_nasa, 654, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(1, 654, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":667
 * 		free(c_coeffs)
 * 
 * def py_entropy_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate entropy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 */
  __pyx_tuple__68 = PyTuple_Pack(5, __pyx_n_s_T, __pyx_n_s_coeffs, __pyx_n_s_c_coeffs, __pyx_n_s_i, __pyx_n_s_result); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(1, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_entropy_nasa, 667, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(1, 667, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":680
 * 		free(c_coeffs)
 * 
 * def py_mass_transfer_correlation(double Re, double Sc, double geometry_factor):             # <<<<<<<<<<<<<<
 * 	"""Calculate Sherwood number from Reynolds and Schmidt numbers"""
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)
 */
  __pyx_tuple__70 = PyTuple_Pack(3, __pyx_n_s_Re, __pyx_n_s_Sc, __pyx_n_s_geometry_factor); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(1, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_mass_transfer_correlation, 680, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(1, 680, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":684
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)
 * 
 * def py_heat_transfer_correlation(double Re, double Pr, double geometry_factor):             # <<<<<<<<<<<<<<
 * 	"""Calculate Nusselt number from Reynolds and Prandtl numbers"""
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)
 */
  __pyx_tuple__72 = PyTuple_Pack(3, __pyx_n_s_Re, __pyx_n_s_Pr, __pyx_n_s_geometry_factor); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_heat_transfer_correlation, 684, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(1, 684, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":688
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)
 * 
 * def py_effective_diffusivity(double molecular_diff, double porosity,             # <<<<<<<<<<<<<<
 * 							 double tortuosity, double constriction_factor):
 * 	"""Calculate effective diffusivity in porous media"""
 */
  __pyx_tuple__74 = PyTuple_Pack(4, __pyx_n_s_molecular_diff, __pyx_n_s_porosity, __pyx_n_s_tortuosity, __pyx_n_s_constriction_factor); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(1, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_effective_diffusivity, 688, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(1, 688, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":693
 * 	return effective_diffusivity(molecular_diff, porosity, tortuosity, constriction_factor)
 * 
 * def py_pressure_drop_ergun(double velocity, double density, double viscosity,             # <<<<<<<<<<<<<<
 * 						   double particle_diameter, double bed_porosity, double bed_length):
 * 	"""Calculate pressure drop using Ergun equation"""
 */
  __pyx_tuple__76 = PyTuple_Pack(6, __pyx_n_s_velocity, __pyx_n_s_density, __pyx_n_s_viscosity, __pyx_n_s_particle_diameter, __pyx_n_s_bed_porosity, __pyx_n_s_bed_length); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(1, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(6, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_pressure_drop_ergun, 693, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(1, 693, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":699
 * 							   particle_diameter, bed_porosity, bed_length)
 * 
 * def py_pid_controller(double setpoint, double process_variable, double dt,             # <<<<<<<<<<<<<<
 * 					  double Kp, double Ki, double Kd):
 * 	"""PID controller implementation"""
 */
  __pyx_tuple__78 = PyTuple_Pack(8, __pyx_n_s_setpoint, __pyx_n_s_process_variable, __pyx_n_s_dt, __pyx_n_s_Kp, __pyx_n_s_Ki, __pyx_n_s_Kd, __pyx_n_s_integral_term, __pyx_n_s_previous_error); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(1, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(6, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_pid_controller, 699, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(1, 699, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":708
 * 
 * # Simple thermodynamic calculations
 * def py_gibbs_free_energy(double enthalpy, double entropy, double temperature):             # <<<<<<<<<<<<<<
 * 	"""Calculate Gibbs free energy from enthalpy and entropy"""
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)
 */
  __pyx_tuple__80 = PyTuple_Pack(3, __pyx_n_s_enthalpy, __pyx_n_s_entropy, __pyx_n_s_temperature); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(1, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_gibbs_free_energy, 708, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(1, 708, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":712
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)
 * 
 * def py_equilibrium_constant(double delta_G, double temperature):             # <<<<<<<<<<<<<<
 * 	"""Calculate equilibrium constant from Gibbs free energy change"""
 * 	return equilibrium_constant(delta_G, temperature)
 */
  __pyx_tuple__82 = PyTuple_Pack(2, __pyx_n_s_delta_G, __pyx_n_s_temperature); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(1, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_equilibrium_constant, 712, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(1, 712, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":716
 * 	return equilibrium_constant(delta_G, temperature)
 * 
 * def py_arrhenius_rate(double pre_exponential, double activation_energy, double temperature, double gas_constant=8.314):             # <<<<<<<<<<<<<<
 * 	"""Calculate reaction rate constant using Arrhenius equation"""
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)
 */
  __pyx_tuple__84 = PyTuple_Pack(4, __pyx_n_s_pre_exponential, __pyx_n_s_activation_energy, __pyx_n_s_temperature, __pyx_n_s_gas_constant); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(1, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_arrhenius_rate, 716, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(1, 716, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":720
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 */
  __pyx_tuple__86 = PyTuple_Pack(6, __pyx_n_s_n, __pyx_n_s_V, __pyx_n_s_T, __pyx_n_s_Tc, __pyx_n_s_Pc, __pyx_n_s_omega); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(1, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(6, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_pressure_peng_robinson, 720, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(1, 720, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":724
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate fugacity coefficient using Peng-Robinson equation"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 */
  __pyx_tuple__88 = PyTuple_Pack(5, __pyx_n_s_P, __pyx_n_s_T, __pyx_n_s_Tc, __pyx_n_s_Pc, __pyx_n_s_omega); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(1, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_fugacity_coefficient, 724, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(1, 724, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":728
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 * 
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):             # <<<<<<<<<<<<<<
 * 	"""Calculate reaction rate using Langmuir-Hinshelwood kinetics"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 */
  __pyx_tuple__90 = PyTuple_Pack(5, __pyx_n_s_k, __pyx_n_s_K_A, __pyx_n_s_K_B, __pyx_n_s_conc_A, __pyx_n_s_conc_B); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(1, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_langmuir_hinshelwood_rate, 728, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(1, 728, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":732
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,             # <<<<<<<<<<<<<<
 * 						  double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
 */
  __pyx_tuple__92 = PyTuple_Pack(5, __pyx_n_s_quantum_yield, __pyx_n_s_molar_absorptivity, __pyx_n_s_path_length, __pyx_n_s_light_intensity, __pyx_n_s_concentration); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(1, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_photochemical_rate, 732, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(1, 732, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":738
 * 
 * # BATCH 1: Simple utility functions (statistics and interpolation)
 * def py_linear_interpolate(double x, x_data, y_data):             # <<<<<<<<<<<<<<
 * 	"""Linear interpolation between data points"""
 * 	cdef int n = len(x_data)
 */
  __pyx_tuple__94 = PyTuple_Pack(7, __pyx_n_s_x, __pyx_n_s_x_data, __pyx_n_s_y_data, __pyx_n_s_n, __pyx_n_s_x_data_c, __pyx_n_s_y_data_c, __pyx_n_s_i); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(1, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_linear_interpolate, 738, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(1, 738, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":754
 * 		free(y_data_c)
 * 
 * def py_cubic_spline_interpolate(double x, x_data, y_data):             # <<<<<<<<<<<<<<
 * 	"""Cubic spline interpolation between data points"""
 * 	cdef int n = len(x_data)
 */
  __pyx_tuple__96 = PyTuple_Pack(7, __pyx_n_s_x, __pyx_n_s_x_data, __pyx_n_s_y_data, __pyx_n_s_n, __pyx_n_s_x_data_c, __pyx_n_s_y_data_c, __pyx_n_s_i); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(1, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_cubic_spline_interpolate, 754, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(1, 754, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":770
 * 		free(y_data_c)
 * 
 * def py_calculate_r_squared(experimental, predicted):             # <<<<<<<<<<<<<<
 * 	"""Calculate R-squared coefficient of determination"""
 * 	cdef int n = len(experimental)
 */
  __pyx_tuple__98 = PyTuple_Pack(6, __pyx_n_s_experimental, __pyx_n_s_predicted, __pyx_n_s_n, __pyx_n_s_exp_c, __pyx_n_s_pred_c, __pyx_n_s_i); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(1, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_calculate_r_squared, 770, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(1, 770, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":786
 * 		free(pred_c)
 * 
 * def py_calculate_rmse(experimental, predicted):             # <<<<<<<<<<<<<<
 * 	"""Calculate Root Mean Square Error"""
 * 	cdef int n = len(experimental)
 */
  __pyx_tuple__100 = PyTuple_Pack(6, __pyx_n_s_experimental, __pyx_n_s_predicted, __pyx_n_s_n, __pyx_n_s_exp_c, __pyx_n_s_pred_c, __pyx_n_s_i); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(1, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_calculate_rmse, 786, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(1, 786, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":802
 * 		free(pred_c)
 * 
 * def py_calculate_aic(experimental, predicted, int nparams):             # <<<<<<<<<<<<<<
 * 	"""Calculate Akaike Information Criterion"""
 * 	cdef int ndata = len(experimental)
 */
  __pyx_tuple__102 = PyTuple_Pack(7, __pyx_n_s_experimental, __pyx_n_s_predicted, __pyx_n_s_nparams, __pyx_n_s_ndata, __pyx_n_s_exp_c, __pyx_n_s_pred_c, __pyx_n_s_i); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(1, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_calculate_aic, 802, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(1, 802, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":819
 * 
 * # BATCH 2: Additional kinetic functions
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):             # <<<<<<<<<<<<<<
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 */
  __pyx_tuple__104 = PyTuple_Pack(3, __pyx_n_s_Vmax, __pyx_n_s_Km, __pyx_n_s_substrate_conc); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(1, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_michaelis_menten_rate, 819, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(1, 819, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":823
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,             # <<<<<<<<<<<<<<
 * 								  double inhibitor_conc, double Ki):
 * 	"""Calculate rate with competitive inhibition"""
 */
  __pyx_tuple__106 = PyTuple_Pack(5, __pyx_n_s_Vmax, __pyx_n_s_Km, __pyx_n_s_substrate_conc, __pyx_n_s_inhibitor_conc, __pyx_n_s_Ki); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_competitive_inhibition_rate, 823, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(1, 823, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":829
 * 
 * # BATCH 5: Core thermodynamic functions
 * def py_enthalpy_c(double cp, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate enthalpy using constant pressure heat capacity"""
 * 	return enthalpy_c(cp, T)
 */
  __pyx_tuple__108 = PyTuple_Pack(2, __pyx_n_s_cp, __pyx_n_s_T); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(1, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_enthalpy_c, 829, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(1, 829, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":833
 * 	return enthalpy_c(cp, T)
 * 
 * def py_entropy_c(double cp, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate entropy using constant pressure heat capacity"""
 * 	return entropy_c(cp, T)
 */
  __pyx_tuple__110 = PyTuple_Pack(2, __pyx_n_s_cp, __pyx_n_s_T); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(1, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_entropy_c, 833, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(1, 833, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":838
 * 
 * # BATCH 6: Analytical solutions
 * def py_analytical_first_order(double k, double A0, double time_span, double dt, int max_len=1000):             # <<<<<<<<<<<<<<
 * 	"""Analytical solution for A -> B (first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 */
  __pyx_tuple__112 = PyTuple_Pack(15, __pyx_n_s_k, __pyx_n_s_A0, __pyx_n_s_time_span, __pyx_n_s_dt, __pyx_n_s_max_len, __pyx_n_s_times, __pyx_n_s_A_out, __pyx_n_s_B_out, __pyx_n_s_written, __pyx_n_s_times_list, __pyx_n_s_A_list, __pyx_n_s_B_list, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(1, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(5, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_analytical_first_order, 838, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(1, 838, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":864
 * 		free(B_out)
 * 
 * def py_analytical_reversible_first_order(double kf, double kr, double A0, double B0,             # <<<<<<<<<<<<<<
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A <=> B (reversible first order)"""
 */
  __pyx_tuple__114 = PyTuple_Pack(17, __pyx_n_s_kf, __pyx_n_s_kr, __pyx_n_s_A0, __pyx_n_s_B0, __pyx_n_s_time_span, __pyx_n_s_dt, __pyx_n_s_max_len, __pyx_n_s_times, __pyx_n_s_A_out, __pyx_n_s_B_out, __pyx_n_s_written, __pyx_n_s_times_list, __pyx_n_s_A_list, __pyx_n_s_B_list, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(1, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(7, 0, 17, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_analytical_reversible_first_o, 864, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(1, 864, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":892
 * 		free(B_out)
 * 
 * def py_analytical_consecutive_first_order(double k1, double k2, double A0,             # <<<<<<<<<<<<<<
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A -> B -> C (consecutive first order)"""
 */
  __pyx_tuple__116 = PyTuple_Pack(19, __pyx_n_s_k1, __pyx_n_s_k2, __pyx_n_s_A0, __pyx_n_s_time_span, __pyx_n_s_dt, __pyx_n_s_max_len, __pyx_n_s_times, __pyx_n_s_A_out, __pyx_n_s_B_out, __pyx_n_s_C_out, __pyx_n_s_written, __pyx_n_s_times_list, __pyx_n_s_A_list, __pyx_n_s_B_list, __pyx_n_s_C_list, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(1, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(6, 0, 19, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_analytical_consecutive_first, 892, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(1, 892, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":925
 * 
 * # BATCH 8: Simple utility and optimization functions
 * def py_calculate_objective_function(experimental_data, simulated_data, weights=None):             # <<<<<<<<<<<<<<
 * 	"""Calculate objective function (sum of squared residuals) for optimization"""
 * 	cdef int ndata = len(experimental_data)
 */
  __pyx_tuple__118 = PyTuple_Pack(8, __pyx_n_s_experimental_data, __pyx_n_s_simulated_data, __pyx_n_s_weights, __pyx_n_s_ndata, __pyx_n_s_exp_c, __pyx_n_s_sim_c, __pyx_n_s_weight_c, __pyx_n_s_i); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(3, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_calculate_objective_function, 925, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(1, 925, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":944
 * 		free(weight_c)
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):             # <<<<<<<<<<<<<<
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:
 */
  __pyx_tuple__120 = PyTuple_Pack(13, __pyx_n_s_concentrations, __pyx_n_s_tolerance, __pyx_n_s_N, __pyx_n_s_npoints, __pyx_n_s_conc_traj, __pyx_n_s_mass_balance, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_result, __pyx_n_s_mass_balance_list, __pyx_n_s_i, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(1, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(2, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_check_mass_conservation, 944, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(1, 944, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":974
 * 		free(mass_balance)
 * 
 * def py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15):             # <<<<<<<<<<<<<<
 * 	"""Calculate temperature-dependent rate constants using Arrhenius equation"""
 * 	cdef int M = len(kf_ref)
 */
  __pyx_tuple__122 = PyTuple_Pack(18, __pyx_n_s_kf_ref, __pyx_n_s_kr_ref, __pyx_n_s_Ea_f, __pyx_n_s_Ea_r, __pyx_n_s_T, __pyx_n_s_T_ref, __pyx_n_s_M, __pyx_n_s_kf_ref_c, __pyx_n_s_kr_ref_c, __pyx_n_s_Ea_f_c, __pyx_n_s_Ea_r_c, __pyx_n_s_kf_out_c, __pyx_n_s_kr_out_c, __pyx_n_s_i, __pyx_n_s_kf_out, __pyx_n_s_kr_out, __pyx_n_s_i, __pyx_n_s_i); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(1, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(6, 0, 18, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_calculate_rate_constants, 974, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(1, 974, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1011
 * 
 * # BATCH 9: Simple utility and validation functions
 * def py_cross_validation_score(data, parameters, int n_folds=5):             # <<<<<<<<<<<<<<
 * 	"""Calculate cross-validation score for model validation"""
 * 	cdef int n_data = len(data)
 */
  __pyx_tuple__124 = PyTuple_Pack(8, __pyx_n_s_data, __pyx_n_s_parameters, __pyx_n_s_n_folds, __pyx_n_s_n_data, __pyx_n_s_n_params, __pyx_n_s_data_c, __pyx_n_s_params_c, __pyx_n_s_i); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(1, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(3, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_cross_validation_score, 1011, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(1, 1011, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1029
 * 		free(params_c)
 * 
 * def py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None):             # <<<<<<<<<<<<<<
 * 	"""Kriging interpolation for spatial data"""
 * 	cdef int n_known = len(x_known)
 */
  __pyx_tuple__126 = PyTuple_Pack(12, __pyx_n_s_x_new, __pyx_n_s_x_known, __pyx_n_s_y_known, __pyx_n_s_variogram_params, __pyx_n_s_n_known, __pyx_n_s_x_new_list, __pyx_n_s_x_new_c, __pyx_n_s_x_known_c, __pyx_n_s_y_known_c, __pyx_n_s_var_params_c, __pyx_n_s_i, __pyx_n_s_result); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(1, 1029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(4, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_kriging_interpolation, 1029, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(1, 1029, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1070
 * 		free(var_params_c)
 * 
 * def py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000):             # <<<<<<<<<<<<<<
 * 	"""Bootstrap uncertainty analysis"""
 * 	cdef int n_data = len(data)
 */
  __pyx_tuple__128 = PyTuple_Pack(13, __pyx_n_s_data, __pyx_n_s_parameters, __pyx_n_s_n_bootstrap, __pyx_n_s_n_data, __pyx_n_s_n_params, __pyx_n_s_data_c, __pyx_n_s_params_c, __pyx_n_s_param_distribution, __pyx_n_s_i, __pyx_n_s_result, __pyx_n_s_distribution, __pyx_n_s_param_samples, __pyx_n_s_j); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(1, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(3, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_bootstrap_uncertainty, 1070, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(1, 1070, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1106
 * 
 * # BATCH 10: Matrix operations
 * def py_matrix_multiply(A, B):             # <<<<<<<<<<<<<<
 * 	"""Matrix multiplication C = A * B"""
 * 	import numpy as np
 */
  __pyx_tuple__130 = PyTuple_Pack(13, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_np, __pyx_n_s_m, __pyx_n_s_n, __pyx_n_s_p, __pyx_n_s_A_c, __pyx_n_s_B_c, __pyx_n_s_C_c, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_result, __pyx_n_s_C); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(1, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(2, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_matrix_multiply, 1106, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(1, 1106, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1152
 * 		free(C_c)
 * 
 * def py_matrix_invert(A):             # <<<<<<<<<<<<<<
 * 	"""Matrix inversion A_inv = A^(-1)"""
 * 	import numpy as np
 */
  __pyx_tuple__132 = PyTuple_Pack(9, __pyx_n_s_A, __pyx_n_s_np, __pyx_n_s_n, __pyx_n_s_A_c, __pyx_n_s_A_inv_c, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_result, __pyx_n_s_A_inv); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(1, 1152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(1, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__132, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_matrix_invert, 1152, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(1, 1152, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1186
 * 
 * # Simplified version using NumPy
 * def py_solve_linear_system(A, b):             # <<<<<<<<<<<<<<
 * 	"""Solve linear system Ax = b"""
 * 	import numpy as np
 */
  __pyx_tuple__134 = PyTuple_Pack(12, __pyx_n_s_A, __pyx_n_s_b, __pyx_n_s_np, __pyx_n_s_n, __pyx_n_s_A_c, __pyx_n_s_b_c, __pyx_n_s_x_c, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_result, __pyx_n_s_x, __pyx_n_s_i); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(1, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(2, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_solve_linear_system, 1186, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(1, 1186, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1223
 * 
 * # BATCH 11: Advanced optimization and sensitivity analysis
 * def py_calculate_sensitivity(params, concentrations, rates, n_params, n_species):             # <<<<<<<<<<<<<<
 * 	"""Calculate sensitivity matrix for parameter estimation"""
 * 	# Simple implementation matching test interface
 */
  __pyx_tuple__136 = PyTuple_Pack(9, __pyx_n_s_params, __pyx_n_s_concentrations, __pyx_n_s_rates, __pyx_n_s_n_params, __pyx_n_s_n_species, __pyx_n_s_np, __pyx_n_s_sensitivity_matrix, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(1, 1223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(5, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_calculate_sensitivity, 1223, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(1, 1223, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1286
 * 		free(prod_idx); free(prod_nu); free(prod_off)
 * 
 * def py_calculate_jacobian(y, dydt, n_species):             # <<<<<<<<<<<<<<
 * 	"""Calculate Jacobian matrix for parameter estimation"""
 * 	import numpy as np
 */
  __pyx_tuple__138 = PyTuple_Pack(7, __pyx_n_s_y, __pyx_n_s_dydt, __pyx_n_s_n_species, __pyx_n_s_np, __pyx_n_s_jacobian, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(1, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__138, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_calculate_jacobian, 1286, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(1, 1286, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1303
 * 	return jacobian.tolist()
 * 
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):             # <<<<<<<<<<<<<<
 * 	"""Perform stability analysis around steady state"""
 * 	import numpy as np
 */
  __pyx_tuple__140 = PyTuple_Pack(11, __pyx_n_s_steady_state, __pyx_n_s_n_species, __pyx_n_s_temperature, __pyx_n_s_pressure, __pyx_n_s_np, __pyx_n_s_eigenvalues, __pyx_n_s_i, __pyx_n_s_eigenval, __pyx_n_s_is_stable, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(1, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(4, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__140, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_stability_analysis, 1303, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(1, 1303, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1323
 * 	}
 * 
 * def py_mpc_controller(current_state, setpoints, control_bounds, reaction_network, int horizon=10):             # <<<<<<<<<<<<<<
 * 	"""Model Predictive Control implementation"""
 * 	N = len(current_state)
 */
  __pyx_tuple__142 = PyTuple_Pack(23, __pyx_n_s_current_state, __pyx_n_s_setpoints, __pyx_n_s_control_bounds, __pyx_n_s_reaction_network, __pyx_n_s_horizon, __pyx_n_s_N, __pyx_n_s_M, __pyx_n_s_state, __pyx_n_s_setpts, __pyx_n_s_bounds, __pyx_n_s_kf, __pyx_n_s_kr, __pyx_n_s_optimal_controls, __pyx_n_s_reac_idx, __pyx_n_s_reac_nu, __pyx_n_s_reac_off, __pyx_n_s_prod_idx, __pyx_n_s_prod_nu, __pyx_n_s_prod_off, __pyx_n_s_i, __pyx_n_s_result, __pyx_n_s_control_actions, __pyx_n_s_i); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(1, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(5, 0, 23, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_mpc_controller, 1323, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(1, 1323, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1377
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
 * def py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network):             # <<<<<<<<<<<<<<
 * 	"""Real-time optimization for process economics"""
 * 	N = len(current_concentrations)
 */
  __pyx_tuple__144 = PyTuple_Pack(24, __pyx_n_s_current_concentrations, __pyx_n_s_economic_coefficients, __pyx_n_s_control_bounds, __pyx_n_s_reaction_network, __pyx_n_s_N, __pyx_n_s_M, __pyx_n_s_n_controls, __pyx_n_s_concs, __pyx_n_s_econ_coeffs, __pyx_n_s_bounds, __pyx_n_s_kf, __pyx_n_s_kr, __pyx_n_s_optimal_controls, __pyx_n_s_predicted_profit, __pyx_n_s_reac_idx, __pyx_n_s_reac_nu, __pyx_n_s_reac_off, __pyx_n_s_prod_idx, __pyx_n_s_prod_nu, __pyx_n_s_prod_off, __pyx_n_s_i, __pyx_n_s_result, __pyx_n_s_optimal_settings, __pyx_n_s_i); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(1, 1377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(4, 0, 24, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__144, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_real_time_optimization, 1377, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(1, 1377, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1447
 * 
 * # BATCH 12: Advanced reactor simulations
 * def py_simulate_packed_bed(int N, int M, int nseg, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 						   prod_idx, prod_nu, prod_off, conc0, double flow_rate,
 * 						   double bed_length, double bed_porosity, double particle_diameter,
 */
  __pyx_tuple__146 = PyTuple_Pack(43, __pyx_n_s_N, __pyx_n_s_M, __pyx_n_s_nseg, __pyx_n_s_kf, __pyx_n_s_kr, __pyx_n_s_reac_idx, __pyx_n_s_reac_nu, __pyx_n_s_reac_off, __pyx_n_s_prod_idx, __pyx_n_s_prod_nu, __pyx_n_s_prod_off, __pyx_n_s_conc0, __pyx_n_s_flow_rate, __pyx_n_s_bed_length, __pyx_n_s_bed_porosity, __pyx_n_s_particle_diameter, __pyx_n_s_catalyst_density, __pyx_n_s_effectiveness_factor, __pyx_n_s_time_span, __pyx_n_s_dt, __pyx_n_s_max_len, __pyx_n_s_kf_arr, __pyx_n_s_kr_arr, __pyx_n_s_reac_idx_arr, __pyx_n_s_reac_nu_arr, __pyx_n_s_reac_off_arr, __pyx_n_s_prod_idx_arr, __pyx_n_s_prod_nu_arr, __pyx_n_s_prod_off_arr, __pyx_n_s_conc0_arr, __pyx_n_s_times, __pyx_n_s_conc_out_flat, __pyx_n_s_pressure_out, __pyx_n_s_i, __pyx_n_s_result, __pyx_n_s_times_out, __pyx_n_s_conc_matrix, __pyx_n_s_t, __pyx_n_s_conc_t, __pyx_n_s_pressure_out_list, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(1, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(21, 0, 43, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__146, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_simulate_packed_bed, 1447, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(1, 1447, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1529
 * 		free(pressure_out)
 * 
 * def py_simulate_fluidized_bed(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 							  prod_idx, prod_nu, prod_off, conc0, double gas_velocity,
 * 							  double bed_height, double bed_porosity, double bubble_fraction,
 */
  __pyx_tuple__148 = PyTuple_Pack(47, __pyx_n_s_N, __pyx_n_s_M, __pyx_n_s_kf, __pyx_n_s_kr, __pyx_n_s_reac_idx, __pyx_n_s_reac_nu, __pyx_n_s_reac_off, __pyx_n_s_prod_idx, __pyx_n_s_prod_nu, __pyx_n_s_prod_off, __pyx_n_s_conc0, __pyx_n_s_gas_velocity, __pyx_n_s_bed_height, __pyx_n_s_bed_porosity, __pyx_n_s_bubble_fraction, __pyx_n_s_particle_diameter, __pyx_n_s_catalyst_density, __pyx_n_s_time_span, __pyx_n_s_dt, __pyx_n_s_max_len, __pyx_n_s_kf_arr, __pyx_n_s_kr_arr, __pyx_n_s_reac_idx_arr, __pyx_n_s_reac_nu_arr, __pyx_n_s_reac_off_arr, __pyx_n_s_prod_idx_arr, __pyx_n_s_prod_nu_arr, __pyx_n_s_prod_off_arr, __pyx_n_s_conc0_arr, __pyx_n_s_times, __pyx_n_s_conc_out_flat, __pyx_n_s_bubble_conc_out, __pyx_n_s_emulsion_conc_out, __pyx_n_s_i, __pyx_n_s_result, __pyx_n_s_times_out, __pyx_n_s_conc_matrix, __pyx_n_s_bubble_matrix, __pyx_n_s_emulsion_matrix, __pyx_n_s_t, __pyx_n_s_conc_t, __pyx_n_s_bubble_t, __pyx_n_s_emulsion_t, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(1, 1529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(20, 0, 47, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_simulate_fluidized_bed, 1529, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(1, 1529, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1620
 * 		free(emulsion_conc_out)
 * 
 * def py_simulate_homogeneous_batch(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 								  prod_idx, prod_nu, prod_off, conc0, double volume,
 * 								  double mixing_intensity, double time_span, double dt,
 */
  __pyx_tuple__150 = PyTuple_Pack(38, __pyx_n_s_N, __pyx_n_s_M, __pyx_n_s_kf, __pyx_n_s_kr, __pyx_n_s_reac_idx, __pyx_n_s_reac_nu, __pyx_n_s_reac_off, __pyx_n_s_prod_idx, __pyx_n_s_prod_nu, __pyx_n_s_prod_off, __pyx_n_s_conc0, __pyx_n_s_volume, __pyx_n_s_mixing_intensity, __pyx_n_s_time_span, __pyx_n_s_dt, __pyx_n_s_max_len, __pyx_n_s_kf_arr, __pyx_n_s_kr_arr, __pyx_n_s_reac_idx_arr, __pyx_n_s_reac_nu_arr, __pyx_n_s_reac_off_arr, __pyx_n_s_prod_idx_arr, __pyx_n_s_prod_nu_arr, __pyx_n_s_prod_off_arr, __pyx_n_s_conc0_arr, __pyx_n_s_times, __pyx_n_s_conc_out_flat, __pyx_n_s_mixing_efficiency_out, __pyx_n_s_i, __pyx_n_s_result, __pyx_n_s_times_out, __pyx_n_s_conc_matrix, __pyx_n_s_mixing_efficiency, __pyx_n_s_t, __pyx_n_s_conc_t, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(1, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(16, 0, 38, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_simulate_homogeneous_batch, 1620, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(1, 1620, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1701
 * 		free(mixing_efficiency_out)
 * 
 * def py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None):             # <<<<<<<<<<<<<<
 * 	"""Simulate multi-reactor system with adaptive control"""
 * 	import numpy as np
 */
  __pyx_tuple__152 = PyTuple_Pack(8, __pyx_n_s_reactor_config, __pyx_n_s_feed_conditions, __pyx_n_s_control_strategy, __pyx_n_s_np, __pyx_n_s_n_reactors, __pyx_n_s_reactor_outputs, __pyx_n_s_i, __pyx_n_s_reactor_output); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(1, 1701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);
  __pyx_codeobj__153 = (PyObject*)__Pyx_PyCode_New(3, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__152, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_simulate_multi_reactor_adapti, 1701, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__153)) __PYX_ERR(1, 1701, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1726
 * 
 * # BATCH 13: Energy analysis and statistical methods
 * def py_calculate_energy_balance(int N, int M, conc, reaction_rates,             # <<<<<<<<<<<<<<
 * 								enthalpies_formation, heat_capacities, double T):
 * 	"""Calculate energy balance using original complex C++ implementation with full parameter exposure"""
 */
  __pyx_tuple__154 = PyTuple_Pack(18, __pyx_n_s_N, __pyx_n_s_M, __pyx_n_s_conc, __pyx_n_s_reaction_rates, __pyx_n_s_enthalpies_formation, __pyx_n_s_heat_capacities, __pyx_n_s_T, __pyx_n_s_conc_arr, __pyx_n_s_rates_arr, __pyx_n_s_enthalpies_arr, __pyx_n_s_cp_arr, __pyx_n_s_heat_generation_val, __pyx_n_s_i, __pyx_n_s_result, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i); if (unlikely(!__pyx_tuple__154)) __PYX_ERR(1, 1726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);
  __pyx_codeobj__155 = (PyObject*)__Pyx_PyCode_New(7, 0, 18, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__154, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_calculate_energy_balance, 1726, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__155)) __PYX_ERR(1, 1726, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1769
 * 		free(cp_arr)
 * 
 * def py_monte_carlo_simulation(int N, int M, int nsamples, kf_mean, kr_mean, kf_std, kr_std,             # <<<<<<<<<<<<<<
 * 							  reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off,
 * 							  conc0, double time_span, double dt, int nthreads=1):
 */
  __pyx_tuple__156 = PyTuple_Pack(39, __pyx_n_s_N, __pyx_n_s_M, __pyx_n_s_nsamples, __pyx_n_s_kf_mean, __pyx_n_s_kr_mean, __pyx_n_s_kf_std, __pyx_n_s_kr_std, __pyx_n_s_reac_idx, __pyx_n_s_reac_nu, __pyx_n_s_reac_off, __pyx_n_s_prod_idx, __pyx_n_s_prod_nu, __pyx_n_s_prod_off, __pyx_n_s_conc0, __pyx_n_s_time_span, __pyx_n_s_dt, __pyx_n_s_nthreads, __pyx_n_s_kf_mean_arr, __pyx_n_s_kr_mean_arr, __pyx_n_s_kf_std_arr, __pyx_n_s_kr_std_arr, __pyx_n_s_reac_idx_arr, __pyx_n_s_reac_nu_arr, __pyx_n_s_reac_off_arr, __pyx_n_s_prod_idx_arr, __pyx_n_s_prod_nu_arr, __pyx_n_s_prod_off_arr, __pyx_n_s_conc0_arr, __pyx_n_s_statistics_output, __pyx_n_s_i, __pyx_n_s_result, __pyx_n_s_mean_list, __pyx_n_s_std_list, __pyx_n_s_min_list, __pyx_n_s_max_list, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i, __pyx_n_s_i); if (unlikely(!__pyx_tuple__156)) __PYX_ERR(1, 1769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);
  __pyx_codeobj__157 = (PyObject*)__Pyx_PyCode_New(17, 0, 39, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__156, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_monte_carlo_simulation, 1769, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__157)) __PYX_ERR(1, 1769, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1855
 * 		free(statistics_output)
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):             # <<<<<<<<<<<<<<
 * 	"""Calculate residence time distribution for tank series"""
 * 	import numpy as np
 */
  __pyx_tuple__158 = PyTuple_Pack(15, __pyx_n_s_flow_rates, __pyx_n_s_volumes, __pyx_n_s_n_tanks, __pyx_n_s_np, __pyx_n_s_mean_residence_times, __pyx_n_s_i, __pyx_n_s_tau, __pyx_n_s_total_volume, __pyx_n_s_total_flow, __pyx_n_s_overall_mean_tau, __pyx_n_s_variance, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__158)) __PYX_ERR(1, 1855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__158);
  __Pyx_GIVEREF(__pyx_tuple__158);
  __pyx_codeobj__159 = (PyObject*)__Pyx_PyCode_New(3, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__158, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_residence_time_distribution, 1855, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__159)) __PYX_ERR(1, 1855, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1885
 * 
 * # BATCH 14: Final functions
 * def py_catalyst_deactivation_model(initial_activity, deactivation_constant, time, temperature, partial_pressure_poison):             # <<<<<<<<<<<<<<
 * 	"""Model catalyst deactivation over time"""
 * 	import numpy as np
 */
  __pyx_tuple__160 = PyTuple_Pack(11, __pyx_n_s_initial_activity, __pyx_n_s_deactivation_constant, __pyx_n_s_time, __pyx_n_s_temperature, __pyx_n_s_partial_pressure_poison, __pyx_n_s_np, __pyx_n_s_temp_factor, __pyx_n_s_poison_factor, __pyx_n_s_effective_kd, __pyx_n_s_current_activity, __pyx_n_s_deactivation_rate); if (unlikely(!__pyx_tuple__160)) __PYX_ERR(1, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);
  __pyx_codeobj__161 = (PyObject*)__Pyx_PyCode_New(5, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__160, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_catalyst_deactivation_model, 1885, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__161)) __PYX_ERR(1, 1885, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1914
 * 	}
 * 
 * def py_process_scale_up(lab_scale_volume, pilot_scale_volume, lab_conditions):             # <<<<<<<<<<<<<<
 * 	"""Scale up process from lab to pilot scale"""
 * 	import numpy as np
 */
  __pyx_tuple__162 = PyTuple_Pack(9, __pyx_n_s_lab_scale_volume, __pyx_n_s_pilot_scale_volume, __pyx_n_s_lab_conditions, __pyx_n_s_np, __pyx_n_s_scale_factor, __pyx_n_s_length_scale, __pyx_n_s_area_scale, __pyx_n_s_pilot_conditions, __pyx_n_s_power_scale); if (unlikely(!__pyx_tuple__162)) __PYX_ERR(1, 1914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);
  __pyx_codeobj__163 = (PyObject*)__Pyx_PyCode_New(3, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__162, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyroxa_pybindings_pyx, __pyx_n_s_py_process_scale_up, 1914, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__163)) __PYX_ERR(1, 1914, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_float_0_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_2 = PyFloat_FromDouble(0.2); if (unlikely(!__pyx_float_0_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7 = PyFloat_FromDouble(0.7); if (unlikely(!__pyx_float_0_7)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9 = PyFloat_FromDouble(0.9); if (unlikely(!__pyx_float_0_9)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_2_0 = PyFloat_FromDouble(2.0); if (unlikely(!__pyx_float_2_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_01 = PyFloat_FromDouble(0.01); if (unlikely(!__pyx_float_0_01)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_05 = PyFloat_FromDouble(0.05); if (unlikely(!__pyx_float_0_05)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_15 = PyFloat_FromDouble(0.15); if (unlikely(!__pyx_float_0_15)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_10_0 = PyFloat_FromDouble(10.0); if (unlikely(!__pyx_float_10_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_1eneg_6 = PyFloat_FromDouble(1e-6); if (unlikely(!__pyx_float_1eneg_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_8_314 = PyFloat_FromDouble(8.314); if (unlikely(!__pyx_float_8_314)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_298_15 = PyFloat_FromDouble(298.15); if (unlikely(!__pyx_float_298_15)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_101325_0 = PyFloat_FromDouble(101325.0); if (unlikely(!__pyx_float_101325_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_neg_1_0 = PyFloat_FromDouble(-1.0); if (unlikely(!__pyx_float_neg_1_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_50 = PyInt_FromLong(50); if (unlikely(!__pyx_int_50)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_neg_5000 = PyInt_FromLong(-5000); if (unlikely(!__pyx_int_neg_5000)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6pyroxa_11_pybindings_Thermodynamics) < 0) __PYX_ERR(1, 259, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyroxa_11_pybindings_Thermodynamics.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyroxa_11_pybindings_Thermodynamics.tp_dictoffset && __pyx_type_6pyroxa_11_pybindings_Thermodynamics.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyroxa_11_pybindings_Thermodynamics.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Thermodynamics, (PyObject *)&__pyx_type_6pyroxa_11_pybindings_Thermodynamics) < 0) __PYX_ERR(1, 259, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyroxa_11_pybindings_Thermodynamics) < 0) __PYX_ERR(1, 259, __pyx_L1_error)
  __pyx_ptype_6pyroxa_11_pybindings_Thermodynamics = &__pyx_type_6pyroxa_11_pybindings_Thermodynamics;
  if (PyType_Ready(&__pyx_type_6pyroxa_11_pybindings_Reaction) < 0) __PYX_ERR(1, 272, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyroxa_11_pybindings_Reaction.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyroxa_11_pybindings_Reaction.tp_dictoffset && __pyx_type_6pyroxa_11_pybindings_Reaction.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyroxa_11_pybindings_Reaction.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Reaction, (PyObject *)&__pyx_type_6pyroxa_11_pybindings_Reaction) < 0) __PYX_ERR(1, 272, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyroxa_11_pybindings_Reaction) < 0) __PYX_ERR(1, 272, __pyx_L1_error)
  __pyx_ptype_6pyroxa_11_pybindings_Reaction = &__pyx_type_6pyroxa_11_pybindings_Reaction;
  __pyx_vtabptr_6pyroxa_11_pybindings_ReactionMulti = &__pyx_vtable_6pyroxa_11_pybindings_ReactionMulti;
  __pyx_vtable_6pyroxa_11_pybindings_ReactionMulti.rate = (double (*)(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6pyroxa_11_pybindings_13ReactionMulti_rate;
  if (PyType_Ready(&__pyx_type_6pyroxa_11_pybindings_ReactionMulti) < 0) __PYX_ERR(1, 284, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyroxa_11_pybindings_ReactionMulti.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyroxa_11_pybindings_ReactionMulti.tp_dictoffset && __pyx_type_6pyroxa_11_pybindings_ReactionMulti.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyroxa_11_pybindings_ReactionMulti.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pyroxa_11_pybindings_ReactionMulti.tp_dict, __pyx_vtabptr_6pyroxa_11_pybindings_ReactionMulti) < 0) __PYX_ERR(1, 284, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ReactionMulti, (PyObject *)&__pyx_type_6pyroxa_11_pybindings_ReactionMulti) < 0) __PYX_ERR(1, 284, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyroxa_11_pybindings_ReactionMulti) < 0) __PYX_ERR(1, 284, __pyx_L1_error)
  __pyx_ptype_6pyroxa_11_pybindings_ReactionMulti = &__pyx_type_6pyroxa_11_pybindings_ReactionMulti;
  __pyx_vtabptr_6pyroxa_11_pybindings_MultiReactor = &__pyx_vtable_6pyroxa_11_pybindings_MultiReactor;
  __pyx_vtable_6pyroxa_11_pybindings_MultiReactor._dcdt = (PyObject *(*)(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6pyroxa_11_pybindings_12MultiReactor__dcdt;
  if (PyType_Ready(&__pyx_type_6pyroxa_11_pybindings_MultiReactor) < 0) __PYX_ERR(1, 317, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyroxa_11_pybindings_MultiReactor.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyroxa_11_pybindings_MultiReactor.tp_dictoffset && __pyx_type_6pyroxa_11_pybindings_MultiReactor.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyroxa_11_pybindings_MultiReactor.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pyroxa_11_pybindings_MultiReactor.tp_dict, __pyx_vtabptr_6pyroxa_11_pybindings_MultiReactor) < 0) __PYX_ERR(1, 317, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MultiReactor, (PyObject *)&__pyx_type_6pyroxa_11_pybindings_MultiReactor) < 0) __PYX_ERR(1, 317, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyroxa_11_pybindings_MultiReactor) < 0) __PYX_ERR(1, 317, __pyx_L1_error)
  __pyx_ptype_6pyroxa_11_pybindings_MultiReactor = &__pyx_type_6pyroxa_11_pybindings_MultiReactor;
  if (PyType_Ready(&__pyx_type_6pyroxa_11_pybindings_Reactor) < 0) __PYX_ERR(1, 368, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyroxa_11_pybindings_Reactor.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyroxa_11_pybindings_Reactor.tp_dictoffset && __pyx_type_6pyroxa_11_pybindings_Reactor.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyroxa_11_pybindings_Reactor.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Reactor, (PyObject *)&__pyx_type_6pyroxa_11_pybindings_Reactor) < 0) __PYX_ERR(1, 368, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyroxa_11_pybindings_Reactor) < 0) __PYX_ERR(1, 368, __pyx_L1_error)
  __pyx_ptype_6pyroxa_11_pybindings_Reactor = &__pyx_type_6pyroxa_11_pybindings_Reactor;
  if (PyType_Ready(&__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation) < 0) __PYX_ERR(1, 944, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation.tp_dictoffset && __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation = &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__py_check_mass_conservation;
  if (PyType_Ready(&__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(1, 968, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr = &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis) < 0) __PYX_ERR(1, 1303, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis.tp_dictoffset && __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis = &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_stability_analysis;
  if (PyType_Ready(&__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(1, 1314, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr.tp_dictoffset && __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr = &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution) < 0) __PYX_ERR(1, 1855, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution.tp_dictoffset && __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution = &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_py_residence_time_distribution;
  if (PyType_Ready(&__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr) < 0) __PYX_ERR(1, 1869, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr.tp_dictoffset && __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr = &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr;
  if (PyType_Ready(&__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr) < 0) __PYX_ERR(1, 1870, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr.tp_dictoffset && __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr = &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_6_genexpr;
  if (PyType_Ready(&__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr) < 0) __PYX_ERR(1, 1874, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr.tp_dictoffset && __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr = &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_7_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_0_29_37(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyArray_Descr),__Pyx_ImportType_CheckSize_Ignore_0_29_37); if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 237, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyArrayIterObject),__Pyx_ImportType_CheckSize_Ignore_0_29_37); if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 256, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyArrayMultiIterObject),__Pyx_ImportType_CheckSize_Ignore_0_29_37); if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 260, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyArrayObject),__Pyx_ImportType_CheckSize_Ignore_0_29_37); if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 272, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 739, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "number", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 741, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 743, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 745, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 747, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 749, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 751, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 753, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 755, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "character", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 757, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyUFuncObject),__Pyx_ImportType_CheckSize_Ignore_0_29_37); if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 821, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_pybindings(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_pybindings(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__pybindings(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__pybindings(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__pybindings(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_pybindings' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__pybindings(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_pybindings", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pyroxa___pybindings) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyroxa._pybindings")) {
      if (unlikely(PyDict_SetItemString(modules, "pyroxa._pybindings", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "pyroxa/pybindings.pyx":254
 * 	                                 double* statistics_min, double* statistics_max)
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * _HAS_NUMPY = True
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(1, 254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":256
 * import numpy as np
 * cimport numpy as np
 * _HAS_NUMPY = True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HAS_NUMPY, Py_True) < 0) __PYX_ERR(1, 256, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":419
 * 
 * 
 * def run_simulation_cpp(spec):             # <<<<<<<<<<<<<<
 * 	"""High-level helper that takes a Python dict spec and runs the C++ reactor.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_1run_simulation_cpp, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_run_simulation_cpp, __pyx_t_1) < 0) __PYX_ERR(1, 419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":597
 * 
 * # Enhanced thermodynamics functions
 * def py_gibbs_free_energy(double enthalpy, double entropy, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate Gibbs free energy"""
 * 	return gibbs_free_energy(enthalpy, entropy, T)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_3py_gibbs_free_energy, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_gibbs_free_energy, __pyx_t_1) < 0) __PYX_ERR(1, 597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":601
 * 	return gibbs_free_energy(enthalpy, entropy, T)
 * 
 * def py_equilibrium_constant(double delta_G, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate equilibrium constant from Gibbs free energy"""
 * 	return equilibrium_constant(delta_G, T)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_5py_equilibrium_constant, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_equilibrium_constant, __pyx_t_1) < 0) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":605
 * 	return equilibrium_constant(delta_G, T)
 * 
 * def py_arrhenius_rate(double A, double Ea, double T, double R=8.314):             # <<<<<<<<<<<<<<
 * 	"""Calculate Arrhenius rate constant"""
 * 	return arrhenius_rate(A, Ea, T, R)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_7py_arrhenius_rate, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_arrhenius_rate, __pyx_t_1) < 0) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":609
 * 	return arrhenius_rate(A, Ea, T, R)
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_9py_pressure_peng_robinson, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_pressure_peng_robinson, __pyx_t_1) < 0) __PYX_ERR(1, 609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":613
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate fugacity coefficient"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_11py_fugacity_coefficient, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_fugacity_coefficient, __pyx_t_1) < 0) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":618
 * 
 * # Additional kinetics functions
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):             # <<<<<<<<<<<<<<
 * 	"""Calculate Langmuir-Hinshelwood surface reaction rate"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_13py_langmuir_hinshelwood_rate, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_langmuir_hinshelwood_rate, __pyx_t_1) < 0) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":622
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,             # <<<<<<<<<<<<<<
 * 						 double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_15py_photochemical_rate, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_photochemical_rate, __pyx_t_1) < 0) __PYX_ERR(1, 622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":628
 * 
 * # Python wrapper functions for newly implemented C++ functions
 * def py_autocatalytic_rate(double k, double A, double B, double temperature=298.15):             # <<<<<<<<<<<<<<
 * 	"""Calculate autocatalytic reaction rate with temperature dependency"""
 * 	return autocatalytic_rate(k, A, B, temperature)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_17py_autocatalytic_rate, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_autocatalytic_rate, __pyx_t_1) < 0) __PYX_ERR(1, 628, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":632
 * 	return autocatalytic_rate(k, A, B, temperature)
 * 
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):             # <<<<<<<<<<<<<<
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_19py_michaelis_menten_rate, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_michaelis_menten_rate, __pyx_t_1) < 0) __PYX_ERR(1, 632, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":636
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,             # <<<<<<<<<<<<<<
 * 								   double inhibitor_conc, double Ki):
 * 	"""Calculate competitive inhibition rate"""
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_21py_competitive_inhibition_rate, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_competitive_inhibition_rate, __pyx_t_1) < 0) __PYX_ERR(1, 636, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":641
 * 	return competitive_inhibition_rate(Vmax, Km, substrate_conc, inhibitor_conc, Ki)
 * 
 * def py_heat_capacity_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate heat capacity using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_23py_heat_capacity_nasa, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_heat_capacity_nasa, __pyx_t_1) < 0) __PYX_ERR(1, 641, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":654
 * 		free(c_coeffs)
 * 
 * def py_enthalpy_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate enthalpy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_25py_enthalpy_nasa, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_enthalpy_nasa, __pyx_t_1) < 0) __PYX_ERR(1, 654, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":667
 * 		free(c_coeffs)
 * 
 * def py_entropy_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate entropy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_27py_entropy_nasa, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_entropy_nasa, __pyx_t_1) < 0) __PYX_ERR(1, 667, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":680
 * 		free(c_coeffs)
 * 
 * def py_mass_transfer_correlation(double Re, double Sc, double geometry_factor):             # <<<<<<<<<<<<<<
 * 	"""Calculate Sherwood number from Reynolds and Schmidt numbers"""
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_29py_mass_transfer_correlation, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_mass_transfer_correlation, __pyx_t_1) < 0) __PYX_ERR(1, 680, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":684
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)
 * 
 * def py_heat_transfer_correlation(double Re, double Pr, double geometry_factor):             # <<<<<<<<<<<<<<
 * 	"""Calculate Nusselt number from Reynolds and Prandtl numbers"""
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_31py_heat_transfer_correlation, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_heat_transfer_correlation, __pyx_t_1) < 0) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":688
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)
 * 
 * def py_effective_diffusivity(double molecular_diff, double porosity,             # <<<<<<<<<<<<<<
 * 							 double tortuosity, double constriction_factor):
 * 	"""Calculate effective diffusivity in porous media"""
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_33py_effective_diffusivity, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_effective_diffusivity, __pyx_t_1) < 0) __PYX_ERR(1, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":693
 * 	return effective_diffusivity(molecular_diff, porosity, tortuosity, constriction_factor)
 * 
 * def py_pressure_drop_ergun(double velocity, double density, double viscosity,             # <<<<<<<<<<<<<<
 * 						   double particle_diameter, double bed_porosity, double bed_length):
 * 	"""Calculate pressure drop using Ergun equation"""
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_35py_pressure_drop_ergun, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_pressure_drop_ergun, __pyx_t_1) < 0) __PYX_ERR(1, 693, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":699
 * 							   particle_diameter, bed_porosity, bed_length)
 * 
 * def py_pid_controller(double setpoint, double process_variable, double dt,             # <<<<<<<<<<<<<<
 * 					  double Kp, double Ki, double Kd):
 * 	"""PID controller implementation"""
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_37py_pid_controller, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_pid_controller, __pyx_t_1) < 0) __PYX_ERR(1, 699, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":708
 * 
 * # Simple thermodynamic calculations
 * def py_gibbs_free_energy(double enthalpy, double entropy, double temperature):             # <<<<<<<<<<<<<<
 * 	"""Calculate Gibbs free energy from enthalpy and entropy"""
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_39py_gibbs_free_energy, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_gibbs_free_energy, __pyx_t_1) < 0) __PYX_ERR(1, 708, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":712
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)
 * 
 * def py_equilibrium_constant(double delta_G, double temperature):             # <<<<<<<<<<<<<<
 * 	"""Calculate equilibrium constant from Gibbs free energy change"""
 * 	return equilibrium_constant(delta_G, temperature)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_41py_equilibrium_constant, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_equilibrium_constant, __pyx_t_1) < 0) __PYX_ERR(1, 712, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":716
 * 	return equilibrium_constant(delta_G, temperature)
 * 
 * def py_arrhenius_rate(double pre_exponential, double activation_energy, double temperature, double gas_constant=8.314):             # <<<<<<<<<<<<<<
 * 	"""Calculate reaction rate constant using Arrhenius equation"""
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_43py_arrhenius_rate, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_arrhenius_rate, __pyx_t_1) < 0) __PYX_ERR(1, 716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":720
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_45py_pressure_peng_robinson, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_pressure_peng_robinson, __pyx_t_1) < 0) __PYX_ERR(1, 720, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":724
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate fugacity coefficient using Peng-Robinson equation"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_47py_fugacity_coefficient, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_fugacity_coefficient, __pyx_t_1) < 0) __PYX_ERR(1, 724, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":728
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 * 
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):             # <<<<<<<<<<<<<<
 * 	"""Calculate reaction rate using Langmuir-Hinshelwood kinetics"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_49py_langmuir_hinshelwood_rate, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_langmuir_hinshelwood_rate, __pyx_t_1) < 0) __PYX_ERR(1, 728, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":732
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,             # <<<<<<<<<<<<<<
 * 						  double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_51py_photochemical_rate, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_photochemical_rate, __pyx_t_1) < 0) __PYX_ERR(1, 732, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":738
 * 
 * # BATCH 1: Simple utility functions (statistics and interpolation)
 * def py_linear_interpolate(double x, x_data, y_data):             # <<<<<<<<<<<<<<
 * 	"""Linear interpolation between data points"""
 * 	cdef int n = len(x_data)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_53py_linear_interpolate, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_linear_interpolate, __pyx_t_1) < 0) __PYX_ERR(1, 738, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":754
 * 		free(y_data_c)
 * 
 * def py_cubic_spline_interpolate(double x, x_data, y_data):             # <<<<<<<<<<<<<<
 * 	"""Cubic spline interpolation between data points"""
 * 	cdef int n = len(x_data)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_55py_cubic_spline_interpolate, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_cubic_spline_interpolate, __pyx_t_1) < 0) __PYX_ERR(1, 754, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":770
 * 		free(y_data_c)
 * 
 * def py_calculate_r_squared(experimental, predicted):             # <<<<<<<<<<<<<<
 * 	"""Calculate R-squared coefficient of determination"""
 * 	cdef int n = len(experimental)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_57py_calculate_r_squared, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_calculate_r_squared, __pyx_t_1) < 0) __PYX_ERR(1, 770, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":786
 * 		free(pred_c)
 * 
 * def py_calculate_rmse(experimental, predicted):             # <<<<<<<<<<<<<<
 * 	"""Calculate Root Mean Square Error"""
 * 	cdef int n = len(experimental)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_59py_calculate_rmse, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_calculate_rmse, __pyx_t_1) < 0) __PYX_ERR(1, 786, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":802
 * 		free(pred_c)
 * 
 * def py_calculate_aic(experimental, predicted, int nparams):             # <<<<<<<<<<<<<<
 * 	"""Calculate Akaike Information Criterion"""
 * 	cdef int ndata = len(experimental)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_61py_calculate_aic, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_calculate_aic, __pyx_t_1) < 0) __PYX_ERR(1, 802, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":819
 * 
 * # BATCH 2: Additional kinetic functions
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):             # <<<<<<<<<<<<<<
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_63py_michaelis_menten_rate, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_michaelis_menten_rate, __pyx_t_1) < 0) __PYX_ERR(1, 819, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":823
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,             # <<<<<<<<<<<<<<
 * 								  double inhibitor_conc, double Ki):
 * 	"""Calculate rate with competitive inhibition"""
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_65py_competitive_inhibition_rate, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_competitive_inhibition_rate, __pyx_t_1) < 0) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":829
 * 
 * # BATCH 5: Core thermodynamic functions
 * def py_enthalpy_c(double cp, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate enthalpy using constant pressure heat capacity"""
 * 	return enthalpy_c(cp, T)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_67py_enthalpy_c, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_enthalpy_c, __pyx_t_1) < 0) __PYX_ERR(1, 829, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":833
 * 	return enthalpy_c(cp, T)
 * 
 * def py_entropy_c(double cp, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate entropy using constant pressure heat capacity"""
 * 	return entropy_c(cp, T)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_69py_entropy_c, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_entropy_c, __pyx_t_1) < 0) __PYX_ERR(1, 833, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":838
 * 
 * # BATCH 6: Analytical solutions
 * def py_analytical_first_order(double k, double A0, double time_span, double dt, int max_len=1000):             # <<<<<<<<<<<<<<
 * 	"""Analytical solution for A -> B (first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_71py_analytical_first_order, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_analytical_first_order, __pyx_t_1) < 0) __PYX_ERR(1, 838, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":864
 * 		free(B_out)
 * 
 * def py_analytical_reversible_first_order(double kf, double kr, double A0, double B0,             # <<<<<<<<<<<<<<
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A <=> B (reversible first order)"""
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_73py_analytical_reversible_first_order, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_analytical_reversible_first_o, __pyx_t_1) < 0) __PYX_ERR(1, 864, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":892
 * 		free(B_out)
 * 
 * def py_analytical_consecutive_first_order(double k1, double k2, double A0,             # <<<<<<<<<<<<<<
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A -> B -> C (consecutive first order)"""
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_75py_analytical_consecutive_first_order, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_analytical_consecutive_first, __pyx_t_1) < 0) __PYX_ERR(1, 892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":925
 * 
 * # BATCH 8: Simple utility and optimization functions
 * def py_calculate_objective_function(experimental_data, simulated_data, weights=None):             # <<<<<<<<<<<<<<
 * 	"""Calculate objective function (sum of squared residuals) for optimization"""
 * 	cdef int ndata = len(experimental_data)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_77py_calculate_objective_function, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_calculate_objective_function, __pyx_t_1) < 0) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":944
 * 		free(weight_c)
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):             # <<<<<<<<<<<<<<
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_79py_check_mass_conservation, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_check_mass_conservation, __pyx_t_1) < 0) __PYX_ERR(1, 944, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":974
 * 		free(mass_balance)
 * 
 * def py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15):             # <<<<<<<<<<<<<<
 * 	"""Calculate temperature-dependent rate constants using Arrhenius equation"""
 * 	cdef int M = len(kf_ref)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_81py_calculate_rate_constants, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_calculate_rate_constants, __pyx_t_1) < 0) __PYX_ERR(1, 974, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1011
 * 
 * # BATCH 9: Simple utility and validation functions
 * def py_cross_validation_score(data, parameters, int n_folds=5):             # <<<<<<<<<<<<<<
 * 	"""Calculate cross-validation score for model validation"""
 * 	cdef int n_data = len(data)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_83py_cross_validation_score, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_cross_validation_score, __pyx_t_1) < 0) __PYX_ERR(1, 1011, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1029
 * 		free(params_c)
 * 
 * def py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None):             # <<<<<<<<<<<<<<
 * 	"""Kriging interpolation for spatial data"""
 * 	cdef int n_known = len(x_known)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_85py_kriging_interpolation, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_kriging_interpolation, __pyx_t_1) < 0) __PYX_ERR(1, 1029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1070
 * 		free(var_params_c)
 * 
 * def py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000):             # <<<<<<<<<<<<<<
 * 	"""Bootstrap uncertainty analysis"""
 * 	cdef int n_data = len(data)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_87py_bootstrap_uncertainty, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_bootstrap_uncertainty, __pyx_t_1) < 0) __PYX_ERR(1, 1070, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1106
 * 
 * # BATCH 10: Matrix operations
 * def py_matrix_multiply(A, B):             # <<<<<<<<<<<<<<
 * 	"""Matrix multiplication C = A * B"""
 * 	import numpy as np
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_89py_matrix_multiply, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_matrix_multiply, __pyx_t_1) < 0) __PYX_ERR(1, 1106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1152
 * 		free(C_c)
 * 
 * def py_matrix_invert(A):             # <<<<<<<<<<<<<<
 * 	"""Matrix inversion A_inv = A^(-1)"""
 * 	import numpy as np
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_91py_matrix_invert, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_matrix_invert, __pyx_t_1) < 0) __PYX_ERR(1, 1152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1186
 * 
 * # Simplified version using NumPy
 * def py_solve_linear_system(A, b):             # <<<<<<<<<<<<<<
 * 	"""Solve linear system Ax = b"""
 * 	import numpy as np
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_93py_solve_linear_system, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_solve_linear_system, __pyx_t_1) < 0) __PYX_ERR(1, 1186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1223
 * 
 * # BATCH 11: Advanced optimization and sensitivity analysis
 * def py_calculate_sensitivity(params, concentrations, rates, n_params, n_species):             # <<<<<<<<<<<<<<
 * 	"""Calculate sensitivity matrix for parameter estimation"""
 * 	# Simple implementation matching test interface
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_95py_calculate_sensitivity, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_calculate_sensitivity, __pyx_t_1) < 0) __PYX_ERR(1, 1223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1286
 * 		free(prod_idx); free(prod_nu); free(prod_off)
 * 
 * def py_calculate_jacobian(y, dydt, n_species):             # <<<<<<<<<<<<<<
 * 	"""Calculate Jacobian matrix for parameter estimation"""
 * 	import numpy as np
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_97py_calculate_jacobian, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_calculate_jacobian, __pyx_t_1) < 0) __PYX_ERR(1, 1286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1303
 * 	return jacobian.tolist()
 * 
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):             # <<<<<<<<<<<<<<
 * 	"""Perform stability analysis around steady state"""
 * 	import numpy as np
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_99py_stability_analysis, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_stability_analysis, __pyx_t_1) < 0) __PYX_ERR(1, 1303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1323
 * 	}
 * 
 * def py_mpc_controller(current_state, setpoints, control_bounds, reaction_network, int horizon=10):             # <<<<<<<<<<<<<<
 * 	"""Model Predictive Control implementation"""
 * 	N = len(current_state)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_101py_mpc_controller, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_mpc_controller, __pyx_t_1) < 0) __PYX_ERR(1, 1323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1377
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
 * def py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network):             # <<<<<<<<<<<<<<
 * 	"""Real-time optimization for process economics"""
 * 	N = len(current_concentrations)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_103py_real_time_optimization, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_real_time_optimization, __pyx_t_1) < 0) __PYX_ERR(1, 1377, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1447
 * 
 * # BATCH 12: Advanced reactor simulations
 * def py_simulate_packed_bed(int N, int M, int nseg, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 						   prod_idx, prod_nu, prod_off, conc0, double flow_rate,
 * 						   double bed_length, double bed_porosity, double particle_diameter,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_105py_simulate_packed_bed, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_simulate_packed_bed, __pyx_t_1) < 0) __PYX_ERR(1, 1447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1529
 * 		free(pressure_out)
 * 
 * def py_simulate_fluidized_bed(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 							  prod_idx, prod_nu, prod_off, conc0, double gas_velocity,
 * 							  double bed_height, double bed_porosity, double bubble_fraction,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_107py_simulate_fluidized_bed, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_simulate_fluidized_bed, __pyx_t_1) < 0) __PYX_ERR(1, 1529, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1620
 * 		free(emulsion_conc_out)
 * 
 * def py_simulate_homogeneous_batch(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 								  prod_idx, prod_nu, prod_off, conc0, double volume,
 * 								  double mixing_intensity, double time_span, double dt,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_109py_simulate_homogeneous_batch, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_simulate_homogeneous_batch, __pyx_t_1) < 0) __PYX_ERR(1, 1620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1701
 * 		free(mixing_efficiency_out)
 * 
 * def py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None):             # <<<<<<<<<<<<<<
 * 	"""Simulate multi-reactor system with adaptive control"""
 * 	import numpy as np
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_111py_simulate_multi_reactor_adaptive, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_simulate_multi_reactor_adapti, __pyx_t_1) < 0) __PYX_ERR(1, 1701, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1726
 * 
 * # BATCH 13: Energy analysis and statistical methods
 * def py_calculate_energy_balance(int N, int M, conc, reaction_rates,             # <<<<<<<<<<<<<<
 * 								enthalpies_formation, heat_capacities, double T):
 * 	"""Calculate energy balance using original complex C++ implementation with full parameter exposure"""
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_113py_calculate_energy_balance, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_calculate_energy_balance, __pyx_t_1) < 0) __PYX_ERR(1, 1726, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1769
 * 		free(cp_arr)
 * 
 * def py_monte_carlo_simulation(int N, int M, int nsamples, kf_mean, kr_mean, kf_std, kr_std,             # <<<<<<<<<<<<<<
 * 							  reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off,
 * 							  conc0, double time_span, double dt, int nthreads=1):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_115py_monte_carlo_simulation, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_monte_carlo_simulation, __pyx_t_1) < 0) __PYX_ERR(1, 1769, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1855
 * 		free(statistics_output)
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):             # <<<<<<<<<<<<<<
 * 	"""Calculate residence time distribution for tank series"""
 * 	import numpy as np
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_117py_residence_time_distribution, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_residence_time_distribution, __pyx_t_1) < 0) __PYX_ERR(1, 1855, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1885
 * 
 * # BATCH 14: Final functions
 * def py_catalyst_deactivation_model(initial_activity, deactivation_constant, time, temperature, partial_pressure_poison):             # <<<<<<<<<<<<<<
 * 	"""Model catalyst deactivation over time"""
 * 	import numpy as np
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_119py_catalyst_deactivation_model, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_catalyst_deactivation_model, __pyx_t_1) < 0) __PYX_ERR(1, 1885, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1914
 * 	}
 * 
 * def py_process_scale_up(lab_scale_volume, pilot_scale_volume, lab_conditions):             # <<<<<<<<<<<<<<
 * 	"""Scale up process from lab to pilot scale"""
 * 	import numpy as np
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pyroxa_11_pybindings_121py_process_scale_up, NULL, __pyx_n_s_pyroxa__pybindings); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_process_scale_up, __pyx_t_1) < 0) __PYX_ERR(1, 1914, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * from libc.stdlib cimport malloc, free
 * from cpython.ref cimport PyObject
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../AppData/Local/Temp/pip-build-env-2d2rtdxg/overlay/Lib/site-packages/numpy/__init__.pxd":985
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pyroxa._pybindings", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyroxa._pybindings");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
    float_value = PyNumber_Float(obj);  if ((0)) goto bad;
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* py_abs */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromLong(((PyLongObject*)n)->ob_digit[0]);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double a = floatval;
    double b, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op2))) {
        b = PyFloat_AS_DOUBLE(op2);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        b = (double) PyInt_AS_LONG(op2);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op2))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        switch (size) {
            case  0: b = 0.0; break;
            case -1: b = -(double) digits[0]; break;
            case  1: b = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    b = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            b = PyLong_AsDouble(op2);
            if (unlikely(b == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
    }
        
        PyFPE_START_PROTECT("add", return NULL)
        result = a + b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyFloatBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double a = floatval;
    double b, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op2))) {
        b = PyFloat_AS_DOUBLE(op2);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        b = (double) PyInt_AS_LONG(op2);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op2))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        switch (size) {
            case  0: b = 0.0; break;
            case -1: b = -(double) digits[0]; break;
            case  1: b = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    b = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            b = PyLong_AsDouble(op2);
            if (unlikely(b == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
    }
        
        PyFPE_START_PROTECT("subtract", return NULL)
        result = a - b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* DictGetItem */
    #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyErrExceptionMatches */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObject_GenericGetAttrNoDict */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
    static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
    static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* SetVTable */
    static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* TypeImport */
    #ifndef __PYX_HAVE_RT_ImportType_0_29_37
#define __PYX_HAVE_RT_ImportType_0_29_37
static PyTypeObject *__Pyx_ImportType_0_29_37(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_37 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_0_29_37 && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_0_29_37 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* CLineInTraceback */
    #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      return ::std::complex< long double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      return x + y*(__pyx_t_long_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      __pyx_t_long_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_sum_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_diff_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_prod_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsl(b.real) >= fabsl(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                long double r = b.imag / b.real;
                long double s = (long double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_long_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            long double r = b.real / b.imag;
            long double s = (long double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_long_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            long double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_long_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_neg_long__double(__pyx_t_long_double_complex a) {
        __pyx_t_long_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_long__double(__pyx_t_long_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_conj_long__double(__pyx_t_long_double_complex a) {
        __pyx_t_long_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE long double __Pyx_c_abs_long__double(__pyx_t_long_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtl(z.real*z.real + z.imag*z.imag);
          #else
            return hypotl(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_pow_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
            __pyx_t_long_double_complex z;
            long double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    long double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_long__double(a, a);
                    case 3:
                        z = __Pyx_c_prod_long__double(a, a);
                        return __Pyx_c_prod_long__double(z, a);
                    case 4:
                        z = __Pyx_c_prod_long__double(a, a);
                        return __Pyx_c_prod_long__double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powl(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2l(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_long__double(a);
                theta = atan2l(a.imag, a.real);
            }
            lnr = logl(r);
            z_r = expl(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosl(z_theta);
            z.imag = z_r * sinl(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FastTypeChecks */
    #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
    static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* PyObjectCallMethod1 */
    static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
    #include <structmember.h>
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
    static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
    #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
    static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
