/* Generated by Cython 3.1.3 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "NPY_NO_DEPRECATED_API",
                "NPY_1_7_API_VERSION"
            ]
        ],
        "depends": [
            "C:\\Users\\nikun\\AppData\\Roaming\\Python\\Python313\\site-packages\\numpy\\_core\\include\\numpy\\arrayobject.h",
            "C:\\Users\\nikun\\AppData\\Roaming\\Python\\Python313\\site-packages\\numpy\\_core\\include\\numpy\\arrayscalars.h",
            "C:\\Users\\nikun\\AppData\\Roaming\\Python\\Python313\\site-packages\\numpy\\_core\\include\\numpy\\ndarrayobject.h",
            "C:\\Users\\nikun\\AppData\\Roaming\\Python\\Python313\\site-packages\\numpy\\_core\\include\\numpy\\ndarraytypes.h",
            "C:\\Users\\nikun\\AppData\\Roaming\\Python\\Python313\\site-packages\\numpy\\_core\\include\\numpy\\ufuncobject.h",
            "C:\\Users\\nikun\\OneDrive\\Documents\\Chemical Technology Project\\project\\src\\core.h"
        ],
        "extra_compile_args": [
            "/std:c++17",
            "/bigobj"
        ],
        "include_dirs": [
            "C:\\Users\\nikun\\OneDrive\\Documents\\Chemical Technology Project\\project\\src",
            "C:\\Users\\nikun\\AppData\\Roaming\\Python\\Python313\\site-packages\\numpy\\_core\\include",
            "C:\\Users\\nikun\\OneDrive\\Documents\\Chemical Technology Project\\project\\pyroxa"
        ],
        "language": "c++",
        "name": "pyroxa._pybindings",
        "sources": [
            "pyroxa/pybindings.pyx",
            "src/core.cpp"
        ]
    },
    "module_name": "pyroxa._pybindings"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
/* InitLimitedAPI */
#if defined(Py_LIMITED_API) && !defined(CYTHON_LIMITED_API)
  #define CYTHON_LIMITED_API 1
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x03080000
    #error Cython requires Python 3.8+.
#else
#define __PYX_ABI_VERSION "3_1_3"
#define CYTHON_HEX_VERSION 0x030103F0
#define CYTHON_FUTURE_DIVISION 1
/* CModulePreamble */
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 1
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 1
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PYPY_VERSION_NUM >= 0x07030C00)
  #endif
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_NUM >= 0x07031100)
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND (__PYX_LIMITED_VERSION_HEX >= 0x030A0000)
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #ifdef Py_GIL_DISABLED
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 1
  #else
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #endif
  #if PY_VERSION_HEX < 0x030A0000
    #undef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #elif !defined(CYTHON_USE_TYPE_SLOTS)
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLIST_INTERNALS)
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #elif !defined(CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS)
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL 0
  #elif !defined(CYTHON_FAST_GIL)
    #define CYTHON_FAST_GIL (PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_SYS_MONITORING
    #define CYTHON_USE_SYS_MONITORING (PY_VERSION_HEX >= 0x030d00B1)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5 && !CYTHON_USE_MODULE_STATE)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS (!CYTHON_COMPILING_IN_CPYTHON_FREETHREADING)
  #endif
#endif
#ifndef CYTHON_FAST_PYCCALL
#define CYTHON_FAST_PYCCALL  CYTHON_FAST_PYCALL
#endif
#ifndef CYTHON_VECTORCALL
#if CYTHON_COMPILING_IN_LIMITED_API
#define CYTHON_VECTORCALL  (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
#else
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef CYTHON_LOCK_AND_GIL_DEADLOCK_AVOIDANCE_TIME
  #define CYTHON_LOCK_AND_GIL_DEADLOCK_AVOIDANCE_TIME 100
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON && !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifndef Py_UNREACHABLE
  #define Py_UNREACHABLE()  assert(0); abort()
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

/* CppInitCode */
#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

/* PythonCompatibility */
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#define __Pyx_BUILTIN_MODULE_NAME "builtins"
#define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    #ifndef CO_OPTIMIZED
    static int CO_OPTIMIZED;
    #endif
    #ifndef CO_NEWLOCALS
    static int CO_NEWLOCALS;
    #endif
    #ifndef CO_VARARGS
    static int CO_VARARGS;
    #endif
    #ifndef CO_VARKEYWORDS
    static int CO_VARKEYWORDS;
    #endif
    #ifndef CO_ASYNC_GENERATOR
    static int CO_ASYNC_GENERATOR;
    #endif
    #ifndef CO_GENERATOR
    static int CO_GENERATOR;
    #endif
    #ifndef CO_COROUTINE
    static int CO_COROUTINE;
    #endif
#else
    #ifndef CO_COROUTINE
      #define CO_COROUTINE 0x80
    #endif
    #ifndef CO_ASYNC_GENERATOR
      #define CO_ASYNC_GENERATOR 0x200
    #endif
#endif
static int __Pyx_init_co_variables(void);
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#ifndef METH_FASTCALL
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void (*cfunc)(void)) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x03090000
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_GRAAL
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) _PyFrame_SetLineNumber((frame), (lineno))
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#endif
#if CYTHON_USE_MODULE_STATE
static CYTHON_INLINE void *__Pyx__PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#define __Pyx_PyModule_GetState(o) (__pyx_mstatetype *)__Pyx__PyModule_GetState(o)
#else
#define __Pyx_PyModule_GetState(op) ((void)op,__pyx_mstate_global)
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE((PyObject *) obj), name, func_ctype)
#define __Pyx_PyObject_TryGetSlot(obj, name, func_ctype) __Pyx_PyType_TryGetSlot(Py_TYPE(obj), name, func_ctype)
#define __Pyx_PyObject_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#define __Pyx_PyObject_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype) __Pyx_PyType_GetSlot(type, name, func_ctype)
  #define __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype) (((type)->sub) ? ((type)->sub->name) : NULL)
  #define __Pyx_PyType_TryGetSubSlot(type, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype)
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype)\
    ((__PYX_LIMITED_VERSION_HEX >= 0x030A0000 ||\
     (PyType_GetFlags(type) & Py_TPFLAGS_HEAPTYPE) || __Pyx_get_runtime_version() >= 0x030A0000) ?\
     __Pyx_PyType_GetSlot(type, name, func_ctype) : NULL)
  #define __Pyx_PyType_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSlot(obj, name, func_ctype)
  #define __Pyx_PyType_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSlot(obj, name, func_ctype)
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif !CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
#endif
#define __Pyx_PyObject_GetIterNextFunc(iterator)  __Pyx_PyObject_GetSlot(iterator, tp_iternext, iternextfunc)
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#else
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains)
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
  #elif CYTHON_COMPILING_IN_LIMITED_API || !CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyList_GetItemRef(o, i) (likely((i) >= 0) ? PySequence_GetItem(o, i) : (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
  #else
    #define __Pyx_PyList_GetItemRef(o, i) PySequence_ITEM(o, i)
  #endif
#elif CYTHON_COMPILING_IN_LIMITED_API || !CYTHON_ASSUME_SAFE_MACROS
  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
  #else
    #define __Pyx_PyList_GetItemRef(o, i) __Pyx_XNewRef(PyList_GetItem(o, i))
  #endif
#else
  #define __Pyx_PyList_GetItemRef(o, i) __Pyx_NewRef(PyList_GET_ITEM(o, i))
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyDict_GetItemRef(dict, key, result) PyDict_GetItemRef(dict, key, result)
#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyObject_GetItem(dict, key);
  if (*result == NULL) {
    if (PyErr_ExceptionMatches(PyExc_KeyError)) {
      PyErr_Clear();
      return 0;
    }
    return -1;
  }
  return 1;
}
#else
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyDict_GetItemWithError(dict, key);
  if (*result == NULL) {
    return PyErr_Occurred() ? -1 : 0;
  }
  Py_INCREF(*result);
  return 1;
}
#endif
#if defined(CYTHON_DEBUG_VISIT_CONST) && CYTHON_DEBUG_VISIT_CONST
  #define __Pyx_VISIT_CONST(obj)  Py_VISIT(obj)
#else
  #define __Pyx_VISIT_CONST(obj)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GET_ITEM(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GET_ITEM(o, i)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GetItem(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GetItem(o, i)
#endif
#if CYTHON_ASSUME_SAFE_SIZE
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GET_LENGTH(o)
#else
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GetLength(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_InternFromString)
  #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
#endif
#define __Pyx_PyLong_FromHash_t PyLong_FromSsize_t
#define __Pyx_PyLong_AsHash_t   __Pyx_PyIndex_AsSsize_t
#if __PYX_LIMITED_VERSION_HEX >= 0x030A0000
    #define __Pyx_PySendResult PySendResult
#else
    typedef enum {
        PYGEN_RETURN = 0,
        PYGEN_ERROR = -1,
        PYGEN_NEXT = 1,
    } __Pyx_PySendResult;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX < 0x030A00A3
  typedef __Pyx_PySendResult (*__Pyx_pyiter_sendfunc)(PyObject *iter, PyObject *value, PyObject **result);
#else
  #define __Pyx_pyiter_sendfunc sendfunc
#endif
#if !CYTHON_USE_AM_SEND
#define __PYX_HAS_PY_AM_SEND 0
#elif __PYX_LIMITED_VERSION_HEX >= 0x030A0000
#define __PYX_HAS_PY_AM_SEND 1
#else
#define __PYX_HAS_PY_AM_SEND 2  // our own backported implementation
#endif
#if __PYX_HAS_PY_AM_SEND < 2
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
        __Pyx_pyiter_sendfunc am_send;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_SlotTpAsAsync(s) ((PyAsyncMethods*)(s))
#endif
#if CYTHON_USE_AM_SEND && PY_VERSION_HEX < 0x030A00F0
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (1UL << 21)
#else
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (0)
#endif
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyInterpreterState_Get() PyInterpreterState_Get()
#else
#define __Pyx_PyInterpreterState_Get() PyThreadState_Get()->interp
#endif
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030A0000
#ifdef __cplusplus
extern "C"
#endif
PyAPI_FUNC(void *) PyMem_Calloc(size_t nelem, size_t elsize);
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_init_co_variable(PyObject *inspect, const char* name, int *write_to) {
    int value;
    PyObject *py_value = PyObject_GetAttrString(inspect, name);
    if (!py_value) return 0;
    value = (int) PyLong_AsLong(py_value);
    Py_DECREF(py_value);
    *write_to = value;
    return value != -1 || !PyErr_Occurred();
}
static int __Pyx_init_co_variables(void) {
    PyObject *inspect;
    int result;
    inspect = PyImport_ImportModule("inspect");
    result =
#if !defined(CO_OPTIMIZED)
        __Pyx_init_co_variable(inspect, "CO_OPTIMIZED", &CO_OPTIMIZED) &&
#endif
#if !defined(CO_NEWLOCALS)
        __Pyx_init_co_variable(inspect, "CO_NEWLOCALS", &CO_NEWLOCALS) &&
#endif
#if !defined(CO_VARARGS)
        __Pyx_init_co_variable(inspect, "CO_VARARGS", &CO_VARARGS) &&
#endif
#if !defined(CO_VARKEYWORDS)
        __Pyx_init_co_variable(inspect, "CO_VARKEYWORDS", &CO_VARKEYWORDS) &&
#endif
#if !defined(CO_ASYNC_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_ASYNC_GENERATOR", &CO_ASYNC_GENERATOR) &&
#endif
#if !defined(CO_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_GENERATOR", &CO_GENERATOR) &&
#endif
#if !defined(CO_COROUTINE)
        __Pyx_init_co_variable(inspect, "CO_COROUTINE", &CO_COROUTINE) &&
#endif
        1;
    Py_DECREF(inspect);
    return result ? 0 : -1;
}
#else
static int __Pyx_init_co_variables(void) {
    return 0;  // It's a limited API-only feature
}
#endif

/* MathInitCode */
#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #ifndef _USE_MATH_DEFINES
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#ifndef CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#define CYTHON_CLINE_IN_TRACEBACK_RUNTIME 0
#endif
#ifndef CYTHON_CLINE_IN_TRACEBACK
#define CYTHON_CLINE_IN_TRACEBACK CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#endif
#if CYTHON_CLINE_IN_TRACEBACK
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; __pyx_clineno = __LINE__; (void) __pyx_clineno; }
#else
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; (void) __pyx_clineno; }
#endif
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__pyroxa___pybindings
#define __PYX_HAVE_API__pyroxa___pybindings
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include "core.h"
#include <stdio.h>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AS_STRING(s)
#else
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AsString(s)
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
static CYTHON_INLINE PyObject *__Pyx_NewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_NewRef)
    return Py_NewRef(obj);
#else
    Py_INCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_XNewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_XNewRef)
    return Py_XNewRef(obj);
#else
    Py_XINCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b);
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __Pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AS_DOUBLE(x)
#else
#define __Pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AsDouble(x)
#endif
#define __Pyx_PyFloat_AsFloat(x) ((float) __Pyx_PyFloat_AsDouble(x))
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#elif __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeASCII(c_str, size, NULL)
#else
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
/* PretendToInitialize */
#ifdef __cplusplus
#if __cplusplus > 201103L
#include <type_traits>
#endif
template <typename T>
static void __Pyx_pretend_to_initialize(T* ptr) {
#if __cplusplus > 201103L
    if ((std::is_trivially_default_constructible<T>::value))
#endif
        *ptr = T();
    (void)ptr;
}
#else
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }
#endif


#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * const __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif (defined(_Complex_I) && !defined(_MSC_VER)) || ((defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) && !defined(__STDC_NO_COMPLEX__) && !defined(_MSC_VER))
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char* const __pyx_f[] = {
  "pyroxa/pybindings.pyx",
  "<stringsource>",
  "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd",
  "cpython/type.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __pyx_atomic_int_type int
#define __pyx_nonatomic_int_type int
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__))
    #include <stdatomic.h>
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)))
    #include <atomic>
#endif
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__) &&\
                       ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type atomic_int
    #define __pyx_atomic_ptr_type atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) atomic_fetch_add_explicit(value, 1, memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) atomic_fetch_add_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) atomic_fetch_sub_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) atomic_load(value)
    #define __pyx_atomic_store(value, new_value) atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) atomic_load_explicit(value, memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) atomic_load_explicit(value, memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C atomics"
    #endif
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)) &&\
                    ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type std::atomic_int
    #define __pyx_atomic_ptr_type std::atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) std::atomic_fetch_sub_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) std::atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) std::atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) std::atomic_load(value)
    #define __pyx_atomic_store(value, new_value) std::atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) std::atomic_load_explicit(value, std::memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) std::atomic_load_explicit(value, std::memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) std::atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C++ atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C++ atomics"
    #endif
#elif CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_ptr_type void*
    #define __pyx_atomic_incr_relaxed(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) __sync_fetch_and_sub(value, 1)
    #define __pyx_atomic_sub(value, arg) __sync_fetch_and_sub(value, arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = __sync_val_compare_and_swap(value, *expected, desired);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_store(value, new_value) __sync_lock_test_and_set(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_load_acquire(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) __sync_lock_test_and_set(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER)
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #define __pyx_atomic_ptr_type void*
    #undef __pyx_nonatomic_int_type
    #define __pyx_nonatomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd, _InterlockedExchange, _InterlockedCompareExchange, _InterlockedCompareExchangePointer, _InterlockedExchangePointer)
    #define __pyx_atomic_incr_relaxed(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) _InterlockedExchangeAdd(value, -1)
    #define __pyx_atomic_sub(value, arg) _InterlockedExchangeAdd(value, -arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = _InterlockedCompareExchange(value, desired, *expected);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) _InterlockedExchangeAdd(value, 0)
    #define __pyx_atomic_store(value, new_value) _InterlockedExchange(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) *(void * volatile *)value
    #define __pyx_atomic_pointer_load_acquire(value) _InterlockedCompareExchangePointer(value, 0, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) _InterlockedExchangePointer(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_relaxed(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_acq_rel(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* CriticalSections.proto */
#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __Pyx_PyCriticalSection void*
#define __Pyx_PyCriticalSection2 void*
#define __Pyx_PyCriticalSection_Begin1(cs, arg) (void)cs
#define __Pyx_PyCriticalSection_Begin2(cs, arg1, arg2) (void)cs
#define __Pyx_PyCriticalSection_End1(cs)
#define __Pyx_PyCriticalSection_End2(cs)
#else
#define __Pyx_PyCriticalSection PyCriticalSection
#define __Pyx_PyCriticalSection2 PyCriticalSection2
#define __Pyx_PyCriticalSection_Begin1 PyCriticalSection_Begin
#define __Pyx_PyCriticalSection_Begin2 PyCriticalSection2_Begin
#define __Pyx_PyCriticalSection_End1 PyCriticalSection_End
#define __Pyx_PyCriticalSection_End2 PyCriticalSection2_End
#endif
#if PY_VERSION_HEX < 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_BEGIN_CRITICAL_SECTION(o) {
#define __Pyx_END_CRITICAL_SECTION() }
#else
#define __Pyx_BEGIN_CRITICAL_SECTION Py_BEGIN_CRITICAL_SECTION
#define __Pyx_END_CRITICAL_SECTION Py_END_CRITICAL_SECTION
#endif

/* #### Code section: numeric_typedefs ### */

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":743
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
*/
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":744
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
*/
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":745
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * 
*/
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":746
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_uint8      uint8_t
*/
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":748
 * ctypedef npy_int64      int64_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
*/
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":749
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
*/
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":750
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * 
*/
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":751
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_float32    float32_t
*/
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":753
 * ctypedef npy_uint64     uint64_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
*/
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":754
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
*/
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":761
 * ctypedef double complex complex128_t
 * 
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
*/
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":762
 * 
 * ctypedef npy_longlong   longlong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
*/
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":764
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
*/
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":765
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
*/
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":767
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
*/
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":768
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
*/
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":769
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef float complex       cfloat_t
*/
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< long double > __pyx_t_long_double_complex;
  #else
    typedef long double _Complex __pyx_t_long_double_complex;
  #endif
#else
    typedef struct { long double real, imag; } __pyx_t_long_double_complex;
#endif
static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double, long double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics;
struct __pyx_obj_6pyroxa_11_pybindings_Reaction;
struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti;
struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor;
struct __pyx_obj_6pyroxa_11_pybindings_Reactor;
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr;
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr;
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution;
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr;
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr;
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr;

/* "pyroxa/pybindings.pyx":260
 * 
 * 
 * cdef class Thermodynamics:             # <<<<<<<<<<<<<<
 * 	cdef double cp
 * 
*/
struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics {
  PyObject_HEAD
  double cp;
};


/* "pyroxa/pybindings.pyx":273
 * 
 * 
 * cdef class Reaction:             # <<<<<<<<<<<<<<
 * 	cdef double kf
 * 	cdef double kr
*/
struct __pyx_obj_6pyroxa_11_pybindings_Reaction {
  PyObject_HEAD
  double kf;
  double kr;
};


/* "pyroxa/pybindings.pyx":285
 * 
 * 
 * cdef class ReactionMulti:             # <<<<<<<<<<<<<<
 * 	cdef double kf
 * 	cdef double kr
*/
struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pyroxa_11_pybindings_ReactionMulti *__pyx_vtab;
  double kf;
  double kr;
  PyObject *reactants;
  PyObject *products;
};


/* "pyroxa/pybindings.pyx":318
 * 
 * 
 * cdef class MultiReactor:             # <<<<<<<<<<<<<<
 * 	cdef list species
 * 	cdef list conc
*/
struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor *__pyx_vtab;
  PyObject *species;
  PyObject *conc;
  PyObject *reactions;
  double T;
};


/* "pyroxa/pybindings.pyx":369
 * 
 * 
 * cdef class Reactor:             # <<<<<<<<<<<<<<
 * 	cdef double kf
 * 	cdef double kr
*/
struct __pyx_obj_6pyroxa_11_pybindings_Reactor {
  PyObject_HEAD
  double kf;
  double kr;
  double A0;
  double B0;
  double time_span;
  double dt;
};


/* "pyroxa/pybindings.pyx":969
 * 			'is_conserved': result > 0,
 * 			'mass_balance': mass_balance_list,
 * 			'max_violation': max(abs(x) for x in mass_balance_list)             # <<<<<<<<<<<<<<
 * 		}
 * 	finally:
*/
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr {
  PyObject_HEAD
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_x;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};


/* "pyroxa/pybindings.pyx":1315
 * 		eigenvalues.append(eigenval)
 * 
 * 	is_stable = all(ev < 0 for ev in eigenvalues)             # <<<<<<<<<<<<<<
 * 
 * 	return {
*/
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_ev;
};


/* "pyroxa/pybindings.pyx":1856
 * 		free(statistics_output)
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):             # <<<<<<<<<<<<<<
 * 	"""Calculate residence time distribution for tank series"""
 * 	import numpy as np
*/
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution {
  PyObject_HEAD
  PyObject *__pyx_v_flow_rates;
  PyObject *__pyx_v_volumes;
};


/* "pyroxa/pybindings.pyx":1870
 * 
 * 	# Overall mean residence time
 * 	total_volume = sum(volumes[i] for i in range(n_tanks))             # <<<<<<<<<<<<<<
 * 	total_flow = sum(flow_rates[i] for i in range(n_tanks))
 * 	overall_mean_tau = total_volume / total_flow if total_flow > 0 else 0.0
*/
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *__pyx_outer_scope;
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_i;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "pyroxa/pybindings.pyx":1871
 * 	# Overall mean residence time
 * 	total_volume = sum(volumes[i] for i in range(n_tanks))
 * 	total_flow = sum(flow_rates[i] for i in range(n_tanks))             # <<<<<<<<<<<<<<
 * 	overall_mean_tau = total_volume / total_flow if total_flow > 0 else 0.0
 * 
*/
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *__pyx_outer_scope;
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_i;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "pyroxa/pybindings.pyx":1875
 * 
 * 	# Calculate variance (assuming CSTR in series)
 * 	variance = sum(tau**2 for tau in mean_residence_times)             # <<<<<<<<<<<<<<
 * 
 * 	return {
*/
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr {
  PyObject_HEAD
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_tau;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
};



/* "pyroxa/pybindings.pyx":285
 * 
 * 
 * cdef class ReactionMulti:             # <<<<<<<<<<<<<<
 * 	cdef double kf
 * 	cdef double kr
*/

struct __pyx_vtabstruct_6pyroxa_11_pybindings_ReactionMulti {
  double (*rate)(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pyroxa_11_pybindings_ReactionMulti *__pyx_vtabptr_6pyroxa_11_pybindings_ReactionMulti;


/* "pyroxa/pybindings.pyx":318
 * 
 * 
 * cdef class MultiReactor:             # <<<<<<<<<<<<<<
 * 	cdef list species
 * 	cdef list conc
*/

struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor {
  PyObject *(*_dcdt)(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor *__pyx_vtabptr_6pyroxa_11_pybindings_MultiReactor;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
#endif
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_PySequence_ITEM(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_NewRef(__Pyx_PyTuple_GET_ITEM(args, i))
#else
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_XNewRef(PyTuple_GetItem(args, i))
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_ArgRef_FASTCALL(args, i) __Pyx_NewRef(args[i])
    #define __Pyx_NumKwargs_FASTCALL(kwds) __Pyx_PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
#else
    #define __Pyx_ArgRef_FASTCALL __Pyx_ArgRef_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#if CYTHON_METH_FASTCALL || (CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(args + start, stop - start)
#else
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static CYTHON_INLINE int __Pyx_ParseKeywords(
    PyObject *kwds, PyObject *const *kwvalues, PyObject ** const argnames[],
    PyObject *kwds2, PyObject *values[],
    Py_ssize_t num_pos_args, Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs
);

/* CallCFunction.proto */
#define __Pyx_CallCFunction(cfunc, self, args)\
    ((PyCFunction)(void(*)(void))(cfunc)->func)(self, args)
#define __Pyx_CallCFunctionWithKeywords(cfunc, self, args, kwargs)\
    ((PyCFunctionWithKeywords)(void(*)(void))(cfunc)->func)(self, args, kwargs)
#define __Pyx_CallCFunctionFast(cfunc, self, args, nargs)\
    ((__Pyx_PyCFunctionFast)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs)
#define __Pyx_CallCFunctionFastWithKeywords(cfunc, self, args, nargs, kwnames)\
    ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs, kwnames)

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS
    __pyx_atomic_int_type initialized;
#endif
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
static CYTHON_INLINE int __Pyx_CachedCFunction_GetAndSetInitializing(__Pyx_CachedCFunction *cfunc) {
#if !CYTHON_ATOMICS
    return 1;
#else
    __pyx_nonatomic_int_type expected = 0;
    if (__pyx_atomic_int_cmp_exchange(&cfunc->initialized, &expected, 1)) {
        return 0;
    }
    return expected;
#endif
}
static CYTHON_INLINE void __Pyx_CachedCFunction_SetFinishedInitializing(__Pyx_CachedCFunction *cfunc) {
#if CYTHON_ATOMICS
    __pyx_atomic_store(&cfunc->initialized, 2);
#endif
}
#else
#define __Pyx_CachedCFunction_GetAndSetInitializing(cfunc) 2
#define __Pyx_CachedCFunction_SetFinishedInitializing(cfunc)
#endif

/* CallUnboundCMethod2.proto */
CYTHON_UNUSED
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RejectKeywords.proto */
static void __Pyx_RejectKeywords(const char* function_name, PyObject *kwds);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
static CYTHON_INLINE int __Pyx_unpack_tuple2(
    PyObject* tuple, PyObject** value1, PyObject** value2, int is_tuple, int has_known_size, int decref_tuple);
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* pybytes_as_double.proto */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj);
static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length);
static CYTHON_INLINE double __Pyx_PyBytes_AsDouble(PyObject *obj) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE
    as_c_string = PyBytes_AS_STRING(obj);
    size = PyBytes_GET_SIZE(obj);
#else
    if (PyBytes_AsStringAndSize(obj, &as_c_string, &size) < 0) {
        return (double)-1;
    }
#endif
    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);
}
static CYTHON_INLINE double __Pyx_PyByteArray_AsDouble(PyObject *obj) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE
    as_c_string = PyByteArray_AS_STRING(obj);
    size = PyByteArray_GET_SIZE(obj);
#else
    as_c_string = PyByteArray_AsString(obj);
    if (as_c_string == NULL) {
        return (double)-1;
    }
    size = PyByteArray_Size(obj);
#endif
    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);
}

/* pyunicode_as_double.proto */
#if !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS
static const char* __Pyx__PyUnicode_AsDouble_Copy(const void* data, const int kind, char* buffer, Py_ssize_t start, Py_ssize_t end) {
    int last_was_punctuation;
    Py_ssize_t i;
    last_was_punctuation = 1;
    for (i=start; i <= end; i++) {
        Py_UCS4 chr = PyUnicode_READ(kind, data, i);
        int is_punctuation = (chr == '_') | (chr == '.');
        *buffer = (char)chr;
        buffer += (chr != '_');
        if (unlikely(chr > 127)) goto parse_failure;
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyUnicode_AsDouble_inf_nan(const void* data, int kind, Py_ssize_t start, Py_ssize_t length) {
    int matches = 1;
    Py_UCS4 chr;
    Py_UCS4 sign = PyUnicode_READ(kind, data, start);
    int is_signed = (sign == '-') | (sign == '+');
    start += is_signed;
    length -= is_signed;
    switch (PyUnicode_READ(kind, data, start)) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'a') | (chr == 'A');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'n') | (chr == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'f') | (chr == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+3);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+4);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+5);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+6);
            matches &= (chr == 't') | (chr == 'T');
            chr = PyUnicode_READ(kind, data, start+7);
            matches &= (chr == 'y') | (chr == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static double __Pyx_PyUnicode_AsDouble_WithSpaces(PyObject *obj) {
    double value;
    const char *last;
    char *end;
    Py_ssize_t start, length = PyUnicode_GET_LENGTH(obj);
    const int kind = PyUnicode_KIND(obj);
    const void* data = PyUnicode_DATA(obj);
    start = 0;
    while (Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, start)))
        start++;
    while (start < length - 1 && Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, length - 1)))
        length--;
    length -= start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyUnicode_AsDouble_inf_nan(data, kind, start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    if (length < 40) {
        char number[40];
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((length + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}
#endif
static CYTHON_INLINE double __Pyx_PyUnicode_AsDouble(PyObject *obj) {
#if !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS
    if (unlikely(__Pyx_PyUnicode_READY(obj) == -1))
        return (double)-1;
    if (likely(PyUnicode_IS_ASCII(obj))) {
        const char *s;
        Py_ssize_t length;
        s = PyUnicode_AsUTF8AndSize(obj, &length);
        return __Pyx__PyBytes_AsDouble(obj, s, length);
    }
    return __Pyx_PyUnicode_AsDouble_WithSpaces(obj);
#else
    return __Pyx_SlowPyString_AsDouble(obj);
#endif
}

/* pynumber_float.proto */
static CYTHON_INLINE PyObject* __Pyx__PyNumber_Float(PyObject* obj);
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : __Pyx__PyNumber_Float(x))

/* PyObjectFastCallMethod.proto */
#if CYTHON_VECTORCALL && PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyObject_FastCallMethod(name, args, nargsf) PyObject_VectorcallMethod(name, args, nargsf, NULL)
#else
static PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf);
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_mstate_global->__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectVectorCallKwBuilder.proto */
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#if CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_Object_Vectorcall_CallFromBuilder PyObject_Vectorcall
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder _PyObject_Vectorcall
#endif
#define __Pyx_MakeVectorcallBuilderKwds(n) PyTuple_New(n)
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder __Pyx_PyObject_FastCallDict
#define __Pyx_MakeVectorcallBuilderKwds(n) __Pyx_PyDict_NewPresized(n)
#define __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n) PyDict_SetItem(builder, key, value)
#define __Pyx_VectorcallBuilder_AddArgStr(key, value, builder, args, n) PyDict_SetItemString(builder, key, value)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyLong_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?  __Pyx_PyFloat_AS_DOUBLE(obj) :\
 likely(PyLong_CheckExact(obj)) ?\
 PyLong_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);

/* RaiseUnboundLocalError.proto */
static void __Pyx_RaiseUnboundLocalError(const char *varname);

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(__Pyx_PyLong_IsNonNeg(x)) ? __Pyx_NewRef(x) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* pep479.proto */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen);

/* PyLongCompare.proto */
static CYTHON_INLINE int __Pyx_PyLong_BoolNeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyLongBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static CYTHON_INLINE PyObject* __Pyx_PyLong_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyLong_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyLongBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static CYTHON_INLINE PyObject* __Pyx_PyLong_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyLong_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyLongBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static CYTHON_INLINE PyObject* __Pyx_PyLong_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyLong_MultiplyCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceMultiply(op1, op2) : PyNumber_Multiply(op1, op2))
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_AddCObj(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyLongBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static CYTHON_INLINE PyObject* __Pyx_PyLong_MultiplyObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyLong_MultiplyObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceMultiply(op1, op2) : PyNumber_Multiply(op1, op2))
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_SubtractCObj(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* RaiseClosureNameError.proto */
static void __Pyx_RaiseClosureNameError(const char *varname);

/* PyLongBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static CYTHON_INLINE PyObject* __Pyx_PyLong_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyLong_AddCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* DictGetItem.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* CallTypeTraverse.proto */
#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)
#define __Pyx_call_type_traverse(o, always_call, visit, arg) 0
#else
static int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg);
#endif

/* LimitedApiGetTypeDict.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_GetTypeDict(PyTypeObject *tp);
#endif

/* SetItemOnTypeDict.proto */
static int __Pyx__SetItemOnTypeDict(PyTypeObject *tp, PyObject *k, PyObject *v);
#define __Pyx_SetItemOnTypeDict(tp, k, v) __Pyx__SetItemOnTypeDict((PyTypeObject*)tp, k, v)

/* FixUpExtensionType.proto */
static CYTHON_INLINE int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* DelItemOnTypeDict.proto */
static int __Pyx__DelItemOnTypeDict(PyTypeObject *tp, PyObject *k);
#define __Pyx_DelItemOnTypeDict(tp, k) __Pyx__DelItemOnTypeDict((PyTypeObject*)tp, k)

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
static int __Pyx_MergeVtables(PyTypeObject *type);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_1_3
#define __PYX_HAVE_RT_ImportType_proto_3_1_3
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_1_3(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_1_3(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_1_3 {
   __Pyx_ImportType_CheckSize_Error_3_1_3 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_1_3 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_1_3 = 2
};
static PyTypeObject *__Pyx_ImportType_3_1_3(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_1_3 check_size);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* dict_setdefault.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases);

/* CommonTypesMetaclass.proto */
static int __pyx_CommonTypesMetaclass_init(PyObject *module);
#define __Pyx_CommonTypesMetaclass_USED

/* PyMethodNew.proto */
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ);

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL ||\
        (CYTHON_COMPILING_IN_LIMITED_API && CYTHON_METH_FASTCALL)
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    PyObject *defaults;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_mstate_global->__pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_mstate_global->__pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_mstate_global->__pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void));
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func,
                                                         PyTypeObject *defaults_type);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#else
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#endif

/* CodeObjectCache.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject __Pyx_CachedCodeObjectType;
#else
typedef PyCodeObject __Pyx_CachedCodeObjectType;
#endif
typedef struct {
    __Pyx_CachedCodeObjectType* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_int_type accessor_count;
  #endif
};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_long__double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_long__double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_long__double(a, b) ((a)-(b))
    #define __Pyx_c_prod_long__double(a, b) ((a)*(b))
    #define __Pyx_c_quot_long__double(a, b) ((a)/(b))
    #define __Pyx_c_neg_long__double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_long__double(z) ((z)==(long double)0)
    #define __Pyx_c_conj_long__double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_long__double(z)     (::std::abs(z))
        #define __Pyx_c_pow_long__double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_long__double(z) ((z)==0)
    #define __Pyx_c_conj_long__double(z)    (conjl(z))
    #if 1
        #define __Pyx_c_abs_long__double(z)     (cabsl(z))
        #define __Pyx_c_pow_long__double(a, b)  (cpowl(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_sum_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_diff_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_prod_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_neg_long__double(__pyx_t_long_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_long__double(__pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_conj_long__double(__pyx_t_long_double_complex);
    #if 1
        static CYTHON_INLINE long double __Pyx_c_abs_long__double(__pyx_t_long_double_complex);
        static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_pow_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyLong_As_size_t(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyType_GetFullyQualifiedName PyType_GetFullyQualifiedName
#else
static __Pyx_TypeName __Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp);
#endif
#else  // !LIMITED_API
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetFullyQualifiedName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2) {
    return PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2);
}
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#ifdef PyExceptionInstance_Check
  #define __Pyx_PyBaseException_Check(obj) PyExceptionInstance_Check(obj)
#else
  #define __Pyx_PyBaseException_Check(obj) __Pyx_TypeCheck(obj, PyExc_BaseException)
#endif

/* IterNextPlain.proto */
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next_Plain(PyObject *iterator);
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
static PyObject *__Pyx_GetBuiltinNext_LimitedAPI(void);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* ReturnWithStopIteration.proto */
static CYTHON_INLINE void __Pyx_ReturnWithStopIteration(PyObject* value, int async, int iternext);

/* CoroutineBase.proto */
struct __pyx_CoroutineObject;
typedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct __pyx_CoroutineObject {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    __Pyx_pyiter_sendfunc yieldfrom_am_send;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
#if CYTHON_USE_SYS_MONITORING && (CYTHON_PROFILE || CYTHON_TRACE)
    PyMonitoringState __pyx_pymonitoring_state[__Pyx_MonitoringEventTypes_CyGen_count];
    uint64_t __pyx_pymonitoring_version;
#endif
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static __Pyx_PySendResult __Pyx_Coroutine_AmSend(PyObject *self, PyObject *value, PyObject **retval);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static __Pyx_PySendResult __Pyx_Coroutine_Close(PyObject *self, PyObject **retval);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);
static char __Pyx_Coroutine_test_and_set_is_running(__pyx_CoroutineObject *gen);
static void __Pyx_Coroutine_unset_is_running(__pyx_CoroutineObject *gen);
static char __Pyx_Coroutine_get_is_running(__pyx_CoroutineObject *gen);
static PyObject *__Pyx_Coroutine_get_is_running_getter(PyObject *gen, void *closure);
#if __PYX_HAS_PY_AM_SEND == 2
static void __Pyx_SetBackportTypeAmSend(PyTypeObject *type, __Pyx_PyAsyncMethodsStruct *static_amsend_methods, __Pyx_pyiter_sendfunc am_send);
#endif
static PyObject *__Pyx_Coroutine_fail_reduce_ex(PyObject *self, PyObject *arg);

/* Generator.proto */
#define __Pyx_Generator_USED
#define __Pyx_Generator_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_mstate_global->__pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_mstate_global->__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(PyObject *module);
static CYTHON_INLINE PyObject *__Pyx_Generator_GetInlinedResult(PyObject *self);

/* GetRuntimeVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* MultiPhaseInitModuleState.proto */
#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE
static PyObject *__Pyx_State_FindModule(void*);
static int __Pyx_State_AddModule(PyObject* module, void*);
static int __Pyx_State_RemoveModule(void*);
#elif CYTHON_USE_MODULE_STATE
#define __Pyx_State_FindModule PyState_FindModule
#define __Pyx_State_AddModule PyState_AddModule
#define __Pyx_State_RemoveModule PyState_RemoveModule
#endif

/* #### Code section: module_declarations ### */
/* CythonABIVersion.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
    #if CYTHON_METH_FASTCALL
        #define __PYX_FASTCALL_ABI_SUFFIX  "_fastcall"
    #else
        #define __PYX_FASTCALL_ABI_SUFFIX
    #endif
    #define __PYX_LIMITED_ABI_SUFFIX "limited" __PYX_FASTCALL_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#else
    #define __PYX_LIMITED_ABI_SUFFIX
#endif
#if __PYX_HAS_PY_AM_SEND == 1
    #define __PYX_AM_SEND_ABI_SUFFIX
#elif __PYX_HAS_PY_AM_SEND == 2
    #define __PYX_AM_SEND_ABI_SUFFIX "amsendbackport"
#else
    #define __PYX_AM_SEND_ABI_SUFFIX "noamsend"
#endif
#ifndef __PYX_MONITORING_ABI_SUFFIX
    #define __PYX_MONITORING_ABI_SUFFIX
#endif
#if CYTHON_USE_TP_FINALIZE
    #define __PYX_TP_FINALIZE_ABI_SUFFIX
#else
    #define __PYX_TP_FINALIZE_ABI_SUFFIX "nofinalize"
#endif
#if CYTHON_USE_FREELISTS || !defined(__Pyx_AsyncGen_USED)
    #define __PYX_FREELISTS_ABI_SUFFIX
#else
    #define __PYX_FREELISTS_ABI_SUFFIX "nofreelists"
#endif
#define CYTHON_ABI  __PYX_ABI_VERSION __PYX_LIMITED_ABI_SUFFIX __PYX_MONITORING_ABI_SUFFIX __PYX_TP_FINALIZE_ABI_SUFFIX __PYX_FREELISTS_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."

static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_8itemsize_itemsize(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_9alignment_alignment(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_6fields_fields(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_5names_names(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_ArrayDescr *__pyx_f_5numpy_5dtype_8subarray_subarray(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_uint64 __pyx_f_5numpy_5dtype_5flags_flags(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_7numiter_numiter(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_4size_size(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_5index_index(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_2nd_nd(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_9broadcast_10dimensions_dimensions(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE void **__pyx_f_5numpy_9broadcast_5iters_iters(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/
static double __pyx_f_6pyroxa_11_pybindings_13ReactionMulti_rate(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, PyObject *__pyx_v_conc, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6pyroxa_11_pybindings_12MultiReactor__dcdt(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, PyObject *__pyx_v_conc, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdlib" */

/* Module declarations from "cython" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "cpython" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "numpy" */

/* Module declarations from "numpy" */

/* Module declarations from "pyroxa._pybindings" */
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "pyroxa._pybindings"
extern int __pyx_module_is_main_pyroxa___pybindings;
int __pyx_module_is_main_pyroxa___pybindings = 0;

/* Implementation of "pyroxa._pybindings" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_round;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_ImportError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "?";
static const char __pyx_k_1[] = "\2301";
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_M[] = "M";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_P[] = "P";
static const char __pyx_k_Q[] = "\200\001\330\004\n\210+\220Q";
static const char __pyx_k_R[] = "R";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_V[] = "V";
static const char __pyx_k_a[] = "\320\000\\\320\\]\340\001\010\210\016\220a\320\027(\320(;\270=\310\001";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_d[] = "\200\001\340\001\010\320\010!\240\021\240$\240d\250!";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_4q[] = "\200\001\340\001\010\210\n\220!\2204\220q";
static const char __pyx_k_A0[] = "A0";
static const char __pyx_k_B0[] = "B0";
static const char __pyx_k_Ea[] = "Ea";
static const char __pyx_k_IQ[] = "\200\001\340\001\010\320\010\031\230\021\230*\240I\250Q";
static const char __pyx_k_Kd[] = "Kd";
static const char __pyx_k_Ki[] = "Ki";
static const char __pyx_k_Km[] = "Km";
static const char __pyx_k_Kp[] = "Kp";
static const char __pyx_k_Pc[] = "Pc";
static const char __pyx_k_Pr[] = "Pr";
static const char __pyx_k_Re[] = "Re";
static const char __pyx_k_Sc[] = "Sc";
static const char __pyx_k_Tc[] = "Tc";
static const char __pyx_k_cp[] = "cp";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_ev[] = "ev";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_k1[] = "k1";
static const char __pyx_k_k2[] = "k2";
static const char __pyx_k_k3[] = "k3";
static const char __pyx_k_k4[] = "k4";
static const char __pyx_k_kf[] = "kf";
static const char __pyx_k_kr[] = "kr";
static const char __pyx_k_mK[] = "\200\001\360\006\000\002\t\320\010\032\230!\230?\320*>\270m\320K\\\320\\]";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_nu[] = "nu";
static const char __pyx_k_y0[] = "y0";
static const char __pyx_k_y1[] = "y1";
static const char __pyx_k_y2[] = "y2";
static const char __pyx_k_y3[] = "y3";
static const char __pyx_k_1_2[] = "\2201";
static const char __pyx_k_4uA[] = "\200\021\330\002\t\210\031\220!\2204\220u\230A";
static const char __pyx_k_AYa[] = "\200\001\340\001\010\320\010\034\230A\230Y\240a";
static const char __pyx_k_A_2[] = "\220A";
static const char __pyx_k_A_3[] = "\230A";
static const char __pyx_k_A_c[] = "A_c";
static const char __pyx_k_B_c[] = "B_c";
static const char __pyx_k_C_c[] = "C_c";
static const char __pyx_k_K_A[] = "K_A";
static const char __pyx_k_K_B[] = "K_B";
static const char __pyx_k_QfD[] = "\200\001\340\001\010\320\010\035\230Q\230f\240D\250\001";
static const char __pyx_k_a_2[] = "\200\001\340\001\010\210\t\220\021\220$\220a";
static const char __pyx_k_b_c[] = "b_c";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_run[] = "run";
static const char __pyx_k_rxn[] = "rxn";
static const char __pyx_k_sim[] = "sim";
static const char __pyx_k_std[] = "std";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_tau[] = "tau";
static const char __pyx_k_x_c[] = "x_c";
static const char __pyx_k_1D_Q[] = "\200\021\330\002\t\210\032\2201\220D\230\005\230Q";
static const char __pyx_k_Aout[] = "Aout";
static const char __pyx_k_Bout[] = "Bout";
static const char __pyx_k_Ea_f[] = "Ea_f";
static const char __pyx_k_Ea_r[] = "Ea_r";
static const char __pyx_k_U_xq[] = "\200\001\340\001\010\320\010!\240\021\240#\240U\250%\250x\260q";
static const char __pyx_k_Vmax[] = "Vmax";
static const char __pyx_k_aarr[] = "aarr";
static const char __pyx_k_carr[] = "carr";
static const char __pyx_k_conc[] = "conc";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dcdt[] = "_dcdt";
static const char __pyx_k_dydt[] = "dydt";
static const char __pyx_k_func[] = "__func__";
static const char __pyx_k_kf_c[] = "kf_c";
static const char __pyx_k_kr_c[] = "kr_c";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_next[] = "next";
static const char __pyx_k_npts[] = "npts";
static const char __pyx_k_nseg[] = "nseg";
static const char __pyx_k_rate[] = "rate";
static const char __pyx_k_rxns[] = "rxns";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_spec[] = "spec";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_tarr[] = "tarr";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_traj[] = "traj";
static const char __pyx_k_1F_Na[] = "\200\001\360\006\000\002\t\320\010#\2401\240F\250$\320.>\320>N\310a";
static const char __pyx_k_A_inv[] = "A_inv";
static const char __pyx_k_A_out[] = "A_out";
static const char __pyx_k_B_out[] = "B_out";
static const char __pyx_k_C_out[] = "C_out";
static const char __pyx_k_Q_j_A[] = "\200\001\360\006\000\002\t\320\010\035\230Q\320\036.\250j\270\014\300A";
static const char __pyx_k_T_ref[] = "T_ref";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_conc0[] = "conc0";
static const char __pyx_k_concs[] = "concs";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_exp_c[] = "exp_c";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_ndata[] = "ndata";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_omega[] = "omega";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_rates[] = "rates";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_sim_c[] = "sim_c";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_times[] = "times";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_x_new[] = "x_new";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_1Jiq_1[] = "\200\001\360\006\000\002\t\320\010\033\2301\230J\240i\250q\330\n\035\230^\2501";
static const char __pyx_k_8_3c_A[] = "\320\0008\270\001\340\001\010\320\010\032\230!\2303\230c\240\023\240A";
static const char __pyx_k_AS_4t1[] = "\200\001\340\001\010\320\010\034\230A\230S\240\003\2404\240t\2501";
static const char __pyx_k_A_list[] = "A_list";
static const char __pyx_k_B_list[] = "B_list";
static const char __pyx_k_C_list[] = "C_list";
static const char __pyx_k_Ea_f_c[] = "Ea_f_c";
static const char __pyx_k_Ea_r_c[] = "Ea_r_c";
static const char __pyx_k_as_S_D[] = "\200\001\340\001\010\320\010\036\230a\230s\240#\240S\250\004\250D\260\001";
static const char __pyx_k_bounds[] = "bounds";
static const char __pyx_k_coeffs[] = "coeffs";
static const char __pyx_k_conc_A[] = "conc_A";
static const char __pyx_k_conc_B[] = "conc_B";
static const char __pyx_k_conc_t[] = "conc_t";
static const char __pyx_k_cp_arr[] = "cp_arr";
static const char __pyx_k_ctypes[] = "ctypes";
static const char __pyx_k_data_c[] = "data_c";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_kf_arr[] = "kf_arr";
static const char __pyx_k_kf_out[] = "kf_out";
static const char __pyx_k_kf_ptr[] = "kf_ptr";
static const char __pyx_k_kf_ref[] = "kf_ref";
static const char __pyx_k_kf_std[] = "kf_std";
static const char __pyx_k_kr_arr[] = "kr_arr";
static const char __pyx_k_kr_out[] = "kr_out";
static const char __pyx_k_kr_ptr[] = "kr_ptr";
static const char __pyx_k_kr_ref[] = "kr_ref";
static const char __pyx_k_kr_std[] = "kr_std";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_n_data[] = "n_data";
static const char __pyx_k_nsteps[] = "nsteps";
static const char __pyx_k_params[] = "params";
static const char __pyx_k_pred_c[] = "pred_c";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_setpts[] = "setpts";
static const char __pyx_k_spec_2[] = "__spec__";
static const char __pyx_k_tolist[] = "tolist";
static const char __pyx_k_volume[] = "volume";
static const char __pyx_k_x_data[] = "x_data";
static const char __pyx_k_y_data[] = "y_data";
static const char __pyx_k_5Q_as_c[] = "\320\0005\260Q\340\001\010\210\016\220a\220s\230$\230c\240\021";
static const char __pyx_k_A_inv_c[] = "A_inv_c";
static const char __pyx_k_Reactor[] = "Reactor";
static const char __pyx_k_T_2Rt4r[] = "\200\021\330\002\t\210\024\210T\220\022\2202\220R\220t\2304\230r\240\021";
static const char __pyx_k_c_conc0[] = "c_conc0";
static const char __pyx_k_delta_G[] = "delta_G";
static const char __pyx_k_density[] = "density";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_entropy[] = "entropy";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_horizon[] = "horizon";
static const char __pyx_k_initial[] = "initial";
static const char __pyx_k_kf_mean[] = "kf_mean";
static const char __pyx_k_kr_mean[] = "kr_mean";
static const char __pyx_k_max_len[] = "max_len";
static const char __pyx_k_n_folds[] = "n_folds";
static const char __pyx_k_n_known[] = "n_known";
static const char __pyx_k_n_tanks[] = "n_tanks";
static const char __pyx_k_nparams[] = "nparams";
static const char __pyx_k_npoints[] = "npoints";
static const char __pyx_k_prod_nu[] = "prod_nu";
static const char __pyx_k_reac_nu[] = "reac_nu";
static const char __pyx_k_reactor[] = "reactor";
static const char __pyx_k_species[] = "species";
static const char __pyx_k_success[] = "success";
static const char __pyx_k_volumes[] = "volumes";
static const char __pyx_k_weights[] = "weights";
static const char __pyx_k_written[] = "written";
static const char __pyx_k_x_known[] = "x_known";
static const char __pyx_k_x_new_c[] = "x_new_c";
static const char __pyx_k_y_known[] = "y_known";
static const char __pyx_k_Reaction[] = "Reaction";
static const char __pyx_k_add_note[] = "add_note";
static const char __pyx_k_bubble_t[] = "bubble_t";
static const char __pyx_k_c_coeffs[] = "c_coeffs";
static const char __pyx_k_conc0_py[] = "conc0_py";
static const char __pyx_k_conc_arr[] = "conc_arr";
static const char __pyx_k_eigenval[] = "eigenval";
static const char __pyx_k_enthalpy[] = "enthalpy";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_jacobian[] = "jacobian";
static const char __pyx_k_kf_out_c[] = "kf_out_c";
static const char __pyx_k_kf_ref_c[] = "kf_ref_c";
static const char __pyx_k_kr_out_c[] = "kr_out_c";
static const char __pyx_k_kr_ref_c[] = "kr_ref_c";
static const char __pyx_k_max_list[] = "max_list";
static const char __pyx_k_min_list[] = "min_list";
static const char __pyx_k_n_params[] = "n_params";
static const char __pyx_k_n_points[] = "n_points";
static const char __pyx_k_nsamples[] = "nsamples";
static const char __pyx_k_nthreads[] = "nthreads";
static const char __pyx_k_params_c[] = "params_c";
static const char __pyx_k_porosity[] = "porosity";
static const char __pyx_k_pressure[] = "pressure";
static const char __pyx_k_prod_idx[] = "prod_idx";
static const char __pyx_k_prod_off[] = "prod_off";
static const char __pyx_k_products[] = "products";
static const char __pyx_k_py_times[] = "py_times";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_reac_idx[] = "reac_idx";
static const char __pyx_k_reac_off[] = "reac_off";
static const char __pyx_k_reaction[] = "reaction";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_setpoint[] = "setpoint";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_std_list[] = "std_list";
static const char __pyx_k_times_py[] = "times_py";
static const char __pyx_k_variance[] = "variance";
static const char __pyx_k_velocity[] = "velocity";
static const char __pyx_k_weight_c[] = "weight_c";
static const char __pyx_k_x_data_c[] = "x_data_c";
static const char __pyx_k_y_data_c[] = "y_data_c";
static const char __pyx_k_HAS_NUMPY[] = "_HAS_NUMPY";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_c_prod_nu[] = "c_prod_nu";
static const char __pyx_k_c_reac_nu[] = "c_reac_nu";
static const char __pyx_k_conc0_arr[] = "conc0_arr";
static const char __pyx_k_conc_traj[] = "conc_traj";
static const char __pyx_k_flow_rate[] = "flow_rate";
static const char __pyx_k_is_stable[] = "is_stable";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_mean_list[] = "mean_list";
static const char __pyx_k_n_samples[] = "n_samples";
static const char __pyx_k_n_species[] = "n_species";
static const char __pyx_k_predicted[] = "predicted";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_rates_arr[] = "rates_arr";
static const char __pyx_k_reactants[] = "reactants";
static const char __pyx_k_reactions[] = "reactions";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_setpoints[] = "setpoints";
static const char __pyx_k_time_span[] = "time_span";
static const char __pyx_k_time_step[] = "time_step";
static const char __pyx_k_times_buf[] = "times_buf";
static const char __pyx_k_times_out[] = "times_out";
static const char __pyx_k_tolerance[] = "tolerance";
static const char __pyx_k_viscosity[] = "viscosity";
static const char __pyx_k_x_known_c[] = "x_known_c";
static const char __pyx_k_y_known_c[] = "y_known_c";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_area_scale[] = "area_scale";
static const char __pyx_k_bed_height[] = "bed_height";
static const char __pyx_k_bed_length[] = "bed_length";
static const char __pyx_k_c_prod_idx[] = "c_prod_idx";
static const char __pyx_k_c_prod_off[] = "c_prod_off";
static const char __pyx_k_c_reac_idx[] = "c_reac_idx";
static const char __pyx_k_c_reac_off[] = "c_reac_off";
static const char __pyx_k_conversion[] = "conversion";
static const char __pyx_k_emulsion_t[] = "emulsion_t";
static const char __pyx_k_flow_rates[] = "flow_rates";
static const char __pyx_k_kf_std_arr[] = "kf_std_arr";
static const char __pyx_k_kr_std_arr[] = "kr_std_arr";
static const char __pyx_k_n_controls[] = "n_controls";
static const char __pyx_k_n_reactors[] = "n_reactors";
static const char __pyx_k_parameters[] = "parameters";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_reactor_id[] = "reactor_id";
static const char __pyx_k_statistics[] = "statistics";
static const char __pyx_k_times_list[] = "times_list";
static const char __pyx_k_tortuosity[] = "tortuosity";
static const char __pyx_k_total_flow[] = "total_flow";
static const char __pyx_k_total_prod[] = "total_prod";
static const char __pyx_k_total_reac[] = "total_reac";
static const char __pyx_k_x_new_list[] = "x_new_list";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_Reactor_run[] = "Reactor.run";
static const char __pyx_k_conc_matrix[] = "conc_matrix";
static const char __pyx_k_convergence[] = "convergence";
static const char __pyx_k_econ_coeffs[] = "econ_coeffs";
static const char __pyx_k_eigenvalues[] = "eigenvalues";
static const char __pyx_k_kf_mean_arr[] = "kf_mean_arr";
static const char __pyx_k_kr_mean_arr[] = "kr_mean_arr";
static const char __pyx_k_mixing_time[] = "mixing_time";
static const char __pyx_k_n_bootstrap[] = "n_bootstrap";
static const char __pyx_k_n_reactions[] = "n_reactions";
static const char __pyx_k_path_length[] = "path_length";
static const char __pyx_k_power_scale[] = "power_scale";
static const char __pyx_k_prod_nu_arr[] = "prod_nu_arr";
static const char __pyx_k_reac_nu_arr[] = "reac_nu_arr";
static const char __pyx_k_temp_factor[] = "temp_factor";
static const char __pyx_k_temperature[] = "temperature";
static const char __pyx_k_MultiReactor[] = "MultiReactor";
static const char __pyx_k_Q_a_az_34t4q[] = "\200\001\360\006\000\002\036\230Q\330\001\036\230a\330\001\010\210\016\220a\220z\320!3\2604\260t\2704\270q\330\010\t\210\037\230\001\230\021";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_bed_porosity[] = "bed_porosity";
static const char __pyx_k_distribution[] = "distribution";
static const char __pyx_k_effective_kd[] = "effective_kd";
static const char __pyx_k_experimental[] = "experimental";
static const char __pyx_k_gas_constant[] = "gas_constant";
static const char __pyx_k_gas_velocity[] = "gas_velocity";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_conserved[] = "is_conserved";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_length_scale[] = "length_scale";
static const char __pyx_k_mass_balance[] = "mass_balance";
static const char __pyx_k_pressure_out[] = "pressure_out";
static const char __pyx_k_prod_idx_arr[] = "prod_idx_arr";
static const char __pyx_k_prod_nu_list[] = "prod_nu_list";
static const char __pyx_k_prod_off_arr[] = "prod_off_arr";
static const char __pyx_k_py_entropy_c[] = "py_entropy_c";
static const char __pyx_k_reac_idx_arr[] = "reac_idx_arr";
static const char __pyx_k_reac_nu_list[] = "reac_nu_list";
static const char __pyx_k_reac_off_arr[] = "reac_off_arr";
static const char __pyx_k_scale_factor[] = "scale_factor";
static const char __pyx_k_steady_state[] = "steady_state";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_total_volume[] = "total_volume";
static const char __pyx_k_var_params_c[] = "var_params_c";
static const char __pyx_k_ReactionMulti[] = "ReactionMulti";
static const char __pyx_k_Reaction_rate[] = "Reaction.rate";
static const char __pyx_k_bubble_matrix[] = "bubble_matrix";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_conc_out_flat[] = "conc_out_flat";
static const char __pyx_k_concentration[] = "concentration";
static const char __pyx_k_current_state[] = "current_state";
static const char __pyx_k_heat_transfer[] = "heat_transfer";
static const char __pyx_k_integral_term[] = "integral_term";
static const char __pyx_k_mass_transfer[] = "mass_transfer";
static const char __pyx_k_max_violation[] = "max_violation";
static const char __pyx_k_param_samples[] = "param_samples";
static const char __pyx_k_poison_factor[] = "poison_factor";
static const char __pyx_k_pressure_drop[] = "pressure_drop";
static const char __pyx_k_prod_idx_list[] = "prod_idx_list";
static const char __pyx_k_py_enthalpy_c[] = "py_enthalpy_c";
static const char __pyx_k_quantum_yield[] = "quantum_yield";
static const char __pyx_k_reac_idx_list[] = "reac_idx_list";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_Thermodynamics[] = "Thermodynamics";
static const char __pyx_k_concentrations[] = "concentrations";
static const char __pyx_k_control_bounds[] = "control_bounds";
static const char __pyx_k_enthalpies_arr[] = "enthalpies_arr";
static const char __pyx_k_inhibitor_conc[] = "inhibitor_conc";
static const char __pyx_k_lab_conditions[] = "lab_conditions";
static const char __pyx_k_molecular_diff[] = "molecular_diff";
static const char __pyx_k_previous_error[] = "previous_error";
static const char __pyx_k_reaction_rates[] = "reaction_rates";
static const char __pyx_k_reactor_config[] = "reactor_config";
static const char __pyx_k_reactor_output[] = "reactor_output";
static const char __pyx_k_residence_time[] = "residence_time";
static const char __pyx_k_simulated_data[] = "simulated_data";
static const char __pyx_k_substrate_conc[] = "substrate_conc";
static const char __pyx_k_bubble_conc_out[] = "bubble_conc_out";
static const char __pyx_k_bubble_fraction[] = "bubble_fraction";
static const char __pyx_k_control_actions[] = "control_actions";
static const char __pyx_k_emulsion_matrix[] = "emulsion_matrix";
static const char __pyx_k_feed_conditions[] = "feed_conditions";
static const char __pyx_k_geometry_factor[] = "geometry_factor";
static const char __pyx_k_heat_capacities[] = "heat_capacities";
static const char __pyx_k_heat_generation[] = "heat_generation";
static const char __pyx_k_light_intensity[] = "light_intensity";
static const char __pyx_k_pre_exponential[] = "pre_exponential";
static const char __pyx_k_py_entropy_nasa[] = "py_entropy_nasa";
static const char __pyx_k_reactor_outputs[] = "reactor_outputs";
static const char __pyx_k_recommendations[] = "recommendations";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_MultiReactor_run[] = "MultiReactor.run";
static const char __pyx_k_catalyst_density[] = "catalyst_density";
static const char __pyx_k_control_strategy[] = "control_strategy";
static const char __pyx_k_current_activity[] = "current_activity";
static const char __pyx_k_flow_rate_adjust[] = "flow_rate_adjust";
static const char __pyx_k_initial_activity[] = "initial_activity";
static const char __pyx_k_lab_scale_volume[] = "lab_scale_volume";
static const char __pyx_k_mixing_intensity[] = "mixing_intensity";
static const char __pyx_k_optimal_controls[] = "optimal_controls";
static const char __pyx_k_optimal_settings[] = "optimal_settings";
static const char __pyx_k_overall_mean_tau[] = "overall_mean_tau";
static const char __pyx_k_pilot_conditions[] = "pilot_conditions";
static const char __pyx_k_predicted_profit[] = "predicted_profit";
static const char __pyx_k_process_variable[] = "process_variable";
static const char __pyx_k_py_calculate_aic[] = "py_calculate_aic";
static const char __pyx_k_py_enthalpy_nasa[] = "py_enthalpy_nasa";
static const char __pyx_k_py_matrix_invert[] = "py_matrix_invert";
static const char __pyx_k_reaction_network[] = "reaction_network";
static const char __pyx_k_variogram_params[] = "variogram_params";
static const char __pyx_k_MultiReactor_step[] = "MultiReactor.step";
static const char __pyx_k_Simulation_failed[] = "Simulation failed";
static const char __pyx_k_activation_energy[] = "activation_energy";
static const char __pyx_k_allocation_failed[] = "allocation failed";
static const char __pyx_k_deactivation_rate[] = "deactivation_rate";
static const char __pyx_k_emulsion_conc_out[] = "emulsion_conc_out";
static const char __pyx_k_experimental_data[] = "experimental_data";
static const char __pyx_k_mass_balance_list[] = "mass_balance_list";
static const char __pyx_k_mixing_efficiency[] = "mixing_efficiency";
static const char __pyx_k_particle_diameter[] = "particle_diameter";
static const char __pyx_k_pressure_out_list[] = "pressure_out_list";
static const char __pyx_k_py_arrhenius_rate[] = "py_arrhenius_rate";
static const char __pyx_k_py_calculate_rmse[] = "py_calculate_rmse";
static const char __pyx_k_py_mpc_controller[] = "py_mpc_controller";
static const char __pyx_k_py_pid_controller[] = "py_pid_controller";
static const char __pyx_k_statistics_output[] = "statistics_output";
static const char __pyx_k_MultiReactor__dcdt[] = "MultiReactor._dcdt";
static const char __pyx_k_ReactionMulti_rate[] = "ReactionMulti.rate";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_molar_absorptivity[] = "molar_absorptivity";
static const char __pyx_k_overall_conversion[] = "overall_conversion";
static const char __pyx_k_param_distribution[] = "param_distribution";
static const char __pyx_k_pilot_scale_volume[] = "pilot_scale_volume";
static const char __pyx_k_py_matrix_multiply[] = "py_matrix_multiply";
static const char __pyx_k_pyroxa__pybindings[] = "pyroxa._pybindings";
static const char __pyx_k_remaining_lifetime[] = "remaining_lifetime";
static const char __pyx_k_run_simulation_cpp[] = "run_simulation_cpp";
static const char __pyx_k_sensitivity_matrix[] = "sensitivity_matrix";
static const char __pyx_k_temperature_adjust[] = "temperature_adjust";
static const char __pyx_k_temperature_factor[] = "temperature_factor";
static const char __pyx_k_constriction_factor[] = "constriction_factor";
static const char __pyx_k_heat_generation_val[] = "heat_generation_val";
static const char __pyx_k_heat_transfer_coeff[] = "heat_transfer_coeff";
static const char __pyx_k_mean_residence_time[] = "mean_residence_time";
static const char __pyx_k_py_process_scale_up[] = "py_process_scale_up";
static const char __pyx_k_spec_must_be_a_dict[] = "spec must be a dict";
static const char __pyx_k_effectiveness_factor[] = "effectiveness_factor";
static const char __pyx_k_enthalpies_formation[] = "enthalpies_formation";
static const char __pyx_k_mean_residence_times[] = "mean_residence_times";
static const char __pyx_k_py_gibbs_free_energy[] = "py_gibbs_free_energy";
static const char __pyx_k_tank_residence_times[] = "tank_residence_times";
static const char __pyx_k_bubble_concentrations[] = "bubble_concentrations";
static const char __pyx_k_deactivation_constant[] = "deactivation_constant";
static const char __pyx_k_economic_coefficients[] = "economic_coefficients";
static const char __pyx_k_mixing_efficiency_out[] = "mixing_efficiency_out";
static const char __pyx_k_py_autocatalytic_rate[] = "py_autocatalytic_rate";
static const char __pyx_k_py_calculate_jacobian[] = "py_calculate_jacobian";
static const char __pyx_k_py_heat_capacity_nasa[] = "py_heat_capacity_nasa";
static const char __pyx_k_py_linear_interpolate[] = "py_linear_interpolate";
static const char __pyx_k_py_photochemical_rate[] = "py_photochemical_rate";
static const char __pyx_k_py_stability_analysis[] = "py_stability_analysis";
static const char __pyx_k_pyroxa_pybindings_pyx[] = "pyroxa/pybindings.pyx";
static const char __pyx_k_Thermodynamics_entropy[] = "Thermodynamics.entropy";
static const char __pyx_k_current_concentrations[] = "current_concentrations";
static const char __pyx_k_dimensionless_variance[] = "dimensionless_variance";
static const char __pyx_k_parameter_distribution[] = "parameter_distribution";
static const char __pyx_k_py_calculate_r_squared[] = "py_calculate_r_squared";
static const char __pyx_k_py_pressure_drop_ergun[] = "py_pressure_drop_ergun";
static const char __pyx_k_py_simulate_packed_bed[] = "py_simulate_packed_bed";
static const char __pyx_k_py_solve_linear_system[] = "py_solve_linear_system";
static const char __pyx_k_Reactor___reduce_cython[] = "Reactor.__reduce_cython__";
static const char __pyx_k_Thermodynamics_enthalpy[] = "Thermodynamics.enthalpy";
static const char __pyx_k_emulsion_concentrations[] = "emulsion_concentrations";
static const char __pyx_k_partial_pressure_poison[] = "partial_pressure_poison";
static const char __pyx_k_py_equilibrium_constant[] = "py_equilibrium_constant";
static const char __pyx_k_py_fugacity_coefficient[] = "py_fugacity_coefficient";
static const char __pyx_k_Empty_concentration_data[] = "Empty concentration data";
static const char __pyx_k_Reaction___reduce_cython[] = "Reaction.__reduce_cython__";
static const char __pyx_k_py_bootstrap_uncertainty[] = "py_bootstrap_uncertainty";
static const char __pyx_k_py_calculate_sensitivity[] = "py_calculate_sensitivity";
static const char __pyx_k_py_effective_diffusivity[] = "py_effective_diffusivity";
static const char __pyx_k_py_kriging_interpolation[] = "py_kriging_interpolation";
static const char __pyx_k_py_michaelis_menten_rate[] = "py_michaelis_menten_rate";
static const char __pyx_k_A_must_be_a_square_matrix[] = "A must be a square matrix";
static const char __pyx_k_Reactor___setstate_cython[] = "Reactor.__setstate_cython__";
static const char __pyx_k_b_b_U_q_e5_Qc_nAS_q_2V1Cr[] = "\200\001\360\006\000\t\n\360\006\000\002\027\220b\230\006\230b\240\n\250!\360\006\000\002\006\200U\210%\210q\220\001\330\002\006\200e\2105\220\001\220\021\340\003\025\220Q\220c\230\025\230n\250A\250S\260\002\260%\260q\270\003\2702\270V\3001\300C\300r\310\021\340\001\010\320\010\032\230'\240\021";
static const char __pyx_k_py_analytical_first_order[] = "py_analytical_first_order";
static const char __pyx_k_py_cross_validation_score[] = "py_cross_validation_score";
static const char __pyx_k_py_monte_carlo_simulation[] = "py_monte_carlo_simulation";
static const char __pyx_k_py_pressure_peng_robinson[] = "py_pressure_peng_robinson";
static const char __pyx_k_py_real_time_optimization[] = "py_real_time_optimization";
static const char __pyx_k_py_simulate_fluidized_bed[] = "py_simulate_fluidized_bed";
static const char __pyx_k_2Q_D_1A_e5_1E_q_b_Qm1_A_aq[] = "\200\001\340\001\031\230\031\240&\250\001\250\022\2502\250Q\330\001\004\200D\210\001\330\002\010\210\013\2201\220A\330\001\002\330\002\006\200e\2105\220\001\220\021\330\003\013\2101\210E\220\026\220q\230\006\230b\240\002\240#\240Q\240m\2601\330\002\013\210=\230\001\230\023\230A\330\002\t\210\021\340\002\006\200a\200q";
static const char __pyx_k_Inputs_must_be_2D_matrices[] = "Inputs must be 2D matrices";
static const char __pyx_k_Reaction___setstate_cython[] = "Reaction.__setstate_cython__";
static const char __pyx_k_py_check_mass_conservation[] = "py_check_mass_conservation";
static const char __pyx_k_2Q_D_1A_e5_1E_q_b_Qm1_Qc_aq[] = "\200\001\340\001\031\230\031\240&\250\001\250\022\2502\250Q\330\001\004\200D\210\001\330\002\010\210\013\2201\220A\330\001\002\330\002\006\200e\2105\220\001\220\021\330\003\013\2101\210E\220\026\220q\230\006\230b\240\002\240#\240Q\240m\2601\330\002\013\320\013\035\230Q\230c\240\021\330\002\t\210\021\340\002\006\200a\200q";
static const char __pyx_k_allocation_failed_for_conc0[] = "allocation failed for conc0";
static const char __pyx_k_allocation_failed_for_kf_kr[] = "allocation failed for kf/kr";
static const char __pyx_k_py_calculate_energy_balance[] = "py_calculate_energy_balance";
static const char __pyx_k_py_calculate_rate_constants[] = "py_calculate_rate_constants";
static const char __pyx_k_py_cubic_spline_interpolate[] = "py_cubic_spline_interpolate";
static const char __pyx_k_2Q_D_1A_e5_1E_q_b_Qm1_q_1_aq[] = "\200\001\340\001\031\230\031\240&\250\001\250\022\2502\250Q\330\001\004\200D\210\001\330\002\010\210\013\2201\220A\330\001\002\330\002\006\200e\2105\220\001\220\021\330\003\013\2101\210E\220\026\220q\230\006\230b\240\002\240#\240Q\240m\2601\330\002\013\210<\220q\230\003\2301\330\002\t\210\021\340\002\006\200a\200q";
static const char __pyx_k_Matrix_multiplication_failed[] = "Matrix multiplication failed";
static const char __pyx_k_Monitor_for_scale_up_effects[] = "Monitor for scale-up effects";
static const char __pyx_k_MultiReactor___reduce_cython[] = "MultiReactor.__reduce_cython__";
static const char __pyx_k_allocation_failed_for_coeffs[] = "allocation failed for coeffs";
static const char __pyx_k_py_heat_transfer_correlation[] = "py_heat_transfer_correlation";
static const char __pyx_k_py_langmuir_hinshelwood_rate[] = "py_langmuir_hinshelwood_rate";
static const char __pyx_k_py_mass_transfer_correlation[] = "py_mass_transfer_correlation";
static const char __pyx_k_33Gq_q_U_q_Ql_3b_Ba_WAQ_A_q_a[] = "\320\0003\3203G\300q\340\010\t\360\006\000\002\020\210q\330\001\005\200U\210%\210q\220\001\340\002\r\210Q\210l\230!\2303\230b\240\004\240B\240a\330\002\r\210W\220A\220Q\340\001\020\220\004\220A\340\001\002\330\002\021\220\021\330\002\017\210q\330\002\021\220\021\330\002\016\210a";
static const char __pyx_k_Input_must_be_a_square_matrix[] = "Input must be a square matrix";
static const char __pyx_k_Monte_Carlo_simulation_failed[] = "Monte Carlo simulation failed";
static const char __pyx_k_ReactionMulti___reduce_cython[] = "ReactionMulti.__reduce_cython__";
static const char __pyx_k_c_2Q_2Q_e5_1E_q_1E_q_Zz_aq_aq[] = "\200\001\340\001\016\210c\220\021\220!\330\001\031\230\031\240&\250\001\250\022\2502\250Q\330\001\031\230\031\240&\250\001\250\022\2502\250Q\340\001\002\330\002\006\200e\2105\220\001\220\021\330\003\013\2101\210E\220\026\220q\230\001\330\003\013\2101\210E\220\026\220q\230\001\340\002\t\320\t!\240\021\240#\240Z\250z\270\021\340\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_py_simulate_homogeneous_batch[] = "py_simulate_homogeneous_batch";
static const char __pyx_k_0_D_6_D_A_4t1Kq_t4q_q_Jc_d_c_D[] = "\200\001\3600\000\002\005\200D\210\n\220!\2206\230\021\330\002\010\210\t\220\021\220!\330\001\014\210D\220\004\220A\220\\\240\021\330\001\013\2104\210t\2201\220K\230q\330\001\007\200t\2104\210q\220\007\220q\340\001\004\200J\210c\220\025\220d\230,\240c\250\021\330\002\014\210D\220\004\220A\220[\240\001\330\002\006\200c\210\021\210!\330\002\t\210\024\210T\220\021\220-\230q\330\002\006\200c\210\021\210!\360\006\000\003\006\200R\200r\210\021\330\003\014\210I\220V\2301\230B\230b\240\001\330\003\014\210I\220V\2301\230B\230b\240\001\330\003\006\200d\210'\220\023\220D\230\001\330\004\007\200x\210t\2201\220A\330\004\007\200x\210t\2201\220A\330\004\n\210+\220Q\220a\330\003\007\200u\210E\220\021\220!\330\004\n\210!\2105\220\005\220Q\220d\230!\2302\230T\240\021\240&\250\001\330\004\n\210!\2105\220\005\220Q\220d\230!\2302\230T\240\021\240&\250\001\340\003\014\210I\220Q\330\003\014\210I\220Q\340\002\022\220!\330\002\021\220\021\330\002\r\210Q\210a\330\002\022\220!\330\002\021\220\021\330\002\r\210Q\210a\330\002\006\200e\2101\330\003\017\210q\220\004\220A\220]\240!\330\003\016\210a\210t\2201\220L\240\001\330\003\007\200s\210&\220\t\230\026\230q\330\004\021\220\027\230\001\230\023\230A\230W\240F\250!\2501\330\004\020\220\007\220q\230\005\230Q\230a\330\003\013\2107\220!\2203\220a\220q\330\003\007\200s\210&\220\010\230\006\230a\330\004\021\220\027\230\001\230\023\230A\230W\240F\250!\2501\330\004\020\220\007\220q\230\005\230Q\230a\330\003\013\2107\220!\2203\220a\220q\340\002\t\210\021\330\002\t\210\021\330\t\n\340\002\017\210s\220!\2201\330\002\017\210s\220!\2201\330\002\005\200[\220\002\220!\330\003\020\220\006\220f\230A\230[\250\002\250!\330\003\017\210y\230\006\230a\230{\250\"\250A\330\003\006\200d\210+\220S\230\004\230A\330\004\007\200|\2204\220q\230\001\330\004\007\200{\220$\220a\220q\330\004\n\210+\220Q\220a\330\003\007\200u\210E\220\021\220!\330\004\016\210a\210u\220M\240\021\240!\330\004\r\210Q\210e\220<\230q\240\001\340\003\020\220\006\220a\330\003\017\210y\230\001\340\002""\017\210v\220V\2301\230C\230q\240\n\250\"\250A\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\r\210Q\210e\2208\2301\230A\340\002\005\200[\220\002\220!\330\003\020\220\006\220f\230A\230[\250\002\250!\330\003\017\210y\230\006\230a\230{\250\"\250A\330\003\006\200d\210+\220S\230\004\230A\330\004\007\200|\2204\220q\230\001\330\004\007\200{\220$\220a\220q\330\004\n\210+\220Q\220a\330\003\007\200u\210E\220\021\220!\330\004\016\210a\210u\220M\240\021\240!\330\004\r\210Q\210e\220<\230q\240\001\340\003\020\220\006\220a\330\003\017\210y\230\001\340\002\017\210v\220V\2301\230C\230q\240\n\250\"\250A\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\r\210Q\210e\2208\2301\230A\340\002\r\210Q\210e\2201\220D\230\004\230A\230[\250\003\2504\250q\260\010\270\003\2704\270q\300\003\3006\310\024\310U\320RS\330\002\005\200R\200r\210\021\330\003\r\210Y\220f\230A\230R\230r\240\021\330\003\006\200d\210!\330\004\n\210+\220Q\220a\330\003\007\200u\210E\220\021\220!\330\004\013\2101\210E\220\030\230\021\230!\340\003\r\210Y\220a\340\002\013\2103\210a\210u\220A\220U\230!\2303\230d\240!\240=\260\007\260r\270\025\270a\270s\300$\300a\300}\320TU\330\002\t\210\027\220\002\220!\330\002\014\210A\330\002\016\210i\220v\230Q\230h\240b\250\001\330\002\022\220)\2306\240\021\240(\250\"\250B\250b\260\001\330\002\006\200h\210b\220\002\220$\220d\230+\240T\250\030\260\022\2602\260R\260r\270\024\270T\300\021\340\003\006\200g\210T\220\027\230\003\2309\240C\240t\2501\250A\330\003\006\200g\210T\220\027\230\003\2309\240C\240t\2501\250A\330\003\006\200k\220\024\220[\240\003\2406\250\023\250D\260\001\260\021\330\003\006\200j\220\004\220J\230c\240\031\250#\250T\260\021\260!\330\003\006\200l\220$\220a\220q\330\003\006\200k\220\024\220[\240\003\2406\250\023\250D\260\001\260\021\330\003\006\200j\220\004\220J\230c\240\031\250#\250T\260\021\260!\330\003\006\200l\220$\220a\220q\330\003\006\200h\210d\220(\230#\230Y\240c\250\024\250Q\250a\330\003\t\210\033\220A\220Q\340\002\014\320\014\"\240!\2403\240c\250\030\260""\021\330\010\016\210l\230)\240;\250f\260A\330\010\016\210l\230)\240;\250f\260A\330\010\021\220\021\330\010\r\210Q\210c\220\024\220Q\220m\2408\2505\260\001\260\023\260D\270\001\270\035\300a\330\010\021\220\033\230I\240_\260A\330\002\005\200X\210S\220\001\330\003\t\210\034\220Q\220a\340\002\005\200Q\330\003\n\210\"\210F\220!\2209\230F\240\"\240A\330\003\n\210\"\210F\220\"\220I\230T\240\026\240r\250\021\330\003\007\200u\210E\220\021\220!\330\004\010\210\001\210\025\210i\220q\230\001\330\004\010\210\005\210U\220!\2201\330\005\t\210\021\210#\210U\220-\230q\240\001\240\021\240\"\240B\240a\330\003\n\210&\220\001\340\003\016\210a\210y\230\001\230\023\230D\240\005\240U\250!\2501\330\003\n\210!\2101\210M\230\021\230!\2301\230B\230b\240\003\2404\240u\250E\260\021\260$\260d\270%\270u\300A\300Q\330\003\n\210*\220A\340\002\007\200u\210A\210X\220T\230\021\230&\240\001\330\002\007\200u\210A\210X\220T\230\021\230&\240\001\330\002\t\210\027\220\004\220A\220X\230Q\330\002\007\200u\210A\210T\220\024\220Q\220e\2301\330\002\007\200u\210A\210T\220\024\220Q\220e\2301\330\002\016\210e\2201\220C\220t\2301\230M\250\021\330\002\007\200u\210A\210S\220\004\220A\220]\240!\330\002\010\210\010\220\001\220\024\220Q\330\002\014\210G\2201\220E\230\023\230D\240\003\2404\240z\260\033\270C\270q\330\002\t\210\027\220\004\220A";
static const char __pyx_k_E_at_b_A_1_Q_y_axr_ivQhb_ivQhb[] = "\200\021\330\002\024\220E\230\025\230a\230t\240;\250b\260\004\260A\330\002\022\220'\230\022\2301\330\002\025\220Q\330\002\027\220y\240\006\240a\240x\250r\260\021\330\002\026\220i\230v\240Q\240h\250b\260\001\330\002\026\220i\230v\240Q\240h\250b\260\001\330\002\005\200T\210\026\210s\220$\220e\2303\230d\240!\330\003\006\200g\210T\220\021\220!\330\003\006\200f\210D\220\001\220\021\330\003\006\200f\210D\220\001\220\021\330\003\t\210\033\220A\220Q\340\002\014\320\014\034\230A\230T\240\025\240d\250%\250t\2605\270\004\270E\300\024\300\\\320QU\320UZ\320Za\320ag\320gm\320mn\330\002\005\200X\210S\220\001\330\003\t\210\034\220Q\220a\330\002\003\330\003\006\200a\330\004\013\2102\210V\2201\220I\230V\2402\240Q\330\004\013\2102\210V\2202\220Y\230d\240&\250\002\250!\330\004\010\210\005\210U\220!\2201\330\005\t\210\021\210%\210u\220A\220Q\330\005\t\210\021\210#\210U\220$\220a\220q\330\005\t\210\021\210#\210U\220$\220a\220q\330\004\013\2106\220\021\340\004\017\210q\220\005\220Q\220c\230\024\230U\240%\240q\250\001\330\004\013\2101\210A\210T\220\021\220$\220d\230!\2304\230t\2405\250\005\250Q\250a\330\004\013\210:\220Q\340\003\007\200q\210\001\330\003\007\200q\210\001\330\003\007\200q\210\001";
static const char __pyx_k_E_az_1_1_at1_e5_uAQ_r_2S_wat1D[] = "\200\021\330\002\024\220E\230\025\230a\230z\250\022\2501\340\002\n\210!\2101\330\002\t\210\021\210$\210a\210t\2201\330\002\006\200e\2105\220\001\220\021\330\003\007\200u\210A\210Q\330\003\010\210\007\210r\220\022\2202\220S\230\002\230!\330\003\007\200w\210a\210t\2201\220D\230\001\330\002\t\210\027\220\001";
static const char __pyx_k_Fa_c_2Q_2Q_y_ar_1_y_ar_1_2Q_2Q[] = "\320\000F\300a\340\001\016\210c\220\021\220!\330\001\031\230\031\240&\250\001\250\022\2502\250Q\330\001\031\230\031\240&\250\001\250\022\2502\250Q\330\001\027\220y\240\006\240a\240r\250\022\2501\330\001\027\220y\240\006\240a\240r\250\022\2501\330\001\031\230\031\240&\250\001\250\022\2502\250Q\330\001\031\230\031\240&\250\001\250\022\2502\250Q\340\001\002\330\002\006\200e\2105\220\001\220\021\330\003\013\2101\210E\220\026\220q\230\001\330\003\013\2101\210E\220\026\220q\230\001\330\003\t\210\021\210%\210t\2201\220A\330\003\t\210\021\210%\210t\2201\220A\340\002\032\230!\2303\230j\250\n\260(\270!\330\010\013\2107\220*\230A\360\006\000\003\014\2101\210H\220A\220S\230\004\230E\240\025\240a\240q\330\002\013\2101\210H\220A\220S\230\004\230E\240\025\240a\240q\340\002\003\330\003\t\210\021\330\003\t\210\021\360\006\000\003\007\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_Gq_Qa_ivQfBa_ivQfBa_r_e5_q_nAQ[] = "\320\000G\300q\340\001\022\220#\220Q\220a\330\001\026\220i\230v\240Q\240f\250B\250a\330\001\026\220i\230v\240Q\240f\250B\250a\330\001\031\230\031\240&\250\001\250\026\250r\260\021\340\001\002\330\002\006\200e\2105\220\001\220\021\330\003\010\210\001\210\025\320\016\037\230q\240\001\330\003\010\210\001\210\025\210n\230A\230Q\330\003\013\2101\210E\220\027\230\001\230\026\230}\250A\340\002\t\320\t%\240Q\240g\250W\260G\2701\340\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_H_c_Zq0_1_1_U_q_2Q_Rr_1_2Rq_Qd[] = "\320\000H\310\001\340\010\t\340\001\016\210c\220\021\320\022%\240Z\250q\3200@\300\013\3101\360\006\000\002\024\2201\330\001\005\200U\210%\210q\220\001\330\002\003\330\003\021\220\022\2202\220Q\330\003\021\220\024\220R\220r\230\022\2301\330\003\022\220'\230\022\2302\230R\230q\330\003\025\220Q\220d\230#\230R\230r\240\023\240B\240f\250B\250b\260\003\2602\260W\270B\270b\300\003\3002\300Q\340\002\021\220\027\230\001\230\021\340\001\002\330\002\025\220Q\330\002\030\230\001\330\002\025\220Q\320\026,\250A\330\002\r\210Q";
static const char __pyx_k_MultiReactor___setstate_cython[] = "MultiReactor.__setstate_cython__";
static const char __pyx_k_RRS_S_S_Qm1_ivQb_y_ar_1_y_ar_1[] = "\320\000R\320RS\340\001\005\200S\210\001\210\021\330\001\005\200S\210\001\320\t\031\230\024\230Q\230m\2501\340\001\026\220i\230v\240Q\240b\250\002\250!\330\001\027\220y\240\006\240a\240r\250\022\2501\330\001\027\220y\240\006\240a\240r\250\022\2501\330\001\023\2209\230F\240!\2402\240R\240q\330\001\023\2209\230F\240!\2402\240R\240q\330\001!\240\031\250&\260\001\260\022\2602\260Q\360\006\000\002\027\220f\230F\240!\2402\240R\240q\330\001\030\230\t\240\026\240q\250\002\250\"\250A\330\001\026\220f\230F\240\"\240B\240b\250\003\2502\250Q\330\001\026\220f\230F\240!\2402\240R\240q\330\001\030\230\t\240\026\240q\250\002\250\"\250A\330\001\026\220f\230F\240\"\240B\240b\250\003\2502\250Q\340\001\002\330\002\006\200e\2105\220\001\220\021\330\003\010\210\001\210\025\210m\2301\230A\330\003\t\210\021\210%\210y\230\001\230\021\340\002\010\210\001\210\025\210n\230A\230V\2403\240a\320'7\260r\270\027\300\001\330\002\010\210\001\210\025\210n\230A\230V\2403\240a\320'7\260r\270\027\300\001\360\006\000\003\007\200e\2105\220\001\220\021\330\003\005\200Q\200e\2101\330\003\005\200Q\200e\2101\330\003\013\2101\210E\220\021\330\003\n\210!\2105\220\001\330\003\013\2101\210E\220\021\330\003\013\2101\210H\220A\220S\230\001\230\021\230!\330\003\n\210!\2105\220\001\330\003\013\2101\210E\220\021\330\002\n\210!\2105\220\001\330\002\n\210!\2105\220\001\340\002\013\210>\230\021\230#\230S\240\t\250\027\260\010\270\001\330\n\016\210d\220*\230I\240Q\330\n\024\220I\230Z\240q\340\002\005\200W\210B\210a\330\003\025\220Q\320\026&\240a\240s\250$\250e\2605\270\001\270\021\330\003\013\320\013\036\320\036/\250{\270)\300;\310a\340\003\013\320\013\036\230a\230w\240c\250\033\260I\270[\310\001\340\002\006\200a\200x\210t\2201\220I\230T\240\021\240)\2504\250q\260\005\260T\270\021\270%\270t\3001\300A\330\002\006\200a\200{\220$\220a\220z\240\024\240Q\240k\260\024\260Q\260k\300\024\300Q\300j\320PT\320TU\320UV";
static const char __pyx_k_RvQa_AV3b_1F_3c_1_avQa_IV1Bb_A[] = "\200\001\340\010\t\330\001\005\200R\200v\210Q\210a\340\001\004\200A\200V\2103\210b\220\003\2201\220F\230!\2303\230c\240\021\240&\250\001\250\021\330\002\010\210\n\220!\2201\340\001\016\210a\210v\220Q\220a\330\001\024\220I\230V\2401\240B\240b\250\002\250\"\250A\330\001\030\230\t\240\026\240q\250\002\250\"\250B\250b\260\001\340\001\002\340\002\006\200e\2105\220\001\220\021\330\003\007\200u\210E\220\021\220!\330\004\007\200q\210\002\210\"\210B\210b\220\005\220Q\220a\220s\230!\340\002\013\210=\230\001\230\025\230i\240q\340\002\005\200W\210C\210q\340\003\013\2102\210V\2202\220S\230\001\330\003\007\200u\210E\220\021\220!\330\004\010\210\005\210U\220!\2201\330\005\n\210!\2103\210e\2207\230!\2302\230R\230r\240\022\2401\330\003\n\210%\210w\220a\340\003\t\210\034\220Q\220a\340\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_S_S_Qm1_c_ivQb_IV1Bb_y_ar_b_9F[] = "\200\001\340\001\005\200S\210\001\210\021\330\001\005\200S\210\001\320\t\031\230\024\230Q\230m\2501\330\001\016\210c\220\021\220!\340\001\026\220i\230v\240Q\240b\250\002\250!\330\001\034\230I\240V\2501\250B\250b\260\001\330\001\027\220y\240\006\240a\240r\250\022\250;\260b\270\001\330\001\023\2209\230F\240!\2402\240R\240q\330\001\023\2209\230F\240!\2402\240R\240q\330\001!\240\031\250&\260\001\260\033\270B\270a\330\001 \240\001\360\006\000\002\027\220f\230F\240!\2402\240R\240q\330\001\030\230\t\240\026\240q\250\002\250\"\250A\330\001\026\220f\230F\240\"\240B\240b\250\003\2502\250Q\330\001\026\220f\230F\240!\2402\240R\240q\330\001\030\230\t\240\026\240q\250\002\250\"\250A\330\001\026\220f\230F\240\"\240B\240b\250\003\2502\250Q\340\001\002\330\002\006\200e\2105\220\001\220\021\330\003\010\210\001\210\025\320\016$\240A\240Q\330\003\016\210a\210u\320\024)\250\021\250&\260\002\260\"\260C\260q\3208T\320TU\340\002\006\200e\2105\220\001\220\021\330\003\t\210\021\210!\2101\210E\220\036\230q\240\002\240!\2401\330\003\t\210\021\210!\2101\210A\210Q\210e\220>\240\021\240\"\240A\240Q\360\006\000\003\007\200e\2105\220\001\220\021\330\003\005\200Q\200e\2101\330\003\005\200Q\200e\2101\330\003\013\2101\210E\220\021\330\003\n\210!\2105\220\001\330\003\013\2101\210E\220\021\330\003\013\2101\210H\220A\220S\230\001\230\021\230!\330\003\n\210!\2105\220\001\330\003\013\2101\210E\220\021\330\002\n\210!\2105\220\001\330\002\n\210!\2105\220\001\340\002\013\320\013!\240\021\240#\240S\250\014\260G\270=\310\001\330\014\020\220\004\220J\230i\240q\330\014\026\220i\230z\320);\2701\270A\340\002\005\200W\210B\210a\330\003\026\220a\320\027'\240q\250\003\2504\250u\260E\270\021\270!\330\003\004\330\004\030\230\001\330\004\030\230\001\330\004\017\210q\360\006\000\004\014\320\013\037\230q\240\007\240|\3203G\300u\310K\320WX\340\002\006\200a\200x\210t\2201\220N\240$\240a\240y\260\004\260A\260U\270$\270a\270u\300D\310\001\310\021\330\002\006\200a\200{\220$\220a\220z\240\024\240Q\240k\260\024\260Q\260k\300\024""\300Q\300j\320PT\320TU\320UV";
static const char __pyx_k_Thermodynamics___reduce_cython[] = "Thermodynamics.__reduce_cython__";
static const char __pyx_k_allocation_failed_for_products[] = "allocation failed for products";
static const char __pyx_k_c_ivQb_y_ar_1_e5_l_1_y_AWHA_aq[] = "\200\001\340\001\016\210c\220\021\220!\330\001\026\220i\230v\240Q\240b\250\002\250!\330\001\027\220y\240\006\240a\240r\250\022\2501\340\001\002\330\002\006\200e\2105\220\001\220\021\330\003\010\210\001\210\025\210l\230!\2301\330\003\t\210\021\210%\210y\230\001\230\021\340\002\t\320\t\034\230A\230W\240H\250A\340\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_c_ivQb_y_ar_1_e5_l_1_y_q_xq_aq[] = "\200\001\340\001\016\210c\220\021\220!\330\001\026\220i\230v\240Q\240b\250\002\250!\330\001\027\220y\240\006\240a\240r\250\022\2501\340\001\002\330\002\006\200e\2105\220\001\220\021\330\003\010\210\001\210\025\210l\230!\2301\330\003\t\210\021\210%\210y\230\001\230\021\340\002\t\210\036\220q\230\007\230x\240q\340\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_ivQhb_ivQhb_ivQhb_ivQhb_at4t_a[] = "\200\001\330()\340\001\026\220i\230v\240Q\240h\250b\260\001\330\001\026\220i\230v\240Q\240h\250b\260\001\330\001\026\220i\230v\240Q\240h\250b\260\001\330\001\026\220i\230v\240Q\240h\250b\260\001\340\001\002\330\002\014\320\014.\250a\250t\2604\260t\270;\300a\330\r\024\220G\2307\240'\250\021\330\002\005\200X\210R\210q\330\003\t\210\034\220Q\220a\360\006\000\003\020\210q\220\005\220Q\220c\230\024\230U\240%\240q\250\001\330\002\013\2101\210E\220\021\220#\220T\230\025\230e\2401\240A\330\002\013\2101\210E\220\021\220#\220T\230\025\230e\2401\240A\330\002\013\2101\210E\220\021\220#\220T\230\025\230e\2401\240A\340\002\003\330\003\014\210A\330\003\010\210\001\330\003\010\210\001\330\003\010\210\001\360\006\000\003\007\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_py_catalyst_deactivation_model[] = "py_catalyst_deactivation_model";
static const char __pyx_k_py_competitive_inhibition_rate[] = "py_competitive_inhibition_rate";
static const char __pyx_k_py_residence_time_distribution[] = "py_residence_time_distribution";
static const char __pyx_k_r_RuCvRq_2S_b_Ba_Rr_Qa_Ba_Qm2Q[] = "\200\001\340\010\t\360\014\000\002\020\210r\220\024\220R\220u\230C\230v\240R\240q\360\006\000\002\022\220\022\2202\220S\230\002\230!\360\006\000\002\021\320\020&\240b\250\014\260B\260a\330\001\024\320\024%\240R\240r\250\024\250Q\250a\250}\270B\270a\360\006\000\002\026\220Q\220m\2402\240Q\340\001\002\330\002\026\220a\330\002\027\220q\330\002\030\230\001\230\022\2304\230q\240\005\240R\240q\330\002\030\230\001\330\002\023\2201\330\002\r\210Q";
static const char __pyx_k_s_1_gT_U_1_uF_ZvQ_Qc_3b_uF_YfA[] = "\200\021\330\002\017\210s\220!\2201\330\002\020\220\001\220\027\230\001\360\006\000\003\007\200g\210T\220\021\330\003\n\210#\210U\220!\2201\330\003\007\200u\210F\220#\220Z\230v\240Q\330\004\005\200Q\200c\210\021\210)\2203\220b\230\001\330\003\007\200u\210F\220#\220Y\230f\240A\330\004\005\200Q\200c\210\021\210)\2203\220b\230\001\330\002\t\210\021";
static const char __pyx_k_y_ar_1_y_ar_1_as_Rq_IV1Cq_1_as[] = "\200\001\360\010\000'(\360\010\000\002\030\220y\240\006\240a\240r\250\022\2501\330\001\027\220y\240\006\240a\240r\250\022\2501\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\034\230I\240V\2501\250C\250q\260\t\270\022\2701\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\034\230I\240V\2501\250C\250q\260\t\270\022\2701\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\032\230)\2406\250\021\250\"\250B\250a\330\001\026\220i\230v\240Q\240h\250b\260\001\330\001\036\230i\240v\250Q\250b\260\002\260(\270\"\270A\330\001\035\230Y\240f\250A\250X\260R\260q\340\001\002\340\002\006\200e\2105\220\001\220\021\330\003\t\210\021\210%\210r\220\021\220!\330\003\t\210\021\210%\210r\220\021\220!\340\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\016\210a\210u\220G\2301\230A\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\016\210a\210u\220G\2301\230A\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\340\002\006\200e\2105\220\001\220\021\330\003\014\210A\210U\220%\220q\230\001\360\006\000\003\014\320\013\036\230a\230s\240#\240V\2508\2608\270>\310\035\320VW\330\t\027\220}\240N\260+\270Q\330\t\025\220^\2401\330\t\033\320\0331\260\033\270A\330\t\020\220\017\230~\250Q\340\002\005\200W\210B\210a\340\003\017\210q\220\005\220Q\220c\230\024\230U\240%\240q\250\001\330\003\021\220\021\330\003\007\200u\210E\220\021\220!\330\004\r\210Q\210m\2301\230A\230Q\230b\240\002\240#\240T\250\025\250e\2601\260A\330\004\017\210w\220a\220q\330\003\027\220q\230\014\240A\240S\250\004\250E\260\025\260a\260q\340\003\004\330\004\r\210Q\330\004\026\220a\330\004\025\220Q\330\004\020\220\001\330\004\017\210q\360\006""\000\004\014\210;\220g\230Y\240a\340\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_0_3aq_S_y_awb_A_e5_t1A_e5_1E_1A[] = "\320\0000\260\001\340\001\023\2203\220a\220q\330\001\025\220S\230\001\230\021\330\001\027\220y\240\006\240a\240w\250b\260\001\330\001\031\230\031\240&\250\001\250\031\260\"\260A\340\001\002\330\002\006\200e\2105\220\001\220\021\330\003\t\210\021\210%\210t\2201\220A\330\002\006\200e\2105\220\001\220\021\330\003\013\2101\210E\220\032\2301\230A\340\002\t\320\t\037\230q\240\t\250\030\260\030\270\032\3001\340\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_2Q_6_Ba_y_ar_1_y_ar_1_1_e5_1E_Q[] = "\200\001\360\n\000\002\032\230\031\240&\250\001\250\022\2502\250Q\330\001\032\230)\2406\250\021\250\"\250B\250a\330\001\037\230y\250\006\250a\250r\260\022\2601\330\001\027\220y\240\006\240a\240r\250\022\2501\330\001#\2401\340\001\002\340\002\006\200e\2105\220\001\220\021\330\003\013\2101\210E\220\024\220Q\220a\330\003\021\220\021\220%\320\027+\2501\250A\330\003\t\210\021\210%\210\177\230a\230q\340\002\006\200e\2105\220\001\220\021\330\003\014\210A\210U\220.\240\001\240\021\360\006\000\003\014\320\013#\2401\240C\240s\250*\260A\330\013\033\2308\2403\240a\240q\340\002\005\200W\210B\210a\330\003\004\330\004\027\220q\330\004\023\2201\330\004\026\220a\220x\230q\240\003\2404\240u\250E\260\021\260!\330\004\026\220a\220y\240\001\240\023\240D\250\005\250U\260!\2601\330\004\034\230A\230^\2501\250C\250t\2605\270\005\270Q\270a\330\004\027\220q\230\006\230a\230s\240$\240e\2505\260\001\260\021\330\004\017\210q\360\006\000\004\014\210;\220g\230Y\240a\340\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_2Q_Cq_l_Qaq_A_q_Rq_aq_QQSST_1_B[] = "\200\001\340\010\t\360\006\000\002\021\320\020#\2402\240Q\360\006\000\002\021\220\014\230C\230q\240\001\240\021\330\001\016\210l\230#\230Q\230a\230q\360\006\000\002\025\220A\360\006\000\002\022\220\021\220/\240\036\250q\260\r\270R\270q\360\006\000\002\022\220\021\320\022#\240>\260\021\260!\330\001\021\220\021\220.\240\016\250a\250q\360\006\000\002\022\220\021\320\022+\250>\270\021\320:Q\320QS\320ST\360\006\000\002\022\220\021\320\022#\240>\260\021\260/\300\022\3001\360\006\000\002\020\210}\230B\230a\340\001\002\330\002\026\220a\330\002\022\220!\330\002\022\220!\330\002\020\220\001\330\002\021\220\021\330\002\003\330\003\024\220A\330\003\024\220A\330\003\025\220Q\340\002\r\210Q";
static const char __pyx_k_6a_Cq_JaxuA_q_Qa_t1A_S_Qe5_q_1L[] = "\320\0006\260a\340\001\024\220C\220q\230\001\360\006\000\002\005\200J\210a\210x\220u\230A\330\002\017\210q\220\005\220Q\220a\340\002\017\210t\2201\220A\360\006\000\002\005\320\004\025\220S\230\001\330\002\025\220Q\220e\2305\240\001\340\001\030\230\t\240\026\240q\250\003\2501\250L\270\002\270!\330\001\032\230)\2406\250\021\250(\260\"\260A\330\001\032\230)\2406\250\021\250(\260\"\260A\330\001\035\230Y\240f\250A\250S\260\001\3201C\3002\300Q\340\001\002\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\n\210!\2105\220\n\230!\2301\330\002\006\200e\2105\220\001\220\021\330\003\014\210A\210U\220'\230\021\230!\330\003\014\210A\210U\220'\230\021\230!\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\320\025%\240Q\240a\340\002\013\320\013 \240\001\240\031\250)\260;\270k\310\021\360\006\000\003\006\200Z\210q\220\010\230\005\230Q\330\003\n\210!\340\003\n\210!\2101\340\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_Analytical_first_order_solution[] = "Analytical first order solution failed";
static const char __pyx_k_BfBk_U_q_e5_b_1_AS_Qd_3b_S_q_AS[] = "\200\001\340\010\t\360\006\000\002\r\210B\210f\220B\220k\240\021\360\006\000\002\006\200U\210%\210q\220\001\330\002\006\200e\2105\220\001\220\021\330\003\006\200b\210\003\2101\330\004\014\210A\210S\220\005\220Q\220d\230!\2303\230b\240\001\240\021\240&\250\001\250\021\250#\250S\260\007\260q\340\004\014\210A\210S\220\005\220T\230\022\2304\230q\240\003\2402\240Q\240a\240v\250Q\250a\250s\260#\260W\270A\340\001\010\210\010\220\007\220q";
static const char __pyx_k_IV1Bb_IV1Bb_9F_2Rq_9F_2Rq_as_Rq[] = "\200\001\340-.\360\010\000\002\035\230I\240V\2501\250B\250b\260\001\330\001\034\230I\240V\2501\250B\250b\260\001\330\001\033\2309\240F\250!\2502\250R\250q\330\001\033\2309\240F\250!\2502\250R\250q\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\034\230I\240V\2501\250C\250q\260\t\270\022\2701\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\034\230I\240V\2501\250C\250q\260\t\270\022\2701\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\032\230)\2406\250\021\250\"\250B\250a\330\001\"\240)\2506\260\021\260\"\260B\260b\270\002\270!\340\001\002\340\002\006\200e\2105\220\001\220\021\330\003\016\210a\210u\220G\2301\230A\330\003\016\210a\210u\220G\2301\230A\330\003\r\210Q\210e\2206\230\021\230!\330\003\r\210Q\210e\2206\230\021\230!\340\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\016\210a\210u\220G\2301\230A\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\016\210a\210u\220G\2301\230A\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\340\002\006\200e\2105\220\001\220\021\330\003\014\210A\210U\220%\220q\230\001\360\006\000\003\014\320\013!\240\021\240#\240S\250\n\260-\270q\330\n\026\220l\240.\260\r\270Q\330\n\030\230\r\240^\2601\330\n\025\220T\320\031,\250A\340\002\005\200W\210B\210a\340\003\017\210q\320\020!\240\021\240#\240T\250\025\250e\2601\260A\330\003\016\210a\320\017 \240\001\240\022\2402\240S\250\004\250E\260\025\260a\260q\330\003\016\210a\320\017 \240\001\240\021\240!\2402\240R\240s\250$\250e\2605\270\001\270\021\330\003\016\210a\320\017 \240\001\240\021\240!\2402\240R\240s\250$\250e\2605\270\001\270\021\340\003\004\330\004\005\330\005\r\210Q\330\005\014\210A""\330\005\014\210A\330\005\014\210A\330\005\022\220!\330\005\022\220!\330\005\024\220A\340\004\023\2201\330\004\020\220\001\330\004\017\210q\360\006\000\004\014\210;\220g\230Y\240a\340\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_PPQ_ivQhb_ivQhb_ivQhb_3d_T_wa_X[] = "\320\000P\320PQ\340\001\026\220i\230v\240Q\240h\250b\260\001\330\001\026\220i\230v\240Q\240h\250b\260\001\330\001\026\220i\230v\240Q\240h\250b\260\001\340\001\002\330\002\014\320\014\"\240!\2403\240d\250+\260T\270\027\300\007\300w\310a\330\002\005\200X\210R\210q\330\003\t\210\034\220Q\220a\360\006\000\003\020\210q\220\005\220Q\220c\230\024\230U\240%\240q\250\001\330\002\013\2101\210E\220\021\220#\220T\230\025\230e\2401\240A\330\002\013\2101\210E\220\021\220#\220T\230\025\230e\2401\240A\340\002\003\330\003\014\210A\330\003\010\210\001\330\003\010\210\001\360\006\000\003\007\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_Qa_ivQfBa_y_avRq_e5_l_1_y_awhgQ[] = "\200\001\340\001\022\220#\220Q\220a\330\001\026\220i\230v\240Q\240f\250B\250a\330\001\027\220y\240\006\240a\240v\250R\250q\340\001\002\330\002\006\200e\2105\220\001\220\021\330\003\010\210\001\210\025\210l\230!\2301\330\003\t\210\021\210%\210y\230\001\230\021\340\002\t\210\035\220a\220w\230h\240g\250Q\340\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_ReactionMulti___setstate_cython[] = "ReactionMulti.__setstate_cython__";
static const char __pyx_k_RvQa_RvQa_AV3b_1F_3c_1_AV3b_3as[] = "\200\001\340\010\t\330\001\005\200R\200v\210Q\210a\330\001\005\200R\200v\210Q\210a\340\001\004\200A\200V\2103\210b\220\003\2201\220F\230!\2303\230c\240\021\240&\250\001\250\021\330\002\010\210\n\220!\2201\330\001\004\200A\200V\2103\210b\220\003\2203\220a\220s\230#\230Q\230f\240A\240Q\330\002\010\210\n\220!\2201\340\001\016\210a\210v\220Q\220a\330\001\024\220I\230V\2401\240B\240b\250\002\250\"\250A\330\001\024\220I\230V\2401\240B\240b\250\001\330\001\024\220I\230V\2401\240B\240b\250\001\340\001\002\340\002\006\200e\2105\220\001\220\021\330\003\007\200u\210E\220\021\220!\330\004\007\200q\210\002\210\"\210B\210b\220\005\220Q\220a\220s\230!\330\003\006\200a\200u\210A\210Q\210a\340\002\013\320\013\036\230a\230u\240E\250\025\250a\340\002\005\200W\210C\210q\340\003\007\200q\210\003\2101\210C\210t\2205\230\005\230Q\230a\330\003\n\210!\340\003\t\210\034\220Q\220a\340\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_RvQa_RvQa_AV3b_1F_Q_1_avQa_avQa[] = "\200\001\340\010\t\330\001\005\200R\200v\210Q\210a\330\001\005\200R\200v\210Q\210a\340\001\004\200A\200V\2103\210b\220\003\2201\220F\230#\230Q\330\002\010\210\n\220!\2201\340\001\016\210a\210v\220Q\220a\330\001\016\210a\210v\220Q\220a\330\001\016\210a\210v\220Q\220a\340\001\004\200A\200V\2101\210C\210s\220!\2206\230\021\230!\330\002\010\210\n\220!\2201\340\001\024\220I\230V\2401\240B\240b\250\002\250\"\250A\330\001\024\220I\230V\2401\240B\240b\250\002\250\"\250A\330\001\024\220I\230V\2401\240B\240b\250\002\250\"\250A\340\001\002\340\002\006\200e\2105\220\001\220\021\330\003\007\200u\210E\220\021\220!\330\004\007\200q\210\002\210\"\210B\210b\220\005\220Q\220a\220s\230!\340\002\006\200e\2105\220\001\220\021\330\003\007\200u\210E\220\021\220!\330\004\007\200q\210\002\210\"\210B\210b\220\005\220Q\220a\220s\230!\340\002\013\210?\230!\2305\240\005\240U\250#\250S\260\001\340\002\005\200W\210C\210q\340\003\007\200r\210\026\210r\220\023\220A\330\003\007\200u\210E\220\021\220!\330\004\010\210\005\210U\220!\2201\330\005\006\200a\200s\210%\210s\220!\2202\220R\220r\230\022\2301\330\003\n\210!\2107\220!\340\003\t\210\034\220Q\220a\340\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_U_q_Zq_2Q_Bj_gQa_81_c_A_M_BgQ_C[] = "\200\001\340\010\t\360\006\000\002\031\230\001\330\001\005\200U\210%\210q\220\001\330\002\005\200Z\210q\220\003\2202\220Q\330\003\t\210\027\220\001\220\023\220B\220j\240\001\240\021\340\003\t\210\021\330\002\026\220g\230Q\230a\360\006\000\002\021\220\003\2208\2301\330\001\016\210c\220\033\230A\330\001\024\220M\240\022\240>\260\033\270B\270g\300Q\360\006\000\002\r\210C\210t\2201\340\001\002\330\002\031\230\021\330\002\016\210a\330\002\032\230!\330\002\034\230I\240S\320(8\270\002\270&\320@Q\320QS\320SZ\320Z[\330\002\r\210Q";
static const char __pyx_k_allocation_failed_for_reactants[] = "allocation failed for reactants";
static const char __pyx_k_c_2Q_2Q_e5_1E_q_1E_q_1Cz_1_aq_a[] = "\200\001\340\001\016\210c\220\021\220!\330\001\031\230\031\240&\250\001\250\022\2502\250Q\330\001\031\230\031\240&\250\001\250\022\2502\250Q\340\001\002\330\002\006\200e\2105\220\001\220\021\330\003\013\2101\210E\220\026\220q\230\001\330\003\013\2101\210E\220\026\220q\230\001\340\002\t\320\t\033\2301\230C\230z\250\032\2601\340\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_e6_ZvQ_AQ_Qa_d_Q_Cq_e6_YfA_AQ_Q[] = "\200\021\330\002\022\220!\330\002\022\220!\340\002\006\200e\2106\220\024\220Z\230v\240Q\330\003\t\210\023\210A\210Q\330\003\t\210\024\210Q\210a\330\003\006\200d\210#\210Q\330\004\010\210\001\330\004\005\330\003\010\210\004\210C\210q\330\002\006\200e\2106\220\024\220Y\230f\240A\330\003\t\210\023\210A\210Q\330\003\t\210\024\210Q\210a\330\003\006\200d\210#\210Q\330\004\010\210\001\330\004\005\330\003\010\210\004\210C\210q\330\002\t\210\024\210T\220\022\2202\220R\220t\2304\230r\240\021";
static const char __pyx_k_ivQhb_ivQhb_ivQhb_Qd_d_k_gWA_XR[] = "\200\001\330()\340\001\026\220i\230v\240Q\240h\250b\260\001\330\001\026\220i\230v\240Q\240h\250b\260\001\330\001\026\220i\230v\240Q\240h\250b\260\001\340\001\002\330\002\014\320\014-\250Q\250d\260$\260d\270$\270k\310\021\330\017\026\220g\230W\240A\330\002\005\200X\210R\210q\330\003\t\210\034\220Q\220a\360\006\000\003\020\210q\220\005\220Q\220c\230\024\230U\240%\240q\250\001\330\002\013\2101\210E\220\021\220#\220T\230\025\230e\2401\240A\330\002\013\2101\210E\220\021\220#\220T\230\025\230e\2401\240A\340\002\003\330\003\014\210A\330\003\010\210\001\330\003\010\210\001\360\006\000\003\007\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_py_analytical_consecutive_first[] = "py_analytical_consecutive_first_order";
static const char __pyx_k_py_calculate_objective_function[] = "py_calculate_objective_function";
static const char __pyx_k_q_3aq_S_y_awb_A_9F_9Bl_A_e5_t1A[] = "\320\000/\250q\340\001\023\2203\220a\220q\330\001\025\220S\230\001\230\021\330\001\027\220y\240\006\240a\240w\250b\260\001\330\001\031\230\031\240&\250\001\250\031\260\"\260A\330\001#\2409\250F\260!\2609\270B\270l\310\"\310A\340\001\002\330\002\006\200e\2105\220\001\220\021\330\003\t\210\021\210%\210t\2201\220A\330\002\006\200e\2105\220\001\220\021\330\003\013\2101\210E\220\032\2301\230A\340\002\013\320\013 \240\001\240\035\250h\260j\300\010\310\n\320RS\340\002\005\200W\210B\210a\340\003\022\220!\330\003\007\200u\210E\220\021\220!\330\004\024\220A\320\025'\240q\250\002\250\"\250L\270\002\270#\270T\300\025\300e\3101\310A\330\004\020\220\007\220q\230\001\340\003\004\330\004\017\210q\330\004\036\230a\330\004\023\2201\360\006\000\004\014\210;\220g\320\0357\260q\340\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_q_D_s_Q_c_1_c_Cq_6_Bhb_YfAXRq_e[] = "\320\000/\250q\340\001\004\200D\210\017\220s\230#\230Q\320\036.\250c\260\021\330\002\010\210\n\220!\2201\340\001\016\210c\220\021\220.\240\001\240\021\330\001\024\220C\220q\230\001\330\001\032\230)\2406\250\021\250\"\250B\250h\260b\270\001\330\001\035\230Y\240f\250A\250X\260R\260q\340\001\002\340\002\006\200e\2105\220\001\220\021\330\003\007\200u\210E\220\021\220!\330\004\r\210Q\210b\220\002\220\"\220B\220e\230>\250\021\250\"\250A\250Q\340\002\013\320\013\"\240!\2403\240i\250{\270.\310\001\360\006\000\003\027\220a\220|\2401\240C\240t\2505\260\005\260Q\260a\340\002\003\330\003\023\2207\230\"\230A\330\003\023\2201\330\003\024\220C\220t\2301\360\006\000\003\007\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_t1_t6_q_3b_Bc_2Qc_U_q_1A_t6_q_3[] = "\200\021\330\002\007\200t\2101\330\002\007\200t\2106\220\021\220!\330\002\007\200q\210\002\210!\2103\210b\220\004\220B\220c\230\022\2302\230Q\230c\240\024\240U\250%\250q\260\003\2601\260A\330\002\007\200t\2106\220\021\220!\330\002\007\200q\210\002\210!\2103\210b\220\004\220B\220c\230\022\2302\230Q\230c\240\024\240U\250%\250q\260\003\2601\260A\330\002\007\200t\2106\220\021\220!\330\002\007\200q\210\002\210!\2103\210b\220\003\2202\220R\220q\230\003\2304\230u\240E\250\021\250#\250Q\250a\330\002\007\200t\2106\220\021\220!\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\007\200u\210A\210W\220C\220r\230\025\230c\240\022\2401\240C\240r\250\024\250R\250r\260\021\260#\260R\260t\2702\270R\270q\300\003\3002\300R\300q\310\001\330\003\006\200d\210%\210q\220\003\2202\220Q\330\004\010\210\005\210Q\210e\2201";
static const char __pyx_k_Analytical_consecutive_first_ord[] = "Analytical consecutive first order solution failed";
static const char __pyx_k_Analytical_reversible_first_orde[] = "Analytical reversible first order solution failed";
static const char __pyx_k_Consider_enhanced_mixing_at_larg[] = "Consider enhanced mixing at larger scale";
static const char __pyx_k_Energy_balance_calculation_faile[] = "Energy balance calculation failed";
static const char __pyx_k_Linear_system_solve_failed_matri[] = "Linear system solve failed (matrix may be singular)";
static const char __pyx_k_Matrix_dimensions_incompatible_f[] = "Matrix dimensions incompatible for multiplication";
static const char __pyx_k_Matrix_inversion_failed_matrix_m[] = "Matrix inversion failed (matrix may be singular)";
static const char __pyx_k_Note_that_Cython_is_deliberately[] = "Note that Cython is deliberately stricter than PEP-484 and rejects subclasses of builtin types. If you need to pass subclasses then set the 'annotation_typing' directive to False.";
static const char __pyx_k_Thermodynamics___setstate_cython[] = "Thermodynamics.__setstate_cython__";
static const char __pyx_k_Verify_similar_residence_time_di[] = "Verify similar residence time distribution";
static const char __pyx_k_allocation_failed_for_output_buf[] = "allocation failed for output buffers";
static const char __pyx_k_b_must_be_a_vector_with_length_e[] = "b must be a vector with length equal to A's dimension";
static const char __pyx_k_multi_reactor_C_simulation_faile[] = "multi-reactor C++ simulation failed";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy__core_multiarray_failed_to[] = "numpy._core.multiarray failed to import";
static const char __pyx_k_numpy__core_umath_failed_to_impo[] = "numpy._core.umath failed to import";
static const char __pyx_k_py_analytical_reversible_first_o[] = "py_analytical_reversible_first_order";
static const char __pyx_k_py_check_mass_conservation_local[] = "py_check_mass_conservation.<locals>.genexpr";
static const char __pyx_k_py_residence_time_distribution_l[] = "py_residence_time_distribution.<locals>.genexpr";
static const char __pyx_k_py_simulate_multi_reactor_adapti[] = "py_simulate_multi_reactor_adaptive";
static const char __pyx_k_py_stability_analysis_locals_gen[] = "py_stability_analysis.<locals>.genexpr";
static const char __pyx_k_simulation_failed_or_insufficien[] = "simulation failed or insufficient buffer size";
static const char __pyx_k_y_ar_1_y_ar_1_as_Rq_IV1Cq_1_as_2[] = "\200\001\360\010\000'(\360\010\000\002\030\220y\240\006\240a\240r\250\022\2501\330\001\027\220y\240\006\240a\240r\250\022\2501\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\034\230I\240V\2501\250C\250q\260\t\270\022\2701\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\034\230I\240V\2501\250C\250q\260\t\270\022\2701\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\032\230)\2406\250\021\250\"\250B\250a\330\001\026\220i\230v\240Q\240h\250b\260\001\330\001\036\230i\240v\250Q\250b\260\002\260(\270\"\270A\330\001 \240\t\250\026\250q\260\002\260\"\260H\270B\270a\330\001\"\240)\2506\260\021\260\"\260B\260h\270b\300\001\340\001\002\340\002\006\200e\2105\220\001\220\021\330\003\t\210\021\210%\210r\220\021\220!\330\003\t\210\021\210%\210r\220\021\220!\340\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\016\210a\210u\220G\2301\230A\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\016\210a\210u\220G\2301\230A\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\340\002\006\200e\2105\220\001\220\021\330\003\014\210A\210U\220%\220q\230\001\360\006\000\003\014\320\013!\240\021\240#\240S\250\010\260\010\270\016\300m\320ST\330\n\030\230\r\240^\2601\330\n\030\230\014\240N\260!\330\n\035\320\035/\250{\270!\330\n\021\220\037\320 1\3201D\300A\340\002\005\200W\210B\210a\340\003\017\210q\220\005\220Q\220c\230\024\230U\240%\240q\250\001\330\003\021\220\021\330\003\023\2201\330\003\025\220Q\340\003\007\200u\210E\220\021\220!\330\004\r\210Q\210m\2301\230A\230Q\230b\240\002\240#\240T\250\025\250e\2601\260A\330\004\017\210q\220\017\230q\240\001\240\021\240\"\240B\240c\250\024\250U\260%\260q""\270\001\330\004\021\220\021\320\022#\2401\240A\240Q\240b\250\002\250#\250T\260\025\260e\2701\270A\330\004\017\210w\220a\220q\330\004\021\220\027\230\001\230\021\330\004\023\2207\230!\2301\340\003\004\330\004\r\210Q\330\004\026\220a\330\004\035\230Q\330\004\037\230q\330\004\020\220\001\330\004\017\210q\360\006\000\004\014\210;\220g\230Y\240a\340\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q";
static const char __pyx_k_y_ar_1_y_ar_1_as_Rq_IV1Cq_1_as_3[] = "\200\001\360\006\000\013\014\360\010\000\002\030\220y\240\006\240a\240r\250\022\2501\330\001\027\220y\240\006\240a\240r\250\022\2501\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\034\230I\240V\2501\250C\250q\260\t\270\022\2701\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\034\230I\240V\2501\250C\250q\260\t\270\022\2701\330\001\032\230&\240\006\240a\240s\250!\250:\260R\260q\330\001\032\230)\2406\250\021\250\"\250B\250a\330\001\026\220i\230v\240Q\240h\250b\260\001\330\001\036\230i\240v\250Q\250b\260\002\260(\270\"\270A\330\001&\240i\250v\260Q\260h\270b\300\001\340\001\002\340\002\006\200e\2105\220\001\220\021\330\003\t\210\021\210%\210r\220\021\220!\330\003\t\210\021\210%\210r\220\021\220!\340\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\016\210a\210u\220G\2301\230A\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\016\210a\210u\220G\2301\230A\330\002\006\200e\2105\220\001\220\023\220A\220Q\330\003\017\210q\220\005\220X\230Q\230a\340\002\006\200e\2105\220\001\220\021\330\003\014\210A\210U\220%\220q\230\001\360\006\000\003\014\320\013%\240Q\240c\250\023\250H\260H\270N\310-\320WX\330\013\031\230\035\240n\260A\330\013\023\320\023%\240[\260\001\330\013\022\220/\320!8\270\001\340\002\005\200W\210B\210a\340\003\017\210q\220\005\220Q\220c\230\024\230U\240%\240q\250\001\330\003\021\220\021\330\003\027\220q\320\030-\250Q\250c\260\024\260U\270%\270q\300\001\340\003\007\200u\210E\220\021\220!\330\004\r\210Q\210m\2301\230A\230Q\230b\240\002\240#\240T\250\025\250e\2601\260A\330\004\017\210w\220a\220q\340\003\004\330\004\r\210Q\330\004\026\220a\330\004\031\230\021\330\004\020\220\001\330\004\017\210q\360\006\000\004\014""\210;\220g\230Y\240a\340\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q\330\002\006\200a\200q";
/* #### Code section: decls ### */
static int __pyx_pf_6pyroxa_11_pybindings_14Thermodynamics___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, double __pyx_v_cp); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_2enthalpy(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_4entropy(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyroxa_11_pybindings_8Reaction___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self, double __pyx_v_kf, double __pyx_v_kr); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_8Reaction_2rate(struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self, double __pyx_v_A, double __pyx_v_B); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_8Reaction_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_8Reaction_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyroxa_11_pybindings_13ReactionMulti___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, double __pyx_v_kf, double __pyx_v_kr, PyObject *__pyx_v_reactants, PyObject *__pyx_v_products); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_2rate(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, PyObject *__pyx_v_conc); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyroxa_11_pybindings_12MultiReactor___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, PyObject *__pyx_v_species, PyObject *__pyx_v_conc0, PyObject *__pyx_v_reactions, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_2_dcdt(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, PyObject *__pyx_v_conc); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_4step(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, double __pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_6run(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, double __pyx_v_time_span, double __pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyroxa_11_pybindings_7Reactor___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self, struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_rxn, double __pyx_v_A0, double __pyx_v_B0, double __pyx_v_time_span, double __pyx_v_dt); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_7Reactor_2run(struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_7Reactor_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_7Reactor_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_run_simulation_cpp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_spec); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_2py_gibbs_free_energy(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_enthalpy, double __pyx_v_entropy, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_4py_equilibrium_constant(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_delta_G, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_6py_arrhenius_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_A, double __pyx_v_Ea, double __pyx_v_T, double __pyx_v_R); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_8py_pressure_peng_robinson(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_n, double __pyx_v_V, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_10py_fugacity_coefficient(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_P, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_12py_langmuir_hinshelwood_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_K_A, double __pyx_v_K_B, double __pyx_v_conc_A, double __pyx_v_conc_B); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_14py_photochemical_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_quantum_yield, double __pyx_v_molar_absorptivity, double __pyx_v_path_length, double __pyx_v_light_intensity, double __pyx_v_concentration); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_16py_autocatalytic_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_A, double __pyx_v_B, double __pyx_v_temperature); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_18py_michaelis_menten_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_20py_competitive_inhibition_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc, double __pyx_v_inhibitor_conc, double __pyx_v_Ki); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_22py_heat_capacity_nasa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_T, PyObject *__pyx_v_coeffs); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_24py_enthalpy_nasa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_T, PyObject *__pyx_v_coeffs); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_26py_entropy_nasa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_T, PyObject *__pyx_v_coeffs); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_28py_mass_transfer_correlation(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Re, double __pyx_v_Sc, double __pyx_v_geometry_factor); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_heat_transfer_correlation(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Re, double __pyx_v_Pr, double __pyx_v_geometry_factor); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_32py_effective_diffusivity(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_molecular_diff, double __pyx_v_porosity, double __pyx_v_tortuosity, double __pyx_v_constriction_factor); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_34py_pressure_drop_ergun(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_velocity, double __pyx_v_density, double __pyx_v_viscosity, double __pyx_v_particle_diameter, double __pyx_v_bed_porosity, double __pyx_v_bed_length); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_36py_pid_controller(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_setpoint, double __pyx_v_process_variable, double __pyx_v_dt, double __pyx_v_Kp, double __pyx_v_Ki, double __pyx_v_Kd); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_38py_gibbs_free_energy(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_enthalpy, double __pyx_v_entropy, double __pyx_v_temperature); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_40py_equilibrium_constant(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_delta_G, double __pyx_v_temperature); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_42py_arrhenius_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_pre_exponential, double __pyx_v_activation_energy, double __pyx_v_temperature, double __pyx_v_gas_constant); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_44py_pressure_peng_robinson(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_n, double __pyx_v_V, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_46py_fugacity_coefficient(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_P, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_48py_langmuir_hinshelwood_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_K_A, double __pyx_v_K_B, double __pyx_v_conc_A, double __pyx_v_conc_B); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_50py_photochemical_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_quantum_yield, double __pyx_v_molar_absorptivity, double __pyx_v_path_length, double __pyx_v_light_intensity, double __pyx_v_concentration); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_52py_linear_interpolate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_x, PyObject *__pyx_v_x_data, PyObject *__pyx_v_y_data); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_54py_cubic_spline_interpolate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_x, PyObject *__pyx_v_x_data, PyObject *__pyx_v_y_data); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_56py_calculate_r_squared(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental, PyObject *__pyx_v_predicted); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_58py_calculate_rmse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental, PyObject *__pyx_v_predicted); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_60py_calculate_aic(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental, PyObject *__pyx_v_predicted, int __pyx_v_nparams); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_62py_michaelis_menten_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_64py_competitive_inhibition_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc, double __pyx_v_inhibitor_conc, double __pyx_v_Ki); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_66py_enthalpy_c(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_cp, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_68py_entropy_c(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_cp, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_70py_analytical_first_order(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_A0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_72py_analytical_reversible_first_order(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_kf, double __pyx_v_kr, double __pyx_v_A0, double __pyx_v_B0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_74py_analytical_consecutive_first_order(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k1, double __pyx_v_k2, double __pyx_v_A0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_76py_calculate_objective_function(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental_data, PyObject *__pyx_v_simulated_data, PyObject *__pyx_v_weights); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_26py_check_mass_conservation_genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_78py_check_mass_conservation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_concentrations, PyObject *__pyx_v_tolerance); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_80py_calculate_rate_constants(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_kf_ref, PyObject *__pyx_v_kr_ref, PyObject *__pyx_v_Ea_f, PyObject *__pyx_v_Ea_r, double __pyx_v_T, double __pyx_v_T_ref); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_82py_cross_validation_score(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_parameters, int __pyx_v_n_folds); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_84py_kriging_interpolation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x_new, PyObject *__pyx_v_x_known, PyObject *__pyx_v_y_known, PyObject *__pyx_v_variogram_params); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_86py_bootstrap_uncertainty(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_parameters, int __pyx_v_n_bootstrap); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_88py_matrix_multiply(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_A, PyObject *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_90py_matrix_invert(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_92py_solve_linear_system(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_A, PyObject *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_94py_calculate_sensitivity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_params, PyObject *__pyx_v_concentrations, PyObject *__pyx_v_rates, PyObject *__pyx_v_n_params, PyObject *__pyx_v_n_species); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_96py_calculate_jacobian(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_dydt, PyObject *__pyx_v_n_species); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_21py_stability_analysis_genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_98py_stability_analysis(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_steady_state, PyObject *__pyx_v_n_species, PyObject *__pyx_v_temperature, PyObject *__pyx_v_pressure); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_100py_mpc_controller(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_current_state, PyObject *__pyx_v_setpoints, PyObject *__pyx_v_control_bounds, PyObject *__pyx_v_reaction_network, int __pyx_v_horizon); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_102py_real_time_optimization(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_current_concentrations, PyObject *__pyx_v_economic_coefficients, PyObject *__pyx_v_control_bounds, PyObject *__pyx_v_reaction_network); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_104py_simulate_packed_bed(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, int __pyx_v_nseg, PyObject *__pyx_v_kf, PyObject *__pyx_v_kr, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_flow_rate, double __pyx_v_bed_length, double __pyx_v_bed_porosity, double __pyx_v_particle_diameter, double __pyx_v_catalyst_density, double __pyx_v_effectiveness_factor, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_106py_simulate_fluidized_bed(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, PyObject *__pyx_v_kf, PyObject *__pyx_v_kr, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_gas_velocity, double __pyx_v_bed_height, double __pyx_v_bed_porosity, double __pyx_v_bubble_fraction, double __pyx_v_particle_diameter, double __pyx_v_catalyst_density, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_108py_simulate_homogeneous_batch(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, PyObject *__pyx_v_kf, PyObject *__pyx_v_kr, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_volume, double __pyx_v_mixing_intensity, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_110py_simulate_multi_reactor_adaptive(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_reactor_config, CYTHON_UNUSED PyObject *__pyx_v_feed_conditions, CYTHON_UNUSED PyObject *__pyx_v_control_strategy); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_112py_calculate_energy_balance(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, PyObject *__pyx_v_conc, PyObject *__pyx_v_reaction_rates, PyObject *__pyx_v_enthalpies_formation, PyObject *__pyx_v_heat_capacities, double __pyx_v_T); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_114py_monte_carlo_simulation(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, int __pyx_v_nsamples, PyObject *__pyx_v_kf_mean, PyObject *__pyx_v_kr_mean, PyObject *__pyx_v_kf_std, PyObject *__pyx_v_kr_std, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_nthreads); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_genexpr(PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_3genexpr(PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_6genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_116py_residence_time_distribution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_rates, PyObject *__pyx_v_volumes, PyObject *__pyx_v_n_tanks); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_118py_catalyst_deactivation_model(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_initial_activity, PyObject *__pyx_v_deactivation_constant, PyObject *__pyx_v_time, PyObject *__pyx_v_temperature, PyObject *__pyx_v_partial_pressure_poison); /* proto */
static PyObject *__pyx_pf_6pyroxa_11_pybindings_120py_process_scale_up(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lab_scale_volume, PyObject *__pyx_v_pilot_scale_volume, PyObject *__pyx_v_lab_conditions); /* proto */
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_Thermodynamics(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_Reaction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_ReactionMulti(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_MultiReactor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_Reactor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct__genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
/* SmallCodeConfig */
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  PyObject *__pyx_type_6pyroxa_11_pybindings_Thermodynamics;
  PyObject *__pyx_type_6pyroxa_11_pybindings_Reaction;
  PyObject *__pyx_type_6pyroxa_11_pybindings_ReactionMulti;
  PyObject *__pyx_type_6pyroxa_11_pybindings_MultiReactor;
  PyObject *__pyx_type_6pyroxa_11_pybindings_Reactor;
  PyObject *__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__genexpr;
  PyObject *__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr;
  PyObject *__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution;
  PyObject *__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr;
  PyObject *__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr;
  PyObject *__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr;
  PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics;
  PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings_Reaction;
  PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti;
  PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings_MultiReactor;
  PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings_Reactor;
  PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__genexpr;
  PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr;
  PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution;
  PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr;
  PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr;
  PyTypeObject *__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr;
  __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_pop;
  PyObject *__pyx_tuple[10];
  PyObject *__pyx_codeobj_tab[84];
  PyObject *__pyx_string_tab[533];
  PyObject *__pyx_float_0_0;
  PyObject *__pyx_float_0_1;
  PyObject *__pyx_float_0_2;
  PyObject *__pyx_float_0_5;
  PyObject *__pyx_float_0_7;
  PyObject *__pyx_float_0_9;
  PyObject *__pyx_float_1_0;
  PyObject *__pyx_float_2_0;
  PyObject *__pyx_float_0_01;
  PyObject *__pyx_float_0_05;
  PyObject *__pyx_float_0_15;
  PyObject *__pyx_float_10_0;
  PyObject *__pyx_float_1eneg_6;
  PyObject *__pyx_float_8_314;
  PyObject *__pyx_float_298_15;
  PyObject *__pyx_float_101325_0;
  PyObject *__pyx_float_neg_1_0;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_10;
  PyObject *__pyx_int_50;
  PyObject *__pyx_int_neg_5000;
/* #### Code section: module_state_contents ### */

#if CYTHON_USE_FREELISTS
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr *__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct__genexpr[8];
int __pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct__genexpr;
#endif

#if CYTHON_USE_FREELISTS
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr[8];
int __pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr;
#endif

#if CYTHON_USE_FREELISTS
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution[8];
int __pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution;
#endif

#if CYTHON_USE_FREELISTS
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr[8];
int __pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr;
#endif

#if CYTHON_USE_FREELISTS
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr *__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr[8];
int __pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr;
#endif

#if CYTHON_USE_FREELISTS
struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr[8];
int __pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr;
#endif
/* CommonTypesMetaclass.module_state_decls */
PyTypeObject *__pyx_CommonTypesMetaclassType;

/* CachedMethodType.module_state_decls */
#if CYTHON_COMPILING_IN_LIMITED_API
PyObject *__Pyx_CachedMethodType;
#endif

/* CodeObjectCache.module_state_decls */
struct __Pyx_CodeObjectCache __pyx_code_cache;

/* IterNextPlain.module_state_decls */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
PyObject *__Pyx_GetBuiltinNext_LimitedAPI_cache;
#endif

/* #### Code section: module_state_end ### */
} __pyx_mstatetype;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate_global (__Pyx_PyModule_GetState(__Pyx_State_FindModule(&__pyx_moduledef)))

#define __pyx_m (__Pyx_State_FindModule(&__pyx_moduledef))
#else
static __pyx_mstatetype __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstatetype * const __pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: constant_name_defines ### */
#define __pyx_kp_u_ __pyx_string_tab[0]
#define __pyx_n_u_A __pyx_string_tab[1]
#define __pyx_n_u_A0 __pyx_string_tab[2]
#define __pyx_n_u_A_c __pyx_string_tab[3]
#define __pyx_n_u_A_inv __pyx_string_tab[4]
#define __pyx_n_u_A_inv_c __pyx_string_tab[5]
#define __pyx_n_u_A_list __pyx_string_tab[6]
#define __pyx_kp_u_A_must_be_a_square_matrix __pyx_string_tab[7]
#define __pyx_n_u_A_out __pyx_string_tab[8]
#define __pyx_kp_u_Analytical_consecutive_first_ord __pyx_string_tab[9]
#define __pyx_kp_u_Analytical_first_order_solution __pyx_string_tab[10]
#define __pyx_kp_u_Analytical_reversible_first_orde __pyx_string_tab[11]
#define __pyx_n_u_Aout __pyx_string_tab[12]
#define __pyx_n_u_B __pyx_string_tab[13]
#define __pyx_n_u_B0 __pyx_string_tab[14]
#define __pyx_n_u_B_c __pyx_string_tab[15]
#define __pyx_n_u_B_list __pyx_string_tab[16]
#define __pyx_n_u_B_out __pyx_string_tab[17]
#define __pyx_n_u_Bout __pyx_string_tab[18]
#define __pyx_n_u_C __pyx_string_tab[19]
#define __pyx_n_u_C_c __pyx_string_tab[20]
#define __pyx_n_u_C_list __pyx_string_tab[21]
#define __pyx_n_u_C_out __pyx_string_tab[22]
#define __pyx_kp_u_Consider_enhanced_mixing_at_larg __pyx_string_tab[23]
#define __pyx_n_u_Ea __pyx_string_tab[24]
#define __pyx_n_u_Ea_f __pyx_string_tab[25]
#define __pyx_n_u_Ea_f_c __pyx_string_tab[26]
#define __pyx_n_u_Ea_r __pyx_string_tab[27]
#define __pyx_n_u_Ea_r_c __pyx_string_tab[28]
#define __pyx_kp_u_Empty_concentration_data __pyx_string_tab[29]
#define __pyx_kp_u_Energy_balance_calculation_faile __pyx_string_tab[30]
#define __pyx_n_u_HAS_NUMPY __pyx_string_tab[31]
#define __pyx_n_u_ImportError __pyx_string_tab[32]
#define __pyx_kp_u_Input_must_be_a_square_matrix __pyx_string_tab[33]
#define __pyx_kp_u_Inputs_must_be_2D_matrices __pyx_string_tab[34]
#define __pyx_n_u_K_A __pyx_string_tab[35]
#define __pyx_n_u_K_B __pyx_string_tab[36]
#define __pyx_n_u_Kd __pyx_string_tab[37]
#define __pyx_n_u_Ki __pyx_string_tab[38]
#define __pyx_n_u_Km __pyx_string_tab[39]
#define __pyx_n_u_Kp __pyx_string_tab[40]
#define __pyx_kp_u_Linear_system_solve_failed_matri __pyx_string_tab[41]
#define __pyx_n_u_M __pyx_string_tab[42]
#define __pyx_kp_u_Matrix_dimensions_incompatible_f __pyx_string_tab[43]
#define __pyx_kp_u_Matrix_inversion_failed_matrix_m __pyx_string_tab[44]
#define __pyx_kp_u_Matrix_multiplication_failed __pyx_string_tab[45]
#define __pyx_n_u_MemoryError __pyx_string_tab[46]
#define __pyx_kp_u_Monitor_for_scale_up_effects __pyx_string_tab[47]
#define __pyx_kp_u_Monte_Carlo_simulation_failed __pyx_string_tab[48]
#define __pyx_n_u_MultiReactor __pyx_string_tab[49]
#define __pyx_n_u_MultiReactor___reduce_cython __pyx_string_tab[50]
#define __pyx_n_u_MultiReactor___setstate_cython __pyx_string_tab[51]
#define __pyx_n_u_MultiReactor__dcdt __pyx_string_tab[52]
#define __pyx_n_u_MultiReactor_run __pyx_string_tab[53]
#define __pyx_n_u_MultiReactor_step __pyx_string_tab[54]
#define __pyx_n_u_N __pyx_string_tab[55]
#define __pyx_kp_u_Note_that_Cython_is_deliberately __pyx_string_tab[56]
#define __pyx_n_u_P __pyx_string_tab[57]
#define __pyx_n_u_Pc __pyx_string_tab[58]
#define __pyx_n_u_Pr __pyx_string_tab[59]
#define __pyx_n_u_R __pyx_string_tab[60]
#define __pyx_n_u_Re __pyx_string_tab[61]
#define __pyx_n_u_Reaction __pyx_string_tab[62]
#define __pyx_n_u_ReactionMulti __pyx_string_tab[63]
#define __pyx_n_u_ReactionMulti___reduce_cython __pyx_string_tab[64]
#define __pyx_n_u_ReactionMulti___setstate_cython __pyx_string_tab[65]
#define __pyx_n_u_ReactionMulti_rate __pyx_string_tab[66]
#define __pyx_n_u_Reaction___reduce_cython __pyx_string_tab[67]
#define __pyx_n_u_Reaction___setstate_cython __pyx_string_tab[68]
#define __pyx_n_u_Reaction_rate __pyx_string_tab[69]
#define __pyx_n_u_Reactor __pyx_string_tab[70]
#define __pyx_n_u_Reactor___reduce_cython __pyx_string_tab[71]
#define __pyx_n_u_Reactor___setstate_cython __pyx_string_tab[72]
#define __pyx_n_u_Reactor_run __pyx_string_tab[73]
#define __pyx_n_u_RuntimeError __pyx_string_tab[74]
#define __pyx_n_u_Sc __pyx_string_tab[75]
#define __pyx_kp_u_Simulation_failed __pyx_string_tab[76]
#define __pyx_n_u_T __pyx_string_tab[77]
#define __pyx_n_u_T_ref __pyx_string_tab[78]
#define __pyx_n_u_Tc __pyx_string_tab[79]
#define __pyx_n_u_Thermodynamics __pyx_string_tab[80]
#define __pyx_n_u_Thermodynamics___reduce_cython __pyx_string_tab[81]
#define __pyx_n_u_Thermodynamics___setstate_cython __pyx_string_tab[82]
#define __pyx_n_u_Thermodynamics_enthalpy __pyx_string_tab[83]
#define __pyx_n_u_Thermodynamics_entropy __pyx_string_tab[84]
#define __pyx_n_u_TypeError __pyx_string_tab[85]
#define __pyx_n_u_V __pyx_string_tab[86]
#define __pyx_n_u_ValueError __pyx_string_tab[87]
#define __pyx_kp_u_Verify_similar_residence_time_di __pyx_string_tab[88]
#define __pyx_n_u_Vmax __pyx_string_tab[89]
#define __pyx_n_u_aarr __pyx_string_tab[90]
#define __pyx_n_u_activation_energy __pyx_string_tab[91]
#define __pyx_kp_u_add_note __pyx_string_tab[92]
#define __pyx_kp_u_allocation_failed __pyx_string_tab[93]
#define __pyx_kp_u_allocation_failed_for_coeffs __pyx_string_tab[94]
#define __pyx_kp_u_allocation_failed_for_conc0 __pyx_string_tab[95]
#define __pyx_kp_u_allocation_failed_for_kf_kr __pyx_string_tab[96]
#define __pyx_kp_u_allocation_failed_for_output_buf __pyx_string_tab[97]
#define __pyx_kp_u_allocation_failed_for_products __pyx_string_tab[98]
#define __pyx_kp_u_allocation_failed_for_reactants __pyx_string_tab[99]
#define __pyx_n_u_area_scale __pyx_string_tab[100]
#define __pyx_n_u_array __pyx_string_tab[101]
#define __pyx_n_u_asyncio_coroutines __pyx_string_tab[102]
#define __pyx_n_u_b __pyx_string_tab[103]
#define __pyx_n_u_b_c __pyx_string_tab[104]
#define __pyx_kp_u_b_must_be_a_vector_with_length_e __pyx_string_tab[105]
#define __pyx_n_u_bed_height __pyx_string_tab[106]
#define __pyx_n_u_bed_length __pyx_string_tab[107]
#define __pyx_n_u_bed_porosity __pyx_string_tab[108]
#define __pyx_n_u_bounds __pyx_string_tab[109]
#define __pyx_n_u_bubble_conc_out __pyx_string_tab[110]
#define __pyx_n_u_bubble_concentrations __pyx_string_tab[111]
#define __pyx_n_u_bubble_fraction __pyx_string_tab[112]
#define __pyx_n_u_bubble_matrix __pyx_string_tab[113]
#define __pyx_n_u_bubble_t __pyx_string_tab[114]
#define __pyx_n_u_c_coeffs __pyx_string_tab[115]
#define __pyx_n_u_c_conc0 __pyx_string_tab[116]
#define __pyx_n_u_c_prod_idx __pyx_string_tab[117]
#define __pyx_n_u_c_prod_nu __pyx_string_tab[118]
#define __pyx_n_u_c_prod_off __pyx_string_tab[119]
#define __pyx_n_u_c_reac_idx __pyx_string_tab[120]
#define __pyx_n_u_c_reac_nu __pyx_string_tab[121]
#define __pyx_n_u_c_reac_off __pyx_string_tab[122]
#define __pyx_n_u_carr __pyx_string_tab[123]
#define __pyx_n_u_catalyst_density __pyx_string_tab[124]
#define __pyx_n_u_class_getitem __pyx_string_tab[125]
#define __pyx_n_u_cline_in_traceback __pyx_string_tab[126]
#define __pyx_n_u_close __pyx_string_tab[127]
#define __pyx_n_u_coeffs __pyx_string_tab[128]
#define __pyx_n_u_conc __pyx_string_tab[129]
#define __pyx_n_u_conc0 __pyx_string_tab[130]
#define __pyx_n_u_conc0_arr __pyx_string_tab[131]
#define __pyx_n_u_conc0_py __pyx_string_tab[132]
#define __pyx_n_u_conc_A __pyx_string_tab[133]
#define __pyx_n_u_conc_B __pyx_string_tab[134]
#define __pyx_n_u_conc_arr __pyx_string_tab[135]
#define __pyx_n_u_conc_matrix __pyx_string_tab[136]
#define __pyx_n_u_conc_out_flat __pyx_string_tab[137]
#define __pyx_n_u_conc_t __pyx_string_tab[138]
#define __pyx_n_u_conc_traj __pyx_string_tab[139]
#define __pyx_n_u_concentration __pyx_string_tab[140]
#define __pyx_n_u_concentrations __pyx_string_tab[141]
#define __pyx_n_u_concs __pyx_string_tab[142]
#define __pyx_n_u_constriction_factor __pyx_string_tab[143]
#define __pyx_n_u_control_actions __pyx_string_tab[144]
#define __pyx_n_u_control_bounds __pyx_string_tab[145]
#define __pyx_n_u_control_strategy __pyx_string_tab[146]
#define __pyx_n_u_convergence __pyx_string_tab[147]
#define __pyx_n_u_conversion __pyx_string_tab[148]
#define __pyx_n_u_cp __pyx_string_tab[149]
#define __pyx_n_u_cp_arr __pyx_string_tab[150]
#define __pyx_n_u_ctypes __pyx_string_tab[151]
#define __pyx_n_u_current_activity __pyx_string_tab[152]
#define __pyx_n_u_current_concentrations __pyx_string_tab[153]
#define __pyx_n_u_current_state __pyx_string_tab[154]
#define __pyx_n_u_data __pyx_string_tab[155]
#define __pyx_n_u_data_c __pyx_string_tab[156]
#define __pyx_n_u_dcdt __pyx_string_tab[157]
#define __pyx_n_u_deactivation_constant __pyx_string_tab[158]
#define __pyx_n_u_deactivation_rate __pyx_string_tab[159]
#define __pyx_n_u_delta_G __pyx_string_tab[160]
#define __pyx_n_u_density __pyx_string_tab[161]
#define __pyx_n_u_dimensionless_variance __pyx_string_tab[162]
#define __pyx_kp_u_disable __pyx_string_tab[163]
#define __pyx_n_u_distribution __pyx_string_tab[164]
#define __pyx_n_u_dt __pyx_string_tab[165]
#define __pyx_n_u_dtype __pyx_string_tab[166]
#define __pyx_n_u_dydt __pyx_string_tab[167]
#define __pyx_n_u_econ_coeffs __pyx_string_tab[168]
#define __pyx_n_u_economic_coefficients __pyx_string_tab[169]
#define __pyx_n_u_effective_kd __pyx_string_tab[170]
#define __pyx_n_u_effectiveness_factor __pyx_string_tab[171]
#define __pyx_n_u_eigenval __pyx_string_tab[172]
#define __pyx_n_u_eigenvalues __pyx_string_tab[173]
#define __pyx_n_u_empty __pyx_string_tab[174]
#define __pyx_n_u_emulsion_conc_out __pyx_string_tab[175]
#define __pyx_n_u_emulsion_concentrations __pyx_string_tab[176]
#define __pyx_n_u_emulsion_matrix __pyx_string_tab[177]
#define __pyx_n_u_emulsion_t __pyx_string_tab[178]
#define __pyx_kp_u_enable __pyx_string_tab[179]
#define __pyx_n_u_enthalpies_arr __pyx_string_tab[180]
#define __pyx_n_u_enthalpies_formation __pyx_string_tab[181]
#define __pyx_n_u_enthalpy __pyx_string_tab[182]
#define __pyx_n_u_entropy __pyx_string_tab[183]
#define __pyx_n_u_error __pyx_string_tab[184]
#define __pyx_n_u_ev __pyx_string_tab[185]
#define __pyx_n_u_exp __pyx_string_tab[186]
#define __pyx_n_u_exp_c __pyx_string_tab[187]
#define __pyx_n_u_experimental __pyx_string_tab[188]
#define __pyx_n_u_experimental_data __pyx_string_tab[189]
#define __pyx_n_u_feed_conditions __pyx_string_tab[190]
#define __pyx_n_u_float64 __pyx_string_tab[191]
#define __pyx_n_u_flow_rate __pyx_string_tab[192]
#define __pyx_n_u_flow_rate_adjust __pyx_string_tab[193]
#define __pyx_n_u_flow_rates __pyx_string_tab[194]
#define __pyx_n_u_func __pyx_string_tab[195]
#define __pyx_n_u_gas_constant __pyx_string_tab[196]
#define __pyx_n_u_gas_velocity __pyx_string_tab[197]
#define __pyx_kp_u_gc __pyx_string_tab[198]
#define __pyx_n_u_genexpr __pyx_string_tab[199]
#define __pyx_n_u_geometry_factor __pyx_string_tab[200]
#define __pyx_n_u_get __pyx_string_tab[201]
#define __pyx_n_u_getstate __pyx_string_tab[202]
#define __pyx_n_u_heat_capacities __pyx_string_tab[203]
#define __pyx_n_u_heat_generation __pyx_string_tab[204]
#define __pyx_n_u_heat_generation_val __pyx_string_tab[205]
#define __pyx_n_u_heat_transfer __pyx_string_tab[206]
#define __pyx_n_u_heat_transfer_coeff __pyx_string_tab[207]
#define __pyx_n_u_horizon __pyx_string_tab[208]
#define __pyx_n_u_i __pyx_string_tab[209]
#define __pyx_n_u_index __pyx_string_tab[210]
#define __pyx_n_u_inhibitor_conc __pyx_string_tab[211]
#define __pyx_n_u_initial __pyx_string_tab[212]
#define __pyx_n_u_initial_activity __pyx_string_tab[213]
#define __pyx_n_u_initializing __pyx_string_tab[214]
#define __pyx_n_u_integral_term __pyx_string_tab[215]
#define __pyx_n_u_is_conserved __pyx_string_tab[216]
#define __pyx_n_u_is_coroutine __pyx_string_tab[217]
#define __pyx_n_u_is_stable __pyx_string_tab[218]
#define __pyx_kp_u_isenabled __pyx_string_tab[219]
#define __pyx_n_u_items __pyx_string_tab[220]
#define __pyx_n_u_j __pyx_string_tab[221]
#define __pyx_n_u_jacobian __pyx_string_tab[222]
#define __pyx_n_u_k __pyx_string_tab[223]
#define __pyx_n_u_k1 __pyx_string_tab[224]
#define __pyx_n_u_k2 __pyx_string_tab[225]
#define __pyx_n_u_k3 __pyx_string_tab[226]
#define __pyx_n_u_k4 __pyx_string_tab[227]
#define __pyx_n_u_kf __pyx_string_tab[228]
#define __pyx_n_u_kf_arr __pyx_string_tab[229]
#define __pyx_n_u_kf_c __pyx_string_tab[230]
#define __pyx_n_u_kf_mean __pyx_string_tab[231]
#define __pyx_n_u_kf_mean_arr __pyx_string_tab[232]
#define __pyx_n_u_kf_out __pyx_string_tab[233]
#define __pyx_n_u_kf_out_c __pyx_string_tab[234]
#define __pyx_n_u_kf_ptr __pyx_string_tab[235]
#define __pyx_n_u_kf_ref __pyx_string_tab[236]
#define __pyx_n_u_kf_ref_c __pyx_string_tab[237]
#define __pyx_n_u_kf_std __pyx_string_tab[238]
#define __pyx_n_u_kf_std_arr __pyx_string_tab[239]
#define __pyx_n_u_kr __pyx_string_tab[240]
#define __pyx_n_u_kr_arr __pyx_string_tab[241]
#define __pyx_n_u_kr_c __pyx_string_tab[242]
#define __pyx_n_u_kr_mean __pyx_string_tab[243]
#define __pyx_n_u_kr_mean_arr __pyx_string_tab[244]
#define __pyx_n_u_kr_out __pyx_string_tab[245]
#define __pyx_n_u_kr_out_c __pyx_string_tab[246]
#define __pyx_n_u_kr_ptr __pyx_string_tab[247]
#define __pyx_n_u_kr_ref __pyx_string_tab[248]
#define __pyx_n_u_kr_ref_c __pyx_string_tab[249]
#define __pyx_n_u_kr_std __pyx_string_tab[250]
#define __pyx_n_u_kr_std_arr __pyx_string_tab[251]
#define __pyx_n_u_lab_conditions __pyx_string_tab[252]
#define __pyx_n_u_lab_scale_volume __pyx_string_tab[253]
#define __pyx_n_u_length_scale __pyx_string_tab[254]
#define __pyx_n_u_light_intensity __pyx_string_tab[255]
#define __pyx_n_u_log __pyx_string_tab[256]
#define __pyx_n_u_m __pyx_string_tab[257]
#define __pyx_n_u_main __pyx_string_tab[258]
#define __pyx_n_u_mass_balance __pyx_string_tab[259]
#define __pyx_n_u_mass_balance_list __pyx_string_tab[260]
#define __pyx_n_u_mass_transfer __pyx_string_tab[261]
#define __pyx_n_u_max __pyx_string_tab[262]
#define __pyx_n_u_max_len __pyx_string_tab[263]
#define __pyx_n_u_max_list __pyx_string_tab[264]
#define __pyx_n_u_max_violation __pyx_string_tab[265]
#define __pyx_n_u_mean __pyx_string_tab[266]
#define __pyx_n_u_mean_list __pyx_string_tab[267]
#define __pyx_n_u_mean_residence_time __pyx_string_tab[268]
#define __pyx_n_u_mean_residence_times __pyx_string_tab[269]
#define __pyx_n_u_min __pyx_string_tab[270]
#define __pyx_n_u_min_list __pyx_string_tab[271]
#define __pyx_n_u_mixing_efficiency __pyx_string_tab[272]
#define __pyx_n_u_mixing_efficiency_out __pyx_string_tab[273]
#define __pyx_n_u_mixing_intensity __pyx_string_tab[274]
#define __pyx_n_u_mixing_time __pyx_string_tab[275]
#define __pyx_n_u_module __pyx_string_tab[276]
#define __pyx_n_u_molar_absorptivity __pyx_string_tab[277]
#define __pyx_n_u_molecular_diff __pyx_string_tab[278]
#define __pyx_kp_u_multi_reactor_C_simulation_faile __pyx_string_tab[279]
#define __pyx_n_u_n __pyx_string_tab[280]
#define __pyx_n_u_n_bootstrap __pyx_string_tab[281]
#define __pyx_n_u_n_controls __pyx_string_tab[282]
#define __pyx_n_u_n_data __pyx_string_tab[283]
#define __pyx_n_u_n_folds __pyx_string_tab[284]
#define __pyx_n_u_n_known __pyx_string_tab[285]
#define __pyx_n_u_n_params __pyx_string_tab[286]
#define __pyx_n_u_n_points __pyx_string_tab[287]
#define __pyx_n_u_n_reactions __pyx_string_tab[288]
#define __pyx_n_u_n_reactors __pyx_string_tab[289]
#define __pyx_n_u_n_samples __pyx_string_tab[290]
#define __pyx_n_u_n_species __pyx_string_tab[291]
#define __pyx_n_u_n_tanks __pyx_string_tab[292]
#define __pyx_n_u_name __pyx_string_tab[293]
#define __pyx_n_u_ndata __pyx_string_tab[294]
#define __pyx_n_u_ndim __pyx_string_tab[295]
#define __pyx_n_u_next __pyx_string_tab[296]
#define __pyx_kp_u_no_default___reduce___due_to_non __pyx_string_tab[297]
#define __pyx_n_u_np __pyx_string_tab[298]
#define __pyx_n_u_nparams __pyx_string_tab[299]
#define __pyx_n_u_npoints __pyx_string_tab[300]
#define __pyx_n_u_npts __pyx_string_tab[301]
#define __pyx_n_u_nsamples __pyx_string_tab[302]
#define __pyx_n_u_nseg __pyx_string_tab[303]
#define __pyx_n_u_nsteps __pyx_string_tab[304]
#define __pyx_n_u_nthreads __pyx_string_tab[305]
#define __pyx_n_u_nu __pyx_string_tab[306]
#define __pyx_n_u_numpy __pyx_string_tab[307]
#define __pyx_kp_u_numpy__core_multiarray_failed_to __pyx_string_tab[308]
#define __pyx_kp_u_numpy__core_umath_failed_to_impo __pyx_string_tab[309]
#define __pyx_n_u_omega __pyx_string_tab[310]
#define __pyx_n_u_optimal_controls __pyx_string_tab[311]
#define __pyx_n_u_optimal_settings __pyx_string_tab[312]
#define __pyx_n_u_overall_conversion __pyx_string_tab[313]
#define __pyx_n_u_overall_mean_tau __pyx_string_tab[314]
#define __pyx_n_u_p __pyx_string_tab[315]
#define __pyx_n_u_param_distribution __pyx_string_tab[316]
#define __pyx_n_u_param_samples __pyx_string_tab[317]
#define __pyx_n_u_parameter_distribution __pyx_string_tab[318]
#define __pyx_n_u_parameters __pyx_string_tab[319]
#define __pyx_n_u_params __pyx_string_tab[320]
#define __pyx_n_u_params_c __pyx_string_tab[321]
#define __pyx_n_u_partial_pressure_poison __pyx_string_tab[322]
#define __pyx_n_u_particle_diameter __pyx_string_tab[323]
#define __pyx_n_u_path_length __pyx_string_tab[324]
#define __pyx_n_u_pilot_conditions __pyx_string_tab[325]
#define __pyx_n_u_pilot_scale_volume __pyx_string_tab[326]
#define __pyx_n_u_poison_factor __pyx_string_tab[327]
#define __pyx_n_u_pop __pyx_string_tab[328]
#define __pyx_n_u_porosity __pyx_string_tab[329]
#define __pyx_n_u_power_scale __pyx_string_tab[330]
#define __pyx_n_u_pre_exponential __pyx_string_tab[331]
#define __pyx_n_u_pred_c __pyx_string_tab[332]
#define __pyx_n_u_predicted __pyx_string_tab[333]
#define __pyx_n_u_predicted_profit __pyx_string_tab[334]
#define __pyx_n_u_pressure __pyx_string_tab[335]
#define __pyx_n_u_pressure_drop __pyx_string_tab[336]
#define __pyx_n_u_pressure_out __pyx_string_tab[337]
#define __pyx_n_u_pressure_out_list __pyx_string_tab[338]
#define __pyx_n_u_previous_error __pyx_string_tab[339]
#define __pyx_n_u_process_variable __pyx_string_tab[340]
#define __pyx_n_u_prod_idx __pyx_string_tab[341]
#define __pyx_n_u_prod_idx_arr __pyx_string_tab[342]
#define __pyx_n_u_prod_idx_list __pyx_string_tab[343]
#define __pyx_n_u_prod_nu __pyx_string_tab[344]
#define __pyx_n_u_prod_nu_arr __pyx_string_tab[345]
#define __pyx_n_u_prod_nu_list __pyx_string_tab[346]
#define __pyx_n_u_prod_off __pyx_string_tab[347]
#define __pyx_n_u_prod_off_arr __pyx_string_tab[348]
#define __pyx_n_u_products __pyx_string_tab[349]
#define __pyx_n_u_py_analytical_consecutive_first __pyx_string_tab[350]
#define __pyx_n_u_py_analytical_first_order __pyx_string_tab[351]
#define __pyx_n_u_py_analytical_reversible_first_o __pyx_string_tab[352]
#define __pyx_n_u_py_arrhenius_rate __pyx_string_tab[353]
#define __pyx_n_u_py_autocatalytic_rate __pyx_string_tab[354]
#define __pyx_n_u_py_bootstrap_uncertainty __pyx_string_tab[355]
#define __pyx_n_u_py_calculate_aic __pyx_string_tab[356]
#define __pyx_n_u_py_calculate_energy_balance __pyx_string_tab[357]
#define __pyx_n_u_py_calculate_jacobian __pyx_string_tab[358]
#define __pyx_n_u_py_calculate_objective_function __pyx_string_tab[359]
#define __pyx_n_u_py_calculate_r_squared __pyx_string_tab[360]
#define __pyx_n_u_py_calculate_rate_constants __pyx_string_tab[361]
#define __pyx_n_u_py_calculate_rmse __pyx_string_tab[362]
#define __pyx_n_u_py_calculate_sensitivity __pyx_string_tab[363]
#define __pyx_n_u_py_catalyst_deactivation_model __pyx_string_tab[364]
#define __pyx_n_u_py_check_mass_conservation __pyx_string_tab[365]
#define __pyx_n_u_py_check_mass_conservation_local __pyx_string_tab[366]
#define __pyx_n_u_py_competitive_inhibition_rate __pyx_string_tab[367]
#define __pyx_n_u_py_cross_validation_score __pyx_string_tab[368]
#define __pyx_n_u_py_cubic_spline_interpolate __pyx_string_tab[369]
#define __pyx_n_u_py_effective_diffusivity __pyx_string_tab[370]
#define __pyx_n_u_py_enthalpy_c __pyx_string_tab[371]
#define __pyx_n_u_py_enthalpy_nasa __pyx_string_tab[372]
#define __pyx_n_u_py_entropy_c __pyx_string_tab[373]
#define __pyx_n_u_py_entropy_nasa __pyx_string_tab[374]
#define __pyx_n_u_py_equilibrium_constant __pyx_string_tab[375]
#define __pyx_n_u_py_fugacity_coefficient __pyx_string_tab[376]
#define __pyx_n_u_py_gibbs_free_energy __pyx_string_tab[377]
#define __pyx_n_u_py_heat_capacity_nasa __pyx_string_tab[378]
#define __pyx_n_u_py_heat_transfer_correlation __pyx_string_tab[379]
#define __pyx_n_u_py_kriging_interpolation __pyx_string_tab[380]
#define __pyx_n_u_py_langmuir_hinshelwood_rate __pyx_string_tab[381]
#define __pyx_n_u_py_linear_interpolate __pyx_string_tab[382]
#define __pyx_n_u_py_mass_transfer_correlation __pyx_string_tab[383]
#define __pyx_n_u_py_matrix_invert __pyx_string_tab[384]
#define __pyx_n_u_py_matrix_multiply __pyx_string_tab[385]
#define __pyx_n_u_py_michaelis_menten_rate __pyx_string_tab[386]
#define __pyx_n_u_py_monte_carlo_simulation __pyx_string_tab[387]
#define __pyx_n_u_py_mpc_controller __pyx_string_tab[388]
#define __pyx_n_u_py_photochemical_rate __pyx_string_tab[389]
#define __pyx_n_u_py_pid_controller __pyx_string_tab[390]
#define __pyx_n_u_py_pressure_drop_ergun __pyx_string_tab[391]
#define __pyx_n_u_py_pressure_peng_robinson __pyx_string_tab[392]
#define __pyx_n_u_py_process_scale_up __pyx_string_tab[393]
#define __pyx_n_u_py_real_time_optimization __pyx_string_tab[394]
#define __pyx_n_u_py_residence_time_distribution __pyx_string_tab[395]
#define __pyx_n_u_py_residence_time_distribution_l __pyx_string_tab[396]
#define __pyx_n_u_py_simulate_fluidized_bed __pyx_string_tab[397]
#define __pyx_n_u_py_simulate_homogeneous_batch __pyx_string_tab[398]
#define __pyx_n_u_py_simulate_multi_reactor_adapti __pyx_string_tab[399]
#define __pyx_n_u_py_simulate_packed_bed __pyx_string_tab[400]
#define __pyx_n_u_py_solve_linear_system __pyx_string_tab[401]
#define __pyx_n_u_py_stability_analysis __pyx_string_tab[402]
#define __pyx_n_u_py_stability_analysis_locals_gen __pyx_string_tab[403]
#define __pyx_n_u_py_times __pyx_string_tab[404]
#define __pyx_n_u_pyroxa__pybindings __pyx_string_tab[405]
#define __pyx_kp_u_pyroxa_pybindings_pyx __pyx_string_tab[406]
#define __pyx_n_u_pyx_state __pyx_string_tab[407]
#define __pyx_n_u_pyx_vtable __pyx_string_tab[408]
#define __pyx_n_u_qualname __pyx_string_tab[409]
#define __pyx_n_u_quantum_yield __pyx_string_tab[410]
#define __pyx_n_u_r __pyx_string_tab[411]
#define __pyx_n_u_range __pyx_string_tab[412]
#define __pyx_n_u_rate __pyx_string_tab[413]
#define __pyx_n_u_rates __pyx_string_tab[414]
#define __pyx_n_u_rates_arr __pyx_string_tab[415]
#define __pyx_n_u_reac_idx __pyx_string_tab[416]
#define __pyx_n_u_reac_idx_arr __pyx_string_tab[417]
#define __pyx_n_u_reac_idx_list __pyx_string_tab[418]
#define __pyx_n_u_reac_nu __pyx_string_tab[419]
#define __pyx_n_u_reac_nu_arr __pyx_string_tab[420]
#define __pyx_n_u_reac_nu_list __pyx_string_tab[421]
#define __pyx_n_u_reac_off __pyx_string_tab[422]
#define __pyx_n_u_reac_off_arr __pyx_string_tab[423]
#define __pyx_n_u_reactants __pyx_string_tab[424]
#define __pyx_n_u_reaction __pyx_string_tab[425]
#define __pyx_n_u_reaction_network __pyx_string_tab[426]
#define __pyx_n_u_reaction_rates __pyx_string_tab[427]
#define __pyx_n_u_reactions __pyx_string_tab[428]
#define __pyx_n_u_reactor __pyx_string_tab[429]
#define __pyx_n_u_reactor_config __pyx_string_tab[430]
#define __pyx_n_u_reactor_id __pyx_string_tab[431]
#define __pyx_n_u_reactor_output __pyx_string_tab[432]
#define __pyx_n_u_reactor_outputs __pyx_string_tab[433]
#define __pyx_n_u_recommendations __pyx_string_tab[434]
#define __pyx_n_u_reduce __pyx_string_tab[435]
#define __pyx_n_u_reduce_cython __pyx_string_tab[436]
#define __pyx_n_u_reduce_ex __pyx_string_tab[437]
#define __pyx_n_u_remaining_lifetime __pyx_string_tab[438]
#define __pyx_n_u_residence_time __pyx_string_tab[439]
#define __pyx_n_u_result __pyx_string_tab[440]
#define __pyx_n_u_round __pyx_string_tab[441]
#define __pyx_n_u_run __pyx_string_tab[442]
#define __pyx_n_u_run_simulation_cpp __pyx_string_tab[443]
#define __pyx_n_u_rxn __pyx_string_tab[444]
#define __pyx_n_u_rxns __pyx_string_tab[445]
#define __pyx_n_u_s __pyx_string_tab[446]
#define __pyx_n_u_scale_factor __pyx_string_tab[447]
#define __pyx_n_u_self __pyx_string_tab[448]
#define __pyx_n_u_send __pyx_string_tab[449]
#define __pyx_n_u_sensitivity_matrix __pyx_string_tab[450]
#define __pyx_n_u_set_name __pyx_string_tab[451]
#define __pyx_n_u_setpoint __pyx_string_tab[452]
#define __pyx_n_u_setpoints __pyx_string_tab[453]
#define __pyx_n_u_setpts __pyx_string_tab[454]
#define __pyx_n_u_setstate __pyx_string_tab[455]
#define __pyx_n_u_setstate_cython __pyx_string_tab[456]
#define __pyx_n_u_shape __pyx_string_tab[457]
#define __pyx_n_u_sim __pyx_string_tab[458]
#define __pyx_n_u_sim_c __pyx_string_tab[459]
#define __pyx_n_u_simulated_data __pyx_string_tab[460]
#define __pyx_kp_u_simulation_failed_or_insufficien __pyx_string_tab[461]
#define __pyx_n_u_spec __pyx_string_tab[462]
#define __pyx_n_u_spec_2 __pyx_string_tab[463]
#define __pyx_kp_u_spec_must_be_a_dict __pyx_string_tab[464]
#define __pyx_n_u_species __pyx_string_tab[465]
#define __pyx_n_u_state __pyx_string_tab[466]
#define __pyx_n_u_statistics __pyx_string_tab[467]
#define __pyx_n_u_statistics_output __pyx_string_tab[468]
#define __pyx_n_u_std __pyx_string_tab[469]
#define __pyx_n_u_std_list __pyx_string_tab[470]
#define __pyx_n_u_steady_state __pyx_string_tab[471]
#define __pyx_n_u_step __pyx_string_tab[472]
#define __pyx_kp_u_stringsource __pyx_string_tab[473]
#define __pyx_n_u_substrate_conc __pyx_string_tab[474]
#define __pyx_n_u_success __pyx_string_tab[475]
#define __pyx_n_u_sum __pyx_string_tab[476]
#define __pyx_n_u_t __pyx_string_tab[477]
#define __pyx_n_u_tank_residence_times __pyx_string_tab[478]
#define __pyx_n_u_tarr __pyx_string_tab[479]
#define __pyx_n_u_tau __pyx_string_tab[480]
#define __pyx_n_u_temp_factor __pyx_string_tab[481]
#define __pyx_n_u_temperature __pyx_string_tab[482]
#define __pyx_n_u_temperature_adjust __pyx_string_tab[483]
#define __pyx_n_u_temperature_factor __pyx_string_tab[484]
#define __pyx_n_u_test __pyx_string_tab[485]
#define __pyx_n_u_throw __pyx_string_tab[486]
#define __pyx_n_u_time __pyx_string_tab[487]
#define __pyx_n_u_time_span __pyx_string_tab[488]
#define __pyx_n_u_time_step __pyx_string_tab[489]
#define __pyx_n_u_times __pyx_string_tab[490]
#define __pyx_n_u_times_buf __pyx_string_tab[491]
#define __pyx_n_u_times_list __pyx_string_tab[492]
#define __pyx_n_u_times_out __pyx_string_tab[493]
#define __pyx_n_u_times_py __pyx_string_tab[494]
#define __pyx_n_u_tolerance __pyx_string_tab[495]
#define __pyx_n_u_tolist __pyx_string_tab[496]
#define __pyx_n_u_tortuosity __pyx_string_tab[497]
#define __pyx_n_u_total_flow __pyx_string_tab[498]
#define __pyx_n_u_total_prod __pyx_string_tab[499]
#define __pyx_n_u_total_reac __pyx_string_tab[500]
#define __pyx_n_u_total_volume __pyx_string_tab[501]
#define __pyx_n_u_traj __pyx_string_tab[502]
#define __pyx_n_u_value __pyx_string_tab[503]
#define __pyx_n_u_var_params_c __pyx_string_tab[504]
#define __pyx_n_u_variance __pyx_string_tab[505]
#define __pyx_n_u_variogram_params __pyx_string_tab[506]
#define __pyx_n_u_velocity __pyx_string_tab[507]
#define __pyx_n_u_viscosity __pyx_string_tab[508]
#define __pyx_n_u_volume __pyx_string_tab[509]
#define __pyx_n_u_volumes __pyx_string_tab[510]
#define __pyx_n_u_weight_c __pyx_string_tab[511]
#define __pyx_n_u_weights __pyx_string_tab[512]
#define __pyx_n_u_written __pyx_string_tab[513]
#define __pyx_n_u_x __pyx_string_tab[514]
#define __pyx_n_u_x_c __pyx_string_tab[515]
#define __pyx_n_u_x_data __pyx_string_tab[516]
#define __pyx_n_u_x_data_c __pyx_string_tab[517]
#define __pyx_n_u_x_known __pyx_string_tab[518]
#define __pyx_n_u_x_known_c __pyx_string_tab[519]
#define __pyx_n_u_x_new __pyx_string_tab[520]
#define __pyx_n_u_x_new_c __pyx_string_tab[521]
#define __pyx_n_u_x_new_list __pyx_string_tab[522]
#define __pyx_n_u_y __pyx_string_tab[523]
#define __pyx_n_u_y0 __pyx_string_tab[524]
#define __pyx_n_u_y1 __pyx_string_tab[525]
#define __pyx_n_u_y2 __pyx_string_tab[526]
#define __pyx_n_u_y3 __pyx_string_tab[527]
#define __pyx_n_u_y_data __pyx_string_tab[528]
#define __pyx_n_u_y_data_c __pyx_string_tab[529]
#define __pyx_n_u_y_known __pyx_string_tab[530]
#define __pyx_n_u_y_known_c __pyx_string_tab[531]
#define __pyx_n_u_zeros __pyx_string_tab[532]
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_clear(PyObject *m) {
  __pyx_mstatetype *clear_module_state = __Pyx_PyModule_GetState(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __Pyx_State_RemoveModule(NULL);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics);
  Py_CLEAR(clear_module_state->__pyx_type_6pyroxa_11_pybindings_Thermodynamics);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pyroxa_11_pybindings_Reaction);
  Py_CLEAR(clear_module_state->__pyx_type_6pyroxa_11_pybindings_Reaction);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti);
  Py_CLEAR(clear_module_state->__pyx_type_6pyroxa_11_pybindings_ReactionMulti);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor);
  Py_CLEAR(clear_module_state->__pyx_type_6pyroxa_11_pybindings_MultiReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pyroxa_11_pybindings_Reactor);
  Py_CLEAR(clear_module_state->__pyx_type_6pyroxa_11_pybindings_Reactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution);
  Py_CLEAR(clear_module_state->__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr);
  for (int i=0; i<10; ++i) { Py_CLEAR(clear_module_state->__pyx_tuple[i]); }
  for (int i=0; i<84; ++i) { Py_CLEAR(clear_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<533; ++i) { Py_CLEAR(clear_module_state->__pyx_string_tab[i]); }
  Py_CLEAR(clear_module_state->__pyx_float_0_0);
  Py_CLEAR(clear_module_state->__pyx_float_0_1);
  Py_CLEAR(clear_module_state->__pyx_float_0_2);
  Py_CLEAR(clear_module_state->__pyx_float_0_5);
  Py_CLEAR(clear_module_state->__pyx_float_0_7);
  Py_CLEAR(clear_module_state->__pyx_float_0_9);
  Py_CLEAR(clear_module_state->__pyx_float_1_0);
  Py_CLEAR(clear_module_state->__pyx_float_2_0);
  Py_CLEAR(clear_module_state->__pyx_float_0_01);
  Py_CLEAR(clear_module_state->__pyx_float_0_05);
  Py_CLEAR(clear_module_state->__pyx_float_0_15);
  Py_CLEAR(clear_module_state->__pyx_float_10_0);
  Py_CLEAR(clear_module_state->__pyx_float_1eneg_6);
  Py_CLEAR(clear_module_state->__pyx_float_8_314);
  Py_CLEAR(clear_module_state->__pyx_float_298_15);
  Py_CLEAR(clear_module_state->__pyx_float_101325_0);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1_0);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_10);
  Py_CLEAR(clear_module_state->__pyx_int_50);
  Py_CLEAR(clear_module_state->__pyx_int_neg_5000);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstatetype *traverse_module_state = __Pyx_PyModule_GetState(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_tuple);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_bytes);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics);
  Py_VISIT(traverse_module_state->__pyx_type_6pyroxa_11_pybindings_Thermodynamics);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pyroxa_11_pybindings_Reaction);
  Py_VISIT(traverse_module_state->__pyx_type_6pyroxa_11_pybindings_Reaction);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti);
  Py_VISIT(traverse_module_state->__pyx_type_6pyroxa_11_pybindings_ReactionMulti);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor);
  Py_VISIT(traverse_module_state->__pyx_type_6pyroxa_11_pybindings_MultiReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pyroxa_11_pybindings_Reactor);
  Py_VISIT(traverse_module_state->__pyx_type_6pyroxa_11_pybindings_Reactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution);
  Py_VISIT(traverse_module_state->__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr);
  for (int i=0; i<10; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_tuple[i]); }
  for (int i=0; i<84; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<533; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_string_tab[i]); }
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_0);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_1);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_2);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_5);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_7);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_9);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_1_0);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_2_0);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_01);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_05);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_0_15);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_10_0);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_1eneg_6);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_8_314);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_298_15);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_101325_0);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_float_neg_1_0);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_0);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_1);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_10);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_50);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_neg_5000);
  return 0;
}
#endif
/* #### Code section: module_code ### */

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":242
 *         cdef int type_num
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp itemsize(self) noexcept nogil:
 *             return PyDataType_ELSIZE(self)
*/

static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_8itemsize_itemsize(PyArray_Descr *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":244
 *         @property
 *         cdef inline npy_intp itemsize(self) noexcept nogil:
 *             return PyDataType_ELSIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyDataType_ELSIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":242
 *         cdef int type_num
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp itemsize(self) noexcept nogil:
 *             return PyDataType_ELSIZE(self)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":246
 *             return PyDataType_ELSIZE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp alignment(self) noexcept nogil:
 *             return PyDataType_ALIGNMENT(self)
*/

static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_9alignment_alignment(PyArray_Descr *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":248
 *         @property
 *         cdef inline npy_intp alignment(self) noexcept nogil:
 *             return PyDataType_ALIGNMENT(self)             # <<<<<<<<<<<<<<
 * 
 *         # Use fields/names with care as they may be NULL.  You must check
*/
  __pyx_r = PyDataType_ALIGNMENT(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":246
 *             return PyDataType_ELSIZE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp alignment(self) noexcept nogil:
 *             return PyDataType_ALIGNMENT(self)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":252
 *         # Use fields/names with care as they may be NULL.  You must check
 *         # for this using PyDataType_HASFIELDS.
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline object fields(self):
 *             return <object>PyDataType_FIELDS(self)
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_6fields_fields(PyArray_Descr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_RefNannySetupContext("fields", 0);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":254
 *         @property
 *         cdef inline object fields(self):
 *             return <object>PyDataType_FIELDS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDataType_FIELDS(__pyx_v_self);
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":252
 *         # Use fields/names with care as they may be NULL.  You must check
 *         # for this using PyDataType_HASFIELDS.
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline object fields(self):
 *             return <object>PyDataType_FIELDS(self)
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":256
 *             return <object>PyDataType_FIELDS(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline tuple names(self):
 *             return <tuple>PyDataType_NAMES(self)
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_5names_names(PyArray_Descr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_RefNannySetupContext("names", 0);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":258
 *         @property
 *         cdef inline tuple names(self):
 *             return <tuple>PyDataType_NAMES(self)             # <<<<<<<<<<<<<<
 * 
 *         # Use PyDataType_HASSUBARRAY to test whether this field is
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDataType_NAMES(__pyx_v_self);
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":256
 *             return <object>PyDataType_FIELDS(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline tuple names(self):
 *             return <tuple>PyDataType_NAMES(self)
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":263
 *         # valid (the pointer can be NULL). Most users should access
 *         # this field via the inline helper method PyDataType_SHAPE.
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:
 *             return PyDataType_SUBARRAY(self)
*/

static CYTHON_INLINE PyArray_ArrayDescr *__pyx_f_5numpy_5dtype_8subarray_subarray(PyArray_Descr *__pyx_v_self) {
  PyArray_ArrayDescr *__pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":265
 *         @property
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:
 *             return PyDataType_SUBARRAY(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyDataType_SUBARRAY(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":263
 *         # valid (the pointer can be NULL). Most users should access
 *         # this field via the inline helper method PyDataType_SHAPE.
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:
 *             return PyDataType_SUBARRAY(self)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":267
 *             return PyDataType_SUBARRAY(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_uint64 flags(self) noexcept nogil:
 *             """The data types flags."""
*/

static CYTHON_INLINE npy_uint64 __pyx_f_5numpy_5dtype_5flags_flags(PyArray_Descr *__pyx_v_self) {
  npy_uint64 __pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":270
 *         cdef inline npy_uint64 flags(self) noexcept nogil:
 *             """The data types flags."""
 *             return PyDataType_FLAGS(self)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = PyDataType_FLAGS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":267
 *             return PyDataType_SUBARRAY(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_uint64 flags(self) noexcept nogil:
 *             """The data types flags."""
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":279
 *     ctypedef class numpy.broadcast [object PyArrayMultiIterObject, check_size ignore]:
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline int numiter(self) noexcept nogil:
 *             """The number of arrays that need to be broadcast to the same shape."""
*/

static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_7numiter_numiter(PyArrayMultiIterObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":282
 *         cdef inline int numiter(self) noexcept nogil:
 *             """The number of arrays that need to be broadcast to the same shape."""
 *             return PyArray_MultiIter_NUMITER(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_MultiIter_NUMITER(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":279
 *     ctypedef class numpy.broadcast [object PyArrayMultiIterObject, check_size ignore]:
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline int numiter(self) noexcept nogil:
 *             """The number of arrays that need to be broadcast to the same shape."""
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":284
 *             return PyArray_MultiIter_NUMITER(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp size(self) noexcept nogil:
 *             """The total broadcasted size."""
*/

static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_4size_size(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":287
 *         cdef inline npy_intp size(self) noexcept nogil:
 *             """The total broadcasted size."""
 *             return PyArray_MultiIter_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_MultiIter_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":284
 *             return PyArray_MultiIter_NUMITER(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp size(self) noexcept nogil:
 *             """The total broadcasted size."""
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":289
 *             return PyArray_MultiIter_SIZE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp index(self) noexcept nogil:
 *             """The current (1-d) index into the broadcasted result."""
*/

static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_5index_index(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":292
 *         cdef inline npy_intp index(self) noexcept nogil:
 *             """The current (1-d) index into the broadcasted result."""
 *             return PyArray_MultiIter_INDEX(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_MultiIter_INDEX(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":289
 *             return PyArray_MultiIter_SIZE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp index(self) noexcept nogil:
 *             """The current (1-d) index into the broadcasted result."""
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":294
 *             return PyArray_MultiIter_INDEX(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline int nd(self) noexcept nogil:
 *             """The number of dimensions in the broadcasted result."""
*/

static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_2nd_nd(PyArrayMultiIterObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":297
 *         cdef inline int nd(self) noexcept nogil:
 *             """The number of dimensions in the broadcasted result."""
 *             return PyArray_MultiIter_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_MultiIter_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":294
 *             return PyArray_MultiIter_INDEX(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline int nd(self) noexcept nogil:
 *             """The number of dimensions in the broadcasted result."""
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":299
 *             return PyArray_MultiIter_NDIM(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:
 *             """The shape of the broadcasted result."""
*/

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_9broadcast_10dimensions_dimensions(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":302
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:
 *             """The shape of the broadcasted result."""
 *             return PyArray_MultiIter_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_MultiIter_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":299
 *             return PyArray_MultiIter_NDIM(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:
 *             """The shape of the broadcasted result."""
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":304
 *             return PyArray_MultiIter_DIMS(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline void** iters(self) noexcept nogil:
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
*/

static CYTHON_INLINE void **__pyx_f_5numpy_9broadcast_5iters_iters(PyArrayMultiIterObject *__pyx_v_self) {
  void **__pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":308
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
 *             On return, the iterators are adjusted for broadcasting."""
 *             return PyArray_MultiIter_ITERS(self)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = PyArray_MultiIter_ITERS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":304
 *             return PyArray_MultiIter_DIMS(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline void** iters(self) noexcept nogil:
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":322
 *         # Instead, we use properties that map to the corresponding C-API functions.
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline PyObject* base(self) noexcept nogil:
 *             """Returns a borrowed reference to the object owning the data/memory.
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":326
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":322
 *         # Instead, we use properties that map to the corresponding C-API functions.
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline PyObject* base(self) noexcept nogil:
 *             """Returns a borrowed reference to the object owning the data/memory.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":328
 *             return PyArray_BASE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline dtype descr(self):
 *             """Returns an owned reference to the dtype of the array.
*/

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 0);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":332
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":328
 *             return PyArray_BASE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline dtype descr(self):
 *             """Returns an owned reference to the dtype of the array.
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":334
 *             return <dtype>PyArray_DESCR(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline int ndim(self) noexcept nogil:
 *             """Returns the number of dimensions in the array.
*/

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":338
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":334
 *             return <dtype>PyArray_DESCR(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline int ndim(self) noexcept nogil:
 *             """Returns the number of dimensions in the array.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":340
 *             return PyArray_NDIM(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp *shape(self) noexcept nogil:
 *             """Returns a pointer to the dimensions/shape of the array.
*/

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":346
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":340
 *             return PyArray_NDIM(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp *shape(self) noexcept nogil:
 *             """Returns a pointer to the dimensions/shape of the array.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":348
 *             return PyArray_DIMS(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp *strides(self) noexcept nogil:
 *             """Returns a pointer to the strides of the array.
*/

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":353
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":348
 *             return PyArray_DIMS(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp *strides(self) noexcept nogil:
 *             """Returns a pointer to the strides of the array.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":355
 *             return PyArray_STRIDES(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp size(self) noexcept nogil:
 *             """Returns the total size (in number of elements) of the array.
*/

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":359
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":355
 *             return PyArray_STRIDES(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp size(self) noexcept nogil:
 *             """Returns the total size (in number of elements) of the array.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":361
 *             return PyArray_SIZE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline char* data(self) noexcept nogil:
 *             """The pointer to the data buffer as a char*.
*/

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":368
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":361
 *             return PyArray_SIZE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline char* data(self) noexcept nogil:
 *             """The pointer to the data buffer as a char*.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":776
 * ctypedef long double complex clongdouble_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":776
 * ctypedef long double complex clongdouble_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":779
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":779
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":782
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":782
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":785
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":786
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":785
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":788
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":789
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":788
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":791
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":792
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
*/
  __pyx_t_1 = PyDataType_HASSUBARRAY(__pyx_v_d);
  if (__pyx_t_1) {

    /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":793
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5numpy_5dtype_8subarray_subarray(__pyx_v_d)->shape;
    __Pyx_INCREF(((PyObject*)__pyx_t_2));
    __pyx_r = ((PyObject*)__pyx_t_2);
    goto __pyx_L0;

    /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":792
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
*/
  }

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":795
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_empty_tuple);
    __pyx_r = __pyx_mstate_global->__pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":791
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":994
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
*/

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":995
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
*/
  Py_INCREF(__pyx_v_base);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":996
 * cdef inline void set_array_base(ndarray arr, object base) except *:
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
*/
  __pyx_t_1 = PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 996, __pyx_L1_error)

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":994
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":998
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":999
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
*/
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1000
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
*/
  __pyx_t_1 = (__pyx_v_base == NULL);
  if (__pyx_t_1) {

    /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1001
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1000
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
*/
  }

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1002
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":998
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1006
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
*/

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1007
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1008
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")
*/
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1008, __pyx_L3_error)

      /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1007
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
*/
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1009
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
*/
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(((PyTypeObject*)PyExc_Exception))));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1009, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1010
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
*/
      __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_builtin_ImportError);
      __pyx_t_10 = __pyx_builtin_ImportError; 
      __pyx_t_11 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u_numpy__core_multiarray_failed_to};
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1010, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_8);
      }
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1010, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1007
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
*/
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1006
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1012
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
*/

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1013
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1014
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")
*/
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1014, __pyx_L3_error)

      /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1013
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1015
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.umath failed to import")
 * 
*/
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(((PyTypeObject*)PyExc_Exception))));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1015, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1016
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
*/
      __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_builtin_ImportError);
      __pyx_t_10 = __pyx_builtin_ImportError; 
      __pyx_t_11 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u_numpy__core_umath_failed_to_impo};
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1016, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_8);
      }
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1016, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1013
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1012
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1018
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
*/

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1019
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1020
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")
*/
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1020, __pyx_L3_error)

      /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1019
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1021
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.umath failed to import")
 * 
*/
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(((PyTypeObject*)PyExc_Exception))));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1021, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1022
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
*/
      __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_builtin_ImportError);
      __pyx_t_10 = __pyx_builtin_ImportError; 
      __pyx_t_11 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u_numpy__core_umath_failed_to_impo};
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1022, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_8);
      }
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1022, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1019
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1018
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1025
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
*/

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1037
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1025
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1040
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
*/

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1052
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1040
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1055
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
*/

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1062
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1055
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1065
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
*/

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1069
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1065
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1072
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
*/

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1076
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1072
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":263
 * 	cdef double cp
 * 
 * 	def __cinit__(self, double cp=29.1):             # <<<<<<<<<<<<<<
 * 		self.cp = cp
 * 
*/

/* Python wrapper */
static int __pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_cp;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_cp,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 263, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 263, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 263, __pyx_L3_error)
    } else {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 263, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_cp = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_cp == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L3_error)
    } else {
      __pyx_v_cp = ((double)29.1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 263, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_14Thermodynamics___cinit__(((struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *)__pyx_v_self), __pyx_v_cp);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyroxa_11_pybindings_14Thermodynamics___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, double __pyx_v_cp) {
  int __pyx_r;

  /* "pyroxa/pybindings.pyx":264
 * 
 * 	def __cinit__(self, double cp=29.1):
 * 		self.cp = cp             # <<<<<<<<<<<<<<
 * 
 * 	def enthalpy(self, double T):
*/
  __pyx_v_self->cp = __pyx_v_cp;

  /* "pyroxa/pybindings.pyx":263
 * 	cdef double cp
 * 
 * 	def __cinit__(self, double cp=29.1):             # <<<<<<<<<<<<<<
 * 		self.cp = cp
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":266
 * 		self.cp = cp
 * 
 * 	def enthalpy(self, double T):             # <<<<<<<<<<<<<<
 * 		return enthalpy_c(self.cp, T)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_3enthalpy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_2enthalpy, "Thermodynamics.enthalpy(self, double T)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_14Thermodynamics_3enthalpy = {"enthalpy", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_3enthalpy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_2enthalpy};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_3enthalpy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_T;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enthalpy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_T,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 266, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 266, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "enthalpy", 0) < 0) __PYX_ERR(0, 266, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("enthalpy", 1, 1, 1, i); __PYX_ERR(0, 266, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 266, __pyx_L3_error)
    }
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 266, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("enthalpy", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 266, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.enthalpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_2enthalpy(((struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *)__pyx_v_self), __pyx_v_T);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_2enthalpy(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, double __pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("enthalpy", 0);

  /* "pyroxa/pybindings.pyx":267
 * 
 * 	def enthalpy(self, double T):
 * 		return enthalpy_c(self.cp, T)             # <<<<<<<<<<<<<<
 * 
 * 	def entropy(self, double T):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(enthalpy_c(__pyx_v_self->cp, __pyx_v_T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":266
 * 		self.cp = cp
 * 
 * 	def enthalpy(self, double T):             # <<<<<<<<<<<<<<
 * 		return enthalpy_c(self.cp, T)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.enthalpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":269
 * 		return enthalpy_c(self.cp, T)
 * 
 * 	def entropy(self, double T):             # <<<<<<<<<<<<<<
 * 		return entropy_c(self.cp, T)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_5entropy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_4entropy, "Thermodynamics.entropy(self, double T)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_14Thermodynamics_5entropy = {"entropy", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_5entropy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_4entropy};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_5entropy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_T;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("entropy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_T,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 269, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 269, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "entropy", 0) < 0) __PYX_ERR(0, 269, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("entropy", 1, 1, 1, i); __PYX_ERR(0, 269, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 269, __pyx_L3_error)
    }
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 269, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("entropy", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 269, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.entropy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_4entropy(((struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *)__pyx_v_self), __pyx_v_T);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_4entropy(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, double __pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("entropy", 0);

  /* "pyroxa/pybindings.pyx":270
 * 
 * 	def entropy(self, double T):
 * 		return entropy_c(self.cp, T)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(entropy_c(__pyx_v_self->cp, __pyx_v_T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":269
 * 		return enthalpy_c(self.cp, T)
 * 
 * 	def entropy(self, double T):             # <<<<<<<<<<<<<<
 * 		return entropy_c(self.cp, T)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.entropy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_6__reduce_cython__, "Thermodynamics.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_14Thermodynamics_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_6__reduce_cython__};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_6__reduce_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_8__setstate_cython__, "Thermodynamics.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_14Thermodynamics_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_8__setstate_cython__};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_8__setstate_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_14Thermodynamics_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.Thermodynamics.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":277
 * 	cdef double kr
 * 
 * 	def __cinit__(self, double kf=1.0, double kr=0.5):             # <<<<<<<<<<<<<<
 * 		self.kf = kf
 * 		self.kr = kr
*/

/* Python wrapper */
static int __pyx_pw_6pyroxa_11_pybindings_8Reaction_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyroxa_11_pybindings_8Reaction_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_kf;
  double __pyx_v_kr;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_kf,&__pyx_mstate_global->__pyx_n_u_kr,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 277, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 277, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 277, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 277, __pyx_L3_error)
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 277, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 277, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_kf = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_kf == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L3_error)
    } else {
      __pyx_v_kf = ((double)1.0);
    }
    if (values[1]) {
      __pyx_v_kr = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_kr == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L3_error)
    } else {
      __pyx_v_kr = ((double)0.5);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, __pyx_nargs); __PYX_ERR(0, 277, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.Reaction.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_8Reaction___cinit__(((struct __pyx_obj_6pyroxa_11_pybindings_Reaction *)__pyx_v_self), __pyx_v_kf, __pyx_v_kr);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyroxa_11_pybindings_8Reaction___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self, double __pyx_v_kf, double __pyx_v_kr) {
  int __pyx_r;

  /* "pyroxa/pybindings.pyx":278
 * 
 * 	def __cinit__(self, double kf=1.0, double kr=0.5):
 * 		self.kf = kf             # <<<<<<<<<<<<<<
 * 		self.kr = kr
 * 
*/
  __pyx_v_self->kf = __pyx_v_kf;

  /* "pyroxa/pybindings.pyx":279
 * 	def __cinit__(self, double kf=1.0, double kr=0.5):
 * 		self.kf = kf
 * 		self.kr = kr             # <<<<<<<<<<<<<<
 * 
 * 	def rate(self, double A, double B):
*/
  __pyx_v_self->kr = __pyx_v_kr;

  /* "pyroxa/pybindings.pyx":277
 * 	cdef double kr
 * 
 * 	def __cinit__(self, double kf=1.0, double kr=0.5):             # <<<<<<<<<<<<<<
 * 		self.kf = kf
 * 		self.kr = kr
*/

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":281
 * 		self.kr = kr
 * 
 * 	def rate(self, double A, double B):             # <<<<<<<<<<<<<<
 * 		return self.kf * A - self.kr * B
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_8Reaction_3rate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_8Reaction_2rate, "Reaction.rate(self, double A, double B)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_8Reaction_3rate = {"rate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_8Reaction_3rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_8Reaction_2rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_8Reaction_3rate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_A;
  double __pyx_v_B;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 281, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 281, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 281, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "rate", 0) < 0) __PYX_ERR(0, 281, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("rate", 1, 2, 2, i); __PYX_ERR(0, 281, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 281, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 281, __pyx_L3_error)
    }
    __pyx_v_A = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 281, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_B == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 281, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rate", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 281, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.Reaction.rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_8Reaction_2rate(((struct __pyx_obj_6pyroxa_11_pybindings_Reaction *)__pyx_v_self), __pyx_v_A, __pyx_v_B);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_8Reaction_2rate(struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self, double __pyx_v_A, double __pyx_v_B) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rate", 0);

  /* "pyroxa/pybindings.pyx":282
 * 
 * 	def rate(self, double A, double B):
 * 		return self.kf * A - self.kr * B             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->kf * __pyx_v_A) - (__pyx_v_self->kr * __pyx_v_B))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":281
 * 		self.kr = kr
 * 
 * 	def rate(self, double A, double B):             # <<<<<<<<<<<<<<
 * 		return self.kf * A - self.kr * B
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.Reaction.rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_8Reaction_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_8Reaction_4__reduce_cython__, "Reaction.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_8Reaction_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_8Reaction_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_8Reaction_4__reduce_cython__};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_8Reaction_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_8Reaction_4__reduce_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_Reaction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_8Reaction_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.Reaction.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_8Reaction_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_8Reaction_6__setstate_cython__, "Reaction.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_8Reaction_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_8Reaction_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_8Reaction_6__setstate_cython__};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_8Reaction_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.Reaction.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_8Reaction_6__setstate_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_Reaction *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_8Reaction_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.Reaction.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":291
 * 	cdef dict products
 * 
 * 	def __cinit__(self, double kf=1.0, double kr=0.0, reactants=None, products=None):             # <<<<<<<<<<<<<<
 * 		self.kf = kf
 * 		self.kr = kr
*/

/* Python wrapper */
static int __pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_kf;
  double __pyx_v_kr;
  PyObject *__pyx_v_reactants = 0;
  PyObject *__pyx_v_products = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_kf,&__pyx_mstate_global->__pyx_n_u_kr,&__pyx_mstate_global->__pyx_n_u_reactants,&__pyx_mstate_global->__pyx_n_u_products,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 291, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 291, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 291, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 291, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 291, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 291, __pyx_L3_error)
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)Py_None));
      if (!values[3]) values[3] = __Pyx_NewRef(((PyObject *)Py_None));
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 291, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 291, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 291, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 291, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)Py_None));
      if (!values[3]) values[3] = __Pyx_NewRef(((PyObject *)Py_None));
    }
    if (values[0]) {
      __pyx_v_kf = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_kf == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 291, __pyx_L3_error)
    } else {
      __pyx_v_kf = ((double)1.0);
    }
    if (values[1]) {
      __pyx_v_kr = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_kr == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 291, __pyx_L3_error)
    } else {
      __pyx_v_kr = ((double)0.0);
    }
    __pyx_v_reactants = values[2];
    __pyx_v_products = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, __pyx_nargs); __PYX_ERR(0, 291, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.ReactionMulti.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_13ReactionMulti___cinit__(((struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)__pyx_v_self), __pyx_v_kf, __pyx_v_kr, __pyx_v_reactants, __pyx_v_products);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyroxa_11_pybindings_13ReactionMulti___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, double __pyx_v_kf, double __pyx_v_kr, PyObject *__pyx_v_reactants, PyObject *__pyx_v_products) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyroxa/pybindings.pyx":292
 * 
 * 	def __cinit__(self, double kf=1.0, double kr=0.0, reactants=None, products=None):
 * 		self.kf = kf             # <<<<<<<<<<<<<<
 * 		self.kr = kr
 * 		self.reactants = reactants if reactants is not None else {}
*/
  __pyx_v_self->kf = __pyx_v_kf;

  /* "pyroxa/pybindings.pyx":293
 * 	def __cinit__(self, double kf=1.0, double kr=0.0, reactants=None, products=None):
 * 		self.kf = kf
 * 		self.kr = kr             # <<<<<<<<<<<<<<
 * 		self.reactants = reactants if reactants is not None else {}
 * 		self.products = products if products is not None else {}
*/
  __pyx_v_self->kr = __pyx_v_kr;

  /* "pyroxa/pybindings.pyx":294
 * 		self.kf = kf
 * 		self.kr = kr
 * 		self.reactants = reactants if reactants is not None else {}             # <<<<<<<<<<<<<<
 * 		self.products = products if products is not None else {}
 * 
*/
  __pyx_t_2 = (__pyx_v_reactants != Py_None);
  if (__pyx_t_2) {
    if (!(likely(PyDict_CheckExact(__pyx_v_reactants))||((__pyx_v_reactants) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_v_reactants))) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_INCREF(__pyx_v_reactants);
    __pyx_t_1 = __pyx_v_reactants;
  } else {
    __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->reactants);
  __Pyx_DECREF(__pyx_v_self->reactants);
  __pyx_v_self->reactants = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":295
 * 		self.kr = kr
 * 		self.reactants = reactants if reactants is not None else {}
 * 		self.products = products if products is not None else {}             # <<<<<<<<<<<<<<
 * 
 * 	cpdef double rate(self, list conc):
*/
  __pyx_t_2 = (__pyx_v_products != Py_None);
  if (__pyx_t_2) {
    if (!(likely(PyDict_CheckExact(__pyx_v_products))||((__pyx_v_products) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_v_products))) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_INCREF(__pyx_v_products);
    __pyx_t_1 = __pyx_v_products;
  } else {
    __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->products);
  __Pyx_DECREF(__pyx_v_self->products);
  __pyx_v_self->products = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":291
 * 	cdef dict products
 * 
 * 	def __cinit__(self, double kf=1.0, double kr=0.0, reactants=None, products=None):             # <<<<<<<<<<<<<<
 * 		self.kf = kf
 * 		self.kr = kr
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyroxa._pybindings.ReactionMulti.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":297
 * 		self.products = products if products is not None else {}
 * 
 * 	cpdef double rate(self, list conc):             # <<<<<<<<<<<<<<
 * 		cdef double f = 1.0
 * 		cdef double r = 1.0
*/

static PyObject *__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_3rate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static double __pyx_f_6pyroxa_11_pybindings_13ReactionMulti_rate(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, PyObject *__pyx_v_conc, int __pyx_skip_dispatch) {
  double __pyx_v_f;
  double __pyx_v_r;
  int __pyx_v_idx;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_nu = NULL;
  PyObject *__pyx_v_val = NULL;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  double __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rate", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_3rate)) {
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_conc};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 297, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_6;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "pyroxa/pybindings.pyx":298
 * 
 * 	cpdef double rate(self, list conc):
 * 		cdef double f = 1.0             # <<<<<<<<<<<<<<
 * 		cdef double r = 1.0
 * 		cdef int idx
*/
  __pyx_v_f = 1.0;

  /* "pyroxa/pybindings.pyx":299
 * 	cpdef double rate(self, list conc):
 * 		cdef double f = 1.0
 * 		cdef double r = 1.0             # <<<<<<<<<<<<<<
 * 		cdef int idx
 * 		for key, nu in self.reactants.items():
*/
  __pyx_v_r = 1.0;

  /* "pyroxa/pybindings.pyx":301
 * 		cdef double r = 1.0
 * 		cdef int idx
 * 		for key, nu in self.reactants.items():             # <<<<<<<<<<<<<<
 * 			idx = int(key)
 * 			val = conc[idx]
*/
  __pyx_t_7 = 0;
  if (unlikely(__pyx_v_self->reactants == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 301, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_dict_iterator(__pyx_v_self->reactants, 1, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_8), (&__pyx_t_9)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_2;
  __pyx_t_2 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_8, &__pyx_t_7, &__pyx_t_2, &__pyx_t_4, NULL, __pyx_t_9);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_nu, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":302
 * 		cdef int idx
 * 		for key, nu in self.reactants.items():
 * 			idx = int(key)             # <<<<<<<<<<<<<<
 * 			val = conc[idx]
 * 			if val <= 0:
*/
    __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_4); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_idx = __pyx_t_10;

    /* "pyroxa/pybindings.pyx":303
 * 		for key, nu in self.reactants.items():
 * 			idx = int(key)
 * 			val = conc[idx]             # <<<<<<<<<<<<<<
 * 			if val <= 0:
 * 				f = 0.0
*/
    if (unlikely(__pyx_v_conc == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 303, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyList_GET_ITEM(__pyx_v_conc, __pyx_v_idx);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":304
 * 			idx = int(key)
 * 			val = conc[idx]
 * 			if val <= 0:             # <<<<<<<<<<<<<<
 * 				f = 0.0
 * 				break
*/
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_val, __pyx_mstate_global->__pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_11) {

      /* "pyroxa/pybindings.pyx":305
 * 			val = conc[idx]
 * 			if val <= 0:
 * 				f = 0.0             # <<<<<<<<<<<<<<
 * 				break
 * 			f *= val ** nu
*/
      __pyx_v_f = 0.0;

      /* "pyroxa/pybindings.pyx":306
 * 			if val <= 0:
 * 				f = 0.0
 * 				break             # <<<<<<<<<<<<<<
 * 			f *= val ** nu
 * 		for key, nu in self.products.items():
*/
      goto __pyx_L4_break;

      /* "pyroxa/pybindings.pyx":304
 * 			idx = int(key)
 * 			val = conc[idx]
 * 			if val <= 0:             # <<<<<<<<<<<<<<
 * 				f = 0.0
 * 				break
*/
    }

    /* "pyroxa/pybindings.pyx":307
 * 				f = 0.0
 * 				break
 * 			f *= val ** nu             # <<<<<<<<<<<<<<
 * 		for key, nu in self.products.items():
 * 			idx = int(key)
*/
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_f); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyNumber_Power(__pyx_v_val, __pyx_v_nu, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_f = __pyx_t_6;
  }
  __pyx_L4_break:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":308
 * 				break
 * 			f *= val ** nu
 * 		for key, nu in self.products.items():             # <<<<<<<<<<<<<<
 * 			idx = int(key)
 * 			val = conc[idx]
*/
  __pyx_t_8 = 0;
  if (unlikely(__pyx_v_self->products == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 308, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_dict_iterator(__pyx_v_self->products, 1, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_7), (&__pyx_t_9)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_3;
  __pyx_t_3 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_7, &__pyx_t_8, &__pyx_t_3, &__pyx_t_2, NULL, __pyx_t_9);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_nu, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":309
 * 			f *= val ** nu
 * 		for key, nu in self.products.items():
 * 			idx = int(key)             # <<<<<<<<<<<<<<
 * 			val = conc[idx]
 * 			if val <= 0:
*/
    __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_idx = __pyx_t_10;

    /* "pyroxa/pybindings.pyx":310
 * 		for key, nu in self.products.items():
 * 			idx = int(key)
 * 			val = conc[idx]             # <<<<<<<<<<<<<<
 * 			if val <= 0:
 * 				r = 0.0
*/
    if (unlikely(__pyx_v_conc == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 310, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyList_GET_ITEM(__pyx_v_conc, __pyx_v_idx);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":311
 * 			idx = int(key)
 * 			val = conc[idx]
 * 			if val <= 0:             # <<<<<<<<<<<<<<
 * 				r = 0.0
 * 				break
*/
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_val, __pyx_mstate_global->__pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_11) {

      /* "pyroxa/pybindings.pyx":312
 * 			val = conc[idx]
 * 			if val <= 0:
 * 				r = 0.0             # <<<<<<<<<<<<<<
 * 				break
 * 			r *= val ** nu
*/
      __pyx_v_r = 0.0;

      /* "pyroxa/pybindings.pyx":313
 * 			if val <= 0:
 * 				r = 0.0
 * 				break             # <<<<<<<<<<<<<<
 * 			r *= val ** nu
 * 		return self.kf * f - self.kr * r
*/
      goto __pyx_L7_break;

      /* "pyroxa/pybindings.pyx":311
 * 			idx = int(key)
 * 			val = conc[idx]
 * 			if val <= 0:             # <<<<<<<<<<<<<<
 * 				r = 0.0
 * 				break
*/
    }

    /* "pyroxa/pybindings.pyx":314
 * 				r = 0.0
 * 				break
 * 			r *= val ** nu             # <<<<<<<<<<<<<<
 * 		return self.kf * f - self.kr * r
 * 
*/
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Power(__pyx_v_val, __pyx_v_nu, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_r = __pyx_t_6;
  }
  __pyx_L7_break:;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":315
 * 				break
 * 			r *= val ** nu
 * 		return self.kf * f - self.kr * r             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = ((__pyx_v_self->kf * __pyx_v_f) - (__pyx_v_self->kr * __pyx_v_r));
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":297
 * 		self.products = products if products is not None else {}
 * 
 * 	cpdef double rate(self, list conc):             # <<<<<<<<<<<<<<
 * 		cdef double f = 1.0
 * 		cdef double r = 1.0
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyroxa._pybindings.ReactionMulti.rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_nu);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_3rate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_13ReactionMulti_2rate, "ReactionMulti.rate(self, list conc) -> double");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_13ReactionMulti_3rate = {"rate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_3rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_13ReactionMulti_2rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_3rate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_conc = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_conc,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 297, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 297, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "rate", 0) < 0) __PYX_ERR(0, 297, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("rate", 1, 1, 1, i); __PYX_ERR(0, 297, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 297, __pyx_L3_error)
    }
    __pyx_v_conc = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rate", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 297, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.ReactionMulti.rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_conc), (&PyList_Type), 1, "conc", 1))) __PYX_ERR(0, 297, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_2rate(((struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)__pyx_v_self), __pyx_v_conc);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_2rate(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, PyObject *__pyx_v_conc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rate", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyroxa_11_pybindings_13ReactionMulti_rate(__pyx_v_self, __pyx_v_conc, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 297, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyroxa._pybindings.ReactionMulti.rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_13ReactionMulti_4__reduce_cython__, "ReactionMulti.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_13ReactionMulti_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_13ReactionMulti_4__reduce_cython__};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_4__reduce_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.ReactionMulti.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_13ReactionMulti_6__setstate_cython__, "ReactionMulti.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_13ReactionMulti_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_13ReactionMulti_6__setstate_cython__};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.ReactionMulti.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_6__setstate_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_13ReactionMulti_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.ReactionMulti.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":324
 * 	cdef double T
 * 
 * 	def __cinit__(self, list species, list conc0, list reactions, double T=300.0):             # <<<<<<<<<<<<<<
 * 		self.species = species
 * 		self.conc = [float(x) for x in conc0]
*/

/* Python wrapper */
static int __pyx_pw_6pyroxa_11_pybindings_12MultiReactor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyroxa_11_pybindings_12MultiReactor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_species = 0;
  PyObject *__pyx_v_conc0 = 0;
  PyObject *__pyx_v_reactions = 0;
  double __pyx_v_T;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_species,&__pyx_mstate_global->__pyx_n_u_conc0,&__pyx_mstate_global->__pyx_n_u_reactions,&__pyx_mstate_global->__pyx_n_u_T,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 324, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 324, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 324, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 324, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 324, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 324, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, i); __PYX_ERR(0, 324, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 324, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 324, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 324, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 324, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_species = ((PyObject*)values[0]);
    __pyx_v_conc0 = ((PyObject*)values[1]);
    __pyx_v_reactions = ((PyObject*)values[2]);
    if (values[3]) {
      __pyx_v_T = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 324, __pyx_L3_error)
    } else {
      __pyx_v_T = ((double)300.0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 324, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species), (&PyList_Type), 1, "species", 1))) __PYX_ERR(0, 324, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_conc0), (&PyList_Type), 1, "conc0", 1))) __PYX_ERR(0, 324, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reactions), (&PyList_Type), 1, "reactions", 1))) __PYX_ERR(0, 324, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_12MultiReactor___cinit__(((struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self), __pyx_v_species, __pyx_v_conc0, __pyx_v_reactions, __pyx_v_T);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyroxa_11_pybindings_12MultiReactor___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, PyObject *__pyx_v_species, PyObject *__pyx_v_conc0, PyObject *__pyx_v_reactions, double __pyx_v_T) {
  PyObject *__pyx_7genexpr__pyx_v_x = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pyroxa/pybindings.pyx":325
 * 
 * 	def __cinit__(self, list species, list conc0, list reactions, double T=300.0):
 * 		self.species = species             # <<<<<<<<<<<<<<
 * 		self.conc = [float(x) for x in conc0]
 * 		self.reactions = reactions
*/
  __Pyx_INCREF(__pyx_v_species);
  __Pyx_GIVEREF(__pyx_v_species);
  __Pyx_GOTREF(__pyx_v_self->species);
  __Pyx_DECREF(__pyx_v_self->species);
  __pyx_v_self->species = __pyx_v_species;

  /* "pyroxa/pybindings.pyx":326
 * 	def __cinit__(self, list species, list conc0, list reactions, double T=300.0):
 * 		self.species = species
 * 		self.conc = [float(x) for x in conc0]             # <<<<<<<<<<<<<<
 * 		self.reactions = reactions
 * 		self.T = T
*/
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_conc0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 326, __pyx_L5_error)
    }
    __pyx_t_2 = __pyx_v_conc0; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = 0;
    for (;;) {
      {
        Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 326, __pyx_L5_error)
        #endif
        if (__pyx_t_3 >= __pyx_temp) break;
      }
      __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_3);
      ++__pyx_t_3;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 326, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_x, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_7genexpr__pyx_v_x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 326, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 326, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x); __pyx_7genexpr__pyx_v_x = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x); __pyx_7genexpr__pyx_v_x = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->conc);
  __Pyx_DECREF(__pyx_v_self->conc);
  __pyx_v_self->conc = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":327
 * 		self.species = species
 * 		self.conc = [float(x) for x in conc0]
 * 		self.reactions = reactions             # <<<<<<<<<<<<<<
 * 		self.T = T
 * 
*/
  __Pyx_INCREF(__pyx_v_reactions);
  __Pyx_GIVEREF(__pyx_v_reactions);
  __Pyx_GOTREF(__pyx_v_self->reactions);
  __Pyx_DECREF(__pyx_v_self->reactions);
  __pyx_v_self->reactions = __pyx_v_reactions;

  /* "pyroxa/pybindings.pyx":328
 * 		self.conc = [float(x) for x in conc0]
 * 		self.reactions = reactions
 * 		self.T = T             # <<<<<<<<<<<<<<
 * 
 * 	cpdef list _dcdt(self, list conc):
*/
  __pyx_v_self->T = __pyx_v_T;

  /* "pyroxa/pybindings.pyx":324
 * 	cdef double T
 * 
 * 	def __cinit__(self, list species, list conc0, list reactions, double T=300.0):             # <<<<<<<<<<<<<<
 * 		self.species = species
 * 		self.conc = [float(x) for x in conc0]
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_x);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":330
 * 		self.T = T
 * 
 * 	cpdef list _dcdt(self, list conc):             # <<<<<<<<<<<<<<
 * 		cdef int N = len(conc)
 * 		cdef list d = [0.0] * N
*/

static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_3_dcdt(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_6pyroxa_11_pybindings_12MultiReactor__dcdt(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, PyObject *__pyx_v_conc, int __pyx_skip_dispatch) {
  int __pyx_v_N;
  PyObject *__pyx_v_d = 0;
  double __pyx_v_rate;
  PyObject *__pyx_v_rxn = 0;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_nu = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  double __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_dcdt", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (
  #if !CYTHON_USE_TYPE_SLOTS
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self)) != __pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor &&
  __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), Py_TPFLAGS_HAVE_GC))
  #else
  unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0 || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))
  #endif
  ) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_dcdt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!__Pyx_IsSameCFunction(__pyx_t_1, (void(*)(void)) __pyx_pw_6pyroxa_11_pybindings_12MultiReactor_3_dcdt)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; 
        __pyx_t_5 = 1;
        #if CYTHON_UNPACK_METHODS
        if (unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
          assert(__pyx_t_3);
          PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx__function);
          __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
          __pyx_t_5 = 0;
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_conc};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_2))) __PYX_ERR(0, 330, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "pyroxa/pybindings.pyx":331
 * 
 * 	cpdef list _dcdt(self, list conc):
 * 		cdef int N = len(conc)             # <<<<<<<<<<<<<<
 * 		cdef list d = [0.0] * N
 * 		cdef double rate
*/
  if (unlikely(__pyx_v_conc == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 331, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyList_GET_SIZE(__pyx_v_conc); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 331, __pyx_L1_error)
  __pyx_v_N = __pyx_t_6;

  /* "pyroxa/pybindings.pyx":332
 * 	cpdef list _dcdt(self, list conc):
 * 		cdef int N = len(conc)
 * 		cdef list d = [0.0] * N             # <<<<<<<<<<<<<<
 * 		cdef double rate
 * 		cdef object rxn
*/
  __pyx_t_1 = PyList_New(1 * ((__pyx_v_N<0) ? 0:__pyx_v_N)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_N; __pyx_temp++) {
      __Pyx_INCREF(__pyx_mstate_global->__pyx_float_0_0);
      __Pyx_GIVEREF(__pyx_mstate_global->__pyx_float_0_0);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, __pyx_temp, __pyx_mstate_global->__pyx_float_0_0) != (0)) __PYX_ERR(0, 332, __pyx_L1_error);
    }
  }
  __pyx_v_d = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":335
 * 		cdef double rate
 * 		cdef object rxn
 * 		for rxn in self.reactions:             # <<<<<<<<<<<<<<
 * 			rate = rxn.rate(conc)
 * 			for key, nu in rxn.reactants.items():
*/
  if (unlikely(__pyx_v_self->reactions == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 335, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->reactions; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_6 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 335, __pyx_L1_error)
      #endif
      if (__pyx_t_6 >= __pyx_temp) break;
    }
    __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_6);
    ++__pyx_t_6;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_rxn, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":336
 * 		cdef object rxn
 * 		for rxn in self.reactions:
 * 			rate = rxn.rate(conc)             # <<<<<<<<<<<<<<
 * 			for key, nu in rxn.reactants.items():
 * 				d[int(key)] -= nu * rate
*/
    __pyx_t_4 = __pyx_v_rxn;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_conc};
      __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_rate, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_7 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_rate = __pyx_t_7;

    /* "pyroxa/pybindings.pyx":337
 * 		for rxn in self.reactions:
 * 			rate = rxn.rate(conc)
 * 			for key, nu in rxn.reactants.items():             # <<<<<<<<<<<<<<
 * 				d[int(key)] -= nu * rate
 * 			for key, nu in rxn.products.items():
*/
    __pyx_t_8 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_rxn, __pyx_mstate_global->__pyx_n_u_reactants); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 337, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_dict_iterator(__pyx_t_4, 0, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_9), (&__pyx_t_10)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
    while (1) {
      __pyx_t_11 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_9, &__pyx_t_8, &__pyx_t_3, &__pyx_t_4, NULL, __pyx_t_10);
      if (unlikely(__pyx_t_11 == 0)) break;
      if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_nu, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":338
 * 			rate = rxn.rate(conc)
 * 			for key, nu in rxn.reactants.items():
 * 				d[int(key)] -= nu * rate             # <<<<<<<<<<<<<<
 * 			for key, nu in rxn.products.items():
 * 				d[int(key)] += nu * rate
*/
      __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_d, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_12 = PyFloat_FromDouble(__pyx_v_rate); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyNumber_Multiply(__pyx_v_nu, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyNumber_InPlaceSubtract(__pyx_t_3, __pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely((PyObject_SetItem(__pyx_v_d, __pyx_t_4, __pyx_t_12) < 0))) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":339
 * 			for key, nu in rxn.reactants.items():
 * 				d[int(key)] -= nu * rate
 * 			for key, nu in rxn.products.items():             # <<<<<<<<<<<<<<
 * 				d[int(key)] += nu * rate
 * 		return d
*/
    __pyx_t_9 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_rxn, __pyx_mstate_global->__pyx_n_u_products); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__pyx_t_4 == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 339, __pyx_L1_error)
    }
    __pyx_t_12 = __Pyx_dict_iterator(__pyx_t_4, 0, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_8), (&__pyx_t_10)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_12;
    __pyx_t_12 = 0;
    while (1) {
      __pyx_t_11 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_8, &__pyx_t_9, &__pyx_t_12, &__pyx_t_4, NULL, __pyx_t_10);
      if (unlikely(__pyx_t_11 == 0)) break;
      if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_12);
      __pyx_t_12 = 0;
      __Pyx_XDECREF_SET(__pyx_v_nu, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":340
 * 				d[int(key)] -= nu * rate
 * 			for key, nu in rxn.products.items():
 * 				d[int(key)] += nu * rate             # <<<<<<<<<<<<<<
 * 		return d
 * 
*/
      __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_v_key); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_v_d, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = PyFloat_FromDouble(__pyx_v_rate); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_3 = PyNumber_Multiply(__pyx_v_nu, __pyx_t_13); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = PyNumber_InPlaceAdd(__pyx_t_12, __pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely((PyObject_SetItem(__pyx_v_d, __pyx_t_4, __pyx_t_13) < 0))) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":335
 * 		cdef double rate
 * 		cdef object rxn
 * 		for rxn in self.reactions:             # <<<<<<<<<<<<<<
 * 			rate = rxn.rate(conc)
 * 			for key, nu in rxn.reactants.items():
*/
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":341
 * 			for key, nu in rxn.products.items():
 * 				d[int(key)] += nu * rate
 * 		return d             # <<<<<<<<<<<<<<
 * 
 * 	def step(self, double dt):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_d);
  __pyx_r = __pyx_v_d;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":330
 * 		self.T = T
 * 
 * 	cpdef list _dcdt(self, list conc):             # <<<<<<<<<<<<<<
 * 		cdef int N = len(conc)
 * 		cdef list d = [0.0] * N
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor._dcdt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_rxn);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_nu);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_3_dcdt(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_12MultiReactor_2_dcdt, "MultiReactor._dcdt(self, list conc) -> list");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_12MultiReactor_3_dcdt = {"_dcdt", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_3_dcdt, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_2_dcdt};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_3_dcdt(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_conc = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_dcdt (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_conc,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 330, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 330, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_dcdt", 0) < 0) __PYX_ERR(0, 330, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_dcdt", 1, 1, 1, i); __PYX_ERR(0, 330, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 330, __pyx_L3_error)
    }
    __pyx_v_conc = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_dcdt", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 330, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor._dcdt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_conc), (&PyList_Type), 1, "conc", 1))) __PYX_ERR(0, 330, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_12MultiReactor_2_dcdt(((struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self), __pyx_v_conc);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_2_dcdt(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, PyObject *__pyx_v_conc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_dcdt", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyroxa_11_pybindings_12MultiReactor__dcdt(__pyx_v_self, __pyx_v_conc, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor._dcdt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":343
 * 		return d
 * 
 * 	def step(self, double dt):             # <<<<<<<<<<<<<<
 * 		y0 = self.conc
 * 		k1 = self._dcdt(y0)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_5step(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_12MultiReactor_4step, "MultiReactor.step(self, double dt)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_12MultiReactor_5step = {"step", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_5step, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_4step};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_5step(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_dt;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_dt,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 343, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 343, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "step", 0) < 0) __PYX_ERR(0, 343, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("step", 1, 1, 1, i); __PYX_ERR(0, 343, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 343, __pyx_L3_error)
    }
    __pyx_v_dt = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("step", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 343, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_12MultiReactor_4step(((struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self), __pyx_v_dt);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_4step(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, double __pyx_v_dt) {
  PyObject *__pyx_v_y0 = NULL;
  PyObject *__pyx_v_k1 = NULL;
  PyObject *__pyx_v_y1 = NULL;
  PyObject *__pyx_v_k2 = NULL;
  PyObject *__pyx_v_y2 = NULL;
  PyObject *__pyx_v_k3 = NULL;
  PyObject *__pyx_v_y3 = NULL;
  PyObject *__pyx_v_k4 = NULL;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_8genexpr1__pyx_v_i;
  Py_ssize_t __pyx_8genexpr2__pyx_v_i;
  Py_ssize_t __pyx_8genexpr3__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("step", 0);

  /* "pyroxa/pybindings.pyx":344
 * 
 * 	def step(self, double dt):
 * 		y0 = self.conc             # <<<<<<<<<<<<<<
 * 		k1 = self._dcdt(y0)
 * 		y1 = [y0[i] + 0.5 * dt * k1[i] for i in range(len(y0))]
*/
  __pyx_t_1 = __pyx_v_self->conc;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_y0 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":345
 * 	def step(self, double dt):
 * 		y0 = self.conc
 * 		k1 = self._dcdt(y0)             # <<<<<<<<<<<<<<
 * 		y1 = [y0[i] + 0.5 * dt * k1[i] for i in range(len(y0))]
 * 		k2 = self._dcdt(y1)
*/
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self->__pyx_vtab)->_dcdt(__pyx_v_self, __pyx_v_y0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k1 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":346
 * 		y0 = self.conc
 * 		k1 = self._dcdt(y0)
 * 		y1 = [y0[i] + 0.5 * dt * k1[i] for i in range(len(y0))]             # <<<<<<<<<<<<<<
 * 		k2 = self._dcdt(y1)
 * 		y2 = [y0[i] + 0.5 * dt * k2[i] for i in range(len(y0))]
*/
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_y0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 346, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_v_y0); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 346, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_8genexpr1__pyx_v_i = __pyx_t_4;
      if (unlikely(__pyx_v_y0 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 346, __pyx_L1_error)
      }
      __pyx_t_5 = PyFloat_FromDouble((0.5 * __pyx_v_dt)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 346, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__pyx_v_k1 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 346, __pyx_L1_error)
      }
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_5, __Pyx_PyList_GET_ITEM(__pyx_v_k1, __pyx_8genexpr1__pyx_v_i)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 346, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Add(__Pyx_PyList_GET_ITEM(__pyx_v_y0, __pyx_8genexpr1__pyx_v_i), __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 346, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 346, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_v_y1 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":347
 * 		k1 = self._dcdt(y0)
 * 		y1 = [y0[i] + 0.5 * dt * k1[i] for i in range(len(y0))]
 * 		k2 = self._dcdt(y1)             # <<<<<<<<<<<<<<
 * 		y2 = [y0[i] + 0.5 * dt * k2[i] for i in range(len(y0))]
 * 		k3 = self._dcdt(y2)
*/
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self->__pyx_vtab)->_dcdt(__pyx_v_self, __pyx_v_y1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":348
 * 		y1 = [y0[i] + 0.5 * dt * k1[i] for i in range(len(y0))]
 * 		k2 = self._dcdt(y1)
 * 		y2 = [y0[i] + 0.5 * dt * k2[i] for i in range(len(y0))]             # <<<<<<<<<<<<<<
 * 		k3 = self._dcdt(y2)
 * 		y3 = [y0[i] + dt * k3[i] for i in range(len(y0))]
*/
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_y0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 348, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_v_y0); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 348, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_8genexpr2__pyx_v_i = __pyx_t_4;
      if (unlikely(__pyx_v_y0 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 348, __pyx_L1_error)
      }
      __pyx_t_5 = PyFloat_FromDouble((0.5 * __pyx_v_dt)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__pyx_v_k2 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 348, __pyx_L1_error)
      }
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_5, __Pyx_PyList_GET_ITEM(__pyx_v_k2, __pyx_8genexpr2__pyx_v_i)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Add(__Pyx_PyList_GET_ITEM(__pyx_v_y0, __pyx_8genexpr2__pyx_v_i), __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_v_y2 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":349
 * 		k2 = self._dcdt(y1)
 * 		y2 = [y0[i] + 0.5 * dt * k2[i] for i in range(len(y0))]
 * 		k3 = self._dcdt(y2)             # <<<<<<<<<<<<<<
 * 		y3 = [y0[i] + dt * k3[i] for i in range(len(y0))]
 * 		k4 = self._dcdt(y3)
*/
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self->__pyx_vtab)->_dcdt(__pyx_v_self, __pyx_v_y2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k3 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":350
 * 		y2 = [y0[i] + 0.5 * dt * k2[i] for i in range(len(y0))]
 * 		k3 = self._dcdt(y2)
 * 		y3 = [y0[i] + dt * k3[i] for i in range(len(y0))]             # <<<<<<<<<<<<<<
 * 		k4 = self._dcdt(y3)
 * 		for i in range(len(y0)):
*/
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_y0 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 350, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_v_y0); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 350, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_8genexpr3__pyx_v_i = __pyx_t_4;
      if (unlikely(__pyx_v_y0 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 350, __pyx_L1_error)
      }
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__pyx_v_k3 == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 350, __pyx_L1_error)
      }
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_5, __Pyx_PyList_GET_ITEM(__pyx_v_k3, __pyx_8genexpr3__pyx_v_i)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Add(__Pyx_PyList_GET_ITEM(__pyx_v_y0, __pyx_8genexpr3__pyx_v_i), __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 350, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_v_y3 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":351
 * 		k3 = self._dcdt(y2)
 * 		y3 = [y0[i] + dt * k3[i] for i in range(len(y0))]
 * 		k4 = self._dcdt(y3)             # <<<<<<<<<<<<<<
 * 		for i in range(len(y0)):
 * 			self.conc[i] += (dt / 6.0) * (k1[i] + 2.0 * k2[i] + 2.0 * k3[i] + k4[i])
*/
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self->__pyx_vtab)->_dcdt(__pyx_v_self, __pyx_v_y3, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k4 = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":352
 * 		y3 = [y0[i] + dt * k3[i] for i in range(len(y0))]
 * 		k4 = self._dcdt(y3)
 * 		for i in range(len(y0)):             # <<<<<<<<<<<<<<
 * 			self.conc[i] += (dt / 6.0) * (k1[i] + 2.0 * k2[i] + 2.0 * k3[i] + k4[i])
 * 			if self.conc[i] < 0:
*/
  if (unlikely(__pyx_v_y0 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 352, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_v_y0); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 352, __pyx_L1_error)
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "pyroxa/pybindings.pyx":353
 * 		k4 = self._dcdt(y3)
 * 		for i in range(len(y0)):
 * 			self.conc[i] += (dt / 6.0) * (k1[i] + 2.0 * k2[i] + 2.0 * k3[i] + k4[i])             # <<<<<<<<<<<<<<
 * 			if self.conc[i] < 0:
 * 				self.conc[i] = 0.0
*/
    if (unlikely(__pyx_v_self->conc == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 353, __pyx_L1_error)
    }
    __Pyx_INCREF(__pyx_v_self->conc);
    __pyx_t_7 = __pyx_v_self->conc;
    __pyx_t_8 = __pyx_v_i;
    if (unlikely(__pyx_t_7 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 353, __pyx_L1_error)
    }
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_dt / 6.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(__pyx_v_k1 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 353, __pyx_L1_error)
    }
    if (unlikely(__pyx_v_k2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 353, __pyx_L1_error)
    }
    __pyx_t_5 = PyNumber_Multiply(__pyx_mstate_global->__pyx_float_2_0, __Pyx_PyList_GET_ITEM(__pyx_v_k2, __pyx_v_i)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyNumber_Add(__Pyx_PyList_GET_ITEM(__pyx_v_k1, __pyx_v_i), __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v_k3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 353, __pyx_L1_error)
    }
    __pyx_t_5 = PyNumber_Multiply(__pyx_mstate_global->__pyx_float_2_0, __Pyx_PyList_GET_ITEM(__pyx_v_k3, __pyx_v_i)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyNumber_Add(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v_k4 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 353, __pyx_L1_error)
    }
    __pyx_t_5 = PyNumber_Add(__pyx_t_9, __Pyx_PyList_GET_ITEM(__pyx_v_k4, __pyx_v_i)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Multiply(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_InPlaceAdd(__Pyx_PyList_GET_ITEM(__pyx_t_7, __pyx_t_8), __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__pyx_t_7 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 353, __pyx_L1_error)
    }
    if (unlikely((__Pyx_SetItemInt(__pyx_t_7, __pyx_t_8, __pyx_t_5, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 0, 0, 1) < 0))) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyroxa/pybindings.pyx":354
 * 		for i in range(len(y0)):
 * 			self.conc[i] += (dt / 6.0) * (k1[i] + 2.0 * k2[i] + 2.0 * k3[i] + k4[i])
 * 			if self.conc[i] < 0:             # <<<<<<<<<<<<<<
 * 				self.conc[i] = 0.0
 * 
*/
    if (unlikely(__pyx_v_self->conc == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 354, __pyx_L1_error)
    }
    __pyx_t_5 = PyObject_RichCompare(__Pyx_PyList_GET_ITEM(__pyx_v_self->conc, __pyx_v_i), __pyx_mstate_global->__pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 354, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_10) {

      /* "pyroxa/pybindings.pyx":355
 * 			self.conc[i] += (dt / 6.0) * (k1[i] + 2.0 * k2[i] + 2.0 * k3[i] + k4[i])
 * 			if self.conc[i] < 0:
 * 				self.conc[i] = 0.0             # <<<<<<<<<<<<<<
 * 
 * 	def run(self, double time_span, double dt):
*/
      if (unlikely(__pyx_v_self->conc == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 355, __pyx_L1_error)
      }
      if (unlikely((__Pyx_SetItemInt(__pyx_v_self->conc, __pyx_v_i, __pyx_mstate_global->__pyx_float_0_0, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 0, 0, 1) < 0))) __PYX_ERR(0, 355, __pyx_L1_error)

      /* "pyroxa/pybindings.pyx":354
 * 		for i in range(len(y0)):
 * 			self.conc[i] += (dt / 6.0) * (k1[i] + 2.0 * k2[i] + 2.0 * k3[i] + k4[i])
 * 			if self.conc[i] < 0:             # <<<<<<<<<<<<<<
 * 				self.conc[i] = 0.0
 * 
*/
    }
  }

  /* "pyroxa/pybindings.pyx":343
 * 		return d
 * 
 * 	def step(self, double dt):             # <<<<<<<<<<<<<<
 * 		y0 = self.conc
 * 		k1 = self._dcdt(y0)
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_y0);
  __Pyx_XDECREF(__pyx_v_k1);
  __Pyx_XDECREF(__pyx_v_y1);
  __Pyx_XDECREF(__pyx_v_k2);
  __Pyx_XDECREF(__pyx_v_y2);
  __Pyx_XDECREF(__pyx_v_k3);
  __Pyx_XDECREF(__pyx_v_y3);
  __Pyx_XDECREF(__pyx_v_k4);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":357
 * 				self.conc[i] = 0.0
 * 
 * 	def run(self, double time_span, double dt):             # <<<<<<<<<<<<<<
 * 		cdef int nsteps = <int>round(time_span / dt)
 * 		cdef int i
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_7run(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_12MultiReactor_6run, "MultiReactor.run(self, double time_span, double dt)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_12MultiReactor_7run = {"run", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_7run, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_6run};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_7run(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_time_span;
  double __pyx_v_dt;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_time_span,&__pyx_mstate_global->__pyx_n_u_dt,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 357, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 357, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 357, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "run", 0) < 0) __PYX_ERR(0, 357, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("run", 1, 2, 2, i); __PYX_ERR(0, 357, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 357, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 357, __pyx_L3_error)
    }
    __pyx_v_time_span = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L3_error)
    __pyx_v_dt = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 357, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("run", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 357, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_12MultiReactor_6run(((struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self), __pyx_v_time_span, __pyx_v_dt);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_6run(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, double __pyx_v_time_span, double __pyx_v_dt) {
  int __pyx_v_nsteps;
  int __pyx_v_i;
  PyObject *__pyx_v_times = NULL;
  PyObject *__pyx_v_traj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);

  /* "pyroxa/pybindings.pyx":358
 * 
 * 	def run(self, double time_span, double dt):
 * 		cdef int nsteps = <int>round(time_span / dt)             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		times = [0.0]
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF(__pyx_builtin_round);
  __pyx_t_3 = __pyx_builtin_round; 
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_time_span / __pyx_v_dt)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_6 = __Pyx_PyLong_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nsteps = ((int)__pyx_t_6);

  /* "pyroxa/pybindings.pyx":360
 * 		cdef int nsteps = <int>round(time_span / dt)
 * 		cdef int i
 * 		times = [0.0]             # <<<<<<<<<<<<<<
 * 		traj = [list(self.conc)]
 * 		for i in range(nsteps):
*/
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_mstate_global->__pyx_float_0_0) != (0)) __PYX_ERR(0, 360, __pyx_L1_error);
  __pyx_v_times = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":361
 * 		cdef int i
 * 		times = [0.0]
 * 		traj = [list(self.conc)]             # <<<<<<<<<<<<<<
 * 		for i in range(nsteps):
 * 			self.step(dt)
*/
  __pyx_t_1 = PySequence_List(__pyx_v_self->conc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1) != (0)) __PYX_ERR(0, 361, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_v_traj = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":362
 * 		times = [0.0]
 * 		traj = [list(self.conc)]
 * 		for i in range(nsteps):             # <<<<<<<<<<<<<<
 * 			self.step(dt)
 * 			times.append((i + 1) * dt)
*/
  __pyx_t_6 = __pyx_v_nsteps;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "pyroxa/pybindings.pyx":363
 * 		traj = [list(self.conc)]
 * 		for i in range(nsteps):
 * 			self.step(dt)             # <<<<<<<<<<<<<<
 * 			times.append((i + 1) * dt)
 * 			traj.append(list(self.conc))
*/
    __pyx_t_1 = ((PyObject *)__pyx_v_self);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_step, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":364
 * 		for i in range(nsteps):
 * 			self.step(dt)
 * 			times.append((i + 1) * dt)             # <<<<<<<<<<<<<<
 * 			traj.append(list(self.conc))
 * 		return times, traj
*/
    __pyx_t_3 = PyFloat_FromDouble(((__pyx_v_i + 1) * __pyx_v_dt)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_times, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":365
 * 			self.step(dt)
 * 			times.append((i + 1) * dt)
 * 			traj.append(list(self.conc))             # <<<<<<<<<<<<<<
 * 		return times, traj
 * 
*/
    __pyx_t_3 = PySequence_List(__pyx_v_self->conc); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_traj, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "pyroxa/pybindings.pyx":366
 * 			times.append((i + 1) * dt)
 * 			traj.append(list(self.conc))
 * 		return times, traj             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_times);
  __Pyx_GIVEREF(__pyx_v_times);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_times) != (0)) __PYX_ERR(0, 366, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_traj);
  __Pyx_GIVEREF(__pyx_v_traj);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_traj) != (0)) __PYX_ERR(0, 366, __pyx_L1_error);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":357
 * 				self.conc[i] = 0.0
 * 
 * 	def run(self, double time_span, double dt):             # <<<<<<<<<<<<<<
 * 		cdef int nsteps = <int>round(time_span / dt)
 * 		cdef int i
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_times);
  __Pyx_XDECREF(__pyx_v_traj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_12MultiReactor_8__reduce_cython__, "MultiReactor.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_12MultiReactor_9__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_8__reduce_cython__};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_9__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_12MultiReactor_8__reduce_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_12MultiReactor_10__setstate_cython__, "MultiReactor.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_12MultiReactor_11__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_10__setstate_cython__};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_11__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_12MultiReactor_10__setstate_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_12MultiReactor_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.MultiReactor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":377
 * 	cdef double dt
 * 
 * 	def __cinit__(self, Reaction rxn, double A0=1.0, double B0=0.0, double time_span=10.0, double dt=0.01):             # <<<<<<<<<<<<<<
 * 		self.kf = rxn.kf
 * 		self.kr = rxn.kr
*/

/* Python wrapper */
static int __pyx_pw_6pyroxa_11_pybindings_7Reactor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyroxa_11_pybindings_7Reactor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_rxn = 0;
  double __pyx_v_A0;
  double __pyx_v_B0;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_rxn,&__pyx_mstate_global->__pyx_n_u_A0,&__pyx_mstate_global->__pyx_n_u_B0,&__pyx_mstate_global->__pyx_n_u_time_span,&__pyx_mstate_global->__pyx_n_u_dt,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 377, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_VARARGS(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 377, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 377, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 377, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 377, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 377, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 377, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 5, i); __PYX_ERR(0, 377, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_VARARGS(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 377, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 377, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 377, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 377, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 377, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rxn = ((struct __pyx_obj_6pyroxa_11_pybindings_Reaction *)values[0]);
    if (values[1]) {
      __pyx_v_A0 = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_A0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 377, __pyx_L3_error)
    } else {
      __pyx_v_A0 = ((double)1.0);
    }
    if (values[2]) {
      __pyx_v_B0 = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_B0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 377, __pyx_L3_error)
    } else {
      __pyx_v_B0 = ((double)0.0);
    }
    if (values[3]) {
      __pyx_v_time_span = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 377, __pyx_L3_error)
    } else {
      __pyx_v_time_span = ((double)10.0);
    }
    if (values[4]) {
      __pyx_v_dt = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 377, __pyx_L3_error)
    } else {
      __pyx_v_dt = ((double)0.01);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 5, __pyx_nargs); __PYX_ERR(0, 377, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.Reactor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rxn), __pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_Reaction, 1, "rxn", 0))) __PYX_ERR(0, 377, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_7Reactor___cinit__(((struct __pyx_obj_6pyroxa_11_pybindings_Reactor *)__pyx_v_self), __pyx_v_rxn, __pyx_v_A0, __pyx_v_B0, __pyx_v_time_span, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyroxa_11_pybindings_7Reactor___cinit__(struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self, struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_rxn, double __pyx_v_A0, double __pyx_v_B0, double __pyx_v_time_span, double __pyx_v_dt) {
  int __pyx_r;
  double __pyx_t_1;

  /* "pyroxa/pybindings.pyx":378
 * 
 * 	def __cinit__(self, Reaction rxn, double A0=1.0, double B0=0.0, double time_span=10.0, double dt=0.01):
 * 		self.kf = rxn.kf             # <<<<<<<<<<<<<<
 * 		self.kr = rxn.kr
 * 		self.A0 = A0
*/
  __pyx_t_1 = __pyx_v_rxn->kf;
  __pyx_v_self->kf = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":379
 * 	def __cinit__(self, Reaction rxn, double A0=1.0, double B0=0.0, double time_span=10.0, double dt=0.01):
 * 		self.kf = rxn.kf
 * 		self.kr = rxn.kr             # <<<<<<<<<<<<<<
 * 		self.A0 = A0
 * 		self.B0 = B0
*/
  __pyx_t_1 = __pyx_v_rxn->kr;
  __pyx_v_self->kr = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":380
 * 		self.kf = rxn.kf
 * 		self.kr = rxn.kr
 * 		self.A0 = A0             # <<<<<<<<<<<<<<
 * 		self.B0 = B0
 * 		self.time_span = time_span
*/
  __pyx_v_self->A0 = __pyx_v_A0;

  /* "pyroxa/pybindings.pyx":381
 * 		self.kr = rxn.kr
 * 		self.A0 = A0
 * 		self.B0 = B0             # <<<<<<<<<<<<<<
 * 		self.time_span = time_span
 * 		self.dt = dt
*/
  __pyx_v_self->B0 = __pyx_v_B0;

  /* "pyroxa/pybindings.pyx":382
 * 		self.A0 = A0
 * 		self.B0 = B0
 * 		self.time_span = time_span             # <<<<<<<<<<<<<<
 * 		self.dt = dt
 * 
*/
  __pyx_v_self->time_span = __pyx_v_time_span;

  /* "pyroxa/pybindings.pyx":383
 * 		self.B0 = B0
 * 		self.time_span = time_span
 * 		self.dt = dt             # <<<<<<<<<<<<<<
 * 
 * 	def run(self):
*/
  __pyx_v_self->dt = __pyx_v_dt;

  /* "pyroxa/pybindings.pyx":377
 * 	cdef double dt
 * 
 * 	def __cinit__(self, Reaction rxn, double A0=1.0, double B0=0.0, double time_span=10.0, double dt=0.01):             # <<<<<<<<<<<<<<
 * 		self.kf = rxn.kf
 * 		self.kr = rxn.kr
*/

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":385
 * 		self.dt = dt
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		cdef int nsteps = <int>round(self.time_span / self.dt)
 * 		cdef int npts = nsteps + 1
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7Reactor_3run(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_7Reactor_2run, "Reactor.run(self)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_7Reactor_3run = {"run", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_7Reactor_3run, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_7Reactor_2run};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7Reactor_3run(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("run", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("run", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_7Reactor_2run(((struct __pyx_obj_6pyroxa_11_pybindings_Reactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_7Reactor_2run(struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self) {
  int __pyx_v_nsteps;
  int __pyx_v_npts;
  int __pyx_v_max_len;
  double *__pyx_v_times;
  double *__pyx_v_Aout;
  double *__pyx_v_Bout;
  int __pyx_v_written;
  PyObject *__pyx_v_tarr = NULL;
  PyObject *__pyx_v_aarr = NULL;
  int __pyx_v_i;
  PyObject *__pyx_v_py_times = NULL;
  PyObject *__pyx_v_traj = NULL;
  int __pyx_8genexpr4__pyx_v_i;
  int __pyx_8genexpr5__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);

  /* "pyroxa/pybindings.pyx":386
 * 
 * 	def run(self):
 * 		cdef int nsteps = <int>round(self.time_span / self.dt)             # <<<<<<<<<<<<<<
 * 		cdef int npts = nsteps + 1
 * 		cdef int max_len = npts
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF(__pyx_builtin_round);
  __pyx_t_3 = __pyx_builtin_round; 
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->time_span / __pyx_v_self->dt)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_6 = __Pyx_PyLong_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nsteps = ((int)__pyx_t_6);

  /* "pyroxa/pybindings.pyx":387
 * 	def run(self):
 * 		cdef int nsteps = <int>round(self.time_span / self.dt)
 * 		cdef int npts = nsteps + 1             # <<<<<<<<<<<<<<
 * 		cdef int max_len = npts
 * 		cdef double* times = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_v_npts = (__pyx_v_nsteps + 1);

  /* "pyroxa/pybindings.pyx":388
 * 		cdef int nsteps = <int>round(self.time_span / self.dt)
 * 		cdef int npts = nsteps + 1
 * 		cdef int max_len = npts             # <<<<<<<<<<<<<<
 * 		cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 		cdef double* Aout = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_v_max_len = __pyx_v_npts;

  /* "pyroxa/pybindings.pyx":389
 * 		cdef int npts = nsteps + 1
 * 		cdef int max_len = npts
 * 		cdef double* times = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 		cdef double* Aout = <double*>malloc(max_len * sizeof(double))
 * 		cdef double* Bout = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_v_times = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":390
 * 		cdef int max_len = npts
 * 		cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 		cdef double* Aout = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 		cdef double* Bout = <double*>malloc(max_len * sizeof(double))
 * 		if not times or not Aout or not Bout:
*/
  __pyx_v_Aout = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":391
 * 		cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 		cdef double* Aout = <double*>malloc(max_len * sizeof(double))
 * 		cdef double* Bout = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 		if not times or not Aout or not Bout:
 * 			if times: free(times)
*/
  __pyx_v_Bout = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":392
 * 		cdef double* Aout = <double*>malloc(max_len * sizeof(double))
 * 		cdef double* Bout = <double*>malloc(max_len * sizeof(double))
 * 		if not times or not Aout or not Bout:             # <<<<<<<<<<<<<<
 * 			if times: free(times)
 * 			if Aout: free(Aout)
*/
  __pyx_t_8 = (!(__pyx_v_times != 0));
  if (!__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_8 = (!(__pyx_v_Aout != 0));
  if (!__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_8 = (!(__pyx_v_Bout != 0));
  __pyx_t_7 = __pyx_t_8;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_7) {

    /* "pyroxa/pybindings.pyx":393
 * 		cdef double* Bout = <double*>malloc(max_len * sizeof(double))
 * 		if not times or not Aout or not Bout:
 * 			if times: free(times)             # <<<<<<<<<<<<<<
 * 			if Aout: free(Aout)
 * 			if Bout: free(Bout)
*/
    __pyx_t_7 = (__pyx_v_times != 0);
    if (__pyx_t_7) {
      free(__pyx_v_times);
    }

    /* "pyroxa/pybindings.pyx":394
 * 		if not times or not Aout or not Bout:
 * 			if times: free(times)
 * 			if Aout: free(Aout)             # <<<<<<<<<<<<<<
 * 			if Bout: free(Bout)
 * 			raise MemoryError("allocation failed")
*/
    __pyx_t_7 = (__pyx_v_Aout != 0);
    if (__pyx_t_7) {
      free(__pyx_v_Aout);
    }

    /* "pyroxa/pybindings.pyx":395
 * 			if times: free(times)
 * 			if Aout: free(Aout)
 * 			if Bout: free(Bout)             # <<<<<<<<<<<<<<
 * 			raise MemoryError("allocation failed")
 * 		cdef int written
*/
    __pyx_t_7 = (__pyx_v_Bout != 0);
    if (__pyx_t_7) {
      free(__pyx_v_Bout);
    }

    /* "pyroxa/pybindings.pyx":396
 * 			if Aout: free(Aout)
 * 			if Bout: free(Bout)
 * 			raise MemoryError("allocation failed")             # <<<<<<<<<<<<<<
 * 		cdef int written
 * 		written = simulate_reactor(self.kf, self.kr, self.A0, self.B0, self.time_span, self.dt, times, Aout, Bout, max_len)
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_MemoryError);
    __pyx_t_4 = __pyx_builtin_MemoryError; 
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_kp_u_allocation_failed};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 396, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":392
 * 		cdef double* Aout = <double*>malloc(max_len * sizeof(double))
 * 		cdef double* Bout = <double*>malloc(max_len * sizeof(double))
 * 		if not times or not Aout or not Bout:             # <<<<<<<<<<<<<<
 * 			if times: free(times)
 * 			if Aout: free(Aout)
*/
  }

  /* "pyroxa/pybindings.pyx":398
 * 			raise MemoryError("allocation failed")
 * 		cdef int written
 * 		written = simulate_reactor(self.kf, self.kr, self.A0, self.B0, self.time_span, self.dt, times, Aout, Bout, max_len)             # <<<<<<<<<<<<<<
 * 		if written <= 0:
 * 			raise RuntimeError("simulation failed or insufficient buffer size")
*/
  __pyx_v_written = simulate_reactor(__pyx_v_self->kf, __pyx_v_self->kr, __pyx_v_self->A0, __pyx_v_self->B0, __pyx_v_self->time_span, __pyx_v_self->dt, __pyx_v_times, __pyx_v_Aout, __pyx_v_Bout, __pyx_v_max_len);

  /* "pyroxa/pybindings.pyx":399
 * 		cdef int written
 * 		written = simulate_reactor(self.kf, self.kr, self.A0, self.B0, self.time_span, self.dt, times, Aout, Bout, max_len)
 * 		if written <= 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("simulation failed or insufficient buffer size")
 * 		try:
*/
  __pyx_t_7 = (__pyx_v_written <= 0);
  if (unlikely(__pyx_t_7)) {

    /* "pyroxa/pybindings.pyx":400
 * 		written = simulate_reactor(self.kf, self.kr, self.A0, self.B0, self.time_span, self.dt, times, Aout, Bout, max_len)
 * 		if written <= 0:
 * 			raise RuntimeError("simulation failed or insufficient buffer size")             # <<<<<<<<<<<<<<
 * 		try:
 * 			if _HAS_NUMPY:
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_RuntimeError);
    __pyx_t_3 = __pyx_builtin_RuntimeError; 
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_simulation_failed_or_insufficien};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 400, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":399
 * 		cdef int written
 * 		written = simulate_reactor(self.kf, self.kr, self.A0, self.B0, self.time_span, self.dt, times, Aout, Bout, max_len)
 * 		if written <= 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("simulation failed or insufficient buffer size")
 * 		try:
*/
  }

  /* "pyroxa/pybindings.pyx":401
 * 		if written <= 0:
 * 			raise RuntimeError("simulation failed or insufficient buffer size")
 * 		try:             # <<<<<<<<<<<<<<
 * 			if _HAS_NUMPY:
 * 				tarr = np.empty(written, dtype=np.float64)
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":402
 * 			raise RuntimeError("simulation failed or insufficient buffer size")
 * 		try:
 * 			if _HAS_NUMPY:             # <<<<<<<<<<<<<<
 * 				tarr = np.empty(written, dtype=np.float64)
 * 				aarr = np.empty((written, 2), dtype=np.float64)
*/
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_HAS_NUMPY); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L12_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 402, __pyx_L12_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_7) {

      /* "pyroxa/pybindings.pyx":403
 * 		try:
 * 			if _HAS_NUMPY:
 * 				tarr = np.empty(written, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 				aarr = np.empty((written, 2), dtype=np.float64)
 * 				for i in range(written):
*/
      __pyx_t_3 = NULL;
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyLong_From_int(__pyx_v_written); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 403, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_float64); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 403, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_5 = 1;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        assert(__pyx_t_3);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_2, __pyx__function);
        __pyx_t_5 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_3, __pyx_t_4};
        __pyx_t_9 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 403, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_t_10, __pyx_t_9, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 403, __pyx_L12_error)
        __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_2, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_9);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      __pyx_v_tarr = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":404
 * 			if _HAS_NUMPY:
 * 				tarr = np.empty(written, dtype=np.float64)
 * 				aarr = np.empty((written, 2), dtype=np.float64)             # <<<<<<<<<<<<<<
 * 				for i in range(written):
 * 					tarr[i] = times[i]
*/
      __pyx_t_2 = NULL;
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 404, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_empty); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 404, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyLong_From_int(__pyx_v_written); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 404, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 404, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_9);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9) != (0)) __PYX_ERR(0, 404, __pyx_L12_error);
      __Pyx_INCREF(__pyx_mstate_global->__pyx_int_2);
      __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_2);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_mstate_global->__pyx_int_2) != (0)) __PYX_ERR(0, 404, __pyx_L12_error);
      __pyx_t_9 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 404, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_5 = 1;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
        assert(__pyx_t_2);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_10, __pyx__function);
        __pyx_t_5 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_t_4};
        __pyx_t_9 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 404, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_t_3, __pyx_t_9, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 404, __pyx_L12_error)
        __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_10, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_9);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      __pyx_v_aarr = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":405
 * 				tarr = np.empty(written, dtype=np.float64)
 * 				aarr = np.empty((written, 2), dtype=np.float64)
 * 				for i in range(written):             # <<<<<<<<<<<<<<
 * 					tarr[i] = times[i]
 * 					aarr[i, 0] = Aout[i]
*/
      __pyx_t_6 = __pyx_v_written;
      __pyx_t_11 = __pyx_t_6;
      for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
        __pyx_v_i = __pyx_t_12;

        /* "pyroxa/pybindings.pyx":406
 * 				aarr = np.empty((written, 2), dtype=np.float64)
 * 				for i in range(written):
 * 					tarr[i] = times[i]             # <<<<<<<<<<<<<<
 * 					aarr[i, 0] = Aout[i]
 * 					aarr[i, 1] = Bout[i]
*/
        __pyx_t_1 = PyFloat_FromDouble((__pyx_v_times[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely((__Pyx_SetItemInt(__pyx_v_tarr, __pyx_v_i, __pyx_t_1, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1) < 0))) __PYX_ERR(0, 406, __pyx_L12_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "pyroxa/pybindings.pyx":407
 * 				for i in range(written):
 * 					tarr[i] = times[i]
 * 					aarr[i, 0] = Aout[i]             # <<<<<<<<<<<<<<
 * 					aarr[i, 1] = Bout[i]
 * 				return tarr, aarr
*/
        __pyx_t_1 = PyFloat_FromDouble((__pyx_v_Aout[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_10 = __Pyx_PyLong_From_int(__pyx_v_i); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 407, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 407, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_10);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10) != (0)) __PYX_ERR(0, 407, __pyx_L12_error);
        __Pyx_INCREF(__pyx_mstate_global->__pyx_int_0);
        __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_0);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_mstate_global->__pyx_int_0) != (0)) __PYX_ERR(0, 407, __pyx_L12_error);
        __pyx_t_10 = 0;
        if (unlikely((PyObject_SetItem(__pyx_v_aarr, __pyx_t_9, __pyx_t_1) < 0))) __PYX_ERR(0, 407, __pyx_L12_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "pyroxa/pybindings.pyx":408
 * 					tarr[i] = times[i]
 * 					aarr[i, 0] = Aout[i]
 * 					aarr[i, 1] = Bout[i]             # <<<<<<<<<<<<<<
 * 				return tarr, aarr
 * 			else:
*/
        __pyx_t_1 = PyFloat_FromDouble((__pyx_v_Bout[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 408, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyLong_From_int(__pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 408, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 408, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_9);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9) != (0)) __PYX_ERR(0, 408, __pyx_L12_error);
        __Pyx_INCREF(__pyx_mstate_global->__pyx_int_1);
        __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_1);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_mstate_global->__pyx_int_1) != (0)) __PYX_ERR(0, 408, __pyx_L12_error);
        __pyx_t_9 = 0;
        if (unlikely((PyObject_SetItem(__pyx_v_aarr, __pyx_t_10, __pyx_t_1) < 0))) __PYX_ERR(0, 408, __pyx_L12_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }

      /* "pyroxa/pybindings.pyx":409
 * 					aarr[i, 0] = Aout[i]
 * 					aarr[i, 1] = Bout[i]
 * 				return tarr, aarr             # <<<<<<<<<<<<<<
 * 			else:
 * 				py_times = [times[i] for i in range(written)]
*/
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_tarr);
      __Pyx_GIVEREF(__pyx_v_tarr);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_tarr) != (0)) __PYX_ERR(0, 409, __pyx_L12_error);
      __Pyx_INCREF(__pyx_v_aarr);
      __Pyx_GIVEREF(__pyx_v_aarr);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_aarr) != (0)) __PYX_ERR(0, 409, __pyx_L12_error);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L11_return;

      /* "pyroxa/pybindings.pyx":402
 * 			raise RuntimeError("simulation failed or insufficient buffer size")
 * 		try:
 * 			if _HAS_NUMPY:             # <<<<<<<<<<<<<<
 * 				tarr = np.empty(written, dtype=np.float64)
 * 				aarr = np.empty((written, 2), dtype=np.float64)
*/
    }

    /* "pyroxa/pybindings.pyx":411
 * 				return tarr, aarr
 * 			else:
 * 				py_times = [times[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 				traj = [[Aout[i], Bout[i]] for i in range(written)]
 * 				return py_times, traj
*/
    /*else*/ {
      { /* enter inner scope */
        __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __pyx_v_written;
        __pyx_t_11 = __pyx_t_6;
        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
          __pyx_8genexpr4__pyx_v_i = __pyx_t_12;
          __pyx_t_10 = PyFloat_FromDouble((__pyx_v_times[__pyx_8genexpr4__pyx_v_i])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 411, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 411, __pyx_L12_error)
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
      } /* exit inner scope */
      __pyx_v_py_times = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":412
 * 			else:
 * 				py_times = [times[i] for i in range(written)]
 * 				traj = [[Aout[i], Bout[i]] for i in range(written)]             # <<<<<<<<<<<<<<
 * 				return py_times, traj
 * 		finally:
*/
      { /* enter inner scope */
        __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __pyx_v_written;
        __pyx_t_11 = __pyx_t_6;
        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
          __pyx_8genexpr5__pyx_v_i = __pyx_t_12;
          __pyx_t_10 = PyFloat_FromDouble((__pyx_v_Aout[__pyx_8genexpr5__pyx_v_i])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 412, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_9 = PyFloat_FromDouble((__pyx_v_Bout[__pyx_8genexpr5__pyx_v_i])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 412, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 412, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_10);
          if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_10) != (0)) __PYX_ERR(0, 412, __pyx_L12_error);
          __Pyx_GIVEREF(__pyx_t_9);
          if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_9) != (0)) __PYX_ERR(0, 412, __pyx_L12_error);
          __pyx_t_10 = 0;
          __pyx_t_9 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 412, __pyx_L12_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_traj = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":413
 * 				py_times = [times[i] for i in range(written)]
 * 				traj = [[Aout[i], Bout[i]] for i in range(written)]
 * 				return py_times, traj             # <<<<<<<<<<<<<<
 * 		finally:
 * 			free(times)
*/
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_py_times);
      __Pyx_GIVEREF(__pyx_v_py_times);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_py_times) != (0)) __PYX_ERR(0, 413, __pyx_L12_error);
      __Pyx_INCREF(__pyx_v_traj);
      __Pyx_GIVEREF(__pyx_v_traj);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_traj) != (0)) __PYX_ERR(0, 413, __pyx_L12_error);
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L11_return;
    }
  }

  /* "pyroxa/pybindings.pyx":415
 * 				return py_times, traj
 * 		finally:
 * 			free(times)             # <<<<<<<<<<<<<<
 * 			free(Aout)
 * 			free(Bout)
*/
  /*finally:*/ {
    __pyx_L12_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      if ( unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __pyx_t_6 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
      {
        free(__pyx_v_times);

        /* "pyroxa/pybindings.pyx":416
 * 		finally:
 * 			free(times)
 * 			free(Aout)             # <<<<<<<<<<<<<<
 * 			free(Bout)
 * 
*/
        free(__pyx_v_Aout);

        /* "pyroxa/pybindings.pyx":417
 * 			free(times)
 * 			free(Aout)
 * 			free(Bout)             # <<<<<<<<<<<<<<
 * 
 * 
*/
        free(__pyx_v_Bout);
      }
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
      __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_13;
      goto __pyx_L1_error;
    }
    __pyx_L11_return: {
      __pyx_t_19 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":415
 * 				return py_times, traj
 * 		finally:
 * 			free(times)             # <<<<<<<<<<<<<<
 * 			free(Aout)
 * 			free(Bout)
*/
      free(__pyx_v_times);

      /* "pyroxa/pybindings.pyx":416
 * 		finally:
 * 			free(times)
 * 			free(Aout)             # <<<<<<<<<<<<<<
 * 			free(Bout)
 * 
*/
      free(__pyx_v_Aout);

      /* "pyroxa/pybindings.pyx":417
 * 			free(times)
 * 			free(Aout)
 * 			free(Bout)             # <<<<<<<<<<<<<<
 * 
 * 
*/
      free(__pyx_v_Bout);
      __pyx_r = __pyx_t_19;
      __pyx_t_19 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":385
 * 		self.dt = dt
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		cdef int nsteps = <int>round(self.time_span / self.dt)
 * 		cdef int npts = nsteps + 1
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyroxa._pybindings.Reactor.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tarr);
  __Pyx_XDECREF(__pyx_v_aarr);
  __Pyx_XDECREF(__pyx_v_py_times);
  __Pyx_XDECREF(__pyx_v_traj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7Reactor_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_7Reactor_4__reduce_cython__, "Reactor.__reduce_cython__(self)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_7Reactor_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_7Reactor_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_7Reactor_4__reduce_cython__};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7Reactor_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_7Reactor_4__reduce_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_Reactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_7Reactor_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.Reactor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7Reactor_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_7Reactor_6__setstate_cython__, "Reactor.__setstate_cython__(self, __pyx_state)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_7Reactor_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_7Reactor_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_7Reactor_6__setstate_cython__};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7Reactor_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.Reactor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_7Reactor_6__setstate_cython__(((struct __pyx_obj_6pyroxa_11_pybindings_Reactor *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_7Reactor_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.Reactor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":420
 * 
 * 
 * def run_simulation_cpp(spec):             # <<<<<<<<<<<<<<
 * 	"""High-level helper that takes a Python dict spec and runs the C++ reactor.
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_1run_simulation_cpp(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_run_simulation_cpp, "run_simulation_cpp(spec)\n\nHigh-level helper that takes a Python dict spec and runs the C++ reactor.\n\nExpected spec keys similar to pure-Python runner:\n  reaction: {'kf', 'kr'}\n  initial: {'conc': {'A','B'}}\n  sim: {'time_span', 'time_step'}");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_1run_simulation_cpp = {"run_simulation_cpp", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_1run_simulation_cpp, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_run_simulation_cpp};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_1run_simulation_cpp(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_spec = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run_simulation_cpp (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_spec,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 420, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 420, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "run_simulation_cpp", 0) < 0) __PYX_ERR(0, 420, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("run_simulation_cpp", 1, 1, 1, i); __PYX_ERR(0, 420, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 420, __pyx_L3_error)
    }
    __pyx_v_spec = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("run_simulation_cpp", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 420, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.run_simulation_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_run_simulation_cpp(__pyx_self, __pyx_v_spec);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_run_simulation_cpp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_spec) {
  int __pyx_v_N;
  int __pyx_v_M;
  int __pyx_v_nsteps;
  int __pyx_v_npts;
  int __pyx_v_max_len;
  int __pyx_v_written;
  double *__pyx_v_kf_ptr;
  double *__pyx_v_kr_ptr;
  int __pyx_v_i;
  int __pyx_v_total_reac;
  int __pyx_v_total_prod;
  int *__pyx_v_c_reac_idx;
  double *__pyx_v_c_reac_nu;
  int *__pyx_v_c_reac_off;
  int *__pyx_v_c_prod_idx;
  double *__pyx_v_c_prod_nu;
  int *__pyx_v_c_prod_off;
  double *__pyx_v_c_conc0;
  double *__pyx_v_times_buf;
  double *__pyx_v_conc_out_flat;
  PyObject *__pyx_v_reaction = NULL;
  PyObject *__pyx_v_initial = NULL;
  PyObject *__pyx_v_sim = NULL;
  PyObject *__pyx_v_species = NULL;
  PyObject *__pyx_v_rxns = NULL;
  PyObject *__pyx_v_reac_idx_list = NULL;
  PyObject *__pyx_v_reac_nu_list = NULL;
  PyObject *__pyx_v_reac_off = NULL;
  PyObject *__pyx_v_prod_idx_list = NULL;
  PyObject *__pyx_v_prod_nu_list = NULL;
  PyObject *__pyx_v_prod_off = NULL;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_v_reactants = NULL;
  PyObject *__pyx_v_products = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_nu = NULL;
  CYTHON_UNUSED double *__pyx_v_kf_c;
  CYTHON_UNUSED double *__pyx_v_kr_c;
  CYTHON_UNUSED PyObject *__pyx_v_ctypes = NULL;
  PyObject *__pyx_v_conc0_py = NULL;
  PyObject *__pyx_v_tarr = NULL;
  PyObject *__pyx_v_carr = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_times_py = NULL;
  PyObject *__pyx_v_traj = NULL;
  double __pyx_v_kf;
  double __pyx_v_kr;
  PyObject *__pyx_v_conc = NULL;
  double __pyx_v_A0;
  double __pyx_v_B0;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  struct __pyx_obj_6pyroxa_11_pybindings_Reaction *__pyx_v_rxn = NULL;
  struct __pyx_obj_6pyroxa_11_pybindings_Reactor *__pyx_v_reactor = NULL;
  PyObject *__pyx_8genexpr6__pyx_v_s = NULL;
  int __pyx_8genexpr7__pyx_v_i;
  int __pyx_8genexpr8__pyx_v_i;
  int __pyx_8genexpr9__pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  double __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  double __pyx_t_23;
  int __pyx_t_24;
  int __pyx_t_25;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run_simulation_cpp", 0);

  /* "pyroxa/pybindings.pyx":444
 * 	cdef double* conc_out_flat
 * 	# pointers for buffers will be allocated with malloc below
 * 	if not isinstance(spec, dict):             # <<<<<<<<<<<<<<
 * 		raise TypeError('spec must be a dict')
 * 	reaction = spec.get('reaction', {})
*/
  __pyx_t_1 = PyDict_Check(__pyx_v_spec); 
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "pyroxa/pybindings.pyx":445
 * 	# pointers for buffers will be allocated with malloc below
 * 	if not isinstance(spec, dict):
 * 		raise TypeError('spec must be a dict')             # <<<<<<<<<<<<<<
 * 	reaction = spec.get('reaction', {})
 * 	initial = spec.get('initial', {})
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_TypeError);
    __pyx_t_5 = __pyx_builtin_TypeError; 
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_spec_must_be_a_dict};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 445, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 445, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":444
 * 	cdef double* conc_out_flat
 * 	# pointers for buffers will be allocated with malloc below
 * 	if not isinstance(spec, dict):             # <<<<<<<<<<<<<<
 * 		raise TypeError('spec must be a dict')
 * 	reaction = spec.get('reaction', {})
*/
  }

  /* "pyroxa/pybindings.pyx":446
 * 	if not isinstance(spec, dict):
 * 		raise TypeError('spec must be a dict')
 * 	reaction = spec.get('reaction', {})             # <<<<<<<<<<<<<<
 * 	initial = spec.get('initial', {})
 * 	sim = spec.get('sim', {})
*/
  __pyx_t_5 = __pyx_v_spec;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = 0;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_mstate_global->__pyx_n_u_reaction, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_v_reaction = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":447
 * 		raise TypeError('spec must be a dict')
 * 	reaction = spec.get('reaction', {})
 * 	initial = spec.get('initial', {})             # <<<<<<<<<<<<<<
 * 	sim = spec.get('sim', {})
 * 	# multi-species branch: try calling optimized C++ multi-reactor
*/
  __pyx_t_4 = __pyx_v_spec;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = 0;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_u_initial, __pyx_t_5};
    __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_v_initial = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":448
 * 	reaction = spec.get('reaction', {})
 * 	initial = spec.get('initial', {})
 * 	sim = spec.get('sim', {})             # <<<<<<<<<<<<<<
 * 	# multi-species branch: try calling optimized C++ multi-reactor
 * 	if 'species' in spec and 'reactions' in spec:
*/
  __pyx_t_5 = __pyx_v_spec;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = 0;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_mstate_global->__pyx_n_u_sim, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_v_sim = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":450
 * 	sim = spec.get('sim', {})
 * 	# multi-species branch: try calling optimized C++ multi-reactor
 * 	if 'species' in spec and 'reactions' in spec:             # <<<<<<<<<<<<<<
 * 		species = spec.get('species', [])
 * 		N = len(species)
*/
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_u_species, __pyx_v_spec, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 450, __pyx_L1_error)
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_u_reactions, __pyx_v_spec, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 450, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "pyroxa/pybindings.pyx":451
 * 	# multi-species branch: try calling optimized C++ multi-reactor
 * 	if 'species' in spec and 'reactions' in spec:
 * 		species = spec.get('species', [])             # <<<<<<<<<<<<<<
 * 		N = len(species)
 * 		rxns = spec.get('reactions', [])
*/
    __pyx_t_4 = __pyx_v_spec;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_u_species, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 451, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __pyx_v_species = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":452
 * 	if 'species' in spec and 'reactions' in spec:
 * 		species = spec.get('species', [])
 * 		N = len(species)             # <<<<<<<<<<<<<<
 * 		rxns = spec.get('reactions', [])
 * 		M = len(rxns)
*/
    __pyx_t_7 = PyObject_Length(__pyx_v_species); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 452, __pyx_L1_error)
    __pyx_v_N = __pyx_t_7;

    /* "pyroxa/pybindings.pyx":453
 * 		species = spec.get('species', [])
 * 		N = len(species)
 * 		rxns = spec.get('reactions', [])             # <<<<<<<<<<<<<<
 * 		M = len(rxns)
 * 		# prepare arrays: allocate C arrays and fill them
*/
    __pyx_t_5 = __pyx_v_spec;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_mstate_global->__pyx_n_u_reactions, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 453, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __pyx_v_rxns = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":454
 * 		N = len(species)
 * 		rxns = spec.get('reactions', [])
 * 		M = len(rxns)             # <<<<<<<<<<<<<<
 * 		# prepare arrays: allocate C arrays and fill them
 * 		# kf/kr
*/
    __pyx_t_7 = PyObject_Length(__pyx_v_rxns); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 454, __pyx_L1_error)
    __pyx_v_M = __pyx_t_7;

    /* "pyroxa/pybindings.pyx":457
 * 		# prepare arrays: allocate C arrays and fill them
 * 		# kf/kr
 * 		if M > 0:             # <<<<<<<<<<<<<<
 * 			kf_ptr = <double*>malloc(M * sizeof(double))
 * 			kr_ptr = <double*>malloc(M * sizeof(double))
*/
    __pyx_t_2 = (__pyx_v_M > 0);
    if (__pyx_t_2) {

      /* "pyroxa/pybindings.pyx":458
 * 		# kf/kr
 * 		if M > 0:
 * 			kf_ptr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 			kr_ptr = <double*>malloc(M * sizeof(double))
 * 			if not kf_ptr or not kr_ptr:
*/
      __pyx_v_kf_ptr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

      /* "pyroxa/pybindings.pyx":459
 * 		if M > 0:
 * 			kf_ptr = <double*>malloc(M * sizeof(double))
 * 			kr_ptr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 			if not kf_ptr or not kr_ptr:
 * 				if kf_ptr: free(kf_ptr)
*/
      __pyx_v_kr_ptr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

      /* "pyroxa/pybindings.pyx":460
 * 			kf_ptr = <double*>malloc(M * sizeof(double))
 * 			kr_ptr = <double*>malloc(M * sizeof(double))
 * 			if not kf_ptr or not kr_ptr:             # <<<<<<<<<<<<<<
 * 				if kf_ptr: free(kf_ptr)
 * 				if kr_ptr: free(kr_ptr)
*/
      __pyx_t_1 = (!(__pyx_v_kf_ptr != 0));
      if (!__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_1 = (!(__pyx_v_kr_ptr != 0));
      __pyx_t_2 = __pyx_t_1;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_2) {

        /* "pyroxa/pybindings.pyx":461
 * 			kr_ptr = <double*>malloc(M * sizeof(double))
 * 			if not kf_ptr or not kr_ptr:
 * 				if kf_ptr: free(kf_ptr)             # <<<<<<<<<<<<<<
 * 				if kr_ptr: free(kr_ptr)
 * 				raise MemoryError('allocation failed for kf/kr')
*/
        __pyx_t_2 = (__pyx_v_kf_ptr != 0);
        if (__pyx_t_2) {
          free(__pyx_v_kf_ptr);
        }

        /* "pyroxa/pybindings.pyx":462
 * 			if not kf_ptr or not kr_ptr:
 * 				if kf_ptr: free(kf_ptr)
 * 				if kr_ptr: free(kr_ptr)             # <<<<<<<<<<<<<<
 * 				raise MemoryError('allocation failed for kf/kr')
 * 			for i in range(M):
*/
        __pyx_t_2 = (__pyx_v_kr_ptr != 0);
        if (__pyx_t_2) {
          free(__pyx_v_kr_ptr);
        }

        /* "pyroxa/pybindings.pyx":463
 * 				if kf_ptr: free(kf_ptr)
 * 				if kr_ptr: free(kr_ptr)
 * 				raise MemoryError('allocation failed for kf/kr')             # <<<<<<<<<<<<<<
 * 			for i in range(M):
 * 				kf_ptr[i] = float(rxns[i].get('kf', 1.0))
*/
        __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_builtin_MemoryError);
        __pyx_t_5 = __pyx_builtin_MemoryError; 
        __pyx_t_6 = 1;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_allocation_failed_for_kf_kr};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 463, __pyx_L1_error)

        /* "pyroxa/pybindings.pyx":460
 * 			kf_ptr = <double*>malloc(M * sizeof(double))
 * 			kr_ptr = <double*>malloc(M * sizeof(double))
 * 			if not kf_ptr or not kr_ptr:             # <<<<<<<<<<<<<<
 * 				if kf_ptr: free(kf_ptr)
 * 				if kr_ptr: free(kr_ptr)
*/
      }

      /* "pyroxa/pybindings.pyx":464
 * 				if kr_ptr: free(kr_ptr)
 * 				raise MemoryError('allocation failed for kf/kr')
 * 			for i in range(M):             # <<<<<<<<<<<<<<
 * 				kf_ptr[i] = float(rxns[i].get('kf', 1.0))
 * 				kr_ptr[i] = float(rxns[i].get('kr', 0.0))
*/
      __pyx_t_8 = __pyx_v_M;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_i = __pyx_t_10;

        /* "pyroxa/pybindings.pyx":465
 * 				raise MemoryError('allocation failed for kf/kr')
 * 			for i in range(M):
 * 				kf_ptr[i] = float(rxns[i].get('kf', 1.0))             # <<<<<<<<<<<<<<
 * 				kr_ptr[i] = float(rxns[i].get('kr', 0.0))
 * 		else:
*/
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_rxns, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple[0], NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_11 = __Pyx_PyObject_AsDouble(__pyx_t_3); if (unlikely(__pyx_t_11 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        (__pyx_v_kf_ptr[__pyx_v_i]) = __pyx_t_11;

        /* "pyroxa/pybindings.pyx":466
 * 			for i in range(M):
 * 				kf_ptr[i] = float(rxns[i].get('kf', 1.0))
 * 				kr_ptr[i] = float(rxns[i].get('kr', 0.0))             # <<<<<<<<<<<<<<
 * 		else:
 * 			kf_ptr = <double*>0
*/
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_rxns, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 466, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 466, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple[1], NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 466, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_11 = __Pyx_PyObject_AsDouble(__pyx_t_3); if (unlikely(__pyx_t_11 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 466, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        (__pyx_v_kr_ptr[__pyx_v_i]) = __pyx_t_11;
      }

      /* "pyroxa/pybindings.pyx":457
 * 		# prepare arrays: allocate C arrays and fill them
 * 		# kf/kr
 * 		if M > 0:             # <<<<<<<<<<<<<<
 * 			kf_ptr = <double*>malloc(M * sizeof(double))
 * 			kr_ptr = <double*>malloc(M * sizeof(double))
*/
      goto __pyx_L7;
    }

    /* "pyroxa/pybindings.pyx":468
 * 				kr_ptr[i] = float(rxns[i].get('kr', 0.0))
 * 		else:
 * 			kf_ptr = <double*>0             # <<<<<<<<<<<<<<
 * 			kr_ptr = <double*>0
 * 		# reactant/product flattened lists and offsets
*/
    /*else*/ {
      __pyx_v_kf_ptr = ((double *)0);

      /* "pyroxa/pybindings.pyx":469
 * 		else:
 * 			kf_ptr = <double*>0
 * 			kr_ptr = <double*>0             # <<<<<<<<<<<<<<
 * 		# reactant/product flattened lists and offsets
 * 		reac_idx_list = []
*/
      __pyx_v_kr_ptr = ((double *)0);
    }
    __pyx_L7:;

    /* "pyroxa/pybindings.pyx":471
 * 			kr_ptr = <double*>0
 * 		# reactant/product flattened lists and offsets
 * 		reac_idx_list = []             # <<<<<<<<<<<<<<
 * 		reac_nu_list = []
 * 		reac_off = [0]
*/
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_reac_idx_list = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":472
 * 		# reactant/product flattened lists and offsets
 * 		reac_idx_list = []
 * 		reac_nu_list = []             # <<<<<<<<<<<<<<
 * 		reac_off = [0]
 * 		prod_idx_list = []
*/
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_reac_nu_list = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":473
 * 		reac_idx_list = []
 * 		reac_nu_list = []
 * 		reac_off = [0]             # <<<<<<<<<<<<<<
 * 		prod_idx_list = []
 * 		prod_nu_list = []
*/
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_int_0);
    __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_0);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_mstate_global->__pyx_int_0) != (0)) __PYX_ERR(0, 473, __pyx_L1_error);
    __pyx_v_reac_off = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":474
 * 		reac_nu_list = []
 * 		reac_off = [0]
 * 		prod_idx_list = []             # <<<<<<<<<<<<<<
 * 		prod_nu_list = []
 * 		prod_off = [0]
*/
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_prod_idx_list = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":475
 * 		reac_off = [0]
 * 		prod_idx_list = []
 * 		prod_nu_list = []             # <<<<<<<<<<<<<<
 * 		prod_off = [0]
 * 		for r in rxns:
*/
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_prod_nu_list = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":476
 * 		prod_idx_list = []
 * 		prod_nu_list = []
 * 		prod_off = [0]             # <<<<<<<<<<<<<<
 * 		for r in rxns:
 * 			reactants = r.get('reactants', {})
*/
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_int_0);
    __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_0);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_mstate_global->__pyx_int_0) != (0)) __PYX_ERR(0, 476, __pyx_L1_error);
    __pyx_v_prod_off = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":477
 * 		prod_nu_list = []
 * 		prod_off = [0]
 * 		for r in rxns:             # <<<<<<<<<<<<<<
 * 			reactants = r.get('reactants', {})
 * 			products = r.get('products', {})
*/
    if (likely(PyList_CheckExact(__pyx_v_rxns)) || PyTuple_CheckExact(__pyx_v_rxns)) {
      __pyx_t_3 = __pyx_v_rxns; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_7 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_rxns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 477, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_12 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 477, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_12)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 477, __pyx_L1_error)
            #endif
            if (__pyx_t_7 >= __pyx_temp) break;
          }
          __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_7);
          ++__pyx_t_7;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 477, __pyx_L1_error)
            #endif
            if (__pyx_t_7 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7));
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_7);
          #endif
          ++__pyx_t_7;
        }
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 477, __pyx_L1_error)
      } else {
        __pyx_t_5 = __pyx_t_12(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 477, __pyx_L1_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":478
 * 		prod_off = [0]
 * 		for r in rxns:
 * 			reactants = r.get('reactants', {})             # <<<<<<<<<<<<<<
 * 			products = r.get('products', {})
 * 			for s, nu in reactants.items():
*/
      __pyx_t_4 = __pyx_v_r;
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_13 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 478, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_6 = 0;
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_u_reactants, __pyx_t_13};
        __pyx_t_5 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_reactants, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":479
 * 		for r in rxns:
 * 			reactants = r.get('reactants', {})
 * 			products = r.get('products', {})             # <<<<<<<<<<<<<<
 * 			for s, nu in reactants.items():
 * 				reac_idx_list.append(int(species.index(s)))
*/
      __pyx_t_13 = __pyx_v_r;
      __Pyx_INCREF(__pyx_t_13);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 479, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = 0;
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_mstate_global->__pyx_n_u_products, __pyx_t_4};
        __pyx_t_5 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 479, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_products, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":480
 * 			reactants = r.get('reactants', {})
 * 			products = r.get('products', {})
 * 			for s, nu in reactants.items():             # <<<<<<<<<<<<<<
 * 				reac_idx_list.append(int(species.index(s)))
 * 				reac_nu_list.append(float(nu))
*/
      __pyx_t_14 = 0;
      if (unlikely(__pyx_v_reactants == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
        __PYX_ERR(0, 480, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_dict_iterator(__pyx_v_reactants, 0, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_15), (&__pyx_t_8)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 480, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5);
      __pyx_t_5 = __pyx_t_4;
      __pyx_t_4 = 0;
      while (1) {
        __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_5, __pyx_t_15, &__pyx_t_14, &__pyx_t_4, &__pyx_t_13, NULL, __pyx_t_8);
        if (unlikely(__pyx_t_9 == 0)) break;
        if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 480, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_nu, __pyx_t_13);
        __pyx_t_13 = 0;

        /* "pyroxa/pybindings.pyx":481
 * 			products = r.get('products', {})
 * 			for s, nu in reactants.items():
 * 				reac_idx_list.append(int(species.index(s)))             # <<<<<<<<<<<<<<
 * 				reac_nu_list.append(float(nu))
 * 			reac_off.append(len(reac_idx_list))
*/
        __pyx_t_4 = __pyx_v_species;
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_6 = 0;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_s};
          __pyx_t_13 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_index, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 481, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
        }
        __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_reac_idx_list, __pyx_t_4); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 481, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "pyroxa/pybindings.pyx":482
 * 			for s, nu in reactants.items():
 * 				reac_idx_list.append(int(species.index(s)))
 * 				reac_nu_list.append(float(nu))             # <<<<<<<<<<<<<<
 * 			reac_off.append(len(reac_idx_list))
 * 			for s, nu in products.items():
*/
        __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_v_nu); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_reac_nu_list, __pyx_t_4); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 482, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":483
 * 				reac_idx_list.append(int(species.index(s)))
 * 				reac_nu_list.append(float(nu))
 * 			reac_off.append(len(reac_idx_list))             # <<<<<<<<<<<<<<
 * 			for s, nu in products.items():
 * 				prod_idx_list.append(int(species.index(s)))
*/
      __pyx_t_15 = __Pyx_PyList_GET_SIZE(__pyx_v_reac_idx_list); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 483, __pyx_L1_error)
      __pyx_t_5 = PyLong_FromSsize_t(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 483, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_reac_off, __pyx_t_5); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 483, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":484
 * 				reac_nu_list.append(float(nu))
 * 			reac_off.append(len(reac_idx_list))
 * 			for s, nu in products.items():             # <<<<<<<<<<<<<<
 * 				prod_idx_list.append(int(species.index(s)))
 * 				prod_nu_list.append(float(nu))
*/
      __pyx_t_15 = 0;
      if (unlikely(__pyx_v_products == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
        __PYX_ERR(0, 484, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_dict_iterator(__pyx_v_products, 0, __pyx_mstate_global->__pyx_n_u_items, (&__pyx_t_14), (&__pyx_t_8)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5);
      __pyx_t_5 = __pyx_t_4;
      __pyx_t_4 = 0;
      while (1) {
        __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_5, __pyx_t_14, &__pyx_t_15, &__pyx_t_4, &__pyx_t_13, NULL, __pyx_t_8);
        if (unlikely(__pyx_t_9 == 0)) break;
        if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 484, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_nu, __pyx_t_13);
        __pyx_t_13 = 0;

        /* "pyroxa/pybindings.pyx":485
 * 			reac_off.append(len(reac_idx_list))
 * 			for s, nu in products.items():
 * 				prod_idx_list.append(int(species.index(s)))             # <<<<<<<<<<<<<<
 * 				prod_nu_list.append(float(nu))
 * 			prod_off.append(len(prod_idx_list))
*/
        __pyx_t_4 = __pyx_v_species;
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_6 = 0;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_s};
          __pyx_t_13 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_index, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 485, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
        }
        __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_prod_idx_list, __pyx_t_4); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 485, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "pyroxa/pybindings.pyx":486
 * 			for s, nu in products.items():
 * 				prod_idx_list.append(int(species.index(s)))
 * 				prod_nu_list.append(float(nu))             # <<<<<<<<<<<<<<
 * 			prod_off.append(len(prod_idx_list))
 * 		# create arrays
*/
        __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_v_nu); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_prod_nu_list, __pyx_t_4); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 486, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":487
 * 				prod_idx_list.append(int(species.index(s)))
 * 				prod_nu_list.append(float(nu))
 * 			prod_off.append(len(prod_idx_list))             # <<<<<<<<<<<<<<
 * 		# create arrays
 * 		kf_c = kf_ptr
*/
      __pyx_t_14 = __Pyx_PyList_GET_SIZE(__pyx_v_prod_idx_list); if (unlikely(__pyx_t_14 == ((Py_ssize_t)-1))) __PYX_ERR(0, 487, __pyx_L1_error)
      __pyx_t_5 = PyLong_FromSsize_t(__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_prod_off, __pyx_t_5); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":477
 * 		prod_nu_list = []
 * 		prod_off = [0]
 * 		for r in rxns:             # <<<<<<<<<<<<<<
 * 			reactants = r.get('reactants', {})
 * 			products = r.get('products', {})
*/
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":489
 * 			prod_off.append(len(prod_idx_list))
 * 		# create arrays
 * 		kf_c = kf_ptr             # <<<<<<<<<<<<<<
 * 		kr_c = kr_ptr
 * 		import ctypes
*/
    __pyx_v_kf_c = __pyx_v_kf_ptr;

    /* "pyroxa/pybindings.pyx":490
 * 		# create arrays
 * 		kf_c = kf_ptr
 * 		kr_c = kr_ptr             # <<<<<<<<<<<<<<
 * 		import ctypes
 * 		# allocate and fill reactant/product arrays
*/
    __pyx_v_kr_c = __pyx_v_kr_ptr;

    /* "pyroxa/pybindings.pyx":491
 * 		kf_c = kf_ptr
 * 		kr_c = kr_ptr
 * 		import ctypes             # <<<<<<<<<<<<<<
 * 		# allocate and fill reactant/product arrays
 * 		total_reac = len(reac_idx_list)
*/
    __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_ctypes, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_ctypes = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":493
 * 		import ctypes
 * 		# allocate and fill reactant/product arrays
 * 		total_reac = len(reac_idx_list)             # <<<<<<<<<<<<<<
 * 		total_prod = len(prod_idx_list)
 * 		if total_reac > 0:
*/
    __pyx_t_7 = __Pyx_PyList_GET_SIZE(__pyx_v_reac_idx_list); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 493, __pyx_L1_error)
    __pyx_v_total_reac = __pyx_t_7;

    /* "pyroxa/pybindings.pyx":494
 * 		# allocate and fill reactant/product arrays
 * 		total_reac = len(reac_idx_list)
 * 		total_prod = len(prod_idx_list)             # <<<<<<<<<<<<<<
 * 		if total_reac > 0:
 * 			c_reac_idx = <int*>malloc(total_reac * sizeof(int))
*/
    __pyx_t_7 = __Pyx_PyList_GET_SIZE(__pyx_v_prod_idx_list); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 494, __pyx_L1_error)
    __pyx_v_total_prod = __pyx_t_7;

    /* "pyroxa/pybindings.pyx":495
 * 		total_reac = len(reac_idx_list)
 * 		total_prod = len(prod_idx_list)
 * 		if total_reac > 0:             # <<<<<<<<<<<<<<
 * 			c_reac_idx = <int*>malloc(total_reac * sizeof(int))
 * 			c_reac_nu = <double*>malloc(total_reac * sizeof(double))
*/
    __pyx_t_2 = (__pyx_v_total_reac > 0);
    if (__pyx_t_2) {

      /* "pyroxa/pybindings.pyx":496
 * 		total_prod = len(prod_idx_list)
 * 		if total_reac > 0:
 * 			c_reac_idx = <int*>malloc(total_reac * sizeof(int))             # <<<<<<<<<<<<<<
 * 			c_reac_nu = <double*>malloc(total_reac * sizeof(double))
 * 			if not c_reac_idx or not c_reac_nu:
*/
      __pyx_v_c_reac_idx = ((int *)malloc((__pyx_v_total_reac * (sizeof(int)))));

      /* "pyroxa/pybindings.pyx":497
 * 		if total_reac > 0:
 * 			c_reac_idx = <int*>malloc(total_reac * sizeof(int))
 * 			c_reac_nu = <double*>malloc(total_reac * sizeof(double))             # <<<<<<<<<<<<<<
 * 			if not c_reac_idx or not c_reac_nu:
 * 				if c_reac_idx: free(c_reac_idx)
*/
      __pyx_v_c_reac_nu = ((double *)malloc((__pyx_v_total_reac * (sizeof(double)))));

      /* "pyroxa/pybindings.pyx":498
 * 			c_reac_idx = <int*>malloc(total_reac * sizeof(int))
 * 			c_reac_nu = <double*>malloc(total_reac * sizeof(double))
 * 			if not c_reac_idx or not c_reac_nu:             # <<<<<<<<<<<<<<
 * 				if c_reac_idx: free(c_reac_idx)
 * 				if c_reac_nu: free(c_reac_nu)
*/
      __pyx_t_1 = (!(__pyx_v_c_reac_idx != 0));
      if (!__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L24_bool_binop_done;
      }
      __pyx_t_1 = (!(__pyx_v_c_reac_nu != 0));
      __pyx_t_2 = __pyx_t_1;
      __pyx_L24_bool_binop_done:;
      if (__pyx_t_2) {

        /* "pyroxa/pybindings.pyx":499
 * 			c_reac_nu = <double*>malloc(total_reac * sizeof(double))
 * 			if not c_reac_idx or not c_reac_nu:
 * 				if c_reac_idx: free(c_reac_idx)             # <<<<<<<<<<<<<<
 * 				if c_reac_nu: free(c_reac_nu)
 * 				raise MemoryError('allocation failed for reactants')
*/
        __pyx_t_2 = (__pyx_v_c_reac_idx != 0);
        if (__pyx_t_2) {
          free(__pyx_v_c_reac_idx);
        }

        /* "pyroxa/pybindings.pyx":500
 * 			if not c_reac_idx or not c_reac_nu:
 * 				if c_reac_idx: free(c_reac_idx)
 * 				if c_reac_nu: free(c_reac_nu)             # <<<<<<<<<<<<<<
 * 				raise MemoryError('allocation failed for reactants')
 * 			for i in range(total_reac):
*/
        __pyx_t_2 = (__pyx_v_c_reac_nu != 0);
        if (__pyx_t_2) {
          free(__pyx_v_c_reac_nu);
        }

        /* "pyroxa/pybindings.pyx":501
 * 				if c_reac_idx: free(c_reac_idx)
 * 				if c_reac_nu: free(c_reac_nu)
 * 				raise MemoryError('allocation failed for reactants')             # <<<<<<<<<<<<<<
 * 			for i in range(total_reac):
 * 				c_reac_idx[i] = reac_idx_list[i]
*/
        __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_builtin_MemoryError);
        __pyx_t_4 = __pyx_builtin_MemoryError; 
        __pyx_t_6 = 1;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_mstate_global->__pyx_kp_u_allocation_failed_for_reactants};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 501, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 501, __pyx_L1_error)

        /* "pyroxa/pybindings.pyx":498
 * 			c_reac_idx = <int*>malloc(total_reac * sizeof(int))
 * 			c_reac_nu = <double*>malloc(total_reac * sizeof(double))
 * 			if not c_reac_idx or not c_reac_nu:             # <<<<<<<<<<<<<<
 * 				if c_reac_idx: free(c_reac_idx)
 * 				if c_reac_nu: free(c_reac_nu)
*/
      }

      /* "pyroxa/pybindings.pyx":502
 * 				if c_reac_nu: free(c_reac_nu)
 * 				raise MemoryError('allocation failed for reactants')
 * 			for i in range(total_reac):             # <<<<<<<<<<<<<<
 * 				c_reac_idx[i] = reac_idx_list[i]
 * 				c_reac_nu[i] = reac_nu_list[i]
*/
      __pyx_t_8 = __pyx_v_total_reac;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_i = __pyx_t_10;

        /* "pyroxa/pybindings.pyx":503
 * 				raise MemoryError('allocation failed for reactants')
 * 			for i in range(total_reac):
 * 				c_reac_idx[i] = reac_idx_list[i]             # <<<<<<<<<<<<<<
 * 				c_reac_nu[i] = reac_nu_list[i]
 * 		else:
*/
        __pyx_t_17 = __Pyx_PyLong_As_int(__Pyx_PyList_GET_ITEM(__pyx_v_reac_idx_list, __pyx_v_i)); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L1_error)
        (__pyx_v_c_reac_idx[__pyx_v_i]) = __pyx_t_17;

        /* "pyroxa/pybindings.pyx":504
 * 			for i in range(total_reac):
 * 				c_reac_idx[i] = reac_idx_list[i]
 * 				c_reac_nu[i] = reac_nu_list[i]             # <<<<<<<<<<<<<<
 * 		else:
 * 			c_reac_idx = <int*>0
*/
        __pyx_t_11 = __Pyx_PyFloat_AsDouble(__Pyx_PyList_GET_ITEM(__pyx_v_reac_nu_list, __pyx_v_i)); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 504, __pyx_L1_error)
        (__pyx_v_c_reac_nu[__pyx_v_i]) = __pyx_t_11;
      }

      /* "pyroxa/pybindings.pyx":495
 * 		total_reac = len(reac_idx_list)
 * 		total_prod = len(prod_idx_list)
 * 		if total_reac > 0:             # <<<<<<<<<<<<<<
 * 			c_reac_idx = <int*>malloc(total_reac * sizeof(int))
 * 			c_reac_nu = <double*>malloc(total_reac * sizeof(double))
*/
      goto __pyx_L22;
    }

    /* "pyroxa/pybindings.pyx":506
 * 				c_reac_nu[i] = reac_nu_list[i]
 * 		else:
 * 			c_reac_idx = <int*>0             # <<<<<<<<<<<<<<
 * 			c_reac_nu = <double*>0
 * 		# offsets
*/
    /*else*/ {
      __pyx_v_c_reac_idx = ((int *)0);

      /* "pyroxa/pybindings.pyx":507
 * 		else:
 * 			c_reac_idx = <int*>0
 * 			c_reac_nu = <double*>0             # <<<<<<<<<<<<<<
 * 		# offsets
 * 		c_reac_off = <int*>malloc(len(reac_off) * sizeof(int))
*/
      __pyx_v_c_reac_nu = ((double *)0);
    }
    __pyx_L22:;

    /* "pyroxa/pybindings.pyx":509
 * 			c_reac_nu = <double*>0
 * 		# offsets
 * 		c_reac_off = <int*>malloc(len(reac_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_off)):
 * 			c_reac_off[i] = reac_off[i]
*/
    __pyx_t_7 = __Pyx_PyList_GET_SIZE(__pyx_v_reac_off); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 509, __pyx_L1_error)
    __pyx_v_c_reac_off = ((int *)malloc((__pyx_t_7 * (sizeof(int)))));

    /* "pyroxa/pybindings.pyx":510
 * 		# offsets
 * 		c_reac_off = <int*>malloc(len(reac_off) * sizeof(int))
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			c_reac_off[i] = reac_off[i]
 * 		# products
*/
    __pyx_t_7 = __Pyx_PyList_GET_SIZE(__pyx_v_reac_off); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 510, __pyx_L1_error)
    __pyx_t_14 = __pyx_t_7;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_14; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":511
 * 		c_reac_off = <int*>malloc(len(reac_off) * sizeof(int))
 * 		for i in range(len(reac_off)):
 * 			c_reac_off[i] = reac_off[i]             # <<<<<<<<<<<<<<
 * 		# products
 * 		if total_prod > 0:
*/
      __pyx_t_9 = __Pyx_PyLong_As_int(__Pyx_PyList_GET_ITEM(__pyx_v_reac_off, __pyx_v_i)); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 511, __pyx_L1_error)
      (__pyx_v_c_reac_off[__pyx_v_i]) = __pyx_t_9;
    }

    /* "pyroxa/pybindings.pyx":513
 * 			c_reac_off[i] = reac_off[i]
 * 		# products
 * 		if total_prod > 0:             # <<<<<<<<<<<<<<
 * 			c_prod_idx = <int*>malloc(total_prod * sizeof(int))
 * 			c_prod_nu = <double*>malloc(total_prod * sizeof(double))
*/
    __pyx_t_2 = (__pyx_v_total_prod > 0);
    if (__pyx_t_2) {

      /* "pyroxa/pybindings.pyx":514
 * 		# products
 * 		if total_prod > 0:
 * 			c_prod_idx = <int*>malloc(total_prod * sizeof(int))             # <<<<<<<<<<<<<<
 * 			c_prod_nu = <double*>malloc(total_prod * sizeof(double))
 * 			if not c_prod_idx or not c_prod_nu:
*/
      __pyx_v_c_prod_idx = ((int *)malloc((__pyx_v_total_prod * (sizeof(int)))));

      /* "pyroxa/pybindings.pyx":515
 * 		if total_prod > 0:
 * 			c_prod_idx = <int*>malloc(total_prod * sizeof(int))
 * 			c_prod_nu = <double*>malloc(total_prod * sizeof(double))             # <<<<<<<<<<<<<<
 * 			if not c_prod_idx or not c_prod_nu:
 * 				if c_prod_idx: free(c_prod_idx)
*/
      __pyx_v_c_prod_nu = ((double *)malloc((__pyx_v_total_prod * (sizeof(double)))));

      /* "pyroxa/pybindings.pyx":516
 * 			c_prod_idx = <int*>malloc(total_prod * sizeof(int))
 * 			c_prod_nu = <double*>malloc(total_prod * sizeof(double))
 * 			if not c_prod_idx or not c_prod_nu:             # <<<<<<<<<<<<<<
 * 				if c_prod_idx: free(c_prod_idx)
 * 				if c_prod_nu: free(c_prod_nu)
*/
      __pyx_t_1 = (!(__pyx_v_c_prod_idx != 0));
      if (!__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L34_bool_binop_done;
      }
      __pyx_t_1 = (!(__pyx_v_c_prod_nu != 0));
      __pyx_t_2 = __pyx_t_1;
      __pyx_L34_bool_binop_done:;
      if (__pyx_t_2) {

        /* "pyroxa/pybindings.pyx":517
 * 			c_prod_nu = <double*>malloc(total_prod * sizeof(double))
 * 			if not c_prod_idx or not c_prod_nu:
 * 				if c_prod_idx: free(c_prod_idx)             # <<<<<<<<<<<<<<
 * 				if c_prod_nu: free(c_prod_nu)
 * 				raise MemoryError('allocation failed for products')
*/
        __pyx_t_2 = (__pyx_v_c_prod_idx != 0);
        if (__pyx_t_2) {
          free(__pyx_v_c_prod_idx);
        }

        /* "pyroxa/pybindings.pyx":518
 * 			if not c_prod_idx or not c_prod_nu:
 * 				if c_prod_idx: free(c_prod_idx)
 * 				if c_prod_nu: free(c_prod_nu)             # <<<<<<<<<<<<<<
 * 				raise MemoryError('allocation failed for products')
 * 			for i in range(total_prod):
*/
        __pyx_t_2 = (__pyx_v_c_prod_nu != 0);
        if (__pyx_t_2) {
          free(__pyx_v_c_prod_nu);
        }

        /* "pyroxa/pybindings.pyx":519
 * 				if c_prod_idx: free(c_prod_idx)
 * 				if c_prod_nu: free(c_prod_nu)
 * 				raise MemoryError('allocation failed for products')             # <<<<<<<<<<<<<<
 * 			for i in range(total_prod):
 * 				c_prod_idx[i] = prod_idx_list[i]
*/
        __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_builtin_MemoryError);
        __pyx_t_5 = __pyx_builtin_MemoryError; 
        __pyx_t_6 = 1;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_allocation_failed_for_products};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 519, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 519, __pyx_L1_error)

        /* "pyroxa/pybindings.pyx":516
 * 			c_prod_idx = <int*>malloc(total_prod * sizeof(int))
 * 			c_prod_nu = <double*>malloc(total_prod * sizeof(double))
 * 			if not c_prod_idx or not c_prod_nu:             # <<<<<<<<<<<<<<
 * 				if c_prod_idx: free(c_prod_idx)
 * 				if c_prod_nu: free(c_prod_nu)
*/
      }

      /* "pyroxa/pybindings.pyx":520
 * 				if c_prod_nu: free(c_prod_nu)
 * 				raise MemoryError('allocation failed for products')
 * 			for i in range(total_prod):             # <<<<<<<<<<<<<<
 * 				c_prod_idx[i] = prod_idx_list[i]
 * 				c_prod_nu[i] = prod_nu_list[i]
*/
      __pyx_t_8 = __pyx_v_total_prod;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_i = __pyx_t_10;

        /* "pyroxa/pybindings.pyx":521
 * 				raise MemoryError('allocation failed for products')
 * 			for i in range(total_prod):
 * 				c_prod_idx[i] = prod_idx_list[i]             # <<<<<<<<<<<<<<
 * 				c_prod_nu[i] = prod_nu_list[i]
 * 		else:
*/
        __pyx_t_17 = __Pyx_PyLong_As_int(__Pyx_PyList_GET_ITEM(__pyx_v_prod_idx_list, __pyx_v_i)); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 521, __pyx_L1_error)
        (__pyx_v_c_prod_idx[__pyx_v_i]) = __pyx_t_17;

        /* "pyroxa/pybindings.pyx":522
 * 			for i in range(total_prod):
 * 				c_prod_idx[i] = prod_idx_list[i]
 * 				c_prod_nu[i] = prod_nu_list[i]             # <<<<<<<<<<<<<<
 * 		else:
 * 			c_prod_idx = <int*>0
*/
        __pyx_t_11 = __Pyx_PyFloat_AsDouble(__Pyx_PyList_GET_ITEM(__pyx_v_prod_nu_list, __pyx_v_i)); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
        (__pyx_v_c_prod_nu[__pyx_v_i]) = __pyx_t_11;
      }

      /* "pyroxa/pybindings.pyx":513
 * 			c_reac_off[i] = reac_off[i]
 * 		# products
 * 		if total_prod > 0:             # <<<<<<<<<<<<<<
 * 			c_prod_idx = <int*>malloc(total_prod * sizeof(int))
 * 			c_prod_nu = <double*>malloc(total_prod * sizeof(double))
*/
      goto __pyx_L32;
    }

    /* "pyroxa/pybindings.pyx":524
 * 				c_prod_nu[i] = prod_nu_list[i]
 * 		else:
 * 			c_prod_idx = <int*>0             # <<<<<<<<<<<<<<
 * 			c_prod_nu = <double*>0
 * 		# offsets
*/
    /*else*/ {
      __pyx_v_c_prod_idx = ((int *)0);

      /* "pyroxa/pybindings.pyx":525
 * 		else:
 * 			c_prod_idx = <int*>0
 * 			c_prod_nu = <double*>0             # <<<<<<<<<<<<<<
 * 		# offsets
 * 		c_prod_off = <int*>malloc(len(prod_off) * sizeof(int))
*/
      __pyx_v_c_prod_nu = ((double *)0);
    }
    __pyx_L32:;

    /* "pyroxa/pybindings.pyx":527
 * 			c_prod_nu = <double*>0
 * 		# offsets
 * 		c_prod_off = <int*>malloc(len(prod_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_off)):
 * 			c_prod_off[i] = prod_off[i]
*/
    __pyx_t_7 = __Pyx_PyList_GET_SIZE(__pyx_v_prod_off); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 527, __pyx_L1_error)
    __pyx_v_c_prod_off = ((int *)malloc((__pyx_t_7 * (sizeof(int)))));

    /* "pyroxa/pybindings.pyx":528
 * 		# offsets
 * 		c_prod_off = <int*>malloc(len(prod_off) * sizeof(int))
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			c_prod_off[i] = prod_off[i]
 * 		# conc0 C array
*/
    __pyx_t_7 = __Pyx_PyList_GET_SIZE(__pyx_v_prod_off); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 528, __pyx_L1_error)
    __pyx_t_14 = __pyx_t_7;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_14; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":529
 * 		c_prod_off = <int*>malloc(len(prod_off) * sizeof(int))
 * 		for i in range(len(prod_off)):
 * 			c_prod_off[i] = prod_off[i]             # <<<<<<<<<<<<<<
 * 		# conc0 C array
 * 		conc0_py = [float(spec.get('initial', {}).get('conc', {}).get(s, 0.0)) for s in species]
*/
      __pyx_t_9 = __Pyx_PyLong_As_int(__Pyx_PyList_GET_ITEM(__pyx_v_prod_off, __pyx_v_i)); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 529, __pyx_L1_error)
      (__pyx_v_c_prod_off[__pyx_v_i]) = __pyx_t_9;
    }

    /* "pyroxa/pybindings.pyx":531
 * 			c_prod_off[i] = prod_off[i]
 * 		# conc0 C array
 * 		conc0_py = [float(spec.get('initial', {}).get('conc', {}).get(s, 0.0)) for s in species]             # <<<<<<<<<<<<<<
 * 		if N > 0:
 * 			c_conc0 = <double*>malloc(N * sizeof(double))
*/
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 531, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_v_species)) || PyTuple_CheckExact(__pyx_v_species)) {
        __pyx_t_5 = __pyx_v_species; __Pyx_INCREF(__pyx_t_5);
        __pyx_t_7 = 0;
        __pyx_t_12 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_species); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 531, __pyx_L44_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 531, __pyx_L44_error)
      }
      for (;;) {
        if (likely(!__pyx_t_12)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 531, __pyx_L44_error)
              #endif
              if (__pyx_t_7 >= __pyx_temp) break;
            }
            __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_7);
            ++__pyx_t_7;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 531, __pyx_L44_error)
              #endif
              if (__pyx_t_7 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7));
            #else
            __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_7);
            #endif
            ++__pyx_t_7;
          }
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 531, __pyx_L44_error)
        } else {
          __pyx_t_4 = __pyx_t_12(__pyx_t_5);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 531, __pyx_L44_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_s, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_21 = __pyx_v_spec;
        __Pyx_INCREF(__pyx_t_21);
        __pyx_t_22 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 531, __pyx_L44_error)
        __Pyx_GOTREF(__pyx_t_22);
        __pyx_t_6 = 0;
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_21, __pyx_mstate_global->__pyx_n_u_initial, __pyx_t_22};
          __pyx_t_20 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
          if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 531, __pyx_L44_error)
          __Pyx_GOTREF(__pyx_t_20);
        }
        __pyx_t_19 = __pyx_t_20;
        __Pyx_INCREF(__pyx_t_19);
        __pyx_t_22 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 531, __pyx_L44_error)
        __Pyx_GOTREF(__pyx_t_22);
        __pyx_t_6 = 0;
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_19, __pyx_mstate_global->__pyx_n_u_conc, __pyx_t_22};
          __pyx_t_18 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
          __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 531, __pyx_L44_error)
          __Pyx_GOTREF(__pyx_t_18);
        }
        __pyx_t_13 = __pyx_t_18;
        __Pyx_INCREF(__pyx_t_13);
        __pyx_t_6 = 0;
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_8genexpr6__pyx_v_s, __pyx_mstate_global->__pyx_float_0_0};
          __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 531, __pyx_L44_error)
          __Pyx_GOTREF(__pyx_t_4);
        }
        __pyx_t_18 = __Pyx_PyNumber_Float(__pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 531, __pyx_L44_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_18))) __PYX_ERR(0, 531, __pyx_L44_error)
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_s); __pyx_8genexpr6__pyx_v_s = 0;
      goto __pyx_L48_exit_scope;
      __pyx_L44_error:;
      __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_s); __pyx_8genexpr6__pyx_v_s = 0;
      goto __pyx_L1_error;
      __pyx_L48_exit_scope:;
    } /* exit inner scope */
    __pyx_v_conc0_py = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":532
 * 		# conc0 C array
 * 		conc0_py = [float(spec.get('initial', {}).get('conc', {}).get(s, 0.0)) for s in species]
 * 		if N > 0:             # <<<<<<<<<<<<<<
 * 			c_conc0 = <double*>malloc(N * sizeof(double))
 * 			if not c_conc0:
*/
    __pyx_t_2 = (__pyx_v_N > 0);
    if (__pyx_t_2) {

      /* "pyroxa/pybindings.pyx":533
 * 		conc0_py = [float(spec.get('initial', {}).get('conc', {}).get(s, 0.0)) for s in species]
 * 		if N > 0:
 * 			c_conc0 = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 			if not c_conc0:
 * 				raise MemoryError('allocation failed for conc0')
*/
      __pyx_v_c_conc0 = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

      /* "pyroxa/pybindings.pyx":534
 * 		if N > 0:
 * 			c_conc0 = <double*>malloc(N * sizeof(double))
 * 			if not c_conc0:             # <<<<<<<<<<<<<<
 * 				raise MemoryError('allocation failed for conc0')
 * 			for i in range(N):
*/
      __pyx_t_2 = (!(__pyx_v_c_conc0 != 0));
      if (unlikely(__pyx_t_2)) {

        /* "pyroxa/pybindings.pyx":535
 * 			c_conc0 = <double*>malloc(N * sizeof(double))
 * 			if not c_conc0:
 * 				raise MemoryError('allocation failed for conc0')             # <<<<<<<<<<<<<<
 * 			for i in range(N):
 * 				c_conc0[i] = conc0_py[i]
*/
        __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_builtin_MemoryError);
        __pyx_t_18 = __pyx_builtin_MemoryError; 
        __pyx_t_6 = 1;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_mstate_global->__pyx_kp_u_allocation_failed_for_conc0};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_18, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(0, 535, __pyx_L1_error)

        /* "pyroxa/pybindings.pyx":534
 * 		if N > 0:
 * 			c_conc0 = <double*>malloc(N * sizeof(double))
 * 			if not c_conc0:             # <<<<<<<<<<<<<<
 * 				raise MemoryError('allocation failed for conc0')
 * 			for i in range(N):
*/
      }

      /* "pyroxa/pybindings.pyx":536
 * 			if not c_conc0:
 * 				raise MemoryError('allocation failed for conc0')
 * 			for i in range(N):             # <<<<<<<<<<<<<<
 * 				c_conc0[i] = conc0_py[i]
 * 		else:
*/
      __pyx_t_8 = __pyx_v_N;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_i = __pyx_t_10;

        /* "pyroxa/pybindings.pyx":537
 * 				raise MemoryError('allocation failed for conc0')
 * 			for i in range(N):
 * 				c_conc0[i] = conc0_py[i]             # <<<<<<<<<<<<<<
 * 		else:
 * 			c_conc0 = <double*>0
*/
        __pyx_t_11 = __Pyx_PyFloat_AsDouble(__Pyx_PyList_GET_ITEM(__pyx_v_conc0_py, __pyx_v_i)); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 537, __pyx_L1_error)
        (__pyx_v_c_conc0[__pyx_v_i]) = __pyx_t_11;
      }

      /* "pyroxa/pybindings.pyx":532
 * 		# conc0 C array
 * 		conc0_py = [float(spec.get('initial', {}).get('conc', {}).get(s, 0.0)) for s in species]
 * 		if N > 0:             # <<<<<<<<<<<<<<
 * 			c_conc0 = <double*>malloc(N * sizeof(double))
 * 			if not c_conc0:
*/
      goto __pyx_L49;
    }

    /* "pyroxa/pybindings.pyx":539
 * 				c_conc0[i] = conc0_py[i]
 * 		else:
 * 			c_conc0 = <double*>0             # <<<<<<<<<<<<<<
 * 		# output buffers
 * 		nsteps = int(round(float(sim.get('time_span', 10.0)) / float(sim.get('time_step', 0.01))))
*/
    /*else*/ {
      __pyx_v_c_conc0 = ((double *)0);
    }
    __pyx_L49:;

    /* "pyroxa/pybindings.pyx":541
 * 			c_conc0 = <double*>0
 * 		# output buffers
 * 		nsteps = int(round(float(sim.get('time_span', 10.0)) / float(sim.get('time_step', 0.01))))             # <<<<<<<<<<<<<<
 * 		npts = nsteps + 1
 * 		max_len = npts
*/
    __pyx_t_18 = NULL;
    __Pyx_INCREF(__pyx_builtin_round);
    __pyx_t_5 = __pyx_builtin_round; 
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_sim, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[2], NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyObject_AsDouble(__pyx_t_13); if (unlikely(__pyx_t_11 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_sim, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_mstate_global->__pyx_tuple[3], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_23 = __Pyx_PyObject_AsDouble(__pyx_t_4); if (unlikely(__pyx_t_23 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble((__pyx_t_11 / __pyx_t_23)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_18, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __pyx_t_5 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyLong_As_int(__pyx_t_5); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_nsteps = __pyx_t_8;

    /* "pyroxa/pybindings.pyx":542
 * 		# output buffers
 * 		nsteps = int(round(float(sim.get('time_span', 10.0)) / float(sim.get('time_step', 0.01))))
 * 		npts = nsteps + 1             # <<<<<<<<<<<<<<
 * 		max_len = npts
 * 		times_buf = <double*>malloc(max_len * sizeof(double))
*/
    __pyx_v_npts = (__pyx_v_nsteps + 1);

    /* "pyroxa/pybindings.pyx":543
 * 		nsteps = int(round(float(sim.get('time_span', 10.0)) / float(sim.get('time_step', 0.01))))
 * 		npts = nsteps + 1
 * 		max_len = npts             # <<<<<<<<<<<<<<
 * 		times_buf = <double*>malloc(max_len * sizeof(double))
 * 		conc_out_flat = <double*>malloc(max_len * N * sizeof(double))
*/
    __pyx_v_max_len = __pyx_v_npts;

    /* "pyroxa/pybindings.pyx":544
 * 		npts = nsteps + 1
 * 		max_len = npts
 * 		times_buf = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 		conc_out_flat = <double*>malloc(max_len * N * sizeof(double))
 * 		if (max_len > 0 and not times_buf) or (max_len * N > 0 and not conc_out_flat):
*/
    __pyx_v_times_buf = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

    /* "pyroxa/pybindings.pyx":545
 * 		max_len = npts
 * 		times_buf = <double*>malloc(max_len * sizeof(double))
 * 		conc_out_flat = <double*>malloc(max_len * N * sizeof(double))             # <<<<<<<<<<<<<<
 * 		if (max_len > 0 and not times_buf) or (max_len * N > 0 and not conc_out_flat):
 * 			# free previously allocated
*/
    __pyx_v_conc_out_flat = ((double *)malloc(((__pyx_v_max_len * __pyx_v_N) * (sizeof(double)))));

    /* "pyroxa/pybindings.pyx":546
 * 		times_buf = <double*>malloc(max_len * sizeof(double))
 * 		conc_out_flat = <double*>malloc(max_len * N * sizeof(double))
 * 		if (max_len > 0 and not times_buf) or (max_len * N > 0 and not conc_out_flat):             # <<<<<<<<<<<<<<
 * 			# free previously allocated
 * 			if kf_ptr and kf_ptr != <double*>0: free(kf_ptr)
*/
    __pyx_t_1 = (__pyx_v_max_len > 0);
    if (!__pyx_t_1) {
      goto __pyx_L55_next_or;
    } else {
    }
    __pyx_t_1 = (!(__pyx_v_times_buf != 0));
    if (!__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L54_bool_binop_done;
    }
    __pyx_L55_next_or:;
    __pyx_t_1 = ((__pyx_v_max_len * __pyx_v_N) > 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L54_bool_binop_done;
    }
    __pyx_t_1 = (!(__pyx_v_conc_out_flat != 0));
    __pyx_t_2 = __pyx_t_1;
    __pyx_L54_bool_binop_done:;
    if (__pyx_t_2) {

      /* "pyroxa/pybindings.pyx":548
 * 		if (max_len > 0 and not times_buf) or (max_len * N > 0 and not conc_out_flat):
 * 			# free previously allocated
 * 			if kf_ptr and kf_ptr != <double*>0: free(kf_ptr)             # <<<<<<<<<<<<<<
 * 			if kr_ptr and kr_ptr != <double*>0: free(kr_ptr)
 * 			if c_reac_idx and c_reac_idx != <int*>0: free(c_reac_idx)
*/
      __pyx_t_1 = (__pyx_v_kf_ptr != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L59_bool_binop_done;
      }
      __pyx_t_1 = (__pyx_v_kf_ptr != ((double *)0));
      __pyx_t_2 = __pyx_t_1;
      __pyx_L59_bool_binop_done:;
      if (__pyx_t_2) {
        free(__pyx_v_kf_ptr);
      }

      /* "pyroxa/pybindings.pyx":549
 * 			# free previously allocated
 * 			if kf_ptr and kf_ptr != <double*>0: free(kf_ptr)
 * 			if kr_ptr and kr_ptr != <double*>0: free(kr_ptr)             # <<<<<<<<<<<<<<
 * 			if c_reac_idx and c_reac_idx != <int*>0: free(c_reac_idx)
 * 			if c_reac_nu and c_reac_nu != <double*>0: free(c_reac_nu)
*/
      __pyx_t_1 = (__pyx_v_kr_ptr != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L62_bool_binop_done;
      }
      __pyx_t_1 = (__pyx_v_kr_ptr != ((double *)0));
      __pyx_t_2 = __pyx_t_1;
      __pyx_L62_bool_binop_done:;
      if (__pyx_t_2) {
        free(__pyx_v_kr_ptr);
      }

      /* "pyroxa/pybindings.pyx":550
 * 			if kf_ptr and kf_ptr != <double*>0: free(kf_ptr)
 * 			if kr_ptr and kr_ptr != <double*>0: free(kr_ptr)
 * 			if c_reac_idx and c_reac_idx != <int*>0: free(c_reac_idx)             # <<<<<<<<<<<<<<
 * 			if c_reac_nu and c_reac_nu != <double*>0: free(c_reac_nu)
 * 			if c_reac_off: free(c_reac_off)
*/
      __pyx_t_1 = (__pyx_v_c_reac_idx != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L65_bool_binop_done;
      }
      __pyx_t_1 = (__pyx_v_c_reac_idx != ((int *)0));
      __pyx_t_2 = __pyx_t_1;
      __pyx_L65_bool_binop_done:;
      if (__pyx_t_2) {
        free(__pyx_v_c_reac_idx);
      }

      /* "pyroxa/pybindings.pyx":551
 * 			if kr_ptr and kr_ptr != <double*>0: free(kr_ptr)
 * 			if c_reac_idx and c_reac_idx != <int*>0: free(c_reac_idx)
 * 			if c_reac_nu and c_reac_nu != <double*>0: free(c_reac_nu)             # <<<<<<<<<<<<<<
 * 			if c_reac_off: free(c_reac_off)
 * 			if c_prod_idx and c_prod_idx != <int*>0: free(c_prod_idx)
*/
      __pyx_t_1 = (__pyx_v_c_reac_nu != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L68_bool_binop_done;
      }
      __pyx_t_1 = (__pyx_v_c_reac_nu != ((double *)0));
      __pyx_t_2 = __pyx_t_1;
      __pyx_L68_bool_binop_done:;
      if (__pyx_t_2) {
        free(__pyx_v_c_reac_nu);
      }

      /* "pyroxa/pybindings.pyx":552
 * 			if c_reac_idx and c_reac_idx != <int*>0: free(c_reac_idx)
 * 			if c_reac_nu and c_reac_nu != <double*>0: free(c_reac_nu)
 * 			if c_reac_off: free(c_reac_off)             # <<<<<<<<<<<<<<
 * 			if c_prod_idx and c_prod_idx != <int*>0: free(c_prod_idx)
 * 			if c_prod_nu and c_prod_nu != <double*>0: free(c_prod_nu)
*/
      __pyx_t_2 = (__pyx_v_c_reac_off != 0);
      if (__pyx_t_2) {
        free(__pyx_v_c_reac_off);
      }

      /* "pyroxa/pybindings.pyx":553
 * 			if c_reac_nu and c_reac_nu != <double*>0: free(c_reac_nu)
 * 			if c_reac_off: free(c_reac_off)
 * 			if c_prod_idx and c_prod_idx != <int*>0: free(c_prod_idx)             # <<<<<<<<<<<<<<
 * 			if c_prod_nu and c_prod_nu != <double*>0: free(c_prod_nu)
 * 			if c_prod_off: free(c_prod_off)
*/
      __pyx_t_1 = (__pyx_v_c_prod_idx != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L72_bool_binop_done;
      }
      __pyx_t_1 = (__pyx_v_c_prod_idx != ((int *)0));
      __pyx_t_2 = __pyx_t_1;
      __pyx_L72_bool_binop_done:;
      if (__pyx_t_2) {
        free(__pyx_v_c_prod_idx);
      }

      /* "pyroxa/pybindings.pyx":554
 * 			if c_reac_off: free(c_reac_off)
 * 			if c_prod_idx and c_prod_idx != <int*>0: free(c_prod_idx)
 * 			if c_prod_nu and c_prod_nu != <double*>0: free(c_prod_nu)             # <<<<<<<<<<<<<<
 * 			if c_prod_off: free(c_prod_off)
 * 			if c_conc0 and c_conc0 != <double*>0: free(c_conc0)
*/
      __pyx_t_1 = (__pyx_v_c_prod_nu != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L75_bool_binop_done;
      }
      __pyx_t_1 = (__pyx_v_c_prod_nu != ((double *)0));
      __pyx_t_2 = __pyx_t_1;
      __pyx_L75_bool_binop_done:;
      if (__pyx_t_2) {
        free(__pyx_v_c_prod_nu);
      }

      /* "pyroxa/pybindings.pyx":555
 * 			if c_prod_idx and c_prod_idx != <int*>0: free(c_prod_idx)
 * 			if c_prod_nu and c_prod_nu != <double*>0: free(c_prod_nu)
 * 			if c_prod_off: free(c_prod_off)             # <<<<<<<<<<<<<<
 * 			if c_conc0 and c_conc0 != <double*>0: free(c_conc0)
 * 			raise MemoryError('allocation failed for output buffers')
*/
      __pyx_t_2 = (__pyx_v_c_prod_off != 0);
      if (__pyx_t_2) {
        free(__pyx_v_c_prod_off);
      }

      /* "pyroxa/pybindings.pyx":556
 * 			if c_prod_nu and c_prod_nu != <double*>0: free(c_prod_nu)
 * 			if c_prod_off: free(c_prod_off)
 * 			if c_conc0 and c_conc0 != <double*>0: free(c_conc0)             # <<<<<<<<<<<<<<
 * 			raise MemoryError('allocation failed for output buffers')
 * 		# call
*/
      __pyx_t_1 = (__pyx_v_c_conc0 != 0);
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L79_bool_binop_done;
      }
      __pyx_t_1 = (__pyx_v_c_conc0 != ((double *)0));
      __pyx_t_2 = __pyx_t_1;
      __pyx_L79_bool_binop_done:;
      if (__pyx_t_2) {
        free(__pyx_v_c_conc0);
      }

      /* "pyroxa/pybindings.pyx":557
 * 			if c_prod_off: free(c_prod_off)
 * 			if c_conc0 and c_conc0 != <double*>0: free(c_conc0)
 * 			raise MemoryError('allocation failed for output buffers')             # <<<<<<<<<<<<<<
 * 		# call
 * 		written = simulate_multi_reactor(N, M, kf_ptr, kr_ptr,
*/
      __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_builtin_MemoryError);
      __pyx_t_4 = __pyx_builtin_MemoryError; 
      __pyx_t_6 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_kp_u_allocation_failed_for_output_buf};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 557, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 557, __pyx_L1_error)

      /* "pyroxa/pybindings.pyx":546
 * 		times_buf = <double*>malloc(max_len * sizeof(double))
 * 		conc_out_flat = <double*>malloc(max_len * N * sizeof(double))
 * 		if (max_len > 0 and not times_buf) or (max_len * N > 0 and not conc_out_flat):             # <<<<<<<<<<<<<<
 * 			# free previously allocated
 * 			if kf_ptr and kf_ptr != <double*>0: free(kf_ptr)
*/
    }

    /* "pyroxa/pybindings.pyx":563
 * 							 <int*>c_prod_idx, <double*>c_prod_nu, <int*>c_prod_off,
 * 							 <double*>c_conc0,
 * 							 float(sim.get('time_span', 10.0)), float(sim.get('time_step', 0.01)),             # <<<<<<<<<<<<<<
 * 							 <double*>times_buf, <double*>conc_out_flat, max_len)
 * 		if written <= 0:
*/
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_sim, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple[2], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_23 = __Pyx_PyObject_AsDouble(__pyx_t_4); if (unlikely(__pyx_t_23 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_sim, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[3], NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyObject_AsDouble(__pyx_t_5); if (unlikely(__pyx_t_11 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 563, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":559
 * 			raise MemoryError('allocation failed for output buffers')
 * 		# call
 * 		written = simulate_multi_reactor(N, M, kf_ptr, kr_ptr,             # <<<<<<<<<<<<<<
 * 							 <int*>c_reac_idx, <double*>c_reac_nu, <int*>c_reac_off,
 * 							 <int*>c_prod_idx, <double*>c_prod_nu, <int*>c_prod_off,
*/
    __pyx_v_written = simulate_multi_reactor(__pyx_v_N, __pyx_v_M, __pyx_v_kf_ptr, __pyx_v_kr_ptr, ((int *)__pyx_v_c_reac_idx), ((double *)__pyx_v_c_reac_nu), ((int *)__pyx_v_c_reac_off), ((int *)__pyx_v_c_prod_idx), ((double *)__pyx_v_c_prod_nu), ((int *)__pyx_v_c_prod_off), ((double *)__pyx_v_c_conc0), __pyx_t_23, __pyx_t_11, ((double *)__pyx_v_times_buf), ((double *)__pyx_v_conc_out_flat), __pyx_v_max_len);

    /* "pyroxa/pybindings.pyx":565
 * 							 float(sim.get('time_span', 10.0)), float(sim.get('time_step', 0.01)),
 * 							 <double*>times_buf, <double*>conc_out_flat, max_len)
 * 		if written <= 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError('multi-reactor C++ simulation failed')
 * 		# build numpy arrays if available
*/
    __pyx_t_2 = (__pyx_v_written <= 0);
    if (unlikely(__pyx_t_2)) {

      /* "pyroxa/pybindings.pyx":566
 * 							 <double*>times_buf, <double*>conc_out_flat, max_len)
 * 		if written <= 0:
 * 			raise RuntimeError('multi-reactor C++ simulation failed')             # <<<<<<<<<<<<<<
 * 		# build numpy arrays if available
 * 		if _HAS_NUMPY:
*/
      __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_builtin_RuntimeError);
      __pyx_t_3 = __pyx_builtin_RuntimeError; 
      __pyx_t_6 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_multi_reactor_C_simulation_faile};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 566, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(0, 566, __pyx_L1_error)

      /* "pyroxa/pybindings.pyx":565
 * 							 float(sim.get('time_span', 10.0)), float(sim.get('time_step', 0.01)),
 * 							 <double*>times_buf, <double*>conc_out_flat, max_len)
 * 		if written <= 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError('multi-reactor C++ simulation failed')
 * 		# build numpy arrays if available
*/
    }

    /* "pyroxa/pybindings.pyx":568
 * 			raise RuntimeError('multi-reactor C++ simulation failed')
 * 		# build numpy arrays if available
 * 		if _HAS_NUMPY:             # <<<<<<<<<<<<<<
 * 			tarr = np.empty(written, dtype=np.float64)
 * 			carr = np.empty((written, N), dtype=np.float64)
*/
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_HAS_NUMPY); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "pyroxa/pybindings.pyx":569
 * 		# build numpy arrays if available
 * 		if _HAS_NUMPY:
 * 			tarr = np.empty(written, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 			carr = np.empty((written, N), dtype=np.float64)
 * 			for i in range(written):
*/
      __pyx_t_3 = NULL;
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_empty); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyLong_From_int(__pyx_v_written); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_mstate_global->__pyx_n_u_float64); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_6 = 1;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_18))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_18);
        assert(__pyx_t_3);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_18, __pyx__function);
        __pyx_t_6 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_3, __pyx_t_4};
        __pyx_t_13 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 569, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_t_20, __pyx_t_13, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 569, __pyx_L1_error)
        __pyx_t_5 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_18, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_13);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 569, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      }
      __pyx_v_tarr = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":570
 * 		if _HAS_NUMPY:
 * 			tarr = np.empty(written, dtype=np.float64)
 * 			carr = np.empty((written, N), dtype=np.float64)             # <<<<<<<<<<<<<<
 * 			for i in range(written):
 * 				tarr[i] = times_buf[i]
*/
      __pyx_t_18 = NULL;
      __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 570, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_mstate_global->__pyx_n_u_empty); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 570, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = __Pyx_PyLong_From_int(__pyx_v_written); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 570, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_4 = __Pyx_PyLong_From_int(__pyx_v_N); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 570, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 570, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_13);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_13) != (0)) __PYX_ERR(0, 570, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_4);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4) != (0)) __PYX_ERR(0, 570, __pyx_L1_error);
      __pyx_t_13 = 0;
      __pyx_t_4 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 570, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_float64); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 570, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = 1;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_20))) {
        __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_20);
        assert(__pyx_t_18);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_20);
        __Pyx_INCREF(__pyx_t_18);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_20, __pyx__function);
        __pyx_t_6 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_18, __pyx_t_3};
        __pyx_t_4 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_t_13, __pyx_t_4, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
        __pyx_t_5 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_20, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_4);
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      }
      __pyx_v_carr = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":571
 * 			tarr = np.empty(written, dtype=np.float64)
 * 			carr = np.empty((written, N), dtype=np.float64)
 * 			for i in range(written):             # <<<<<<<<<<<<<<
 * 				tarr[i] = times_buf[i]
 * 				for j in range(N):
*/
      __pyx_t_8 = __pyx_v_written;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_i = __pyx_t_10;

        /* "pyroxa/pybindings.pyx":572
 * 			carr = np.empty((written, N), dtype=np.float64)
 * 			for i in range(written):
 * 				tarr[i] = times_buf[i]             # <<<<<<<<<<<<<<
 * 				for j in range(N):
 * 					carr[i, j] = conc_out_flat[i*N + j]
*/
        __pyx_t_5 = PyFloat_FromDouble((__pyx_v_times_buf[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 572, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely((__Pyx_SetItemInt(__pyx_v_tarr, __pyx_v_i, __pyx_t_5, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1) < 0))) __PYX_ERR(0, 572, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "pyroxa/pybindings.pyx":573
 * 			for i in range(written):
 * 				tarr[i] = times_buf[i]
 * 				for j in range(N):             # <<<<<<<<<<<<<<
 * 					carr[i, j] = conc_out_flat[i*N + j]
 * 			return tarr, carr
*/
        __pyx_t_20 = NULL;
        __Pyx_INCREF(__pyx_builtin_range);
        __pyx_t_4 = __pyx_builtin_range; 
        __pyx_t_13 = __Pyx_PyLong_From_int(__pyx_v_N); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 573, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_6 = 1;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_20, __pyx_t_13};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 573, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
        }
        if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
          __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4);
          __pyx_t_7 = 0;
          __pyx_t_12 = NULL;
        } else {
          __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 573, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_12 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 573, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (;;) {
          if (likely(!__pyx_t_12)) {
            if (likely(PyList_CheckExact(__pyx_t_4))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
                #if !CYTHON_ASSUME_SAFE_SIZE
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 573, __pyx_L1_error)
                #endif
                if (__pyx_t_7 >= __pyx_temp) break;
              }
              __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_7);
              ++__pyx_t_7;
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
                #if !CYTHON_ASSUME_SAFE_SIZE
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 573, __pyx_L1_error)
                #endif
                if (__pyx_t_7 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7));
              #else
              __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_7);
              #endif
              ++__pyx_t_7;
            }
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 573, __pyx_L1_error)
          } else {
            __pyx_t_5 = __pyx_t_12(__pyx_t_4);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 573, __pyx_L1_error)
                PyErr_Clear();
              }
              break;
            }
          }
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "pyroxa/pybindings.pyx":574
 * 				tarr[i] = times_buf[i]
 * 				for j in range(N):
 * 					carr[i, j] = conc_out_flat[i*N + j]             # <<<<<<<<<<<<<<
 * 			return tarr, carr
 * 		else:
*/
          __pyx_t_5 = __Pyx_PyLong_From_int((__pyx_v_i * __pyx_v_N)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 574, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_13 = PyNumber_Add(__pyx_t_5, __pyx_v_j); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 574, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_14 = __Pyx_PyIndex_AsSsize_t(__pyx_t_13); if (unlikely((__pyx_t_14 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 574, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = PyFloat_FromDouble((__pyx_v_conc_out_flat[__pyx_t_14])); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 574, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 574, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 574, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_GIVEREF(__pyx_t_5);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_5) != (0)) __PYX_ERR(0, 574, __pyx_L1_error);
          __Pyx_INCREF(__pyx_v_j);
          __Pyx_GIVEREF(__pyx_v_j);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_v_j) != (0)) __PYX_ERR(0, 574, __pyx_L1_error);
          __pyx_t_5 = 0;
          if (unlikely((PyObject_SetItem(__pyx_v_carr, __pyx_t_20, __pyx_t_13) < 0))) __PYX_ERR(0, 574, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

          /* "pyroxa/pybindings.pyx":573
 * 			for i in range(written):
 * 				tarr[i] = times_buf[i]
 * 				for j in range(N):             # <<<<<<<<<<<<<<
 * 					carr[i, j] = conc_out_flat[i*N + j]
 * 			return tarr, carr
*/
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }

      /* "pyroxa/pybindings.pyx":575
 * 				for j in range(N):
 * 					carr[i, j] = conc_out_flat[i*N + j]
 * 			return tarr, carr             # <<<<<<<<<<<<<<
 * 		else:
 * 			times_py = [times_buf[i] for i in range(written)]
*/
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 575, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_tarr);
      __Pyx_GIVEREF(__pyx_v_tarr);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_tarr) != (0)) __PYX_ERR(0, 575, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_carr);
      __Pyx_GIVEREF(__pyx_v_carr);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_carr) != (0)) __PYX_ERR(0, 575, __pyx_L1_error);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "pyroxa/pybindings.pyx":568
 * 			raise RuntimeError('multi-reactor C++ simulation failed')
 * 		# build numpy arrays if available
 * 		if _HAS_NUMPY:             # <<<<<<<<<<<<<<
 * 			tarr = np.empty(written, dtype=np.float64)
 * 			carr = np.empty((written, N), dtype=np.float64)
*/
    }

    /* "pyroxa/pybindings.pyx":577
 * 			return tarr, carr
 * 		else:
 * 			times_py = [times_buf[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 			traj = [[conc_out_flat[i*N + j] for j in range(N)] for i in range(written)]
 * 			return times_py, traj
*/
    /*else*/ {
      { /* enter inner scope */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 577, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = __pyx_v_written;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_8genexpr7__pyx_v_i = __pyx_t_10;
          __pyx_t_13 = PyFloat_FromDouble((__pyx_v_times_buf[__pyx_8genexpr7__pyx_v_i])); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 577, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_13))) __PYX_ERR(0, 577, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
      } /* exit inner scope */
      __pyx_v_times_py = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":578
 * 		else:
 * 			times_py = [times_buf[i] for i in range(written)]
 * 			traj = [[conc_out_flat[i*N + j] for j in range(N)] for i in range(written)]             # <<<<<<<<<<<<<<
 * 			return times_py, traj
 * 	else:
*/
      { /* enter inner scope */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 578, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = __pyx_v_written;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_8genexpr8__pyx_v_i = __pyx_t_10;
          { /* enter inner scope */
            __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 578, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_17 = __pyx_v_N;
            __pyx_t_24 = __pyx_t_17;
            for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_24; __pyx_t_25+=1) {
              __pyx_8genexpr9__pyx_v_j = __pyx_t_25;
              __pyx_t_20 = PyFloat_FromDouble((__pyx_v_conc_out_flat[((__pyx_8genexpr8__pyx_v_i * __pyx_v_N) + __pyx_8genexpr9__pyx_v_j)])); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 578, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_20);
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_13, (PyObject*)__pyx_t_20))) __PYX_ERR(0, 578, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            }
          } /* exit inner scope */
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_13))) __PYX_ERR(0, 578, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
      } /* exit inner scope */
      __pyx_v_traj = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":579
 * 			times_py = [times_buf[i] for i in range(written)]
 * 			traj = [[conc_out_flat[i*N + j] for j in range(N)] for i in range(written)]
 * 			return times_py, traj             # <<<<<<<<<<<<<<
 * 	else:
 * 		kf = float(reaction.get('kf', 1.0))
*/
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 579, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_times_py);
      __Pyx_GIVEREF(__pyx_v_times_py);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_times_py) != (0)) __PYX_ERR(0, 579, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_traj);
      __Pyx_GIVEREF(__pyx_v_traj);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_traj) != (0)) __PYX_ERR(0, 579, __pyx_L1_error);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;
    }

    /* "pyroxa/pybindings.pyx":450
 * 	sim = spec.get('sim', {})
 * 	# multi-species branch: try calling optimized C++ multi-reactor
 * 	if 'species' in spec and 'reactions' in spec:             # <<<<<<<<<<<<<<
 * 		species = spec.get('species', [])
 * 		N = len(species)
*/
  }

  /* "pyroxa/pybindings.pyx":581
 * 			return times_py, traj
 * 	else:
 * 		kf = float(reaction.get('kf', 1.0))             # <<<<<<<<<<<<<<
 * 		kr = float(reaction.get('kr', 0.5))
 * 		conc = initial.get('conc', {})
*/
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_reaction, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[0], NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyObject_AsDouble(__pyx_t_13); if (unlikely(__pyx_t_11 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_v_kf = __pyx_t_11;

    /* "pyroxa/pybindings.pyx":582
 * 	else:
 * 		kf = float(reaction.get('kf', 1.0))
 * 		kr = float(reaction.get('kr', 0.5))             # <<<<<<<<<<<<<<
 * 		conc = initial.get('conc', {})
 * 		A0 = float(conc.get('A', 1.0))
*/
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_reaction, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_mstate_global->__pyx_tuple[4], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_11 = __Pyx_PyObject_AsDouble(__pyx_t_4); if (unlikely(__pyx_t_11 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_kr = __pyx_t_11;

    /* "pyroxa/pybindings.pyx":583
 * 		kf = float(reaction.get('kf', 1.0))
 * 		kr = float(reaction.get('kr', 0.5))
 * 		conc = initial.get('conc', {})             # <<<<<<<<<<<<<<
 * 		A0 = float(conc.get('A', 1.0))
 * 		B0 = float(conc.get('B', 0.0))
*/
    __pyx_t_13 = __pyx_v_initial;
    __Pyx_INCREF(__pyx_t_13);
    __pyx_t_20 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_mstate_global->__pyx_n_u_conc, __pyx_t_20};
      __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 583, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_v_conc = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":584
 * 		kr = float(reaction.get('kr', 0.5))
 * 		conc = initial.get('conc', {})
 * 		A0 = float(conc.get('A', 1.0))             # <<<<<<<<<<<<<<
 * 		B0 = float(conc.get('B', 0.0))
 * 		time_span = float(sim.get('time_span', 10.0))
*/
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_conc, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[5], NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyObject_AsDouble(__pyx_t_20); if (unlikely(__pyx_t_11 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 584, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_v_A0 = __pyx_t_11;

    /* "pyroxa/pybindings.pyx":585
 * 		conc = initial.get('conc', {})
 * 		A0 = float(conc.get('A', 1.0))
 * 		B0 = float(conc.get('B', 0.0))             # <<<<<<<<<<<<<<
 * 		time_span = float(sim.get('time_span', 10.0))
 * 		dt = float(sim.get('time_step', 0.01))
*/
    __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_conc, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_mstate_global->__pyx_tuple[6], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_t_11 = __Pyx_PyObject_AsDouble(__pyx_t_4); if (unlikely(__pyx_t_11 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_B0 = __pyx_t_11;

    /* "pyroxa/pybindings.pyx":586
 * 		A0 = float(conc.get('A', 1.0))
 * 		B0 = float(conc.get('B', 0.0))
 * 		time_span = float(sim.get('time_span', 10.0))             # <<<<<<<<<<<<<<
 * 		dt = float(sim.get('time_step', 0.01))
 * 		rxn = Reaction(kf, kr)
*/
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_sim, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[2], NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyObject_AsDouble(__pyx_t_20); if (unlikely(__pyx_t_11 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 586, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_v_time_span = __pyx_t_11;

    /* "pyroxa/pybindings.pyx":587
 * 		B0 = float(conc.get('B', 0.0))
 * 		time_span = float(sim.get('time_span', 10.0))
 * 		dt = float(sim.get('time_step', 0.01))             # <<<<<<<<<<<<<<
 * 		rxn = Reaction(kf, kr)
 * 		reactor = Reactor(rxn, A0=A0, B0=B0, time_span=time_span, dt=dt)
*/
    __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_sim, __pyx_mstate_global->__pyx_n_u_get); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_mstate_global->__pyx_tuple[3], NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_t_11 = __Pyx_PyObject_AsDouble(__pyx_t_4); if (unlikely(__pyx_t_11 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_dt = __pyx_t_11;

    /* "pyroxa/pybindings.pyx":588
 * 		time_span = float(sim.get('time_span', 10.0))
 * 		dt = float(sim.get('time_step', 0.01))
 * 		rxn = Reaction(kf, kr)             # <<<<<<<<<<<<<<
 * 		reactor = Reactor(rxn, A0=A0, B0=B0, time_span=time_span, dt=dt)
 * 		return reactor.run()
*/
    __pyx_t_20 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_Reaction);
    __pyx_t_13 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_Reaction); 
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_kf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_kr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_20, __pyx_t_5, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 588, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_4);
    }
    __pyx_v_rxn = ((struct __pyx_obj_6pyroxa_11_pybindings_Reaction *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":589
 * 		dt = float(sim.get('time_step', 0.01))
 * 		rxn = Reaction(kf, kr)
 * 		reactor = Reactor(rxn, A0=A0, B0=B0, time_span=time_span, dt=dt)             # <<<<<<<<<<<<<<
 * 		return reactor.run()
 * 
*/
    __pyx_t_13 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_Reactor);
    __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_Reactor); 
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_A0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_20 = PyFloat_FromDouble(__pyx_v_B0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_18 = PyFloat_FromDouble(__pyx_v_time_span); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_22 = PyFloat_FromDouble(__pyx_v_dt); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 4 : 0)] = {__pyx_t_13, ((PyObject *)__pyx_v_rxn)};
      __pyx_t_19 = __Pyx_MakeVectorcallBuilderKwds(4); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 589, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_A0, __pyx_t_5, __pyx_t_19, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 589, __pyx_L1_error)
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_B0, __pyx_t_20, __pyx_t_19, __pyx_callargs+2, 1) < 0) __PYX_ERR(0, 589, __pyx_L1_error)
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_time_span, __pyx_t_18, __pyx_t_19, __pyx_callargs+2, 2) < 0) __PYX_ERR(0, 589, __pyx_L1_error)
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dt, __pyx_t_22, __pyx_t_19, __pyx_callargs+2, 3) < 0) __PYX_ERR(0, 589, __pyx_L1_error)
      __pyx_t_4 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_19);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 589, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_4);
    }
    __pyx_v_reactor = ((struct __pyx_obj_6pyroxa_11_pybindings_Reactor *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":590
 * 		rxn = Reaction(kf, kr)
 * 		reactor = Reactor(rxn, A0=A0, B0=B0, time_span=time_span, dt=dt)
 * 		return reactor.run()             # <<<<<<<<<<<<<<
 * 
 * 
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_v_reactor);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_run, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 590, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "pyroxa/pybindings.pyx":420
 * 
 * 
 * def run_simulation_cpp(spec):             # <<<<<<<<<<<<<<
 * 	"""High-level helper that takes a Python dict spec and runs the C++ reactor.
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_AddTraceback("pyroxa._pybindings.run_simulation_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_reaction);
  __Pyx_XDECREF(__pyx_v_initial);
  __Pyx_XDECREF(__pyx_v_sim);
  __Pyx_XDECREF(__pyx_v_species);
  __Pyx_XDECREF(__pyx_v_rxns);
  __Pyx_XDECREF(__pyx_v_reac_idx_list);
  __Pyx_XDECREF(__pyx_v_reac_nu_list);
  __Pyx_XDECREF(__pyx_v_reac_off);
  __Pyx_XDECREF(__pyx_v_prod_idx_list);
  __Pyx_XDECREF(__pyx_v_prod_nu_list);
  __Pyx_XDECREF(__pyx_v_prod_off);
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XDECREF(__pyx_v_reactants);
  __Pyx_XDECREF(__pyx_v_products);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_nu);
  __Pyx_XDECREF(__pyx_v_ctypes);
  __Pyx_XDECREF(__pyx_v_conc0_py);
  __Pyx_XDECREF(__pyx_v_tarr);
  __Pyx_XDECREF(__pyx_v_carr);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_times_py);
  __Pyx_XDECREF(__pyx_v_traj);
  __Pyx_XDECREF(__pyx_v_conc);
  __Pyx_XDECREF((PyObject *)__pyx_v_rxn);
  __Pyx_XDECREF((PyObject *)__pyx_v_reactor);
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":598
 * 
 * # Enhanced thermodynamics functions
 * def py_gibbs_free_energy(double enthalpy, double entropy, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate Gibbs free energy"""
 * 	return gibbs_free_energy(enthalpy, entropy, T)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_3py_gibbs_free_energy(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_2py_gibbs_free_energy, "py_gibbs_free_energy(double enthalpy, double entropy, double T)\n\nCalculate Gibbs free energy");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_3py_gibbs_free_energy = {"py_gibbs_free_energy", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_3py_gibbs_free_energy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_2py_gibbs_free_energy};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_3py_gibbs_free_energy(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_enthalpy;
  double __pyx_v_entropy;
  double __pyx_v_T;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_gibbs_free_energy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_enthalpy,&__pyx_mstate_global->__pyx_n_u_entropy,&__pyx_mstate_global->__pyx_n_u_T,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 598, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 598, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 598, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 598, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_gibbs_free_energy", 0) < 0) __PYX_ERR(0, 598, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_gibbs_free_energy", 1, 3, 3, i); __PYX_ERR(0, 598, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 598, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 598, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 598, __pyx_L3_error)
    }
    __pyx_v_enthalpy = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_enthalpy == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
    __pyx_v_entropy = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_entropy == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_gibbs_free_energy", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 598, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_gibbs_free_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_2py_gibbs_free_energy(__pyx_self, __pyx_v_enthalpy, __pyx_v_entropy, __pyx_v_T);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_2py_gibbs_free_energy(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_enthalpy, double __pyx_v_entropy, double __pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_gibbs_free_energy", 0);

  /* "pyroxa/pybindings.pyx":600
 * def py_gibbs_free_energy(double enthalpy, double entropy, double T):
 * 	"""Calculate Gibbs free energy"""
 * 	return gibbs_free_energy(enthalpy, entropy, T)             # <<<<<<<<<<<<<<
 * 
 * def py_equilibrium_constant(double delta_G, double T):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(gibbs_free_energy(__pyx_v_enthalpy, __pyx_v_entropy, __pyx_v_T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":598
 * 
 * # Enhanced thermodynamics functions
 * def py_gibbs_free_energy(double enthalpy, double entropy, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate Gibbs free energy"""
 * 	return gibbs_free_energy(enthalpy, entropy, T)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_gibbs_free_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":602
 * 	return gibbs_free_energy(enthalpy, entropy, T)
 * 
 * def py_equilibrium_constant(double delta_G, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate equilibrium constant from Gibbs free energy"""
 * 	return equilibrium_constant(delta_G, T)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_5py_equilibrium_constant(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_4py_equilibrium_constant, "py_equilibrium_constant(double delta_G, double T)\n\nCalculate equilibrium constant from Gibbs free energy");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_5py_equilibrium_constant = {"py_equilibrium_constant", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_5py_equilibrium_constant, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_4py_equilibrium_constant};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_5py_equilibrium_constant(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_delta_G;
  double __pyx_v_T;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_equilibrium_constant (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_delta_G,&__pyx_mstate_global->__pyx_n_u_T,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 602, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 602, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 602, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_equilibrium_constant", 0) < 0) __PYX_ERR(0, 602, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_equilibrium_constant", 1, 2, 2, i); __PYX_ERR(0, 602, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 602, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 602, __pyx_L3_error)
    }
    __pyx_v_delta_G = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_delta_G == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 602, __pyx_L3_error)
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 602, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_equilibrium_constant", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 602, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_equilibrium_constant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_4py_equilibrium_constant(__pyx_self, __pyx_v_delta_G, __pyx_v_T);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_4py_equilibrium_constant(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_delta_G, double __pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_equilibrium_constant", 0);

  /* "pyroxa/pybindings.pyx":604
 * def py_equilibrium_constant(double delta_G, double T):
 * 	"""Calculate equilibrium constant from Gibbs free energy"""
 * 	return equilibrium_constant(delta_G, T)             # <<<<<<<<<<<<<<
 * 
 * def py_arrhenius_rate(double A, double Ea, double T, double R=8.314):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(equilibrium_constant(__pyx_v_delta_G, __pyx_v_T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":602
 * 	return gibbs_free_energy(enthalpy, entropy, T)
 * 
 * def py_equilibrium_constant(double delta_G, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate equilibrium constant from Gibbs free energy"""
 * 	return equilibrium_constant(delta_G, T)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_equilibrium_constant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":606
 * 	return equilibrium_constant(delta_G, T)
 * 
 * def py_arrhenius_rate(double A, double Ea, double T, double R=8.314):             # <<<<<<<<<<<<<<
 * 	"""Calculate Arrhenius rate constant"""
 * 	return arrhenius_rate(A, Ea, T, R)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7py_arrhenius_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_6py_arrhenius_rate, "py_arrhenius_rate(double A, double Ea, double T, double R=8.314)\n\nCalculate Arrhenius rate constant");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_7py_arrhenius_rate = {"py_arrhenius_rate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_7py_arrhenius_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_6py_arrhenius_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_7py_arrhenius_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_A;
  double __pyx_v_Ea;
  double __pyx_v_T;
  double __pyx_v_R;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_arrhenius_rate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_Ea,&__pyx_mstate_global->__pyx_n_u_T,&__pyx_mstate_global->__pyx_n_u_R,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 606, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 606, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 606, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 606, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 606, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_arrhenius_rate", 0) < 0) __PYX_ERR(0, 606, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_arrhenius_rate", 0, 3, 4, i); __PYX_ERR(0, 606, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 606, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 606, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 606, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 606, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_A = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L3_error)
    __pyx_v_Ea = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Ea == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L3_error)
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_R = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_R == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 606, __pyx_L3_error)
    } else {
      __pyx_v_R = ((double)((double)8.314));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_arrhenius_rate", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 606, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_arrhenius_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_6py_arrhenius_rate(__pyx_self, __pyx_v_A, __pyx_v_Ea, __pyx_v_T, __pyx_v_R);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_6py_arrhenius_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_A, double __pyx_v_Ea, double __pyx_v_T, double __pyx_v_R) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_arrhenius_rate", 0);

  /* "pyroxa/pybindings.pyx":608
 * def py_arrhenius_rate(double A, double Ea, double T, double R=8.314):
 * 	"""Calculate Arrhenius rate constant"""
 * 	return arrhenius_rate(A, Ea, T, R)             # <<<<<<<<<<<<<<
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(arrhenius_rate(__pyx_v_A, __pyx_v_Ea, __pyx_v_T, __pyx_v_R)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":606
 * 	return equilibrium_constant(delta_G, T)
 * 
 * def py_arrhenius_rate(double A, double Ea, double T, double R=8.314):             # <<<<<<<<<<<<<<
 * 	"""Calculate Arrhenius rate constant"""
 * 	return arrhenius_rate(A, Ea, T, R)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_arrhenius_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":610
 * 	return arrhenius_rate(A, Ea, T, R)
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_9py_pressure_peng_robinson(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_8py_pressure_peng_robinson, "py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega)\n\nCalculate pressure using Peng-Robinson equation of state");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_9py_pressure_peng_robinson = {"py_pressure_peng_robinson", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_9py_pressure_peng_robinson, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_8py_pressure_peng_robinson};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_9py_pressure_peng_robinson(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_n;
  double __pyx_v_V;
  double __pyx_v_T;
  double __pyx_v_Tc;
  double __pyx_v_Pc;
  double __pyx_v_omega;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_pressure_peng_robinson (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_n,&__pyx_mstate_global->__pyx_n_u_V,&__pyx_mstate_global->__pyx_n_u_T,&__pyx_mstate_global->__pyx_n_u_Tc,&__pyx_mstate_global->__pyx_n_u_Pc,&__pyx_mstate_global->__pyx_n_u_omega,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 610, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 610, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 610, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 610, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 610, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 610, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 610, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_pressure_peng_robinson", 0) < 0) __PYX_ERR(0, 610, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 6; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, i); __PYX_ERR(0, 610, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 6)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 610, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 610, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 610, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 610, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 610, __pyx_L3_error)
      values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 610, __pyx_L3_error)
    }
    __pyx_v_n = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_n == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L3_error)
    __pyx_v_V = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_V == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L3_error)
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L3_error)
    __pyx_v_Tc = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Tc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L3_error)
    __pyx_v_Pc = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Pc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L3_error)
    __pyx_v_omega = __Pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 610, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, __pyx_nargs); __PYX_ERR(0, 610, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_pressure_peng_robinson", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_8py_pressure_peng_robinson(__pyx_self, __pyx_v_n, __pyx_v_V, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_8py_pressure_peng_robinson(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_n, double __pyx_v_V, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_pressure_peng_robinson", 0);

  /* "pyroxa/pybindings.pyx":612
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)             # <<<<<<<<<<<<<<
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(pressure_peng_robinson(__pyx_v_n, __pyx_v_V, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":610
 * 	return arrhenius_rate(A, Ea, T, R)
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_pressure_peng_robinson", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":614
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate fugacity coefficient"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_11py_fugacity_coefficient(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_10py_fugacity_coefficient, "py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega)\n\nCalculate fugacity coefficient");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_11py_fugacity_coefficient = {"py_fugacity_coefficient", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_11py_fugacity_coefficient, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_10py_fugacity_coefficient};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_11py_fugacity_coefficient(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_P;
  double __pyx_v_T;
  double __pyx_v_Tc;
  double __pyx_v_Pc;
  double __pyx_v_omega;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_fugacity_coefficient (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_P,&__pyx_mstate_global->__pyx_n_u_T,&__pyx_mstate_global->__pyx_n_u_Tc,&__pyx_mstate_global->__pyx_n_u_Pc,&__pyx_mstate_global->__pyx_n_u_omega,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 614, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 614, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 614, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 614, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 614, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 614, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_fugacity_coefficient", 0) < 0) __PYX_ERR(0, 614, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 5; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_fugacity_coefficient", 1, 5, 5, i); __PYX_ERR(0, 614, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 614, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 614, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 614, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 614, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 614, __pyx_L3_error)
    }
    __pyx_v_P = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_P == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 614, __pyx_L3_error)
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 614, __pyx_L3_error)
    __pyx_v_Tc = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Tc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 614, __pyx_L3_error)
    __pyx_v_Pc = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Pc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 614, __pyx_L3_error)
    __pyx_v_omega = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 614, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_fugacity_coefficient", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 614, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_fugacity_coefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_10py_fugacity_coefficient(__pyx_self, __pyx_v_P, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_10py_fugacity_coefficient(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_P, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_fugacity_coefficient", 0);

  /* "pyroxa/pybindings.pyx":616
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):
 * 	"""Calculate fugacity coefficient"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)             # <<<<<<<<<<<<<<
 * 
 * # Additional kinetics functions
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(fugacity_coefficient(__pyx_v_P, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":614
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate fugacity coefficient"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_fugacity_coefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":619
 * 
 * # Additional kinetics functions
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):             # <<<<<<<<<<<<<<
 * 	"""Calculate Langmuir-Hinshelwood surface reaction rate"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13py_langmuir_hinshelwood_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_12py_langmuir_hinshelwood_rate, "py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B)\n\nCalculate Langmuir-Hinshelwood surface reaction rate");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_13py_langmuir_hinshelwood_rate = {"py_langmuir_hinshelwood_rate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_13py_langmuir_hinshelwood_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_12py_langmuir_hinshelwood_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_13py_langmuir_hinshelwood_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_k;
  double __pyx_v_K_A;
  double __pyx_v_K_B;
  double __pyx_v_conc_A;
  double __pyx_v_conc_B;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_langmuir_hinshelwood_rate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_k,&__pyx_mstate_global->__pyx_n_u_K_A,&__pyx_mstate_global->__pyx_n_u_K_B,&__pyx_mstate_global->__pyx_n_u_conc_A,&__pyx_mstate_global->__pyx_n_u_conc_B,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 619, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 619, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 619, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 619, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 619, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 619, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_langmuir_hinshelwood_rate", 0) < 0) __PYX_ERR(0, 619, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 5; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_langmuir_hinshelwood_rate", 1, 5, 5, i); __PYX_ERR(0, 619, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 619, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 619, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 619, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 619, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 619, __pyx_L3_error)
    }
    __pyx_v_k = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_k == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
    __pyx_v_K_A = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_K_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
    __pyx_v_K_B = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_K_B == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
    __pyx_v_conc_A = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_conc_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
    __pyx_v_conc_B = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_conc_B == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_langmuir_hinshelwood_rate", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 619, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_langmuir_hinshelwood_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_12py_langmuir_hinshelwood_rate(__pyx_self, __pyx_v_k, __pyx_v_K_A, __pyx_v_K_B, __pyx_v_conc_A, __pyx_v_conc_B);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_12py_langmuir_hinshelwood_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_K_A, double __pyx_v_K_B, double __pyx_v_conc_A, double __pyx_v_conc_B) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_langmuir_hinshelwood_rate", 0);

  /* "pyroxa/pybindings.pyx":621
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):
 * 	"""Calculate Langmuir-Hinshelwood surface reaction rate"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)             # <<<<<<<<<<<<<<
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(langmuir_hinshelwood_rate(__pyx_v_k, __pyx_v_K_A, __pyx_v_K_B, __pyx_v_conc_A, __pyx_v_conc_B)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":619
 * 
 * # Additional kinetics functions
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):             # <<<<<<<<<<<<<<
 * 	"""Calculate Langmuir-Hinshelwood surface reaction rate"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_langmuir_hinshelwood_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":623
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,             # <<<<<<<<<<<<<<
 * 						 double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_15py_photochemical_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_14py_photochemical_rate, "py_photochemical_rate(double quantum_yield, double molar_absorptivity, double path_length, double light_intensity, double concentration)\n\nCalculate photochemical reaction rate");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_15py_photochemical_rate = {"py_photochemical_rate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_15py_photochemical_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_14py_photochemical_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_15py_photochemical_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_quantum_yield;
  double __pyx_v_molar_absorptivity;
  double __pyx_v_path_length;
  double __pyx_v_light_intensity;
  double __pyx_v_concentration;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_photochemical_rate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_quantum_yield,&__pyx_mstate_global->__pyx_n_u_molar_absorptivity,&__pyx_mstate_global->__pyx_n_u_path_length,&__pyx_mstate_global->__pyx_n_u_light_intensity,&__pyx_mstate_global->__pyx_n_u_concentration,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 623, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 623, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 623, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 623, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 623, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 623, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_photochemical_rate", 0) < 0) __PYX_ERR(0, 623, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 5; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_photochemical_rate", 1, 5, 5, i); __PYX_ERR(0, 623, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 623, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 623, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 623, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 623, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 623, __pyx_L3_error)
    }
    __pyx_v_quantum_yield = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_quantum_yield == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 623, __pyx_L3_error)
    __pyx_v_molar_absorptivity = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_molar_absorptivity == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 623, __pyx_L3_error)
    __pyx_v_path_length = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_path_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 624, __pyx_L3_error)
    __pyx_v_light_intensity = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_light_intensity == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 624, __pyx_L3_error)
    __pyx_v_concentration = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_concentration == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 624, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_photochemical_rate", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 623, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_photochemical_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_14py_photochemical_rate(__pyx_self, __pyx_v_quantum_yield, __pyx_v_molar_absorptivity, __pyx_v_path_length, __pyx_v_light_intensity, __pyx_v_concentration);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_14py_photochemical_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_quantum_yield, double __pyx_v_molar_absorptivity, double __pyx_v_path_length, double __pyx_v_light_intensity, double __pyx_v_concentration) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_photochemical_rate", 0);

  /* "pyroxa/pybindings.pyx":626
 * 						 double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
 * 	return photochemical_rate(quantum_yield, molar_absorptivity, path_length, light_intensity, concentration)             # <<<<<<<<<<<<<<
 * 
 * # Python wrapper functions for newly implemented C++ functions
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(photochemical_rate(__pyx_v_quantum_yield, __pyx_v_molar_absorptivity, __pyx_v_path_length, __pyx_v_light_intensity, __pyx_v_concentration)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":623
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,             # <<<<<<<<<<<<<<
 * 						 double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_photochemical_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":629
 * 
 * # Python wrapper functions for newly implemented C++ functions
 * def py_autocatalytic_rate(double k, double A, double B, double temperature=298.15):             # <<<<<<<<<<<<<<
 * 	"""Calculate autocatalytic reaction rate with temperature dependency"""
 * 	return autocatalytic_rate(k, A, B, temperature)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_17py_autocatalytic_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_16py_autocatalytic_rate, "py_autocatalytic_rate(double k, double A, double B, double temperature=298.15)\n\nCalculate autocatalytic reaction rate with temperature dependency");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_17py_autocatalytic_rate = {"py_autocatalytic_rate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_17py_autocatalytic_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_16py_autocatalytic_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_17py_autocatalytic_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_k;
  double __pyx_v_A;
  double __pyx_v_B;
  double __pyx_v_temperature;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_autocatalytic_rate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_k,&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,&__pyx_mstate_global->__pyx_n_u_temperature,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 629, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 629, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 629, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 629, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 629, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_autocatalytic_rate", 0) < 0) __PYX_ERR(0, 629, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_autocatalytic_rate", 0, 3, 4, i); __PYX_ERR(0, 629, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 629, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 629, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 629, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 629, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_k == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 629, __pyx_L3_error)
    __pyx_v_A = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 629, __pyx_L3_error)
    __pyx_v_B = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_B == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 629, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_temperature = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_temperature == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 629, __pyx_L3_error)
    } else {
      __pyx_v_temperature = ((double)((double)298.15));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_autocatalytic_rate", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 629, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_autocatalytic_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_16py_autocatalytic_rate(__pyx_self, __pyx_v_k, __pyx_v_A, __pyx_v_B, __pyx_v_temperature);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_16py_autocatalytic_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_A, double __pyx_v_B, double __pyx_v_temperature) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_autocatalytic_rate", 0);

  /* "pyroxa/pybindings.pyx":631
 * def py_autocatalytic_rate(double k, double A, double B, double temperature=298.15):
 * 	"""Calculate autocatalytic reaction rate with temperature dependency"""
 * 	return autocatalytic_rate(k, A, B, temperature)             # <<<<<<<<<<<<<<
 * 
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(autocatalytic_rate(__pyx_v_k, __pyx_v_A, __pyx_v_B, __pyx_v_temperature)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":629
 * 
 * # Python wrapper functions for newly implemented C++ functions
 * def py_autocatalytic_rate(double k, double A, double B, double temperature=298.15):             # <<<<<<<<<<<<<<
 * 	"""Calculate autocatalytic reaction rate with temperature dependency"""
 * 	return autocatalytic_rate(k, A, B, temperature)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_autocatalytic_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":633
 * 	return autocatalytic_rate(k, A, B, temperature)
 * 
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):             # <<<<<<<<<<<<<<
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_19py_michaelis_menten_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_18py_michaelis_menten_rate, "py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc)\n\nCalculate Michaelis-Menten enzyme kinetics rate");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_19py_michaelis_menten_rate = {"py_michaelis_menten_rate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_19py_michaelis_menten_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_18py_michaelis_menten_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_19py_michaelis_menten_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_Vmax;
  double __pyx_v_Km;
  double __pyx_v_substrate_conc;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_michaelis_menten_rate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_Vmax,&__pyx_mstate_global->__pyx_n_u_Km,&__pyx_mstate_global->__pyx_n_u_substrate_conc,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 633, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 633, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 633, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 633, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_michaelis_menten_rate", 0) < 0) __PYX_ERR(0, 633, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_michaelis_menten_rate", 1, 3, 3, i); __PYX_ERR(0, 633, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 633, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 633, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 633, __pyx_L3_error)
    }
    __pyx_v_Vmax = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Vmax == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 633, __pyx_L3_error)
    __pyx_v_Km = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Km == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 633, __pyx_L3_error)
    __pyx_v_substrate_conc = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_substrate_conc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 633, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_michaelis_menten_rate", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 633, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_michaelis_menten_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_18py_michaelis_menten_rate(__pyx_self, __pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_18py_michaelis_menten_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_michaelis_menten_rate", 0);

  /* "pyroxa/pybindings.pyx":635
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)             # <<<<<<<<<<<<<<
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(michaelis_menten_rate(__pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":633
 * 	return autocatalytic_rate(k, A, B, temperature)
 * 
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):             # <<<<<<<<<<<<<<
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_michaelis_menten_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":637
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,             # <<<<<<<<<<<<<<
 * 								   double inhibitor_conc, double Ki):
 * 	"""Calculate competitive inhibition rate"""
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_21py_competitive_inhibition_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_20py_competitive_inhibition_rate, "py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc, double inhibitor_conc, double Ki)\n\nCalculate competitive inhibition rate");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_21py_competitive_inhibition_rate = {"py_competitive_inhibition_rate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_21py_competitive_inhibition_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_20py_competitive_inhibition_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_21py_competitive_inhibition_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_Vmax;
  double __pyx_v_Km;
  double __pyx_v_substrate_conc;
  double __pyx_v_inhibitor_conc;
  double __pyx_v_Ki;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_competitive_inhibition_rate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_Vmax,&__pyx_mstate_global->__pyx_n_u_Km,&__pyx_mstate_global->__pyx_n_u_substrate_conc,&__pyx_mstate_global->__pyx_n_u_inhibitor_conc,&__pyx_mstate_global->__pyx_n_u_Ki,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 637, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 637, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 637, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 637, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 637, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 637, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_competitive_inhibition_rate", 0) < 0) __PYX_ERR(0, 637, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 5; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_competitive_inhibition_rate", 1, 5, 5, i); __PYX_ERR(0, 637, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 637, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 637, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 637, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 637, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 637, __pyx_L3_error)
    }
    __pyx_v_Vmax = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Vmax == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L3_error)
    __pyx_v_Km = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Km == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L3_error)
    __pyx_v_substrate_conc = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_substrate_conc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L3_error)
    __pyx_v_inhibitor_conc = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_inhibitor_conc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 638, __pyx_L3_error)
    __pyx_v_Ki = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Ki == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 638, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_competitive_inhibition_rate", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 637, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_competitive_inhibition_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_20py_competitive_inhibition_rate(__pyx_self, __pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc, __pyx_v_inhibitor_conc, __pyx_v_Ki);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_20py_competitive_inhibition_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc, double __pyx_v_inhibitor_conc, double __pyx_v_Ki) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_competitive_inhibition_rate", 0);

  /* "pyroxa/pybindings.pyx":640
 * 								   double inhibitor_conc, double Ki):
 * 	"""Calculate competitive inhibition rate"""
 * 	return competitive_inhibition_rate(Vmax, Km, substrate_conc, inhibitor_conc, Ki)             # <<<<<<<<<<<<<<
 * 
 * def py_heat_capacity_nasa(double T, coeffs):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(competitive_inhibition_rate(__pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc, __pyx_v_inhibitor_conc, __pyx_v_Ki)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":637
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,             # <<<<<<<<<<<<<<
 * 								   double inhibitor_conc, double Ki):
 * 	"""Calculate competitive inhibition rate"""
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_competitive_inhibition_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":642
 * 	return competitive_inhibition_rate(Vmax, Km, substrate_conc, inhibitor_conc, Ki)
 * 
 * def py_heat_capacity_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate heat capacity using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_23py_heat_capacity_nasa(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_22py_heat_capacity_nasa, "py_heat_capacity_nasa(double T, coeffs)\n\nCalculate heat capacity using NASA polynomial");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_23py_heat_capacity_nasa = {"py_heat_capacity_nasa", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_23py_heat_capacity_nasa, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_22py_heat_capacity_nasa};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_23py_heat_capacity_nasa(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_T;
  PyObject *__pyx_v_coeffs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_heat_capacity_nasa (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_T,&__pyx_mstate_global->__pyx_n_u_coeffs,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 642, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 642, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 642, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_heat_capacity_nasa", 0) < 0) __PYX_ERR(0, 642, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_heat_capacity_nasa", 1, 2, 2, i); __PYX_ERR(0, 642, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 642, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 642, __pyx_L3_error)
    }
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 642, __pyx_L3_error)
    __pyx_v_coeffs = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_heat_capacity_nasa", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 642, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_heat_capacity_nasa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_22py_heat_capacity_nasa(__pyx_self, __pyx_v_T, __pyx_v_coeffs);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_22py_heat_capacity_nasa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_T, PyObject *__pyx_v_coeffs) {
  double *__pyx_v_c_coeffs;
  long __pyx_v_i;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  long __pyx_t_6;
  double __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  double __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  char const *__pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_heat_capacity_nasa", 0);

  /* "pyroxa/pybindings.pyx":644
 * def py_heat_capacity_nasa(double T, coeffs):
 * 	"""Calculate heat capacity using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))             # <<<<<<<<<<<<<<
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')
*/
  __pyx_v_c_coeffs = ((double *)malloc((7 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":645
 * 	"""Calculate heat capacity using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:             # <<<<<<<<<<<<<<
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
*/
  __pyx_t_1 = (!(__pyx_v_c_coeffs != 0));
  if (unlikely(__pyx_t_1)) {

    /* "pyroxa/pybindings.pyx":646
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')             # <<<<<<<<<<<<<<
 * 	try:
 * 		for i in range(7):
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_MemoryError);
    __pyx_t_4 = __pyx_builtin_MemoryError; 
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_kp_u_allocation_failed_for_coeffs};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 646, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 646, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":645
 * 	"""Calculate heat capacity using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:             # <<<<<<<<<<<<<<
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
*/
  }

  /* "pyroxa/pybindings.pyx":647
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":648
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
 * 		for i in range(7):             # <<<<<<<<<<<<<<
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = heat_capacity_nasa(T, c_coeffs)
*/
    for (__pyx_t_6 = 0; __pyx_t_6 < 7; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":649
 * 	try:
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0             # <<<<<<<<<<<<<<
 * 		result = heat_capacity_nasa(T, c_coeffs)
 * 		return result
*/
      __pyx_t_8 = PyObject_Length(__pyx_v_coeffs); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 649, __pyx_L5_error)
      __pyx_t_1 = (__pyx_v_i < __pyx_t_8);
      if (__pyx_t_1) {
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coeffs, __pyx_v_i, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 649, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 649, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_7 = __pyx_t_9;
      } else {
        __pyx_t_7 = 0.0;
      }
      (__pyx_v_c_coeffs[__pyx_v_i]) = __pyx_t_7;
    }

    /* "pyroxa/pybindings.pyx":650
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = heat_capacity_nasa(T, c_coeffs)             # <<<<<<<<<<<<<<
 * 		return result
 * 	finally:
*/
    __pyx_v_result = heat_capacity_nasa(__pyx_v_T, __pyx_v_c_coeffs);

    /* "pyroxa/pybindings.pyx":651
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = heat_capacity_nasa(T, c_coeffs)
 * 		return result             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(c_coeffs)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 651, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L4_return;
  }

  /* "pyroxa/pybindings.pyx":653
 * 		return result
 * 	finally:
 * 		free(c_coeffs)             # <<<<<<<<<<<<<<
 * 
 * def py_enthalpy_nasa(double T, coeffs):
*/
  /*finally:*/ {
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
      if ( unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __pyx_t_10 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_12 = __pyx_filename;
      {
        free(__pyx_v_c_coeffs);
      }
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
      __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_12;
      goto __pyx_L1_error;
    }
    __pyx_L4_return: {
      __pyx_t_18 = __pyx_r;
      __pyx_r = 0;
      free(__pyx_v_c_coeffs);
      __pyx_r = __pyx_t_18;
      __pyx_t_18 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":642
 * 	return competitive_inhibition_rate(Vmax, Km, substrate_conc, inhibitor_conc, Ki)
 * 
 * def py_heat_capacity_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate heat capacity using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyroxa._pybindings.py_heat_capacity_nasa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":655
 * 		free(c_coeffs)
 * 
 * def py_enthalpy_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate enthalpy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_25py_enthalpy_nasa(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_24py_enthalpy_nasa, "py_enthalpy_nasa(double T, coeffs)\n\nCalculate enthalpy using NASA polynomial");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_25py_enthalpy_nasa = {"py_enthalpy_nasa", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_25py_enthalpy_nasa, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_24py_enthalpy_nasa};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_25py_enthalpy_nasa(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_T;
  PyObject *__pyx_v_coeffs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_enthalpy_nasa (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_T,&__pyx_mstate_global->__pyx_n_u_coeffs,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 655, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 655, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 655, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_enthalpy_nasa", 0) < 0) __PYX_ERR(0, 655, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_enthalpy_nasa", 1, 2, 2, i); __PYX_ERR(0, 655, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 655, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 655, __pyx_L3_error)
    }
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 655, __pyx_L3_error)
    __pyx_v_coeffs = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_enthalpy_nasa", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 655, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_enthalpy_nasa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_24py_enthalpy_nasa(__pyx_self, __pyx_v_T, __pyx_v_coeffs);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_24py_enthalpy_nasa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_T, PyObject *__pyx_v_coeffs) {
  double *__pyx_v_c_coeffs;
  long __pyx_v_i;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  long __pyx_t_6;
  double __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  double __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  char const *__pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_enthalpy_nasa", 0);

  /* "pyroxa/pybindings.pyx":657
 * def py_enthalpy_nasa(double T, coeffs):
 * 	"""Calculate enthalpy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))             # <<<<<<<<<<<<<<
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')
*/
  __pyx_v_c_coeffs = ((double *)malloc((7 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":658
 * 	"""Calculate enthalpy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:             # <<<<<<<<<<<<<<
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
*/
  __pyx_t_1 = (!(__pyx_v_c_coeffs != 0));
  if (unlikely(__pyx_t_1)) {

    /* "pyroxa/pybindings.pyx":659
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')             # <<<<<<<<<<<<<<
 * 	try:
 * 		for i in range(7):
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_MemoryError);
    __pyx_t_4 = __pyx_builtin_MemoryError; 
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_kp_u_allocation_failed_for_coeffs};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 659, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 659, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":658
 * 	"""Calculate enthalpy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:             # <<<<<<<<<<<<<<
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
*/
  }

  /* "pyroxa/pybindings.pyx":660
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":661
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
 * 		for i in range(7):             # <<<<<<<<<<<<<<
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = enthalpy_nasa(T, c_coeffs)
*/
    for (__pyx_t_6 = 0; __pyx_t_6 < 7; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":662
 * 	try:
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0             # <<<<<<<<<<<<<<
 * 		result = enthalpy_nasa(T, c_coeffs)
 * 		return result
*/
      __pyx_t_8 = PyObject_Length(__pyx_v_coeffs); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 662, __pyx_L5_error)
      __pyx_t_1 = (__pyx_v_i < __pyx_t_8);
      if (__pyx_t_1) {
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coeffs, __pyx_v_i, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 662, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 662, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_7 = __pyx_t_9;
      } else {
        __pyx_t_7 = 0.0;
      }
      (__pyx_v_c_coeffs[__pyx_v_i]) = __pyx_t_7;
    }

    /* "pyroxa/pybindings.pyx":663
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = enthalpy_nasa(T, c_coeffs)             # <<<<<<<<<<<<<<
 * 		return result
 * 	finally:
*/
    __pyx_v_result = enthalpy_nasa(__pyx_v_T, __pyx_v_c_coeffs);

    /* "pyroxa/pybindings.pyx":664
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = enthalpy_nasa(T, c_coeffs)
 * 		return result             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(c_coeffs)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 664, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L4_return;
  }

  /* "pyroxa/pybindings.pyx":666
 * 		return result
 * 	finally:
 * 		free(c_coeffs)             # <<<<<<<<<<<<<<
 * 
 * def py_entropy_nasa(double T, coeffs):
*/
  /*finally:*/ {
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
      if ( unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __pyx_t_10 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_12 = __pyx_filename;
      {
        free(__pyx_v_c_coeffs);
      }
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
      __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_12;
      goto __pyx_L1_error;
    }
    __pyx_L4_return: {
      __pyx_t_18 = __pyx_r;
      __pyx_r = 0;
      free(__pyx_v_c_coeffs);
      __pyx_r = __pyx_t_18;
      __pyx_t_18 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":655
 * 		free(c_coeffs)
 * 
 * def py_enthalpy_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate enthalpy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyroxa._pybindings.py_enthalpy_nasa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":668
 * 		free(c_coeffs)
 * 
 * def py_entropy_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate entropy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_27py_entropy_nasa(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_26py_entropy_nasa, "py_entropy_nasa(double T, coeffs)\n\nCalculate entropy using NASA polynomial");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_27py_entropy_nasa = {"py_entropy_nasa", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_27py_entropy_nasa, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_26py_entropy_nasa};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_27py_entropy_nasa(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_T;
  PyObject *__pyx_v_coeffs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_entropy_nasa (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_T,&__pyx_mstate_global->__pyx_n_u_coeffs,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 668, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 668, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 668, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_entropy_nasa", 0) < 0) __PYX_ERR(0, 668, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_entropy_nasa", 1, 2, 2, i); __PYX_ERR(0, 668, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 668, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 668, __pyx_L3_error)
    }
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 668, __pyx_L3_error)
    __pyx_v_coeffs = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_entropy_nasa", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 668, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_entropy_nasa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_26py_entropy_nasa(__pyx_self, __pyx_v_T, __pyx_v_coeffs);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_26py_entropy_nasa(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_T, PyObject *__pyx_v_coeffs) {
  double *__pyx_v_c_coeffs;
  long __pyx_v_i;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  long __pyx_t_6;
  double __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  double __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  char const *__pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_entropy_nasa", 0);

  /* "pyroxa/pybindings.pyx":670
 * def py_entropy_nasa(double T, coeffs):
 * 	"""Calculate entropy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))             # <<<<<<<<<<<<<<
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')
*/
  __pyx_v_c_coeffs = ((double *)malloc((7 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":671
 * 	"""Calculate entropy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:             # <<<<<<<<<<<<<<
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
*/
  __pyx_t_1 = (!(__pyx_v_c_coeffs != 0));
  if (unlikely(__pyx_t_1)) {

    /* "pyroxa/pybindings.pyx":672
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')             # <<<<<<<<<<<<<<
 * 	try:
 * 		for i in range(7):
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_MemoryError);
    __pyx_t_4 = __pyx_builtin_MemoryError; 
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_kp_u_allocation_failed_for_coeffs};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 672, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 672, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":671
 * 	"""Calculate entropy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
 * 	if not c_coeffs:             # <<<<<<<<<<<<<<
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
*/
  }

  /* "pyroxa/pybindings.pyx":673
 * 	if not c_coeffs:
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":674
 * 		raise MemoryError('allocation failed for coeffs')
 * 	try:
 * 		for i in range(7):             # <<<<<<<<<<<<<<
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = entropy_nasa(T, c_coeffs)
*/
    for (__pyx_t_6 = 0; __pyx_t_6 < 7; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":675
 * 	try:
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0             # <<<<<<<<<<<<<<
 * 		result = entropy_nasa(T, c_coeffs)
 * 		return result
*/
      __pyx_t_8 = PyObject_Length(__pyx_v_coeffs); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 675, __pyx_L5_error)
      __pyx_t_1 = (__pyx_v_i < __pyx_t_8);
      if (__pyx_t_1) {
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coeffs, __pyx_v_i, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 675, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 675, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_7 = __pyx_t_9;
      } else {
        __pyx_t_7 = 0.0;
      }
      (__pyx_v_c_coeffs[__pyx_v_i]) = __pyx_t_7;
    }

    /* "pyroxa/pybindings.pyx":676
 * 		for i in range(7):
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = entropy_nasa(T, c_coeffs)             # <<<<<<<<<<<<<<
 * 		return result
 * 	finally:
*/
    __pyx_v_result = entropy_nasa(__pyx_v_T, __pyx_v_c_coeffs);

    /* "pyroxa/pybindings.pyx":677
 * 			c_coeffs[i] = coeffs[i] if i < len(coeffs) else 0.0
 * 		result = entropy_nasa(T, c_coeffs)
 * 		return result             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(c_coeffs)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 677, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L4_return;
  }

  /* "pyroxa/pybindings.pyx":679
 * 		return result
 * 	finally:
 * 		free(c_coeffs)             # <<<<<<<<<<<<<<
 * 
 * def py_mass_transfer_correlation(double Re, double Sc, double geometry_factor):
*/
  /*finally:*/ {
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
      if ( unlikely(__Pyx_GetException(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15) < 0)) __Pyx_ErrFetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __pyx_t_10 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_12 = __pyx_filename;
      {
        free(__pyx_v_c_coeffs);
      }
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ErrRestore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0;
      __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_12;
      goto __pyx_L1_error;
    }
    __pyx_L4_return: {
      __pyx_t_18 = __pyx_r;
      __pyx_r = 0;
      free(__pyx_v_c_coeffs);
      __pyx_r = __pyx_t_18;
      __pyx_t_18 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":668
 * 		free(c_coeffs)
 * 
 * def py_entropy_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate entropy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyroxa._pybindings.py_entropy_nasa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":681
 * 		free(c_coeffs)
 * 
 * def py_mass_transfer_correlation(double Re, double Sc, double geometry_factor):             # <<<<<<<<<<<<<<
 * 	"""Calculate Sherwood number from Reynolds and Schmidt numbers"""
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_29py_mass_transfer_correlation(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_28py_mass_transfer_correlation, "py_mass_transfer_correlation(double Re, double Sc, double geometry_factor)\n\nCalculate Sherwood number from Reynolds and Schmidt numbers");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_29py_mass_transfer_correlation = {"py_mass_transfer_correlation", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_29py_mass_transfer_correlation, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_28py_mass_transfer_correlation};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_29py_mass_transfer_correlation(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_Re;
  double __pyx_v_Sc;
  double __pyx_v_geometry_factor;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_mass_transfer_correlation (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_Re,&__pyx_mstate_global->__pyx_n_u_Sc,&__pyx_mstate_global->__pyx_n_u_geometry_factor,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 681, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 681, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 681, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 681, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_mass_transfer_correlation", 0) < 0) __PYX_ERR(0, 681, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_mass_transfer_correlation", 1, 3, 3, i); __PYX_ERR(0, 681, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 681, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 681, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 681, __pyx_L3_error)
    }
    __pyx_v_Re = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Re == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L3_error)
    __pyx_v_Sc = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Sc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L3_error)
    __pyx_v_geometry_factor = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_geometry_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_mass_transfer_correlation", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 681, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_mass_transfer_correlation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_28py_mass_transfer_correlation(__pyx_self, __pyx_v_Re, __pyx_v_Sc, __pyx_v_geometry_factor);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_28py_mass_transfer_correlation(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Re, double __pyx_v_Sc, double __pyx_v_geometry_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_mass_transfer_correlation", 0);

  /* "pyroxa/pybindings.pyx":683
 * def py_mass_transfer_correlation(double Re, double Sc, double geometry_factor):
 * 	"""Calculate Sherwood number from Reynolds and Schmidt numbers"""
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)             # <<<<<<<<<<<<<<
 * 
 * def py_heat_transfer_correlation(double Re, double Pr, double geometry_factor):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(mass_transfer_correlation(__pyx_v_Re, __pyx_v_Sc, __pyx_v_geometry_factor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":681
 * 		free(c_coeffs)
 * 
 * def py_mass_transfer_correlation(double Re, double Sc, double geometry_factor):             # <<<<<<<<<<<<<<
 * 	"""Calculate Sherwood number from Reynolds and Schmidt numbers"""
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_mass_transfer_correlation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":685
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)
 * 
 * def py_heat_transfer_correlation(double Re, double Pr, double geometry_factor):             # <<<<<<<<<<<<<<
 * 	"""Calculate Nusselt number from Reynolds and Prandtl numbers"""
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_31py_heat_transfer_correlation(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_30py_heat_transfer_correlation, "py_heat_transfer_correlation(double Re, double Pr, double geometry_factor)\n\nCalculate Nusselt number from Reynolds and Prandtl numbers");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_31py_heat_transfer_correlation = {"py_heat_transfer_correlation", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_31py_heat_transfer_correlation, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_30py_heat_transfer_correlation};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_31py_heat_transfer_correlation(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_Re;
  double __pyx_v_Pr;
  double __pyx_v_geometry_factor;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_heat_transfer_correlation (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_Re,&__pyx_mstate_global->__pyx_n_u_Pr,&__pyx_mstate_global->__pyx_n_u_geometry_factor,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 685, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 685, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 685, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 685, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_heat_transfer_correlation", 0) < 0) __PYX_ERR(0, 685, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_heat_transfer_correlation", 1, 3, 3, i); __PYX_ERR(0, 685, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 685, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 685, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 685, __pyx_L3_error)
    }
    __pyx_v_Re = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Re == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 685, __pyx_L3_error)
    __pyx_v_Pr = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Pr == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 685, __pyx_L3_error)
    __pyx_v_geometry_factor = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_geometry_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 685, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_heat_transfer_correlation", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 685, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_heat_transfer_correlation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_30py_heat_transfer_correlation(__pyx_self, __pyx_v_Re, __pyx_v_Pr, __pyx_v_geometry_factor);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_heat_transfer_correlation(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Re, double __pyx_v_Pr, double __pyx_v_geometry_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_heat_transfer_correlation", 0);

  /* "pyroxa/pybindings.pyx":687
 * def py_heat_transfer_correlation(double Re, double Pr, double geometry_factor):
 * 	"""Calculate Nusselt number from Reynolds and Prandtl numbers"""
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)             # <<<<<<<<<<<<<<
 * 
 * def py_effective_diffusivity(double molecular_diff, double porosity,
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(heat_transfer_correlation(__pyx_v_Re, __pyx_v_Pr, __pyx_v_geometry_factor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":685
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)
 * 
 * def py_heat_transfer_correlation(double Re, double Pr, double geometry_factor):             # <<<<<<<<<<<<<<
 * 	"""Calculate Nusselt number from Reynolds and Prandtl numbers"""
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_heat_transfer_correlation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":689
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)
 * 
 * def py_effective_diffusivity(double molecular_diff, double porosity,             # <<<<<<<<<<<<<<
 * 							 double tortuosity, double constriction_factor):
 * 	"""Calculate effective diffusivity in porous media"""
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_33py_effective_diffusivity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_32py_effective_diffusivity, "py_effective_diffusivity(double molecular_diff, double porosity, double tortuosity, double constriction_factor)\n\nCalculate effective diffusivity in porous media");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_33py_effective_diffusivity = {"py_effective_diffusivity", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_33py_effective_diffusivity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_32py_effective_diffusivity};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_33py_effective_diffusivity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_molecular_diff;
  double __pyx_v_porosity;
  double __pyx_v_tortuosity;
  double __pyx_v_constriction_factor;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_effective_diffusivity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_molecular_diff,&__pyx_mstate_global->__pyx_n_u_porosity,&__pyx_mstate_global->__pyx_n_u_tortuosity,&__pyx_mstate_global->__pyx_n_u_constriction_factor,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 689, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 689, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 689, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 689, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 689, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_effective_diffusivity", 0) < 0) __PYX_ERR(0, 689, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 4; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_effective_diffusivity", 1, 4, 4, i); __PYX_ERR(0, 689, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 689, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 689, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 689, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 689, __pyx_L3_error)
    }
    __pyx_v_molecular_diff = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_molecular_diff == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 689, __pyx_L3_error)
    __pyx_v_porosity = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_porosity == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 689, __pyx_L3_error)
    __pyx_v_tortuosity = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_tortuosity == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 690, __pyx_L3_error)
    __pyx_v_constriction_factor = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_constriction_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 690, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_effective_diffusivity", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 689, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_effective_diffusivity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_32py_effective_diffusivity(__pyx_self, __pyx_v_molecular_diff, __pyx_v_porosity, __pyx_v_tortuosity, __pyx_v_constriction_factor);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_32py_effective_diffusivity(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_molecular_diff, double __pyx_v_porosity, double __pyx_v_tortuosity, double __pyx_v_constriction_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_effective_diffusivity", 0);

  /* "pyroxa/pybindings.pyx":692
 * 							 double tortuosity, double constriction_factor):
 * 	"""Calculate effective diffusivity in porous media"""
 * 	return effective_diffusivity(molecular_diff, porosity, tortuosity, constriction_factor)             # <<<<<<<<<<<<<<
 * 
 * def py_pressure_drop_ergun(double velocity, double density, double viscosity,
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(effective_diffusivity(__pyx_v_molecular_diff, __pyx_v_porosity, __pyx_v_tortuosity, __pyx_v_constriction_factor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":689
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)
 * 
 * def py_effective_diffusivity(double molecular_diff, double porosity,             # <<<<<<<<<<<<<<
 * 							 double tortuosity, double constriction_factor):
 * 	"""Calculate effective diffusivity in porous media"""
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_effective_diffusivity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":694
 * 	return effective_diffusivity(molecular_diff, porosity, tortuosity, constriction_factor)
 * 
 * def py_pressure_drop_ergun(double velocity, double density, double viscosity,             # <<<<<<<<<<<<<<
 * 						   double particle_diameter, double bed_porosity, double bed_length):
 * 	"""Calculate pressure drop using Ergun equation"""
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_35py_pressure_drop_ergun(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_34py_pressure_drop_ergun, "py_pressure_drop_ergun(double velocity, double density, double viscosity, double particle_diameter, double bed_porosity, double bed_length)\n\nCalculate pressure drop using Ergun equation");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_35py_pressure_drop_ergun = {"py_pressure_drop_ergun", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_35py_pressure_drop_ergun, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_34py_pressure_drop_ergun};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_35py_pressure_drop_ergun(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_velocity;
  double __pyx_v_density;
  double __pyx_v_viscosity;
  double __pyx_v_particle_diameter;
  double __pyx_v_bed_porosity;
  double __pyx_v_bed_length;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_pressure_drop_ergun (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_velocity,&__pyx_mstate_global->__pyx_n_u_density,&__pyx_mstate_global->__pyx_n_u_viscosity,&__pyx_mstate_global->__pyx_n_u_particle_diameter,&__pyx_mstate_global->__pyx_n_u_bed_porosity,&__pyx_mstate_global->__pyx_n_u_bed_length,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 694, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 694, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 694, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 694, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 694, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 694, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 694, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_pressure_drop_ergun", 0) < 0) __PYX_ERR(0, 694, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 6; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_pressure_drop_ergun", 1, 6, 6, i); __PYX_ERR(0, 694, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 6)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 694, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 694, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 694, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 694, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 694, __pyx_L3_error)
      values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 694, __pyx_L3_error)
    }
    __pyx_v_velocity = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_velocity == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 694, __pyx_L3_error)
    __pyx_v_density = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_density == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 694, __pyx_L3_error)
    __pyx_v_viscosity = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_viscosity == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 694, __pyx_L3_error)
    __pyx_v_particle_diameter = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_particle_diameter == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 695, __pyx_L3_error)
    __pyx_v_bed_porosity = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_bed_porosity == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 695, __pyx_L3_error)
    __pyx_v_bed_length = __Pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_bed_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 695, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_pressure_drop_ergun", 1, 6, 6, __pyx_nargs); __PYX_ERR(0, 694, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_pressure_drop_ergun", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_34py_pressure_drop_ergun(__pyx_self, __pyx_v_velocity, __pyx_v_density, __pyx_v_viscosity, __pyx_v_particle_diameter, __pyx_v_bed_porosity, __pyx_v_bed_length);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_34py_pressure_drop_ergun(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_velocity, double __pyx_v_density, double __pyx_v_viscosity, double __pyx_v_particle_diameter, double __pyx_v_bed_porosity, double __pyx_v_bed_length) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_pressure_drop_ergun", 0);

  /* "pyroxa/pybindings.pyx":697
 * 						   double particle_diameter, double bed_porosity, double bed_length):
 * 	"""Calculate pressure drop using Ergun equation"""
 * 	return pressure_drop_ergun(velocity, density, viscosity,             # <<<<<<<<<<<<<<
 * 							   particle_diameter, bed_porosity, bed_length)
 * 
*/
  __Pyx_XDECREF(__pyx_r);

  /* "pyroxa/pybindings.pyx":698
 * 	"""Calculate pressure drop using Ergun equation"""
 * 	return pressure_drop_ergun(velocity, density, viscosity,
 * 							   particle_diameter, bed_porosity, bed_length)             # <<<<<<<<<<<<<<
 * 
 * def py_pid_controller(double setpoint, double process_variable, double dt,
*/
  __pyx_t_1 = PyFloat_FromDouble(pressure_drop_ergun(__pyx_v_velocity, __pyx_v_density, __pyx_v_viscosity, __pyx_v_particle_diameter, __pyx_v_bed_porosity, __pyx_v_bed_length)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":694
 * 	return effective_diffusivity(molecular_diff, porosity, tortuosity, constriction_factor)
 * 
 * def py_pressure_drop_ergun(double velocity, double density, double viscosity,             # <<<<<<<<<<<<<<
 * 						   double particle_diameter, double bed_porosity, double bed_length):
 * 	"""Calculate pressure drop using Ergun equation"""
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_pressure_drop_ergun", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":700
 * 							   particle_diameter, bed_porosity, bed_length)
 * 
 * def py_pid_controller(double setpoint, double process_variable, double dt,             # <<<<<<<<<<<<<<
 * 					  double Kp, double Ki, double Kd):
 * 	"""PID controller implementation"""
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_37py_pid_controller(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_36py_pid_controller, "py_pid_controller(double setpoint, double process_variable, double dt, double Kp, double Ki, double Kd)\n\nPID controller implementation");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_37py_pid_controller = {"py_pid_controller", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_37py_pid_controller, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_36py_pid_controller};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_37py_pid_controller(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_setpoint;
  double __pyx_v_process_variable;
  double __pyx_v_dt;
  double __pyx_v_Kp;
  double __pyx_v_Ki;
  double __pyx_v_Kd;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_pid_controller (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_setpoint,&__pyx_mstate_global->__pyx_n_u_process_variable,&__pyx_mstate_global->__pyx_n_u_dt,&__pyx_mstate_global->__pyx_n_u_Kp,&__pyx_mstate_global->__pyx_n_u_Ki,&__pyx_mstate_global->__pyx_n_u_Kd,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 700, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 700, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 700, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 700, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 700, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 700, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 700, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_pid_controller", 0) < 0) __PYX_ERR(0, 700, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 6; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_pid_controller", 1, 6, 6, i); __PYX_ERR(0, 700, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 6)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 700, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 700, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 700, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 700, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 700, __pyx_L3_error)
      values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 700, __pyx_L3_error)
    }
    __pyx_v_setpoint = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_setpoint == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 700, __pyx_L3_error)
    __pyx_v_process_variable = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_process_variable == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 700, __pyx_L3_error)
    __pyx_v_dt = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 700, __pyx_L3_error)
    __pyx_v_Kp = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Kp == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 701, __pyx_L3_error)
    __pyx_v_Ki = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Ki == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 701, __pyx_L3_error)
    __pyx_v_Kd = __Pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_Kd == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 701, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_pid_controller", 1, 6, 6, __pyx_nargs); __PYX_ERR(0, 700, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_pid_controller", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_36py_pid_controller(__pyx_self, __pyx_v_setpoint, __pyx_v_process_variable, __pyx_v_dt, __pyx_v_Kp, __pyx_v_Ki, __pyx_v_Kd);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_36py_pid_controller(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_setpoint, double __pyx_v_process_variable, double __pyx_v_dt, double __pyx_v_Kp, double __pyx_v_Ki, double __pyx_v_Kd) {
  double __pyx_v_integral_term;
  double __pyx_v_previous_error;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_pid_controller", 0);

  /* "pyroxa/pybindings.pyx":703
 * 					  double Kp, double Ki, double Kd):
 * 	"""PID controller implementation"""
 * 	cdef double integral_term = 0.0             # <<<<<<<<<<<<<<
 * 	cdef double previous_error = 0.0
 * 	return pid_controller(setpoint, process_variable, dt, Kp, Ki, Kd,
*/
  __pyx_v_integral_term = 0.0;

  /* "pyroxa/pybindings.pyx":704
 * 	"""PID controller implementation"""
 * 	cdef double integral_term = 0.0
 * 	cdef double previous_error = 0.0             # <<<<<<<<<<<<<<
 * 	return pid_controller(setpoint, process_variable, dt, Kp, Ki, Kd,
 * 						  &integral_term, &previous_error)
*/
  __pyx_v_previous_error = 0.0;

  /* "pyroxa/pybindings.pyx":705
 * 	cdef double integral_term = 0.0
 * 	cdef double previous_error = 0.0
 * 	return pid_controller(setpoint, process_variable, dt, Kp, Ki, Kd,             # <<<<<<<<<<<<<<
 * 						  &integral_term, &previous_error)
 * 
*/
  __Pyx_XDECREF(__pyx_r);

  /* "pyroxa/pybindings.pyx":706
 * 	cdef double previous_error = 0.0
 * 	return pid_controller(setpoint, process_variable, dt, Kp, Ki, Kd,
 * 						  &integral_term, &previous_error)             # <<<<<<<<<<<<<<
 * 
 * # Simple thermodynamic calculations
*/
  __pyx_t_1 = PyFloat_FromDouble(pid_controller(__pyx_v_setpoint, __pyx_v_process_variable, __pyx_v_dt, __pyx_v_Kp, __pyx_v_Ki, __pyx_v_Kd, (&__pyx_v_integral_term), (&__pyx_v_previous_error))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":700
 * 							   particle_diameter, bed_porosity, bed_length)
 * 
 * def py_pid_controller(double setpoint, double process_variable, double dt,             # <<<<<<<<<<<<<<
 * 					  double Kp, double Ki, double Kd):
 * 	"""PID controller implementation"""
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_pid_controller", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":709
 * 
 * # Simple thermodynamic calculations
 * def py_gibbs_free_energy(double enthalpy, double entropy, double temperature):             # <<<<<<<<<<<<<<
 * 	"""Calculate Gibbs free energy from enthalpy and entropy"""
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_39py_gibbs_free_energy(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_38py_gibbs_free_energy, "py_gibbs_free_energy(double enthalpy, double entropy, double temperature)\n\nCalculate Gibbs free energy from enthalpy and entropy");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_39py_gibbs_free_energy = {"py_gibbs_free_energy", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_39py_gibbs_free_energy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_38py_gibbs_free_energy};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_39py_gibbs_free_energy(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_enthalpy;
  double __pyx_v_entropy;
  double __pyx_v_temperature;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_gibbs_free_energy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_enthalpy,&__pyx_mstate_global->__pyx_n_u_entropy,&__pyx_mstate_global->__pyx_n_u_temperature,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 709, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 709, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 709, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 709, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_gibbs_free_energy", 0) < 0) __PYX_ERR(0, 709, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_gibbs_free_energy", 1, 3, 3, i); __PYX_ERR(0, 709, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 709, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 709, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 709, __pyx_L3_error)
    }
    __pyx_v_enthalpy = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_enthalpy == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L3_error)
    __pyx_v_entropy = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_entropy == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L3_error)
    __pyx_v_temperature = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_temperature == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_gibbs_free_energy", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 709, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_gibbs_free_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_38py_gibbs_free_energy(__pyx_self, __pyx_v_enthalpy, __pyx_v_entropy, __pyx_v_temperature);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_38py_gibbs_free_energy(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_enthalpy, double __pyx_v_entropy, double __pyx_v_temperature) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_gibbs_free_energy", 0);

  /* "pyroxa/pybindings.pyx":711
 * def py_gibbs_free_energy(double enthalpy, double entropy, double temperature):
 * 	"""Calculate Gibbs free energy from enthalpy and entropy"""
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)             # <<<<<<<<<<<<<<
 * 
 * def py_equilibrium_constant(double delta_G, double temperature):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(gibbs_free_energy(__pyx_v_enthalpy, __pyx_v_entropy, __pyx_v_temperature)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":709
 * 
 * # Simple thermodynamic calculations
 * def py_gibbs_free_energy(double enthalpy, double entropy, double temperature):             # <<<<<<<<<<<<<<
 * 	"""Calculate Gibbs free energy from enthalpy and entropy"""
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_gibbs_free_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":713
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)
 * 
 * def py_equilibrium_constant(double delta_G, double temperature):             # <<<<<<<<<<<<<<
 * 	"""Calculate equilibrium constant from Gibbs free energy change"""
 * 	return equilibrium_constant(delta_G, temperature)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_41py_equilibrium_constant(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_40py_equilibrium_constant, "py_equilibrium_constant(double delta_G, double temperature)\n\nCalculate equilibrium constant from Gibbs free energy change");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_41py_equilibrium_constant = {"py_equilibrium_constant", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_41py_equilibrium_constant, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_40py_equilibrium_constant};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_41py_equilibrium_constant(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_delta_G;
  double __pyx_v_temperature;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_equilibrium_constant (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_delta_G,&__pyx_mstate_global->__pyx_n_u_temperature,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 713, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 713, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 713, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_equilibrium_constant", 0) < 0) __PYX_ERR(0, 713, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_equilibrium_constant", 1, 2, 2, i); __PYX_ERR(0, 713, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 713, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 713, __pyx_L3_error)
    }
    __pyx_v_delta_G = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_delta_G == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 713, __pyx_L3_error)
    __pyx_v_temperature = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_temperature == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 713, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_equilibrium_constant", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 713, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_equilibrium_constant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_40py_equilibrium_constant(__pyx_self, __pyx_v_delta_G, __pyx_v_temperature);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_40py_equilibrium_constant(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_delta_G, double __pyx_v_temperature) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_equilibrium_constant", 0);

  /* "pyroxa/pybindings.pyx":715
 * def py_equilibrium_constant(double delta_G, double temperature):
 * 	"""Calculate equilibrium constant from Gibbs free energy change"""
 * 	return equilibrium_constant(delta_G, temperature)             # <<<<<<<<<<<<<<
 * 
 * def py_arrhenius_rate(double pre_exponential, double activation_energy, double temperature, double gas_constant=8.314):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(equilibrium_constant(__pyx_v_delta_G, __pyx_v_temperature)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":713
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)
 * 
 * def py_equilibrium_constant(double delta_G, double temperature):             # <<<<<<<<<<<<<<
 * 	"""Calculate equilibrium constant from Gibbs free energy change"""
 * 	return equilibrium_constant(delta_G, temperature)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_equilibrium_constant", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":717
 * 	return equilibrium_constant(delta_G, temperature)
 * 
 * def py_arrhenius_rate(double pre_exponential, double activation_energy, double temperature, double gas_constant=8.314):             # <<<<<<<<<<<<<<
 * 	"""Calculate reaction rate constant using Arrhenius equation"""
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_43py_arrhenius_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_42py_arrhenius_rate, "py_arrhenius_rate(double pre_exponential, double activation_energy, double temperature, double gas_constant=8.314)\n\nCalculate reaction rate constant using Arrhenius equation");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_43py_arrhenius_rate = {"py_arrhenius_rate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_43py_arrhenius_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_42py_arrhenius_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_43py_arrhenius_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_pre_exponential;
  double __pyx_v_activation_energy;
  double __pyx_v_temperature;
  double __pyx_v_gas_constant;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_arrhenius_rate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pre_exponential,&__pyx_mstate_global->__pyx_n_u_activation_energy,&__pyx_mstate_global->__pyx_n_u_temperature,&__pyx_mstate_global->__pyx_n_u_gas_constant,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 717, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 717, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 717, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 717, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 717, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_arrhenius_rate", 0) < 0) __PYX_ERR(0, 717, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_arrhenius_rate", 0, 3, 4, i); __PYX_ERR(0, 717, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 717, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 717, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 717, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 717, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pre_exponential = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_pre_exponential == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 717, __pyx_L3_error)
    __pyx_v_activation_energy = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_activation_energy == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 717, __pyx_L3_error)
    __pyx_v_temperature = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_temperature == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 717, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_gas_constant = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_gas_constant == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 717, __pyx_L3_error)
    } else {
      __pyx_v_gas_constant = ((double)((double)8.314));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_arrhenius_rate", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 717, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_arrhenius_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_42py_arrhenius_rate(__pyx_self, __pyx_v_pre_exponential, __pyx_v_activation_energy, __pyx_v_temperature, __pyx_v_gas_constant);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_42py_arrhenius_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_pre_exponential, double __pyx_v_activation_energy, double __pyx_v_temperature, double __pyx_v_gas_constant) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_arrhenius_rate", 0);

  /* "pyroxa/pybindings.pyx":719
 * def py_arrhenius_rate(double pre_exponential, double activation_energy, double temperature, double gas_constant=8.314):
 * 	"""Calculate reaction rate constant using Arrhenius equation"""
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)             # <<<<<<<<<<<<<<
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(arrhenius_rate(__pyx_v_pre_exponential, __pyx_v_activation_energy, __pyx_v_temperature, __pyx_v_gas_constant)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":717
 * 	return equilibrium_constant(delta_G, temperature)
 * 
 * def py_arrhenius_rate(double pre_exponential, double activation_energy, double temperature, double gas_constant=8.314):             # <<<<<<<<<<<<<<
 * 	"""Calculate reaction rate constant using Arrhenius equation"""
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_arrhenius_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":721
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_45py_pressure_peng_robinson(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_44py_pressure_peng_robinson, "py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega)\n\nCalculate pressure using Peng-Robinson equation of state");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_45py_pressure_peng_robinson = {"py_pressure_peng_robinson", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_45py_pressure_peng_robinson, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_44py_pressure_peng_robinson};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_45py_pressure_peng_robinson(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_n;
  double __pyx_v_V;
  double __pyx_v_T;
  double __pyx_v_Tc;
  double __pyx_v_Pc;
  double __pyx_v_omega;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_pressure_peng_robinson (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_n,&__pyx_mstate_global->__pyx_n_u_V,&__pyx_mstate_global->__pyx_n_u_T,&__pyx_mstate_global->__pyx_n_u_Tc,&__pyx_mstate_global->__pyx_n_u_Pc,&__pyx_mstate_global->__pyx_n_u_omega,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 721, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 721, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 721, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 721, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 721, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 721, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 721, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_pressure_peng_robinson", 0) < 0) __PYX_ERR(0, 721, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 6; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, i); __PYX_ERR(0, 721, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 6)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 721, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 721, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 721, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 721, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 721, __pyx_L3_error)
      values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 721, __pyx_L3_error)
    }
    __pyx_v_n = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_n == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 721, __pyx_L3_error)
    __pyx_v_V = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_V == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 721, __pyx_L3_error)
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 721, __pyx_L3_error)
    __pyx_v_Tc = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Tc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 721, __pyx_L3_error)
    __pyx_v_Pc = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Pc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 721, __pyx_L3_error)
    __pyx_v_omega = __Pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 721, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_pressure_peng_robinson", 1, 6, 6, __pyx_nargs); __PYX_ERR(0, 721, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_pressure_peng_robinson", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_44py_pressure_peng_robinson(__pyx_self, __pyx_v_n, __pyx_v_V, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_44py_pressure_peng_robinson(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_n, double __pyx_v_V, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_pressure_peng_robinson", 0);

  /* "pyroxa/pybindings.pyx":723
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)             # <<<<<<<<<<<<<<
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(pressure_peng_robinson(__pyx_v_n, __pyx_v_V, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":721
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_pressure_peng_robinson", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":725
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate fugacity coefficient using Peng-Robinson equation"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_47py_fugacity_coefficient(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_46py_fugacity_coefficient, "py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega)\n\nCalculate fugacity coefficient using Peng-Robinson equation");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_47py_fugacity_coefficient = {"py_fugacity_coefficient", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_47py_fugacity_coefficient, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_46py_fugacity_coefficient};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_47py_fugacity_coefficient(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_P;
  double __pyx_v_T;
  double __pyx_v_Tc;
  double __pyx_v_Pc;
  double __pyx_v_omega;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_fugacity_coefficient (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_P,&__pyx_mstate_global->__pyx_n_u_T,&__pyx_mstate_global->__pyx_n_u_Tc,&__pyx_mstate_global->__pyx_n_u_Pc,&__pyx_mstate_global->__pyx_n_u_omega,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 725, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 725, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 725, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 725, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 725, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 725, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_fugacity_coefficient", 0) < 0) __PYX_ERR(0, 725, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 5; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_fugacity_coefficient", 1, 5, 5, i); __PYX_ERR(0, 725, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 725, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 725, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 725, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 725, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 725, __pyx_L3_error)
    }
    __pyx_v_P = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_P == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 725, __pyx_L3_error)
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 725, __pyx_L3_error)
    __pyx_v_Tc = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Tc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 725, __pyx_L3_error)
    __pyx_v_Pc = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_Pc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 725, __pyx_L3_error)
    __pyx_v_omega = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_omega == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 725, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_fugacity_coefficient", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 725, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_fugacity_coefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_46py_fugacity_coefficient(__pyx_self, __pyx_v_P, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_46py_fugacity_coefficient(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_P, double __pyx_v_T, double __pyx_v_Tc, double __pyx_v_Pc, double __pyx_v_omega) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_fugacity_coefficient", 0);

  /* "pyroxa/pybindings.pyx":727
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):
 * 	"""Calculate fugacity coefficient using Peng-Robinson equation"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)             # <<<<<<<<<<<<<<
 * 
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(fugacity_coefficient(__pyx_v_P, __pyx_v_T, __pyx_v_Tc, __pyx_v_Pc, __pyx_v_omega)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":725
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate fugacity coefficient using Peng-Robinson equation"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_fugacity_coefficient", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":729
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 * 
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):             # <<<<<<<<<<<<<<
 * 	"""Calculate reaction rate using Langmuir-Hinshelwood kinetics"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_49py_langmuir_hinshelwood_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_48py_langmuir_hinshelwood_rate, "py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B)\n\nCalculate reaction rate using Langmuir-Hinshelwood kinetics");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_49py_langmuir_hinshelwood_rate = {"py_langmuir_hinshelwood_rate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_49py_langmuir_hinshelwood_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_48py_langmuir_hinshelwood_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_49py_langmuir_hinshelwood_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_k;
  double __pyx_v_K_A;
  double __pyx_v_K_B;
  double __pyx_v_conc_A;
  double __pyx_v_conc_B;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_langmuir_hinshelwood_rate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_k,&__pyx_mstate_global->__pyx_n_u_K_A,&__pyx_mstate_global->__pyx_n_u_K_B,&__pyx_mstate_global->__pyx_n_u_conc_A,&__pyx_mstate_global->__pyx_n_u_conc_B,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 729, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 729, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 729, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 729, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 729, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 729, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_langmuir_hinshelwood_rate", 0) < 0) __PYX_ERR(0, 729, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 5; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_langmuir_hinshelwood_rate", 1, 5, 5, i); __PYX_ERR(0, 729, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 729, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 729, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 729, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 729, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 729, __pyx_L3_error)
    }
    __pyx_v_k = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_k == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 729, __pyx_L3_error)
    __pyx_v_K_A = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_K_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 729, __pyx_L3_error)
    __pyx_v_K_B = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_K_B == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 729, __pyx_L3_error)
    __pyx_v_conc_A = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_conc_A == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 729, __pyx_L3_error)
    __pyx_v_conc_B = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_conc_B == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 729, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_langmuir_hinshelwood_rate", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 729, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_langmuir_hinshelwood_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_48py_langmuir_hinshelwood_rate(__pyx_self, __pyx_v_k, __pyx_v_K_A, __pyx_v_K_B, __pyx_v_conc_A, __pyx_v_conc_B);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_48py_langmuir_hinshelwood_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_K_A, double __pyx_v_K_B, double __pyx_v_conc_A, double __pyx_v_conc_B) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_langmuir_hinshelwood_rate", 0);

  /* "pyroxa/pybindings.pyx":731
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):
 * 	"""Calculate reaction rate using Langmuir-Hinshelwood kinetics"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)             # <<<<<<<<<<<<<<
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(langmuir_hinshelwood_rate(__pyx_v_k, __pyx_v_K_A, __pyx_v_K_B, __pyx_v_conc_A, __pyx_v_conc_B)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":729
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 * 
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):             # <<<<<<<<<<<<<<
 * 	"""Calculate reaction rate using Langmuir-Hinshelwood kinetics"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_langmuir_hinshelwood_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":733
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,             # <<<<<<<<<<<<<<
 * 						  double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_51py_photochemical_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_50py_photochemical_rate, "py_photochemical_rate(double quantum_yield, double molar_absorptivity, double path_length, double light_intensity, double concentration)\n\nCalculate photochemical reaction rate");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_51py_photochemical_rate = {"py_photochemical_rate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_51py_photochemical_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_50py_photochemical_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_51py_photochemical_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_quantum_yield;
  double __pyx_v_molar_absorptivity;
  double __pyx_v_path_length;
  double __pyx_v_light_intensity;
  double __pyx_v_concentration;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_photochemical_rate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_quantum_yield,&__pyx_mstate_global->__pyx_n_u_molar_absorptivity,&__pyx_mstate_global->__pyx_n_u_path_length,&__pyx_mstate_global->__pyx_n_u_light_intensity,&__pyx_mstate_global->__pyx_n_u_concentration,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 733, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 733, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 733, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 733, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 733, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 733, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_photochemical_rate", 0) < 0) __PYX_ERR(0, 733, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 5; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_photochemical_rate", 1, 5, 5, i); __PYX_ERR(0, 733, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 733, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 733, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 733, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 733, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 733, __pyx_L3_error)
    }
    __pyx_v_quantum_yield = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_quantum_yield == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 733, __pyx_L3_error)
    __pyx_v_molar_absorptivity = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_molar_absorptivity == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 733, __pyx_L3_error)
    __pyx_v_path_length = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_path_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L3_error)
    __pyx_v_light_intensity = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_light_intensity == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L3_error)
    __pyx_v_concentration = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_concentration == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_photochemical_rate", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 733, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_photochemical_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_50py_photochemical_rate(__pyx_self, __pyx_v_quantum_yield, __pyx_v_molar_absorptivity, __pyx_v_path_length, __pyx_v_light_intensity, __pyx_v_concentration);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_50py_photochemical_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_quantum_yield, double __pyx_v_molar_absorptivity, double __pyx_v_path_length, double __pyx_v_light_intensity, double __pyx_v_concentration) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_photochemical_rate", 0);

  /* "pyroxa/pybindings.pyx":736
 * 						  double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
 * 	return photochemical_rate(quantum_yield, molar_absorptivity, path_length, light_intensity, concentration)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 1: Simple utility functions (statistics and interpolation)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(photochemical_rate(__pyx_v_quantum_yield, __pyx_v_molar_absorptivity, __pyx_v_path_length, __pyx_v_light_intensity, __pyx_v_concentration)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":733
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,             # <<<<<<<<<<<<<<
 * 						  double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_photochemical_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":739
 * 
 * # BATCH 1: Simple utility functions (statistics and interpolation)
 * def py_linear_interpolate(double x, x_data, y_data):             # <<<<<<<<<<<<<<
 * 	"""Linear interpolation between data points"""
 * 	cdef int n = len(x_data)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_53py_linear_interpolate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_52py_linear_interpolate, "py_linear_interpolate(double x, x_data, y_data)\n\nLinear interpolation between data points");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_53py_linear_interpolate = {"py_linear_interpolate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_53py_linear_interpolate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_52py_linear_interpolate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_53py_linear_interpolate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_x;
  PyObject *__pyx_v_x_data = 0;
  PyObject *__pyx_v_y_data = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_linear_interpolate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_x,&__pyx_mstate_global->__pyx_n_u_x_data,&__pyx_mstate_global->__pyx_n_u_y_data,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 739, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 739, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 739, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 739, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_linear_interpolate", 0) < 0) __PYX_ERR(0, 739, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_linear_interpolate", 1, 3, 3, i); __PYX_ERR(0, 739, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 739, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 739, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 739, __pyx_L3_error)
    }
    __pyx_v_x = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 739, __pyx_L3_error)
    __pyx_v_x_data = values[1];
    __pyx_v_y_data = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_linear_interpolate", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 739, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_linear_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_52py_linear_interpolate(__pyx_self, __pyx_v_x, __pyx_v_x_data, __pyx_v_y_data);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_52py_linear_interpolate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_x, PyObject *__pyx_v_x_data, PyObject *__pyx_v_y_data) {
  int __pyx_v_n;
  double *__pyx_v_x_data_c;
  double *__pyx_v_y_data_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_linear_interpolate", 0);

  /* "pyroxa/pybindings.pyx":741
 * def py_linear_interpolate(double x, x_data, y_data):
 * 	"""Linear interpolation between data points"""
 * 	cdef int n = len(x_data)             # <<<<<<<<<<<<<<
 * 	cdef double* x_data_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_x_data); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 741, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":742
 * 	"""Linear interpolation between data points"""
 * 	cdef int n = len(x_data)
 * 	cdef double* x_data_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))
 * 
*/
  __pyx_v_x_data_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":743
 * 	cdef int n = len(x_data)
 * 	cdef double* x_data_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_y_data_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":745
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(n):
 * 			x_data_c[i] = x_data[i]
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":746
 * 
 * 	try:
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			x_data_c[i] = x_data[i]
 * 			y_data_c[i] = y_data[i]
*/
    __pyx_t_2 = __pyx_v_n;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":747
 * 	try:
 * 		for i in range(n):
 * 			x_data_c[i] = x_data[i]             # <<<<<<<<<<<<<<
 * 			y_data_c[i] = y_data[i]
 * 
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_x_data, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 747, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 747, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_x_data_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":748
 * 		for i in range(n):
 * 			x_data_c[i] = x_data[i]
 * 			y_data_c[i] = y_data[i]             # <<<<<<<<<<<<<<
 * 
 * 		return linear_interpolate(x, x_data_c, y_data_c, n)
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_y_data, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 748, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_y_data_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":750
 * 			y_data_c[i] = y_data[i]
 * 
 * 		return linear_interpolate(x, x_data_c, y_data_c, n)             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(x_data_c)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(linear_interpolate(__pyx_v_x, __pyx_v_x_data_c, __pyx_v_y_data_c, __pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 750, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":752
 * 		return linear_interpolate(x, x_data_c, y_data_c, n)
 * 	finally:
 * 		free(x_data_c)             # <<<<<<<<<<<<<<
 * 		free(y_data_c)
 * 
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ( unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_x_data_c);

        /* "pyroxa/pybindings.pyx":753
 * 	finally:
 * 		free(x_data_c)
 * 		free(y_data_c)             # <<<<<<<<<<<<<<
 * 
 * def py_cubic_spline_interpolate(double x, x_data, y_data):
*/
        free(__pyx_v_y_data_c);
      }
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":752
 * 		return linear_interpolate(x, x_data_c, y_data_c, n)
 * 	finally:
 * 		free(x_data_c)             # <<<<<<<<<<<<<<
 * 		free(y_data_c)
 * 
*/
      free(__pyx_v_x_data_c);

      /* "pyroxa/pybindings.pyx":753
 * 	finally:
 * 		free(x_data_c)
 * 		free(y_data_c)             # <<<<<<<<<<<<<<
 * 
 * def py_cubic_spline_interpolate(double x, x_data, y_data):
*/
      free(__pyx_v_y_data_c);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":739
 * 
 * # BATCH 1: Simple utility functions (statistics and interpolation)
 * def py_linear_interpolate(double x, x_data, y_data):             # <<<<<<<<<<<<<<
 * 	"""Linear interpolation between data points"""
 * 	cdef int n = len(x_data)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_linear_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":755
 * 		free(y_data_c)
 * 
 * def py_cubic_spline_interpolate(double x, x_data, y_data):             # <<<<<<<<<<<<<<
 * 	"""Cubic spline interpolation between data points"""
 * 	cdef int n = len(x_data)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_55py_cubic_spline_interpolate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_54py_cubic_spline_interpolate, "py_cubic_spline_interpolate(double x, x_data, y_data)\n\nCubic spline interpolation between data points");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_55py_cubic_spline_interpolate = {"py_cubic_spline_interpolate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_55py_cubic_spline_interpolate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_54py_cubic_spline_interpolate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_55py_cubic_spline_interpolate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_x;
  PyObject *__pyx_v_x_data = 0;
  PyObject *__pyx_v_y_data = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_cubic_spline_interpolate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_x,&__pyx_mstate_global->__pyx_n_u_x_data,&__pyx_mstate_global->__pyx_n_u_y_data,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 755, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 755, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 755, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 755, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_cubic_spline_interpolate", 0) < 0) __PYX_ERR(0, 755, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_cubic_spline_interpolate", 1, 3, 3, i); __PYX_ERR(0, 755, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 755, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 755, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 755, __pyx_L3_error)
    }
    __pyx_v_x = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 755, __pyx_L3_error)
    __pyx_v_x_data = values[1];
    __pyx_v_y_data = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_cubic_spline_interpolate", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 755, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_cubic_spline_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_54py_cubic_spline_interpolate(__pyx_self, __pyx_v_x, __pyx_v_x_data, __pyx_v_y_data);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_54py_cubic_spline_interpolate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_x, PyObject *__pyx_v_x_data, PyObject *__pyx_v_y_data) {
  int __pyx_v_n;
  double *__pyx_v_x_data_c;
  double *__pyx_v_y_data_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_cubic_spline_interpolate", 0);

  /* "pyroxa/pybindings.pyx":757
 * def py_cubic_spline_interpolate(double x, x_data, y_data):
 * 	"""Cubic spline interpolation between data points"""
 * 	cdef int n = len(x_data)             # <<<<<<<<<<<<<<
 * 	cdef double* x_data_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_x_data); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 757, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":758
 * 	"""Cubic spline interpolation between data points"""
 * 	cdef int n = len(x_data)
 * 	cdef double* x_data_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))
 * 
*/
  __pyx_v_x_data_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":759
 * 	cdef int n = len(x_data)
 * 	cdef double* x_data_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_y_data_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":761
 * 	cdef double* y_data_c = <double*>malloc(n * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(n):
 * 			x_data_c[i] = x_data[i]
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":762
 * 
 * 	try:
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			x_data_c[i] = x_data[i]
 * 			y_data_c[i] = y_data[i]
*/
    __pyx_t_2 = __pyx_v_n;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":763
 * 	try:
 * 		for i in range(n):
 * 			x_data_c[i] = x_data[i]             # <<<<<<<<<<<<<<
 * 			y_data_c[i] = y_data[i]
 * 
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_x_data, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 763, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_x_data_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":764
 * 		for i in range(n):
 * 			x_data_c[i] = x_data[i]
 * 			y_data_c[i] = y_data[i]             # <<<<<<<<<<<<<<
 * 
 * 		return cubic_spline_interpolate(x, x_data_c, y_data_c, n)
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_y_data, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 764, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 764, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_y_data_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":766
 * 			y_data_c[i] = y_data[i]
 * 
 * 		return cubic_spline_interpolate(x, x_data_c, y_data_c, n)             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(x_data_c)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(cubic_spline_interpolate(__pyx_v_x, __pyx_v_x_data_c, __pyx_v_y_data_c, __pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 766, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":768
 * 		return cubic_spline_interpolate(x, x_data_c, y_data_c, n)
 * 	finally:
 * 		free(x_data_c)             # <<<<<<<<<<<<<<
 * 		free(y_data_c)
 * 
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ( unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_x_data_c);

        /* "pyroxa/pybindings.pyx":769
 * 	finally:
 * 		free(x_data_c)
 * 		free(y_data_c)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_r_squared(experimental, predicted):
*/
        free(__pyx_v_y_data_c);
      }
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":768
 * 		return cubic_spline_interpolate(x, x_data_c, y_data_c, n)
 * 	finally:
 * 		free(x_data_c)             # <<<<<<<<<<<<<<
 * 		free(y_data_c)
 * 
*/
      free(__pyx_v_x_data_c);

      /* "pyroxa/pybindings.pyx":769
 * 	finally:
 * 		free(x_data_c)
 * 		free(y_data_c)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_r_squared(experimental, predicted):
*/
      free(__pyx_v_y_data_c);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":755
 * 		free(y_data_c)
 * 
 * def py_cubic_spline_interpolate(double x, x_data, y_data):             # <<<<<<<<<<<<<<
 * 	"""Cubic spline interpolation between data points"""
 * 	cdef int n = len(x_data)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_cubic_spline_interpolate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":771
 * 		free(y_data_c)
 * 
 * def py_calculate_r_squared(experimental, predicted):             # <<<<<<<<<<<<<<
 * 	"""Calculate R-squared coefficient of determination"""
 * 	cdef int n = len(experimental)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_57py_calculate_r_squared(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_56py_calculate_r_squared, "py_calculate_r_squared(experimental, predicted)\n\nCalculate R-squared coefficient of determination");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_57py_calculate_r_squared = {"py_calculate_r_squared", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_57py_calculate_r_squared, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_56py_calculate_r_squared};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_57py_calculate_r_squared(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_experimental = 0;
  PyObject *__pyx_v_predicted = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_r_squared (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_experimental,&__pyx_mstate_global->__pyx_n_u_predicted,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 771, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 771, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 771, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_calculate_r_squared", 0) < 0) __PYX_ERR(0, 771, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_calculate_r_squared", 1, 2, 2, i); __PYX_ERR(0, 771, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 771, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 771, __pyx_L3_error)
    }
    __pyx_v_experimental = values[0];
    __pyx_v_predicted = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_r_squared", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 771, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_r_squared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_56py_calculate_r_squared(__pyx_self, __pyx_v_experimental, __pyx_v_predicted);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_56py_calculate_r_squared(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental, PyObject *__pyx_v_predicted) {
  int __pyx_v_n;
  double *__pyx_v_exp_c;
  double *__pyx_v_pred_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_r_squared", 0);

  /* "pyroxa/pybindings.pyx":773
 * def py_calculate_r_squared(experimental, predicted):
 * 	"""Calculate R-squared coefficient of determination"""
 * 	cdef int n = len(experimental)             # <<<<<<<<<<<<<<
 * 	cdef double* exp_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_experimental); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 773, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":774
 * 	"""Calculate R-squared coefficient of determination"""
 * 	cdef int n = len(experimental)
 * 	cdef double* exp_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))
 * 
*/
  __pyx_v_exp_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":775
 * 	cdef int n = len(experimental)
 * 	cdef double* exp_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_pred_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":777
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(n):
 * 			exp_c[i] = experimental[i]
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":778
 * 
 * 	try:
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			exp_c[i] = experimental[i]
 * 			pred_c[i] = predicted[i]
*/
    __pyx_t_2 = __pyx_v_n;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":779
 * 	try:
 * 		for i in range(n):
 * 			exp_c[i] = experimental[i]             # <<<<<<<<<<<<<<
 * 			pred_c[i] = predicted[i]
 * 
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_experimental, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 779, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 779, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_exp_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":780
 * 		for i in range(n):
 * 			exp_c[i] = experimental[i]
 * 			pred_c[i] = predicted[i]             # <<<<<<<<<<<<<<
 * 
 * 		return calculate_r_squared(exp_c, pred_c, n)
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_predicted, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 780, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 780, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_pred_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":782
 * 			pred_c[i] = predicted[i]
 * 
 * 		return calculate_r_squared(exp_c, pred_c, n)             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(exp_c)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(calculate_r_squared(__pyx_v_exp_c, __pyx_v_pred_c, __pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 782, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":784
 * 		return calculate_r_squared(exp_c, pred_c, n)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(pred_c)
 * 
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ( unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_exp_c);

        /* "pyroxa/pybindings.pyx":785
 * 	finally:
 * 		free(exp_c)
 * 		free(pred_c)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_rmse(experimental, predicted):
*/
        free(__pyx_v_pred_c);
      }
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":784
 * 		return calculate_r_squared(exp_c, pred_c, n)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(pred_c)
 * 
*/
      free(__pyx_v_exp_c);

      /* "pyroxa/pybindings.pyx":785
 * 	finally:
 * 		free(exp_c)
 * 		free(pred_c)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_rmse(experimental, predicted):
*/
      free(__pyx_v_pred_c);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":771
 * 		free(y_data_c)
 * 
 * def py_calculate_r_squared(experimental, predicted):             # <<<<<<<<<<<<<<
 * 	"""Calculate R-squared coefficient of determination"""
 * 	cdef int n = len(experimental)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_r_squared", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":787
 * 		free(pred_c)
 * 
 * def py_calculate_rmse(experimental, predicted):             # <<<<<<<<<<<<<<
 * 	"""Calculate Root Mean Square Error"""
 * 	cdef int n = len(experimental)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_59py_calculate_rmse(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_58py_calculate_rmse, "py_calculate_rmse(experimental, predicted)\n\nCalculate Root Mean Square Error");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_59py_calculate_rmse = {"py_calculate_rmse", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_59py_calculate_rmse, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_58py_calculate_rmse};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_59py_calculate_rmse(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_experimental = 0;
  PyObject *__pyx_v_predicted = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_rmse (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_experimental,&__pyx_mstate_global->__pyx_n_u_predicted,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 787, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 787, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 787, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_calculate_rmse", 0) < 0) __PYX_ERR(0, 787, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_calculate_rmse", 1, 2, 2, i); __PYX_ERR(0, 787, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 787, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 787, __pyx_L3_error)
    }
    __pyx_v_experimental = values[0];
    __pyx_v_predicted = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_rmse", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 787, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_rmse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_58py_calculate_rmse(__pyx_self, __pyx_v_experimental, __pyx_v_predicted);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_58py_calculate_rmse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental, PyObject *__pyx_v_predicted) {
  int __pyx_v_n;
  double *__pyx_v_exp_c;
  double *__pyx_v_pred_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_rmse", 0);

  /* "pyroxa/pybindings.pyx":789
 * def py_calculate_rmse(experimental, predicted):
 * 	"""Calculate Root Mean Square Error"""
 * 	cdef int n = len(experimental)             # <<<<<<<<<<<<<<
 * 	cdef double* exp_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_experimental); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 789, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":790
 * 	"""Calculate Root Mean Square Error"""
 * 	cdef int n = len(experimental)
 * 	cdef double* exp_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))
 * 
*/
  __pyx_v_exp_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":791
 * 	cdef int n = len(experimental)
 * 	cdef double* exp_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_pred_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":793
 * 	cdef double* pred_c = <double*>malloc(n * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(n):
 * 			exp_c[i] = experimental[i]
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":794
 * 
 * 	try:
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			exp_c[i] = experimental[i]
 * 			pred_c[i] = predicted[i]
*/
    __pyx_t_2 = __pyx_v_n;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":795
 * 	try:
 * 		for i in range(n):
 * 			exp_c[i] = experimental[i]             # <<<<<<<<<<<<<<
 * 			pred_c[i] = predicted[i]
 * 
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_experimental, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 795, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 795, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_exp_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":796
 * 		for i in range(n):
 * 			exp_c[i] = experimental[i]
 * 			pred_c[i] = predicted[i]             # <<<<<<<<<<<<<<
 * 
 * 		return calculate_rmse(exp_c, pred_c, n)
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_predicted, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 796, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 796, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_pred_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":798
 * 			pred_c[i] = predicted[i]
 * 
 * 		return calculate_rmse(exp_c, pred_c, n)             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(exp_c)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(calculate_rmse(__pyx_v_exp_c, __pyx_v_pred_c, __pyx_v_n)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 798, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":800
 * 		return calculate_rmse(exp_c, pred_c, n)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(pred_c)
 * 
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ( unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_exp_c);

        /* "pyroxa/pybindings.pyx":801
 * 	finally:
 * 		free(exp_c)
 * 		free(pred_c)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_aic(experimental, predicted, int nparams):
*/
        free(__pyx_v_pred_c);
      }
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":800
 * 		return calculate_rmse(exp_c, pred_c, n)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(pred_c)
 * 
*/
      free(__pyx_v_exp_c);

      /* "pyroxa/pybindings.pyx":801
 * 	finally:
 * 		free(exp_c)
 * 		free(pred_c)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_aic(experimental, predicted, int nparams):
*/
      free(__pyx_v_pred_c);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":787
 * 		free(pred_c)
 * 
 * def py_calculate_rmse(experimental, predicted):             # <<<<<<<<<<<<<<
 * 	"""Calculate Root Mean Square Error"""
 * 	cdef int n = len(experimental)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_rmse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":803
 * 		free(pred_c)
 * 
 * def py_calculate_aic(experimental, predicted, int nparams):             # <<<<<<<<<<<<<<
 * 	"""Calculate Akaike Information Criterion"""
 * 	cdef int ndata = len(experimental)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_61py_calculate_aic(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_60py_calculate_aic, "py_calculate_aic(experimental, predicted, int nparams)\n\nCalculate Akaike Information Criterion");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_61py_calculate_aic = {"py_calculate_aic", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_61py_calculate_aic, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_60py_calculate_aic};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_61py_calculate_aic(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_experimental = 0;
  PyObject *__pyx_v_predicted = 0;
  int __pyx_v_nparams;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_aic (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_experimental,&__pyx_mstate_global->__pyx_n_u_predicted,&__pyx_mstate_global->__pyx_n_u_nparams,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 803, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 803, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 803, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 803, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_calculate_aic", 0) < 0) __PYX_ERR(0, 803, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_calculate_aic", 1, 3, 3, i); __PYX_ERR(0, 803, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 803, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 803, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 803, __pyx_L3_error)
    }
    __pyx_v_experimental = values[0];
    __pyx_v_predicted = values[1];
    __pyx_v_nparams = __Pyx_PyLong_As_int(values[2]); if (unlikely((__pyx_v_nparams == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 803, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_aic", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 803, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_aic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_60py_calculate_aic(__pyx_self, __pyx_v_experimental, __pyx_v_predicted, __pyx_v_nparams);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_60py_calculate_aic(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental, PyObject *__pyx_v_predicted, int __pyx_v_nparams) {
  int __pyx_v_ndata;
  double *__pyx_v_exp_c;
  double *__pyx_v_pred_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_aic", 0);

  /* "pyroxa/pybindings.pyx":805
 * def py_calculate_aic(experimental, predicted, int nparams):
 * 	"""Calculate Akaike Information Criterion"""
 * 	cdef int ndata = len(experimental)             # <<<<<<<<<<<<<<
 * 	cdef double* exp_c = <double*>malloc(ndata * sizeof(double))
 * 	cdef double* pred_c = <double*>malloc(ndata * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_experimental); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 805, __pyx_L1_error)
  __pyx_v_ndata = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":806
 * 	"""Calculate Akaike Information Criterion"""
 * 	cdef int ndata = len(experimental)
 * 	cdef double* exp_c = <double*>malloc(ndata * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* pred_c = <double*>malloc(ndata * sizeof(double))
 * 
*/
  __pyx_v_exp_c = ((double *)malloc((__pyx_v_ndata * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":807
 * 	cdef int ndata = len(experimental)
 * 	cdef double* exp_c = <double*>malloc(ndata * sizeof(double))
 * 	cdef double* pred_c = <double*>malloc(ndata * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_pred_c = ((double *)malloc((__pyx_v_ndata * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":809
 * 	cdef double* pred_c = <double*>malloc(ndata * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(ndata):
 * 			exp_c[i] = experimental[i]
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":810
 * 
 * 	try:
 * 		for i in range(ndata):             # <<<<<<<<<<<<<<
 * 			exp_c[i] = experimental[i]
 * 			pred_c[i] = predicted[i]
*/
    __pyx_t_2 = __pyx_v_ndata;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":811
 * 	try:
 * 		for i in range(ndata):
 * 			exp_c[i] = experimental[i]             # <<<<<<<<<<<<<<
 * 			pred_c[i] = predicted[i]
 * 
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_experimental, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 811, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 811, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_exp_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":812
 * 		for i in range(ndata):
 * 			exp_c[i] = experimental[i]
 * 			pred_c[i] = predicted[i]             # <<<<<<<<<<<<<<
 * 
 * 		return calculate_aic(exp_c, pred_c, ndata, nparams)
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_predicted, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 812, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 812, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_pred_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":814
 * 			pred_c[i] = predicted[i]
 * 
 * 		return calculate_aic(exp_c, pred_c, ndata, nparams)             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(exp_c)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(calculate_aic(__pyx_v_exp_c, __pyx_v_pred_c, __pyx_v_ndata, __pyx_v_nparams)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 814, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":816
 * 		return calculate_aic(exp_c, pred_c, ndata, nparams)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(pred_c)
 * 
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ( unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_exp_c);

        /* "pyroxa/pybindings.pyx":817
 * 	finally:
 * 		free(exp_c)
 * 		free(pred_c)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 2: Additional kinetic functions
*/
        free(__pyx_v_pred_c);
      }
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":816
 * 		return calculate_aic(exp_c, pred_c, ndata, nparams)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(pred_c)
 * 
*/
      free(__pyx_v_exp_c);

      /* "pyroxa/pybindings.pyx":817
 * 	finally:
 * 		free(exp_c)
 * 		free(pred_c)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 2: Additional kinetic functions
*/
      free(__pyx_v_pred_c);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":803
 * 		free(pred_c)
 * 
 * def py_calculate_aic(experimental, predicted, int nparams):             # <<<<<<<<<<<<<<
 * 	"""Calculate Akaike Information Criterion"""
 * 	cdef int ndata = len(experimental)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_aic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":820
 * 
 * # BATCH 2: Additional kinetic functions
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):             # <<<<<<<<<<<<<<
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_63py_michaelis_menten_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_62py_michaelis_menten_rate, "py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc)\n\nCalculate Michaelis-Menten enzyme kinetics rate");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_63py_michaelis_menten_rate = {"py_michaelis_menten_rate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_63py_michaelis_menten_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_62py_michaelis_menten_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_63py_michaelis_menten_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_Vmax;
  double __pyx_v_Km;
  double __pyx_v_substrate_conc;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_michaelis_menten_rate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_Vmax,&__pyx_mstate_global->__pyx_n_u_Km,&__pyx_mstate_global->__pyx_n_u_substrate_conc,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 820, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 820, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 820, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 820, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_michaelis_menten_rate", 0) < 0) __PYX_ERR(0, 820, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_michaelis_menten_rate", 1, 3, 3, i); __PYX_ERR(0, 820, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 820, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 820, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 820, __pyx_L3_error)
    }
    __pyx_v_Vmax = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Vmax == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 820, __pyx_L3_error)
    __pyx_v_Km = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Km == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 820, __pyx_L3_error)
    __pyx_v_substrate_conc = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_substrate_conc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 820, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_michaelis_menten_rate", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 820, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_michaelis_menten_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_62py_michaelis_menten_rate(__pyx_self, __pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_62py_michaelis_menten_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_michaelis_menten_rate", 0);

  /* "pyroxa/pybindings.pyx":822
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)             # <<<<<<<<<<<<<<
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(michaelis_menten_rate(__pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":820
 * 
 * # BATCH 2: Additional kinetic functions
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):             # <<<<<<<<<<<<<<
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_michaelis_menten_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":824
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,             # <<<<<<<<<<<<<<
 * 								  double inhibitor_conc, double Ki):
 * 	"""Calculate rate with competitive inhibition"""
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_65py_competitive_inhibition_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_64py_competitive_inhibition_rate, "py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc, double inhibitor_conc, double Ki)\n\nCalculate rate with competitive inhibition");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_65py_competitive_inhibition_rate = {"py_competitive_inhibition_rate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_65py_competitive_inhibition_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_64py_competitive_inhibition_rate};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_65py_competitive_inhibition_rate(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_Vmax;
  double __pyx_v_Km;
  double __pyx_v_substrate_conc;
  double __pyx_v_inhibitor_conc;
  double __pyx_v_Ki;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_competitive_inhibition_rate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_Vmax,&__pyx_mstate_global->__pyx_n_u_Km,&__pyx_mstate_global->__pyx_n_u_substrate_conc,&__pyx_mstate_global->__pyx_n_u_inhibitor_conc,&__pyx_mstate_global->__pyx_n_u_Ki,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 824, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 824, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 824, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 824, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 824, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 824, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_competitive_inhibition_rate", 0) < 0) __PYX_ERR(0, 824, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 5; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_competitive_inhibition_rate", 1, 5, 5, i); __PYX_ERR(0, 824, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 824, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 824, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 824, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 824, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 824, __pyx_L3_error)
    }
    __pyx_v_Vmax = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Vmax == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 824, __pyx_L3_error)
    __pyx_v_Km = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Km == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 824, __pyx_L3_error)
    __pyx_v_substrate_conc = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_substrate_conc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 824, __pyx_L3_error)
    __pyx_v_inhibitor_conc = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_inhibitor_conc == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 825, __pyx_L3_error)
    __pyx_v_Ki = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_Ki == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 825, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_competitive_inhibition_rate", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 824, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_competitive_inhibition_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_64py_competitive_inhibition_rate(__pyx_self, __pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc, __pyx_v_inhibitor_conc, __pyx_v_Ki);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_64py_competitive_inhibition_rate(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_Vmax, double __pyx_v_Km, double __pyx_v_substrate_conc, double __pyx_v_inhibitor_conc, double __pyx_v_Ki) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_competitive_inhibition_rate", 0);

  /* "pyroxa/pybindings.pyx":827
 * 								  double inhibitor_conc, double Ki):
 * 	"""Calculate rate with competitive inhibition"""
 * 	return competitive_inhibition_rate(Vmax, Km, substrate_conc, inhibitor_conc, Ki)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 5: Core thermodynamic functions
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(competitive_inhibition_rate(__pyx_v_Vmax, __pyx_v_Km, __pyx_v_substrate_conc, __pyx_v_inhibitor_conc, __pyx_v_Ki)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":824
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,             # <<<<<<<<<<<<<<
 * 								  double inhibitor_conc, double Ki):
 * 	"""Calculate rate with competitive inhibition"""
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_competitive_inhibition_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":830
 * 
 * # BATCH 5: Core thermodynamic functions
 * def py_enthalpy_c(double cp, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate enthalpy using constant pressure heat capacity"""
 * 	return enthalpy_c(cp, T)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_67py_enthalpy_c(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_66py_enthalpy_c, "py_enthalpy_c(double cp, double T)\n\nCalculate enthalpy using constant pressure heat capacity");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_67py_enthalpy_c = {"py_enthalpy_c", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_67py_enthalpy_c, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_66py_enthalpy_c};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_67py_enthalpy_c(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_cp;
  double __pyx_v_T;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_enthalpy_c (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_cp,&__pyx_mstate_global->__pyx_n_u_T,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 830, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 830, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 830, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_enthalpy_c", 0) < 0) __PYX_ERR(0, 830, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_enthalpy_c", 1, 2, 2, i); __PYX_ERR(0, 830, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 830, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 830, __pyx_L3_error)
    }
    __pyx_v_cp = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_cp == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 830, __pyx_L3_error)
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 830, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_enthalpy_c", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 830, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_enthalpy_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_66py_enthalpy_c(__pyx_self, __pyx_v_cp, __pyx_v_T);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_66py_enthalpy_c(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_cp, double __pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_enthalpy_c", 0);

  /* "pyroxa/pybindings.pyx":832
 * def py_enthalpy_c(double cp, double T):
 * 	"""Calculate enthalpy using constant pressure heat capacity"""
 * 	return enthalpy_c(cp, T)             # <<<<<<<<<<<<<<
 * 
 * def py_entropy_c(double cp, double T):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(enthalpy_c(__pyx_v_cp, __pyx_v_T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":830
 * 
 * # BATCH 5: Core thermodynamic functions
 * def py_enthalpy_c(double cp, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate enthalpy using constant pressure heat capacity"""
 * 	return enthalpy_c(cp, T)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_enthalpy_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":834
 * 	return enthalpy_c(cp, T)
 * 
 * def py_entropy_c(double cp, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate entropy using constant pressure heat capacity"""
 * 	return entropy_c(cp, T)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_69py_entropy_c(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_68py_entropy_c, "py_entropy_c(double cp, double T)\n\nCalculate entropy using constant pressure heat capacity");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_69py_entropy_c = {"py_entropy_c", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_69py_entropy_c, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_68py_entropy_c};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_69py_entropy_c(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_cp;
  double __pyx_v_T;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_entropy_c (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_cp,&__pyx_mstate_global->__pyx_n_u_T,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 834, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 834, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 834, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_entropy_c", 0) < 0) __PYX_ERR(0, 834, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_entropy_c", 1, 2, 2, i); __PYX_ERR(0, 834, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 834, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 834, __pyx_L3_error)
    }
    __pyx_v_cp = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_cp == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L3_error)
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_entropy_c", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 834, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_entropy_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_68py_entropy_c(__pyx_self, __pyx_v_cp, __pyx_v_T);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_68py_entropy_c(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_cp, double __pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_entropy_c", 0);

  /* "pyroxa/pybindings.pyx":836
 * def py_entropy_c(double cp, double T):
 * 	"""Calculate entropy using constant pressure heat capacity"""
 * 	return entropy_c(cp, T)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 6: Analytical solutions
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(entropy_c(__pyx_v_cp, __pyx_v_T)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":834
 * 	return enthalpy_c(cp, T)
 * 
 * def py_entropy_c(double cp, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate entropy using constant pressure heat capacity"""
 * 	return entropy_c(cp, T)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyroxa._pybindings.py_entropy_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":839
 * 
 * # BATCH 6: Analytical solutions
 * def py_analytical_first_order(double k, double A0, double time_span, double dt, int max_len=1000):             # <<<<<<<<<<<<<<
 * 	"""Analytical solution for A -> B (first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_71py_analytical_first_order(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_70py_analytical_first_order, "py_analytical_first_order(double k, double A0, double time_span, double dt, int max_len=1000)\n\nAnalytical solution for A -> B (first order)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_71py_analytical_first_order = {"py_analytical_first_order", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_71py_analytical_first_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_70py_analytical_first_order};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_71py_analytical_first_order(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_k;
  double __pyx_v_A0;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_v_max_len;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_analytical_first_order (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_k,&__pyx_mstate_global->__pyx_n_u_A0,&__pyx_mstate_global->__pyx_n_u_time_span,&__pyx_mstate_global->__pyx_n_u_dt,&__pyx_mstate_global->__pyx_n_u_max_len,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 839, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 839, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 839, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 839, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 839, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 839, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_analytical_first_order", 0) < 0) __PYX_ERR(0, 839, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 4; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_analytical_first_order", 0, 4, 5, i); __PYX_ERR(0, 839, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 839, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 839, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 839, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 839, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 839, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_k == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
    __pyx_v_A0 = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_A0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
    __pyx_v_time_span = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
    __pyx_v_dt = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_max_len = __Pyx_PyLong_As_int(values[4]); if (unlikely((__pyx_v_max_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
    } else {
      __pyx_v_max_len = ((int)((int)0x3E8));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_analytical_first_order", 0, 4, 5, __pyx_nargs); __PYX_ERR(0, 839, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_analytical_first_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_70py_analytical_first_order(__pyx_self, __pyx_v_k, __pyx_v_A0, __pyx_v_time_span, __pyx_v_dt, __pyx_v_max_len);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_70py_analytical_first_order(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k, double __pyx_v_A0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len) {
  double *__pyx_v_times;
  double *__pyx_v_A_out;
  double *__pyx_v_B_out;
  int __pyx_v_written;
  PyObject *__pyx_v_times_list = NULL;
  PyObject *__pyx_v_A_list = NULL;
  PyObject *__pyx_v_B_list = NULL;
  int __pyx_9genexpr10__pyx_v_i;
  int __pyx_9genexpr11__pyx_v_i;
  int __pyx_9genexpr12__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  char const *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_analytical_first_order", 0);

  /* "pyroxa/pybindings.pyx":841
 * def py_analytical_first_order(double k, double A0, double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A -> B (first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_v_times = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":842
 * 	"""Analytical solution for A -> B (first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 * 
*/
  __pyx_v_A_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":843
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_B_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":845
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		written = analytical_first_order(k, A0, time_span, dt, times, A_out, B_out, max_len)
 * 		if written < 0:
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":846
 * 
 * 	try:
 * 		written = analytical_first_order(k, A0, time_span, dt, times, A_out, B_out, max_len)             # <<<<<<<<<<<<<<
 * 		if written < 0:
 * 			raise RuntimeError("Analytical first order solution failed")
*/
    __pyx_v_written = analytical_first_order(__pyx_v_k, __pyx_v_A0, __pyx_v_time_span, __pyx_v_dt, __pyx_v_times, __pyx_v_A_out, __pyx_v_B_out, __pyx_v_max_len);

    /* "pyroxa/pybindings.pyx":847
 * 	try:
 * 		written = analytical_first_order(k, A0, time_span, dt, times, A_out, B_out, max_len)
 * 		if written < 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Analytical first order solution failed")
 * 
*/
    __pyx_t_1 = (__pyx_v_written < 0);
    if (unlikely(__pyx_t_1)) {

      /* "pyroxa/pybindings.pyx":848
 * 		written = analytical_first_order(k, A0, time_span, dt, times, A_out, B_out, max_len)
 * 		if written < 0:
 * 			raise RuntimeError("Analytical first order solution failed")             # <<<<<<<<<<<<<<
 * 
 * 		# Convert to Python lists
*/
      __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_builtin_RuntimeError);
      __pyx_t_4 = __pyx_builtin_RuntimeError; 
      __pyx_t_5 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_kp_u_Analytical_first_order_solution};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 848, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 848, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":847
 * 	try:
 * 		written = analytical_first_order(k, A0, time_span, dt, times, A_out, B_out, max_len)
 * 		if written < 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Analytical first order solution failed")
 * 
*/
    }

    /* "pyroxa/pybindings.pyx":851
 * 
 * 		# Convert to Python lists
 * 		times_list = [times[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 		A_list = [A_out[i] for i in range(written)]
 * 		B_list = [B_out[i] for i in range(written)]
*/
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 851, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __pyx_v_written;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_9genexpr10__pyx_v_i = __pyx_t_8;
        __pyx_t_4 = PyFloat_FromDouble((__pyx_v_times[__pyx_9genexpr10__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 851, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 851, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    } /* exit inner scope */
    __pyx_v_times_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":852
 * 		# Convert to Python lists
 * 		times_list = [times[i] for i in range(written)]
 * 		A_list = [A_out[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 		B_list = [B_out[i] for i in range(written)]
 * 
*/
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 852, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __pyx_v_written;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_9genexpr11__pyx_v_i = __pyx_t_8;
        __pyx_t_4 = PyFloat_FromDouble((__pyx_v_A_out[__pyx_9genexpr11__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 852, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 852, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    } /* exit inner scope */
    __pyx_v_A_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":853
 * 		times_list = [times[i] for i in range(written)]
 * 		A_list = [A_out[i] for i in range(written)]
 * 		B_list = [B_out[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 
 * 		return {
*/
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 853, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __pyx_v_written;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_9genexpr12__pyx_v_i = __pyx_t_8;
        __pyx_t_4 = PyFloat_FromDouble((__pyx_v_B_out[__pyx_9genexpr12__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 853, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 853, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    } /* exit inner scope */
    __pyx_v_B_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":855
 * 		B_list = [B_out[i] for i in range(written)]
 * 
 * 		return {             # <<<<<<<<<<<<<<
 * 			'times': times_list,
 * 			'A': A_list,
*/
    __Pyx_XDECREF(__pyx_r);

    /* "pyroxa/pybindings.pyx":856
 * 
 * 		return {
 * 			'times': times_list,             # <<<<<<<<<<<<<<
 * 			'A': A_list,
 * 			'B': B_list
*/
    __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 856, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_times, __pyx_v_times_list) < 0) __PYX_ERR(0, 856, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":857
 * 		return {
 * 			'times': times_list,
 * 			'A': A_list,             # <<<<<<<<<<<<<<
 * 			'B': B_list
 * 		}
*/
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_A, __pyx_v_A_list) < 0) __PYX_ERR(0, 856, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":858
 * 			'times': times_list,
 * 			'A': A_list,
 * 			'B': B_list             # <<<<<<<<<<<<<<
 * 		}
 * 	finally:
*/
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_B, __pyx_v_B_list) < 0) __PYX_ERR(0, 856, __pyx_L4_error)
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":861
 * 		}
 * 	finally:
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(A_out)
 * 		free(B_out)
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if ( unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __pyx_t_6 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
      {
        free(__pyx_v_times);

        /* "pyroxa/pybindings.pyx":862
 * 	finally:
 * 		free(times)
 * 		free(A_out)             # <<<<<<<<<<<<<<
 * 		free(B_out)
 * 
*/
        free(__pyx_v_A_out);

        /* "pyroxa/pybindings.pyx":863
 * 		free(times)
 * 		free(A_out)
 * 		free(B_out)             # <<<<<<<<<<<<<<
 * 
 * def py_analytical_reversible_first_order(double kf, double kr, double A0, double B0,
*/
        free(__pyx_v_B_out);
      }
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_9;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_15 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":861
 * 		}
 * 	finally:
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(A_out)
 * 		free(B_out)
*/
      free(__pyx_v_times);

      /* "pyroxa/pybindings.pyx":862
 * 	finally:
 * 		free(times)
 * 		free(A_out)             # <<<<<<<<<<<<<<
 * 		free(B_out)
 * 
*/
      free(__pyx_v_A_out);

      /* "pyroxa/pybindings.pyx":863
 * 		free(times)
 * 		free(A_out)
 * 		free(B_out)             # <<<<<<<<<<<<<<
 * 
 * def py_analytical_reversible_first_order(double kf, double kr, double A0, double B0,
*/
      free(__pyx_v_B_out);
      __pyx_r = __pyx_t_15;
      __pyx_t_15 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":839
 * 
 * # BATCH 6: Analytical solutions
 * def py_analytical_first_order(double k, double A0, double time_span, double dt, int max_len=1000):             # <<<<<<<<<<<<<<
 * 	"""Analytical solution for A -> B (first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyroxa._pybindings.py_analytical_first_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_times_list);
  __Pyx_XDECREF(__pyx_v_A_list);
  __Pyx_XDECREF(__pyx_v_B_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":865
 * 		free(B_out)
 * 
 * def py_analytical_reversible_first_order(double kf, double kr, double A0, double B0,             # <<<<<<<<<<<<<<
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A <=> B (reversible first order)"""
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_73py_analytical_reversible_first_order(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_72py_analytical_reversible_first_order, "py_analytical_reversible_first_order(double kf, double kr, double A0, double B0, double time_span, double dt, int max_len=1000)\n\nAnalytical solution for A <=> B (reversible first order)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_73py_analytical_reversible_first_order = {"py_analytical_reversible_first_order", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_73py_analytical_reversible_first_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_72py_analytical_reversible_first_order};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_73py_analytical_reversible_first_order(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_kf;
  double __pyx_v_kr;
  double __pyx_v_A0;
  double __pyx_v_B0;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_v_max_len;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_analytical_reversible_first_order (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_kf,&__pyx_mstate_global->__pyx_n_u_kr,&__pyx_mstate_global->__pyx_n_u_A0,&__pyx_mstate_global->__pyx_n_u_B0,&__pyx_mstate_global->__pyx_n_u_time_span,&__pyx_mstate_global->__pyx_n_u_dt,&__pyx_mstate_global->__pyx_n_u_max_len,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 865, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  7:
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 865, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 865, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 865, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 865, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 865, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 865, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 865, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_analytical_reversible_first_order", 0) < 0) __PYX_ERR(0, 865, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 6; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_analytical_reversible_first_order", 0, 6, 7, i); __PYX_ERR(0, 865, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  7:
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 865, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 865, __pyx_L3_error)
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 865, __pyx_L3_error)
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 865, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 865, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 865, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 865, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_kf = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_kf == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L3_error)
    __pyx_v_kr = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_kr == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L3_error)
    __pyx_v_A0 = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_A0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L3_error)
    __pyx_v_B0 = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_B0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L3_error)
    __pyx_v_time_span = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L3_error)
    __pyx_v_dt = __Pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L3_error)
    if (values[6]) {
      __pyx_v_max_len = __Pyx_PyLong_As_int(values[6]); if (unlikely((__pyx_v_max_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L3_error)
    } else {
      __pyx_v_max_len = ((int)((int)0x3E8));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_analytical_reversible_first_order", 0, 6, 7, __pyx_nargs); __PYX_ERR(0, 865, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_analytical_reversible_first_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_72py_analytical_reversible_first_order(__pyx_self, __pyx_v_kf, __pyx_v_kr, __pyx_v_A0, __pyx_v_B0, __pyx_v_time_span, __pyx_v_dt, __pyx_v_max_len);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_72py_analytical_reversible_first_order(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_kf, double __pyx_v_kr, double __pyx_v_A0, double __pyx_v_B0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len) {
  double *__pyx_v_times;
  double *__pyx_v_A_out;
  double *__pyx_v_B_out;
  int __pyx_v_written;
  PyObject *__pyx_v_times_list = NULL;
  PyObject *__pyx_v_A_list = NULL;
  PyObject *__pyx_v_B_list = NULL;
  int __pyx_9genexpr13__pyx_v_i;
  int __pyx_9genexpr14__pyx_v_i;
  int __pyx_9genexpr15__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  char const *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_analytical_reversible_first_order", 0);

  /* "pyroxa/pybindings.pyx":868
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A <=> B (reversible first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_v_times = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":869
 * 	"""Analytical solution for A <=> B (reversible first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 * 
*/
  __pyx_v_A_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":870
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_B_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":872
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		written = analytical_reversible_first_order(kf, kr, A0, B0, time_span, dt,
 * 												   times, A_out, B_out, max_len)
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":873
 * 
 * 	try:
 * 		written = analytical_reversible_first_order(kf, kr, A0, B0, time_span, dt,             # <<<<<<<<<<<<<<
 * 												   times, A_out, B_out, max_len)
 * 		if written < 0:
*/
    __pyx_v_written = analytical_reversible_first_order(__pyx_v_kf, __pyx_v_kr, __pyx_v_A0, __pyx_v_B0, __pyx_v_time_span, __pyx_v_dt, __pyx_v_times, __pyx_v_A_out, __pyx_v_B_out, __pyx_v_max_len);

    /* "pyroxa/pybindings.pyx":875
 * 		written = analytical_reversible_first_order(kf, kr, A0, B0, time_span, dt,
 * 												   times, A_out, B_out, max_len)
 * 		if written < 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Analytical reversible first order solution failed")
 * 
*/
    __pyx_t_1 = (__pyx_v_written < 0);
    if (unlikely(__pyx_t_1)) {

      /* "pyroxa/pybindings.pyx":876
 * 												   times, A_out, B_out, max_len)
 * 		if written < 0:
 * 			raise RuntimeError("Analytical reversible first order solution failed")             # <<<<<<<<<<<<<<
 * 
 * 		# Convert to Python lists
*/
      __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_builtin_RuntimeError);
      __pyx_t_4 = __pyx_builtin_RuntimeError; 
      __pyx_t_5 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_kp_u_Analytical_reversible_first_orde};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 876, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 876, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":875
 * 		written = analytical_reversible_first_order(kf, kr, A0, B0, time_span, dt,
 * 												   times, A_out, B_out, max_len)
 * 		if written < 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Analytical reversible first order solution failed")
 * 
*/
    }

    /* "pyroxa/pybindings.pyx":879
 * 
 * 		# Convert to Python lists
 * 		times_list = [times[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 		A_list = [A_out[i] for i in range(written)]
 * 		B_list = [B_out[i] for i in range(written)]
*/
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 879, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __pyx_v_written;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_9genexpr13__pyx_v_i = __pyx_t_8;
        __pyx_t_4 = PyFloat_FromDouble((__pyx_v_times[__pyx_9genexpr13__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 879, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    } /* exit inner scope */
    __pyx_v_times_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":880
 * 		# Convert to Python lists
 * 		times_list = [times[i] for i in range(written)]
 * 		A_list = [A_out[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 		B_list = [B_out[i] for i in range(written)]
 * 
*/
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 880, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __pyx_v_written;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_9genexpr14__pyx_v_i = __pyx_t_8;
        __pyx_t_4 = PyFloat_FromDouble((__pyx_v_A_out[__pyx_9genexpr14__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 880, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 880, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    } /* exit inner scope */
    __pyx_v_A_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":881
 * 		times_list = [times[i] for i in range(written)]
 * 		A_list = [A_out[i] for i in range(written)]
 * 		B_list = [B_out[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 
 * 		return {
*/
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 881, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __pyx_v_written;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_9genexpr15__pyx_v_i = __pyx_t_8;
        __pyx_t_4 = PyFloat_FromDouble((__pyx_v_B_out[__pyx_9genexpr15__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 881, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 881, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    } /* exit inner scope */
    __pyx_v_B_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":883
 * 		B_list = [B_out[i] for i in range(written)]
 * 
 * 		return {             # <<<<<<<<<<<<<<
 * 			'times': times_list,
 * 			'A': A_list,
*/
    __Pyx_XDECREF(__pyx_r);

    /* "pyroxa/pybindings.pyx":884
 * 
 * 		return {
 * 			'times': times_list,             # <<<<<<<<<<<<<<
 * 			'A': A_list,
 * 			'B': B_list
*/
    __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 884, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_times, __pyx_v_times_list) < 0) __PYX_ERR(0, 884, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":885
 * 		return {
 * 			'times': times_list,
 * 			'A': A_list,             # <<<<<<<<<<<<<<
 * 			'B': B_list
 * 		}
*/
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_A, __pyx_v_A_list) < 0) __PYX_ERR(0, 884, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":886
 * 			'times': times_list,
 * 			'A': A_list,
 * 			'B': B_list             # <<<<<<<<<<<<<<
 * 		}
 * 	finally:
*/
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_B, __pyx_v_B_list) < 0) __PYX_ERR(0, 884, __pyx_L4_error)
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":889
 * 		}
 * 	finally:
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(A_out)
 * 		free(B_out)
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if ( unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __pyx_t_6 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
      {
        free(__pyx_v_times);

        /* "pyroxa/pybindings.pyx":890
 * 	finally:
 * 		free(times)
 * 		free(A_out)             # <<<<<<<<<<<<<<
 * 		free(B_out)
 * 
*/
        free(__pyx_v_A_out);

        /* "pyroxa/pybindings.pyx":891
 * 		free(times)
 * 		free(A_out)
 * 		free(B_out)             # <<<<<<<<<<<<<<
 * 
 * def py_analytical_consecutive_first_order(double k1, double k2, double A0,
*/
        free(__pyx_v_B_out);
      }
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_9;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_15 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":889
 * 		}
 * 	finally:
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(A_out)
 * 		free(B_out)
*/
      free(__pyx_v_times);

      /* "pyroxa/pybindings.pyx":890
 * 	finally:
 * 		free(times)
 * 		free(A_out)             # <<<<<<<<<<<<<<
 * 		free(B_out)
 * 
*/
      free(__pyx_v_A_out);

      /* "pyroxa/pybindings.pyx":891
 * 		free(times)
 * 		free(A_out)
 * 		free(B_out)             # <<<<<<<<<<<<<<
 * 
 * def py_analytical_consecutive_first_order(double k1, double k2, double A0,
*/
      free(__pyx_v_B_out);
      __pyx_r = __pyx_t_15;
      __pyx_t_15 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":865
 * 		free(B_out)
 * 
 * def py_analytical_reversible_first_order(double kf, double kr, double A0, double B0,             # <<<<<<<<<<<<<<
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A <=> B (reversible first order)"""
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyroxa._pybindings.py_analytical_reversible_first_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_times_list);
  __Pyx_XDECREF(__pyx_v_A_list);
  __Pyx_XDECREF(__pyx_v_B_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":893
 * 		free(B_out)
 * 
 * def py_analytical_consecutive_first_order(double k1, double k2, double A0,             # <<<<<<<<<<<<<<
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A -> B -> C (consecutive first order)"""
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_75py_analytical_consecutive_first_order(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_74py_analytical_consecutive_first_order, "py_analytical_consecutive_first_order(double k1, double k2, double A0, double time_span, double dt, int max_len=1000)\n\nAnalytical solution for A -> B -> C (consecutive first order)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_75py_analytical_consecutive_first_order = {"py_analytical_consecutive_first_order", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_75py_analytical_consecutive_first_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_74py_analytical_consecutive_first_order};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_75py_analytical_consecutive_first_order(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_k1;
  double __pyx_v_k2;
  double __pyx_v_A0;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_v_max_len;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_analytical_consecutive_first_order (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_k1,&__pyx_mstate_global->__pyx_n_u_k2,&__pyx_mstate_global->__pyx_n_u_A0,&__pyx_mstate_global->__pyx_n_u_time_span,&__pyx_mstate_global->__pyx_n_u_dt,&__pyx_mstate_global->__pyx_n_u_max_len,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 893, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 893, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 893, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 893, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 893, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 893, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 893, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_analytical_consecutive_first_order", 0) < 0) __PYX_ERR(0, 893, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 5; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_analytical_consecutive_first_order", 0, 5, 6, i); __PYX_ERR(0, 893, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 893, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 893, __pyx_L3_error)
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 893, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 893, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 893, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 893, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k1 = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_k1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L3_error)
    __pyx_v_k2 = __Pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_k2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L3_error)
    __pyx_v_A0 = __Pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_A0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L3_error)
    __pyx_v_time_span = __Pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L3_error)
    __pyx_v_dt = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_max_len = __Pyx_PyLong_As_int(values[5]); if (unlikely((__pyx_v_max_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 894, __pyx_L3_error)
    } else {
      __pyx_v_max_len = ((int)((int)0x3E8));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_analytical_consecutive_first_order", 0, 5, 6, __pyx_nargs); __PYX_ERR(0, 893, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_analytical_consecutive_first_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_74py_analytical_consecutive_first_order(__pyx_self, __pyx_v_k1, __pyx_v_k2, __pyx_v_A0, __pyx_v_time_span, __pyx_v_dt, __pyx_v_max_len);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_74py_analytical_consecutive_first_order(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_k1, double __pyx_v_k2, double __pyx_v_A0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len) {
  double *__pyx_v_times;
  double *__pyx_v_A_out;
  double *__pyx_v_B_out;
  double *__pyx_v_C_out;
  int __pyx_v_written;
  PyObject *__pyx_v_times_list = NULL;
  PyObject *__pyx_v_A_list = NULL;
  PyObject *__pyx_v_B_list = NULL;
  PyObject *__pyx_v_C_list = NULL;
  int __pyx_9genexpr16__pyx_v_i;
  int __pyx_9genexpr17__pyx_v_i;
  int __pyx_9genexpr18__pyx_v_i;
  int __pyx_9genexpr19__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  char const *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_analytical_consecutive_first_order", 0);

  /* "pyroxa/pybindings.pyx":896
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A -> B -> C (consecutive first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_v_times = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":897
 * 	"""Analytical solution for A -> B -> C (consecutive first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* C_out = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_v_A_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":898
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* C_out = <double*>malloc(max_len * sizeof(double))
 * 
*/
  __pyx_v_B_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":899
 * 	cdef double* A_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* B_out = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* C_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_C_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":901
 * 	cdef double* C_out = <double*>malloc(max_len * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		written = analytical_consecutive_first_order(k1, k2, A0, time_span, dt,
 * 													times, A_out, B_out, C_out, max_len)
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":902
 * 
 * 	try:
 * 		written = analytical_consecutive_first_order(k1, k2, A0, time_span, dt,             # <<<<<<<<<<<<<<
 * 													times, A_out, B_out, C_out, max_len)
 * 		if written < 0:
*/
    __pyx_v_written = analytical_consecutive_first_order(__pyx_v_k1, __pyx_v_k2, __pyx_v_A0, __pyx_v_time_span, __pyx_v_dt, __pyx_v_times, __pyx_v_A_out, __pyx_v_B_out, __pyx_v_C_out, __pyx_v_max_len);

    /* "pyroxa/pybindings.pyx":904
 * 		written = analytical_consecutive_first_order(k1, k2, A0, time_span, dt,
 * 													times, A_out, B_out, C_out, max_len)
 * 		if written < 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Analytical consecutive first order solution failed")
 * 
*/
    __pyx_t_1 = (__pyx_v_written < 0);
    if (unlikely(__pyx_t_1)) {

      /* "pyroxa/pybindings.pyx":905
 * 													times, A_out, B_out, C_out, max_len)
 * 		if written < 0:
 * 			raise RuntimeError("Analytical consecutive first order solution failed")             # <<<<<<<<<<<<<<
 * 
 * 		# Convert to Python lists
*/
      __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_builtin_RuntimeError);
      __pyx_t_4 = __pyx_builtin_RuntimeError; 
      __pyx_t_5 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_kp_u_Analytical_consecutive_first_ord};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 905, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":904
 * 		written = analytical_consecutive_first_order(k1, k2, A0, time_span, dt,
 * 													times, A_out, B_out, C_out, max_len)
 * 		if written < 0:             # <<<<<<<<<<<<<<
 * 			raise RuntimeError("Analytical consecutive first order solution failed")
 * 
*/
    }

    /* "pyroxa/pybindings.pyx":908
 * 
 * 		# Convert to Python lists
 * 		times_list = [times[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 		A_list = [A_out[i] for i in range(written)]
 * 		B_list = [B_out[i] for i in range(written)]
*/
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 908, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __pyx_v_written;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_9genexpr16__pyx_v_i = __pyx_t_8;
        __pyx_t_4 = PyFloat_FromDouble((__pyx_v_times[__pyx_9genexpr16__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 908, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 908, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    } /* exit inner scope */
    __pyx_v_times_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":909
 * 		# Convert to Python lists
 * 		times_list = [times[i] for i in range(written)]
 * 		A_list = [A_out[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 		B_list = [B_out[i] for i in range(written)]
 * 		C_list = [C_out[i] for i in range(written)]
*/
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 909, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __pyx_v_written;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_9genexpr17__pyx_v_i = __pyx_t_8;
        __pyx_t_4 = PyFloat_FromDouble((__pyx_v_A_out[__pyx_9genexpr17__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 909, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 909, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    } /* exit inner scope */
    __pyx_v_A_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":910
 * 		times_list = [times[i] for i in range(written)]
 * 		A_list = [A_out[i] for i in range(written)]
 * 		B_list = [B_out[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 		C_list = [C_out[i] for i in range(written)]
 * 
*/
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __pyx_v_written;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_9genexpr18__pyx_v_i = __pyx_t_8;
        __pyx_t_4 = PyFloat_FromDouble((__pyx_v_B_out[__pyx_9genexpr18__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 910, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 910, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    } /* exit inner scope */
    __pyx_v_B_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":911
 * 		A_list = [A_out[i] for i in range(written)]
 * 		B_list = [B_out[i] for i in range(written)]
 * 		C_list = [C_out[i] for i in range(written)]             # <<<<<<<<<<<<<<
 * 
 * 		return {
*/
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 911, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __pyx_v_written;
      __pyx_t_7 = __pyx_t_6;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_9genexpr19__pyx_v_i = __pyx_t_8;
        __pyx_t_4 = PyFloat_FromDouble((__pyx_v_C_out[__pyx_9genexpr19__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 911, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 911, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    } /* exit inner scope */
    __pyx_v_C_list = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":913
 * 		C_list = [C_out[i] for i in range(written)]
 * 
 * 		return {             # <<<<<<<<<<<<<<
 * 			'times': times_list,
 * 			'A': A_list,
*/
    __Pyx_XDECREF(__pyx_r);

    /* "pyroxa/pybindings.pyx":914
 * 
 * 		return {
 * 			'times': times_list,             # <<<<<<<<<<<<<<
 * 			'A': A_list,
 * 			'B': B_list,
*/
    __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 914, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_times, __pyx_v_times_list) < 0) __PYX_ERR(0, 914, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":915
 * 		return {
 * 			'times': times_list,
 * 			'A': A_list,             # <<<<<<<<<<<<<<
 * 			'B': B_list,
 * 			'C': C_list
*/
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_A, __pyx_v_A_list) < 0) __PYX_ERR(0, 914, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":916
 * 			'times': times_list,
 * 			'A': A_list,
 * 			'B': B_list,             # <<<<<<<<<<<<<<
 * 			'C': C_list
 * 		}
*/
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_B, __pyx_v_B_list) < 0) __PYX_ERR(0, 914, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":917
 * 			'A': A_list,
 * 			'B': B_list,
 * 			'C': C_list             # <<<<<<<<<<<<<<
 * 		}
 * 	finally:
*/
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_C, __pyx_v_C_list) < 0) __PYX_ERR(0, 914, __pyx_L4_error)
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":920
 * 		}
 * 	finally:
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(A_out)
 * 		free(B_out)
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if ( unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __pyx_t_6 = __pyx_lineno; __pyx_t_7 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
      {
        free(__pyx_v_times);

        /* "pyroxa/pybindings.pyx":921
 * 	finally:
 * 		free(times)
 * 		free(A_out)             # <<<<<<<<<<<<<<
 * 		free(B_out)
 * 		free(C_out)
*/
        free(__pyx_v_A_out);

        /* "pyroxa/pybindings.pyx":922
 * 		free(times)
 * 		free(A_out)
 * 		free(B_out)             # <<<<<<<<<<<<<<
 * 		free(C_out)
 * 
*/
        free(__pyx_v_B_out);

        /* "pyroxa/pybindings.pyx":923
 * 		free(A_out)
 * 		free(B_out)
 * 		free(C_out)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 8: Simple utility and optimization functions
*/
        free(__pyx_v_C_out);
      }
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __pyx_lineno = __pyx_t_6; __pyx_clineno = __pyx_t_7; __pyx_filename = __pyx_t_9;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_15 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":920
 * 		}
 * 	finally:
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(A_out)
 * 		free(B_out)
*/
      free(__pyx_v_times);

      /* "pyroxa/pybindings.pyx":921
 * 	finally:
 * 		free(times)
 * 		free(A_out)             # <<<<<<<<<<<<<<
 * 		free(B_out)
 * 		free(C_out)
*/
      free(__pyx_v_A_out);

      /* "pyroxa/pybindings.pyx":922
 * 		free(times)
 * 		free(A_out)
 * 		free(B_out)             # <<<<<<<<<<<<<<
 * 		free(C_out)
 * 
*/
      free(__pyx_v_B_out);

      /* "pyroxa/pybindings.pyx":923
 * 		free(A_out)
 * 		free(B_out)
 * 		free(C_out)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 8: Simple utility and optimization functions
*/
      free(__pyx_v_C_out);
      __pyx_r = __pyx_t_15;
      __pyx_t_15 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":893
 * 		free(B_out)
 * 
 * def py_analytical_consecutive_first_order(double k1, double k2, double A0,             # <<<<<<<<<<<<<<
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A -> B -> C (consecutive first order)"""
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyroxa._pybindings.py_analytical_consecutive_first_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_times_list);
  __Pyx_XDECREF(__pyx_v_A_list);
  __Pyx_XDECREF(__pyx_v_B_list);
  __Pyx_XDECREF(__pyx_v_C_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":926
 * 
 * # BATCH 8: Simple utility and optimization functions
 * def py_calculate_objective_function(experimental_data, simulated_data, weights=None):             # <<<<<<<<<<<<<<
 * 	"""Calculate objective function (sum of squared residuals) for optimization"""
 * 	cdef int ndata = len(experimental_data)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_77py_calculate_objective_function(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_76py_calculate_objective_function, "py_calculate_objective_function(experimental_data, simulated_data, weights=None)\n\nCalculate objective function (sum of squared residuals) for optimization");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_77py_calculate_objective_function = {"py_calculate_objective_function", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_77py_calculate_objective_function, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_76py_calculate_objective_function};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_77py_calculate_objective_function(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_experimental_data = 0;
  PyObject *__pyx_v_simulated_data = 0;
  PyObject *__pyx_v_weights = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_objective_function (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_experimental_data,&__pyx_mstate_global->__pyx_n_u_simulated_data,&__pyx_mstate_global->__pyx_n_u_weights,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 926, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 926, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 926, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 926, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_calculate_objective_function", 0) < 0) __PYX_ERR(0, 926, __pyx_L3_error)
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)Py_None));
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_calculate_objective_function", 0, 2, 3, i); __PYX_ERR(0, 926, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 926, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 926, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 926, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)Py_None));
    }
    __pyx_v_experimental_data = values[0];
    __pyx_v_simulated_data = values[1];
    __pyx_v_weights = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_objective_function", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 926, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_objective_function", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_76py_calculate_objective_function(__pyx_self, __pyx_v_experimental_data, __pyx_v_simulated_data, __pyx_v_weights);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_76py_calculate_objective_function(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_experimental_data, PyObject *__pyx_v_simulated_data, PyObject *__pyx_v_weights) {
  int __pyx_v_ndata;
  double *__pyx_v_exp_c;
  double *__pyx_v_sim_c;
  double *__pyx_v_weight_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  char const *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_objective_function", 0);

  /* "pyroxa/pybindings.pyx":928
 * def py_calculate_objective_function(experimental_data, simulated_data, weights=None):
 * 	"""Calculate objective function (sum of squared residuals) for optimization"""
 * 	cdef int ndata = len(experimental_data)             # <<<<<<<<<<<<<<
 * 	cdef double* exp_c = <double*>malloc(ndata * sizeof(double))
 * 	cdef double* sim_c = <double*>malloc(ndata * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_experimental_data); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 928, __pyx_L1_error)
  __pyx_v_ndata = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":929
 * 	"""Calculate objective function (sum of squared residuals) for optimization"""
 * 	cdef int ndata = len(experimental_data)
 * 	cdef double* exp_c = <double*>malloc(ndata * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* sim_c = <double*>malloc(ndata * sizeof(double))
 * 	cdef double* weight_c = <double*>malloc(ndata * sizeof(double))
*/
  __pyx_v_exp_c = ((double *)malloc((__pyx_v_ndata * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":930
 * 	cdef int ndata = len(experimental_data)
 * 	cdef double* exp_c = <double*>malloc(ndata * sizeof(double))
 * 	cdef double* sim_c = <double*>malloc(ndata * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* weight_c = <double*>malloc(ndata * sizeof(double))
 * 
*/
  __pyx_v_sim_c = ((double *)malloc((__pyx_v_ndata * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":931
 * 	cdef double* exp_c = <double*>malloc(ndata * sizeof(double))
 * 	cdef double* sim_c = <double*>malloc(ndata * sizeof(double))
 * 	cdef double* weight_c = <double*>malloc(ndata * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_weight_c = ((double *)malloc((__pyx_v_ndata * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":933
 * 	cdef double* weight_c = <double*>malloc(ndata * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(ndata):
 * 			exp_c[i] = experimental_data[i]
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":934
 * 
 * 	try:
 * 		for i in range(ndata):             # <<<<<<<<<<<<<<
 * 			exp_c[i] = experimental_data[i]
 * 			sim_c[i] = simulated_data[i]
*/
    __pyx_t_2 = __pyx_v_ndata;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":935
 * 	try:
 * 		for i in range(ndata):
 * 			exp_c[i] = experimental_data[i]             # <<<<<<<<<<<<<<
 * 			sim_c[i] = simulated_data[i]
 * 			weight_c[i] = weights[i] if weights else 1.0
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_experimental_data, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 935, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 935, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_exp_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":936
 * 		for i in range(ndata):
 * 			exp_c[i] = experimental_data[i]
 * 			sim_c[i] = simulated_data[i]             # <<<<<<<<<<<<<<
 * 			weight_c[i] = weights[i] if weights else 1.0
 * 
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_simulated_data, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 936, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 936, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_sim_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":937
 * 			exp_c[i] = experimental_data[i]
 * 			sim_c[i] = simulated_data[i]
 * 			weight_c[i] = weights[i] if weights else 1.0             # <<<<<<<<<<<<<<
 * 
 * 		return calculate_objective_function(ndata, exp_c, sim_c, weight_c)
*/
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_weights); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 937, __pyx_L4_error)
      if (__pyx_t_7) {
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_weights, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 937, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 937, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_6 = __pyx_t_8;
      } else {
        __pyx_t_6 = 1.0;
      }
      (__pyx_v_weight_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":939
 * 			weight_c[i] = weights[i] if weights else 1.0
 * 
 * 		return calculate_objective_function(ndata, exp_c, sim_c, weight_c)             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(exp_c)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(calculate_objective_function(__pyx_v_ndata, __pyx_v_exp_c, __pyx_v_sim_c, __pyx_v_weight_c)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 939, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":941
 * 		return calculate_objective_function(ndata, exp_c, sim_c, weight_c)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(sim_c)
 * 		free(weight_c)
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if ( unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
      {
        free(__pyx_v_exp_c);

        /* "pyroxa/pybindings.pyx":942
 * 	finally:
 * 		free(exp_c)
 * 		free(sim_c)             # <<<<<<<<<<<<<<
 * 		free(weight_c)
 * 
*/
        free(__pyx_v_sim_c);

        /* "pyroxa/pybindings.pyx":943
 * 		free(exp_c)
 * 		free(sim_c)
 * 		free(weight_c)             # <<<<<<<<<<<<<<
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):
*/
        free(__pyx_v_weight_c);
      }
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_9;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_15 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":941
 * 		return calculate_objective_function(ndata, exp_c, sim_c, weight_c)
 * 	finally:
 * 		free(exp_c)             # <<<<<<<<<<<<<<
 * 		free(sim_c)
 * 		free(weight_c)
*/
      free(__pyx_v_exp_c);

      /* "pyroxa/pybindings.pyx":942
 * 	finally:
 * 		free(exp_c)
 * 		free(sim_c)             # <<<<<<<<<<<<<<
 * 		free(weight_c)
 * 
*/
      free(__pyx_v_sim_c);

      /* "pyroxa/pybindings.pyx":943
 * 		free(exp_c)
 * 		free(sim_c)
 * 		free(weight_c)             # <<<<<<<<<<<<<<
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):
*/
      free(__pyx_v_weight_c);
      __pyx_r = __pyx_t_15;
      __pyx_t_15 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":926
 * 
 * # BATCH 8: Simple utility and optimization functions
 * def py_calculate_objective_function(experimental_data, simulated_data, weights=None):             # <<<<<<<<<<<<<<
 * 	"""Calculate objective function (sum of squared residuals) for optimization"""
 * 	cdef int ndata = len(experimental_data)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_objective_function", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":945
 * 		free(weight_c)
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):             # <<<<<<<<<<<<<<
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_79py_check_mass_conservation(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_78py_check_mass_conservation, "py_check_mass_conservation(concentrations, tolerance=1e-6)\n\nCheck mass conservation during simulation");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_79py_check_mass_conservation = {"py_check_mass_conservation", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_79py_check_mass_conservation, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_78py_check_mass_conservation};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_79py_check_mass_conservation(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_concentrations = 0;
  PyObject *__pyx_v_tolerance = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_check_mass_conservation (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_concentrations,&__pyx_mstate_global->__pyx_n_u_tolerance,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 945, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 945, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 945, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_check_mass_conservation", 0) < 0) __PYX_ERR(0, 945, __pyx_L3_error)
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_float_1eneg_6)));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_check_mass_conservation", 0, 1, 2, i); __PYX_ERR(0, 945, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 945, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 945, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_float_1eneg_6)));
    }
    __pyx_v_concentrations = values[0];
    __pyx_v_tolerance = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_check_mass_conservation", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 945, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_check_mass_conservation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_78py_check_mass_conservation(__pyx_self, __pyx_v_concentrations, __pyx_v_tolerance);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pyroxa_11_pybindings_26py_check_mass_conservation_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyroxa/pybindings.pyx":969
 * 			'is_conserved': result > 0,
 * 			'mass_balance': mass_balance_list,
 * 			'max_violation': max(abs(x) for x in mass_balance_list)             # <<<<<<<<<<<<<<
 * 		}
 * 	finally:
*/

static PyObject *__pyx_pf_6pyroxa_11_pybindings_26py_check_mass_conservation_genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct__genexpr(__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__genexpr, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 969, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pyroxa_11_pybindings_26py_check_mass_conservation_2generator, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[0]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_genexpr, __pyx_mstate_global->__pyx_n_u_py_check_mass_conservation_local, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings); if (unlikely(!gen)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_check_mass_conservation.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pyroxa_11_pybindings_26py_check_mass_conservation_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr *__pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(__pyx_sent_value != Py_None)) {
    if (unlikely(__pyx_sent_value)) PyErr_SetString(PyExc_TypeError, "can't send non-None value to a just-started generator");
    __PYX_ERR(0, 969, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 969, __pyx_L1_error) }
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 969, __pyx_L1_error)
      #endif
      if (__pyx_t_2 >= __pyx_temp) break;
    }
    __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_2);
    ++__pyx_t_2;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_x);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_x, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Absolute(__pyx_cur_scope->__pyx_v_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 969, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  if (__Pyx_PyErr_Occurred()) {
    __Pyx_Generator_Replace_StopIteration(0);
    __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":945
 * 		free(weight_c)
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):             # <<<<<<<<<<<<<<
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:
*/

static PyObject *__pyx_pf_6pyroxa_11_pybindings_78py_check_mass_conservation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_concentrations, PyObject *__pyx_v_tolerance) {
  int __pyx_v_N;
  int __pyx_v_npoints;
  double *__pyx_v_conc_traj;
  double *__pyx_v_mass_balance;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_mass_balance_list = NULL;
  int __pyx_9genexpr20__pyx_v_i;
  PyObject *__pyx_gb_6pyroxa_11_pybindings_26py_check_mass_conservation_2generator = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  size_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  double __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  char const *__pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_check_mass_conservation", 0);

  /* "pyroxa/pybindings.pyx":947
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Empty concentration data")
 * 
*/
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_concentrations); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 947, __pyx_L1_error)
  __pyx_t_3 = (!__pyx_t_2);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyObject_Length(__pyx_v_concentrations); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 947, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 == 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "pyroxa/pybindings.pyx":948
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:
 * 		raise ValueError("Empty concentration data")             # <<<<<<<<<<<<<<
 * 
 * 	cdef int N = len(concentrations[0])  # Number of species
*/
    __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_7 = __pyx_builtin_ValueError; 
    __pyx_t_8 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_Empty_concentration_data};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_8, (2-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 948, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":947
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Empty concentration data")
 * 
*/
  }

  /* "pyroxa/pybindings.pyx":950
 * 		raise ValueError("Empty concentration data")
 * 
 * 	cdef int N = len(concentrations[0])  # Number of species             # <<<<<<<<<<<<<<
 * 	cdef int npoints = len(concentrations)  # Number of time points
 * 	cdef double* conc_traj = <double*>malloc(N * npoints * sizeof(double))
*/
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_concentrations, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_N = __pyx_t_4;

  /* "pyroxa/pybindings.pyx":951
 * 
 * 	cdef int N = len(concentrations[0])  # Number of species
 * 	cdef int npoints = len(concentrations)  # Number of time points             # <<<<<<<<<<<<<<
 * 	cdef double* conc_traj = <double*>malloc(N * npoints * sizeof(double))
 * 	cdef double* mass_balance = <double*>malloc(npoints * sizeof(double))
*/
  __pyx_t_4 = PyObject_Length(__pyx_v_concentrations); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 951, __pyx_L1_error)
  __pyx_v_npoints = __pyx_t_4;

  /* "pyroxa/pybindings.pyx":952
 * 	cdef int N = len(concentrations[0])  # Number of species
 * 	cdef int npoints = len(concentrations)  # Number of time points
 * 	cdef double* conc_traj = <double*>malloc(N * npoints * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* mass_balance = <double*>malloc(npoints * sizeof(double))
 * 
*/
  __pyx_v_conc_traj = ((double *)malloc(((__pyx_v_N * __pyx_v_npoints) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":953
 * 	cdef int npoints = len(concentrations)  # Number of time points
 * 	cdef double* conc_traj = <double*>malloc(N * npoints * sizeof(double))
 * 	cdef double* mass_balance = <double*>malloc(npoints * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_mass_balance = ((double *)malloc((__pyx_v_npoints * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":955
 * 	cdef double* mass_balance = <double*>malloc(npoints * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Flatten concentration trajectory
 * 		for i in range(npoints):
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":957
 * 	try:
 * 		# Flatten concentration trajectory
 * 		for i in range(npoints):             # <<<<<<<<<<<<<<
 * 			for j in range(N):
 * 				conc_traj[i * N + j] = concentrations[i][j]
*/
    __pyx_t_7 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_6 = __pyx_builtin_range; 
    __pyx_t_9 = __Pyx_PyLong_From_int(__pyx_v_npoints); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 957, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_9};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_8, (2-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 957, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_6 = __pyx_t_5; __Pyx_INCREF(__pyx_t_6);
      __pyx_t_4 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 957, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 957, __pyx_L7_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_6);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 957, __pyx_L7_error)
            #endif
            if (__pyx_t_4 >= __pyx_temp) break;
          }
          __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_6, __pyx_t_4);
          ++__pyx_t_4;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_6);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 957, __pyx_L7_error)
            #endif
            if (__pyx_t_4 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_4));
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_4);
          #endif
          ++__pyx_t_4;
        }
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 957, __pyx_L7_error)
      } else {
        __pyx_t_5 = __pyx_t_10(__pyx_t_6);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 957, __pyx_L7_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":958
 * 		# Flatten concentration trajectory
 * 		for i in range(npoints):
 * 			for j in range(N):             # <<<<<<<<<<<<<<
 * 				conc_traj[i * N + j] = concentrations[i][j]
 * 
*/
      __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_builtin_range);
      __pyx_t_7 = __pyx_builtin_range; 
      __pyx_t_11 = __Pyx_PyLong_From_int(__pyx_v_N); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 958, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_8 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_11};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_8, (2-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 958, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_5);
      }
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_7 = __pyx_t_5; __Pyx_INCREF(__pyx_t_7);
        __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 958, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_13 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 958, __pyx_L7_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_7))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_7);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 958, __pyx_L7_error)
              #endif
              if (__pyx_t_12 >= __pyx_temp) break;
            }
            __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_7, __pyx_t_12);
            ++__pyx_t_12;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_7);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 958, __pyx_L7_error)
              #endif
              if (__pyx_t_12 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_12));
            #else
            __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_7, __pyx_t_12);
            #endif
            ++__pyx_t_12;
          }
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 958, __pyx_L7_error)
        } else {
          __pyx_t_5 = __pyx_t_13(__pyx_t_7);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 958, __pyx_L7_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "pyroxa/pybindings.pyx":959
 * 		for i in range(npoints):
 * 			for j in range(N):
 * 				conc_traj[i * N + j] = concentrations[i][j]             # <<<<<<<<<<<<<<
 * 
 * 		result = check_mass_conservation(N, npoints, conc_traj, mass_balance, tolerance)
*/
        __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_concentrations, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 959, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 959, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_14 = __Pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 959, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyLong_From_int(__pyx_v_N); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 959, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_5 = PyNumber_Multiply(__pyx_v_i, __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 959, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyNumber_Add(__pyx_t_5, __pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 959, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_t_11); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 959, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        (__pyx_v_conc_traj[__pyx_t_15]) = __pyx_t_14;

        /* "pyroxa/pybindings.pyx":958
 * 		# Flatten concentration trajectory
 * 		for i in range(npoints):
 * 			for j in range(N):             # <<<<<<<<<<<<<<
 * 				conc_traj[i * N + j] = concentrations[i][j]
 * 
*/
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "pyroxa/pybindings.pyx":957
 * 	try:
 * 		# Flatten concentration trajectory
 * 		for i in range(npoints):             # <<<<<<<<<<<<<<
 * 			for j in range(N):
 * 				conc_traj[i * N + j] = concentrations[i][j]
*/
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pyroxa/pybindings.pyx":961
 * 				conc_traj[i * N + j] = concentrations[i][j]
 * 
 * 		result = check_mass_conservation(N, npoints, conc_traj, mass_balance, tolerance)             # <<<<<<<<<<<<<<
 * 
 * 		# Convert mass balance to Python list
*/
    __pyx_t_14 = __Pyx_PyFloat_AsDouble(__pyx_v_tolerance); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 961, __pyx_L7_error)
    __pyx_v_result = check_mass_conservation(__pyx_v_N, __pyx_v_npoints, __pyx_v_conc_traj, __pyx_v_mass_balance, __pyx_t_14);

    /* "pyroxa/pybindings.pyx":964
 * 
 * 		# Convert mass balance to Python list
 * 		mass_balance_list = [mass_balance[i] for i in range(npoints)]             # <<<<<<<<<<<<<<
 * 
 * 		return {
*/
    { /* enter inner scope */
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 964, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_16 = __pyx_v_npoints;
      __pyx_t_17 = __pyx_t_16;
      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
        __pyx_9genexpr20__pyx_v_i = __pyx_t_18;
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_mass_balance[__pyx_9genexpr20__pyx_v_i])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 964, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 964, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    } /* exit inner scope */
    __pyx_v_mass_balance_list = ((PyObject*)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "pyroxa/pybindings.pyx":966
 * 		mass_balance_list = [mass_balance[i] for i in range(npoints)]
 * 
 * 		return {             # <<<<<<<<<<<<<<
 * 			'is_conserved': result > 0,
 * 			'mass_balance': mass_balance_list,
*/
    __Pyx_XDECREF(__pyx_r);

    /* "pyroxa/pybindings.pyx":967
 * 
 * 		return {
 * 			'is_conserved': result > 0,             # <<<<<<<<<<<<<<
 * 			'mass_balance': mass_balance_list,
 * 			'max_violation': max(abs(x) for x in mass_balance_list)
*/
    __pyx_t_6 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 967, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyBool_FromLong((__pyx_v_result > 0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 967, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_is_conserved, __pyx_t_7) < 0) __PYX_ERR(0, 967, __pyx_L7_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyroxa/pybindings.pyx":968
 * 		return {
 * 			'is_conserved': result > 0,
 * 			'mass_balance': mass_balance_list,             # <<<<<<<<<<<<<<
 * 			'max_violation': max(abs(x) for x in mass_balance_list)
 * 		}
*/
    if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_mass_balance, __pyx_v_mass_balance_list) < 0) __PYX_ERR(0, 967, __pyx_L7_error)

    /* "pyroxa/pybindings.pyx":969
 * 			'is_conserved': result > 0,
 * 			'mass_balance': mass_balance_list,
 * 			'max_violation': max(abs(x) for x in mass_balance_list)             # <<<<<<<<<<<<<<
 * 		}
 * 	finally:
*/
    __pyx_t_11 = NULL;
    __Pyx_INCREF(__pyx_builtin_max);
    __pyx_t_5 = __pyx_builtin_max; 
    __pyx_t_9 = __pyx_pf_6pyroxa_11_pybindings_26py_check_mass_conservation_genexpr(NULL, __pyx_v_mass_balance_list); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 969, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_9};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_8, (2-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 969, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_7);
    }
    if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_max_violation, __pyx_t_7) < 0) __PYX_ERR(0, 967, __pyx_L7_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L6_return;
  }

  /* "pyroxa/pybindings.pyx":972
 * 		}
 * 	finally:
 * 		free(conc_traj)             # <<<<<<<<<<<<<<
 * 		free(mass_balance)
 * 
*/
  /*finally:*/ {
    __pyx_L7_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_23, &__pyx_t_24, &__pyx_t_25);
      if ( unlikely(__Pyx_GetException(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22) < 0)) __Pyx_ErrFetch(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_23);
      __Pyx_XGOTREF(__pyx_t_24);
      __Pyx_XGOTREF(__pyx_t_25);
      __pyx_t_16 = __pyx_lineno; __pyx_t_17 = __pyx_clineno; __pyx_t_19 = __pyx_filename;
      {
        free(__pyx_v_conc_traj);

        /* "pyroxa/pybindings.pyx":973
 * 	finally:
 * 		free(conc_traj)
 * 		free(mass_balance)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15):
*/
        free(__pyx_v_mass_balance);
      }
      __Pyx_XGIVEREF(__pyx_t_23);
      __Pyx_XGIVEREF(__pyx_t_24);
      __Pyx_XGIVEREF(__pyx_t_25);
      __Pyx_ExceptionReset(__pyx_t_23, __pyx_t_24, __pyx_t_25);
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_ErrRestore(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0;
      __pyx_lineno = __pyx_t_16; __pyx_clineno = __pyx_t_17; __pyx_filename = __pyx_t_19;
      goto __pyx_L1_error;
    }
    __pyx_L6_return: {
      __pyx_t_25 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":972
 * 		}
 * 	finally:
 * 		free(conc_traj)             # <<<<<<<<<<<<<<
 * 		free(mass_balance)
 * 
*/
      free(__pyx_v_conc_traj);

      /* "pyroxa/pybindings.pyx":973
 * 	finally:
 * 		free(conc_traj)
 * 		free(mass_balance)             # <<<<<<<<<<<<<<
 * 
 * def py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15):
*/
      free(__pyx_v_mass_balance);
      __pyx_r = __pyx_t_25;
      __pyx_t_25 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":945
 * 		free(weight_c)
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):             # <<<<<<<<<<<<<<
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyroxa._pybindings.py_check_mass_conservation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_mass_balance_list);
  __Pyx_XDECREF(__pyx_gb_6pyroxa_11_pybindings_26py_check_mass_conservation_2generator);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":975
 * 		free(mass_balance)
 * 
 * def py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15):             # <<<<<<<<<<<<<<
 * 	"""Calculate temperature-dependent rate constants using Arrhenius equation"""
 * 	cdef int M = len(kf_ref)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_81py_calculate_rate_constants(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_80py_calculate_rate_constants, "py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15)\n\nCalculate temperature-dependent rate constants using Arrhenius equation");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_81py_calculate_rate_constants = {"py_calculate_rate_constants", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_81py_calculate_rate_constants, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_80py_calculate_rate_constants};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_81py_calculate_rate_constants(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_kf_ref = 0;
  PyObject *__pyx_v_kr_ref = 0;
  PyObject *__pyx_v_Ea_f = 0;
  PyObject *__pyx_v_Ea_r = 0;
  double __pyx_v_T;
  double __pyx_v_T_ref;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_rate_constants (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_kf_ref,&__pyx_mstate_global->__pyx_n_u_kr_ref,&__pyx_mstate_global->__pyx_n_u_Ea_f,&__pyx_mstate_global->__pyx_n_u_Ea_r,&__pyx_mstate_global->__pyx_n_u_T,&__pyx_mstate_global->__pyx_n_u_T_ref,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 975, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 975, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 975, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 975, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 975, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 975, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 975, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_calculate_rate_constants", 0) < 0) __PYX_ERR(0, 975, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 5; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_calculate_rate_constants", 0, 5, 6, i); __PYX_ERR(0, 975, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 975, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 975, __pyx_L3_error)
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 975, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 975, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 975, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 975, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_kf_ref = values[0];
    __pyx_v_kr_ref = values[1];
    __pyx_v_Ea_f = values[2];
    __pyx_v_Ea_r = values[3];
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 975, __pyx_L3_error)
    if (values[5]) {
      __pyx_v_T_ref = __Pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_T_ref == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 975, __pyx_L3_error)
    } else {
      __pyx_v_T_ref = ((double)((double)298.15));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_rate_constants", 0, 5, 6, __pyx_nargs); __PYX_ERR(0, 975, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_rate_constants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_80py_calculate_rate_constants(__pyx_self, __pyx_v_kf_ref, __pyx_v_kr_ref, __pyx_v_Ea_f, __pyx_v_Ea_r, __pyx_v_T, __pyx_v_T_ref);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_80py_calculate_rate_constants(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_kf_ref, PyObject *__pyx_v_kr_ref, PyObject *__pyx_v_Ea_f, PyObject *__pyx_v_Ea_r, double __pyx_v_T, double __pyx_v_T_ref) {
  int __pyx_v_M;
  double *__pyx_v_kf_ref_c;
  double *__pyx_v_kr_ref_c;
  double *__pyx_v_Ea_f_c;
  double *__pyx_v_Ea_r_c;
  double *__pyx_v_kf_out_c;
  double *__pyx_v_kr_out_c;
  int __pyx_v_i;
  PyObject *__pyx_v_kf_out = NULL;
  PyObject *__pyx_v_kr_out = NULL;
  int __pyx_9genexpr22__pyx_v_i;
  int __pyx_9genexpr23__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  char const *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_rate_constants", 0);

  /* "pyroxa/pybindings.pyx":977
 * def py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15):
 * 	"""Calculate temperature-dependent rate constants using Arrhenius equation"""
 * 	cdef int M = len(kf_ref)             # <<<<<<<<<<<<<<
 * 	cdef double* kf_ref_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_ref_c = <double*>malloc(M * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_kf_ref); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 977, __pyx_L1_error)
  __pyx_v_M = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":978
 * 	"""Calculate temperature-dependent rate constants using Arrhenius equation"""
 * 	cdef int M = len(kf_ref)
 * 	cdef double* kf_ref_c = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr_ref_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* Ea_f_c = <double*>malloc(M * sizeof(double))
*/
  __pyx_v_kf_ref_c = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":979
 * 	cdef int M = len(kf_ref)
 * 	cdef double* kf_ref_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_ref_c = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* Ea_f_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* Ea_r_c = <double*>malloc(M * sizeof(double))
*/
  __pyx_v_kr_ref_c = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":980
 * 	cdef double* kf_ref_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_ref_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* Ea_f_c = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* Ea_r_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kf_out_c = <double*>malloc(M * sizeof(double))
*/
  __pyx_v_Ea_f_c = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":981
 * 	cdef double* kr_ref_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* Ea_f_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* Ea_r_c = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kf_out_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_out_c = <double*>malloc(M * sizeof(double))
*/
  __pyx_v_Ea_r_c = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":982
 * 	cdef double* Ea_f_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* Ea_r_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kf_out_c = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr_out_c = <double*>malloc(M * sizeof(double))
 * 
*/
  __pyx_v_kf_out_c = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":983
 * 	cdef double* Ea_r_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kf_out_c = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_out_c = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_kr_out_c = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":985
 * 	cdef double* kr_out_c = <double*>malloc(M * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(M):
 * 			kf_ref_c[i] = kf_ref[i]
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":986
 * 
 * 	try:
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_ref_c[i] = kf_ref[i]
 * 			kr_ref_c[i] = kr_ref[i]
*/
    __pyx_t_2 = __pyx_v_M;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":987
 * 	try:
 * 		for i in range(M):
 * 			kf_ref_c[i] = kf_ref[i]             # <<<<<<<<<<<<<<
 * 			kr_ref_c[i] = kr_ref[i]
 * 			Ea_f_c[i] = Ea_f[i]
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_kf_ref, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 987, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 987, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_kf_ref_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":988
 * 		for i in range(M):
 * 			kf_ref_c[i] = kf_ref[i]
 * 			kr_ref_c[i] = kr_ref[i]             # <<<<<<<<<<<<<<
 * 			Ea_f_c[i] = Ea_f[i]
 * 			Ea_r_c[i] = Ea_r[i]
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_kr_ref, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 988, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 988, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_kr_ref_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":989
 * 			kf_ref_c[i] = kf_ref[i]
 * 			kr_ref_c[i] = kr_ref[i]
 * 			Ea_f_c[i] = Ea_f[i]             # <<<<<<<<<<<<<<
 * 			Ea_r_c[i] = Ea_r[i]
 * 
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_Ea_f, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 989, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 989, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_Ea_f_c[__pyx_v_i]) = __pyx_t_6;

      /* "pyroxa/pybindings.pyx":990
 * 			kr_ref_c[i] = kr_ref[i]
 * 			Ea_f_c[i] = Ea_f[i]
 * 			Ea_r_c[i] = Ea_r[i]             # <<<<<<<<<<<<<<
 * 
 * 		calculate_rate_constants(M, kf_ref_c, kr_ref_c, Ea_f_c, Ea_r_c,
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_Ea_r, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 990, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 990, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_Ea_r_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":992
 * 			Ea_r_c[i] = Ea_r[i]
 * 
 * 		calculate_rate_constants(M, kf_ref_c, kr_ref_c, Ea_f_c, Ea_r_c,             # <<<<<<<<<<<<<<
 * 								T, T_ref, kf_out_c, kr_out_c)
 * 
*/
    calculate_rate_constants(__pyx_v_M, __pyx_v_kf_ref_c, __pyx_v_kr_ref_c, __pyx_v_Ea_f_c, __pyx_v_Ea_r_c, __pyx_v_T, __pyx_v_T_ref, __pyx_v_kf_out_c, __pyx_v_kr_out_c);

    /* "pyroxa/pybindings.pyx":996
 * 
 * 		# Convert to Python lists
 * 		kf_out = [kf_out_c[i] for i in range(M)]             # <<<<<<<<<<<<<<
 * 		kr_out = [kr_out_c[i] for i in range(M)]
 * 
*/
    { /* enter inner scope */
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 996, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __pyx_v_M;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_9genexpr22__pyx_v_i = __pyx_t_4;
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_kf_out_c[__pyx_9genexpr22__pyx_v_i])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 996, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 996, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    } /* exit inner scope */
    __pyx_v_kf_out = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":997
 * 		# Convert to Python lists
 * 		kf_out = [kf_out_c[i] for i in range(M)]
 * 		kr_out = [kr_out_c[i] for i in range(M)]             # <<<<<<<<<<<<<<
 * 
 * 		return {
*/
    { /* enter inner scope */
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 997, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __pyx_v_M;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_9genexpr23__pyx_v_i = __pyx_t_4;
        __pyx_t_7 = PyFloat_FromDouble((__pyx_v_kr_out_c[__pyx_9genexpr23__pyx_v_i])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 997, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 997, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    } /* exit inner scope */
    __pyx_v_kr_out = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":999
 * 		kr_out = [kr_out_c[i] for i in range(M)]
 * 
 * 		return {             # <<<<<<<<<<<<<<
 * 			'kf': kf_out,
 * 			'kr': kr_out
*/
    __Pyx_XDECREF(__pyx_r);

    /* "pyroxa/pybindings.pyx":1000
 * 
 * 		return {
 * 			'kf': kf_out,             # <<<<<<<<<<<<<<
 * 			'kr': kr_out
 * 		}
*/
    __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1000, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_kf, __pyx_v_kf_out) < 0) __PYX_ERR(0, 1000, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":1001
 * 		return {
 * 			'kf': kf_out,
 * 			'kr': kr_out             # <<<<<<<<<<<<<<
 * 		}
 * 	finally:
*/
    if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_kr, __pyx_v_kr_out) < 0) __PYX_ERR(0, 1000, __pyx_L4_error)
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":1004
 * 		}
 * 	finally:
 * 		free(kf_ref_c)             # <<<<<<<<<<<<<<
 * 		free(kr_ref_c)
 * 		free(Ea_f_c)
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      if ( unlikely(__Pyx_GetException(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11) < 0)) __Pyx_ErrFetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_8 = __pyx_filename;
      {
        free(__pyx_v_kf_ref_c);

        /* "pyroxa/pybindings.pyx":1005
 * 	finally:
 * 		free(kf_ref_c)
 * 		free(kr_ref_c)             # <<<<<<<<<<<<<<
 * 		free(Ea_f_c)
 * 		free(Ea_r_c)
*/
        free(__pyx_v_kr_ref_c);

        /* "pyroxa/pybindings.pyx":1006
 * 		free(kf_ref_c)
 * 		free(kr_ref_c)
 * 		free(Ea_f_c)             # <<<<<<<<<<<<<<
 * 		free(Ea_r_c)
 * 		free(kf_out_c)
*/
        free(__pyx_v_Ea_f_c);

        /* "pyroxa/pybindings.pyx":1007
 * 		free(kr_ref_c)
 * 		free(Ea_f_c)
 * 		free(Ea_r_c)             # <<<<<<<<<<<<<<
 * 		free(kf_out_c)
 * 		free(kr_out_c)
*/
        free(__pyx_v_Ea_r_c);

        /* "pyroxa/pybindings.pyx":1008
 * 		free(Ea_f_c)
 * 		free(Ea_r_c)
 * 		free(kf_out_c)             # <<<<<<<<<<<<<<
 * 		free(kr_out_c)
 * 
*/
        free(__pyx_v_kf_out_c);

        /* "pyroxa/pybindings.pyx":1009
 * 		free(Ea_r_c)
 * 		free(kf_out_c)
 * 		free(kr_out_c)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 9: Simple utility and validation functions
*/
        free(__pyx_v_kr_out_c);
      }
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ErrRestore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_8;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_14 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1004
 * 		}
 * 	finally:
 * 		free(kf_ref_c)             # <<<<<<<<<<<<<<
 * 		free(kr_ref_c)
 * 		free(Ea_f_c)
*/
      free(__pyx_v_kf_ref_c);

      /* "pyroxa/pybindings.pyx":1005
 * 	finally:
 * 		free(kf_ref_c)
 * 		free(kr_ref_c)             # <<<<<<<<<<<<<<
 * 		free(Ea_f_c)
 * 		free(Ea_r_c)
*/
      free(__pyx_v_kr_ref_c);

      /* "pyroxa/pybindings.pyx":1006
 * 		free(kf_ref_c)
 * 		free(kr_ref_c)
 * 		free(Ea_f_c)             # <<<<<<<<<<<<<<
 * 		free(Ea_r_c)
 * 		free(kf_out_c)
*/
      free(__pyx_v_Ea_f_c);

      /* "pyroxa/pybindings.pyx":1007
 * 		free(kr_ref_c)
 * 		free(Ea_f_c)
 * 		free(Ea_r_c)             # <<<<<<<<<<<<<<
 * 		free(kf_out_c)
 * 		free(kr_out_c)
*/
      free(__pyx_v_Ea_r_c);

      /* "pyroxa/pybindings.pyx":1008
 * 		free(Ea_f_c)
 * 		free(Ea_r_c)
 * 		free(kf_out_c)             # <<<<<<<<<<<<<<
 * 		free(kr_out_c)
 * 
*/
      free(__pyx_v_kf_out_c);

      /* "pyroxa/pybindings.pyx":1009
 * 		free(Ea_r_c)
 * 		free(kf_out_c)
 * 		free(kr_out_c)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 9: Simple utility and validation functions
*/
      free(__pyx_v_kr_out_c);
      __pyx_r = __pyx_t_14;
      __pyx_t_14 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":975
 * 		free(mass_balance)
 * 
 * def py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15):             # <<<<<<<<<<<<<<
 * 	"""Calculate temperature-dependent rate constants using Arrhenius equation"""
 * 	cdef int M = len(kf_ref)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_rate_constants", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kf_out);
  __Pyx_XDECREF(__pyx_v_kr_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1012
 * 
 * # BATCH 9: Simple utility and validation functions
 * def py_cross_validation_score(data, parameters, int n_folds=5):             # <<<<<<<<<<<<<<
 * 	"""Calculate cross-validation score for model validation"""
 * 	cdef int n_data = len(data)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_83py_cross_validation_score(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_82py_cross_validation_score, "py_cross_validation_score(data, parameters, int n_folds=5)\n\nCalculate cross-validation score for model validation");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_83py_cross_validation_score = {"py_cross_validation_score", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_83py_cross_validation_score, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_82py_cross_validation_score};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_83py_cross_validation_score(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_parameters = 0;
  int __pyx_v_n_folds;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_cross_validation_score (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_data,&__pyx_mstate_global->__pyx_n_u_parameters,&__pyx_mstate_global->__pyx_n_u_n_folds,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1012, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1012, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1012, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1012, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_cross_validation_score", 0) < 0) __PYX_ERR(0, 1012, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_cross_validation_score", 0, 2, 3, i); __PYX_ERR(0, 1012, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1012, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1012, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1012, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = values[0];
    __pyx_v_parameters = values[1];
    if (values[2]) {
      __pyx_v_n_folds = __Pyx_PyLong_As_int(values[2]); if (unlikely((__pyx_v_n_folds == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1012, __pyx_L3_error)
    } else {
      __pyx_v_n_folds = ((int)((int)5));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_cross_validation_score", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 1012, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_cross_validation_score", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_82py_cross_validation_score(__pyx_self, __pyx_v_data, __pyx_v_parameters, __pyx_v_n_folds);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_82py_cross_validation_score(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_parameters, int __pyx_v_n_folds) {
  int __pyx_v_n_data;
  int __pyx_v_n_params;
  double *__pyx_v_data_c;
  double *__pyx_v_params_c;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_cross_validation_score", 0);

  /* "pyroxa/pybindings.pyx":1014
 * def py_cross_validation_score(data, parameters, int n_folds=5):
 * 	"""Calculate cross-validation score for model validation"""
 * 	cdef int n_data = len(data)             # <<<<<<<<<<<<<<
 * 	cdef int n_params = len(parameters)
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1014, __pyx_L1_error)
  __pyx_v_n_data = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":1015
 * 	"""Calculate cross-validation score for model validation"""
 * 	cdef int n_data = len(data)
 * 	cdef int n_params = len(parameters)             # <<<<<<<<<<<<<<
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_parameters); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1015, __pyx_L1_error)
  __pyx_v_n_params = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":1016
 * 	cdef int n_data = len(data)
 * 	cdef int n_params = len(parameters)
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))
 * 
*/
  __pyx_v_data_c = ((double *)malloc((__pyx_v_n_data * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1017
 * 	cdef int n_params = len(parameters)
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_params_c = ((double *)malloc((__pyx_v_n_params * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1019
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(n_data):
 * 			data_c[i] = data[i]
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1020
 * 
 * 	try:
 * 		for i in range(n_data):             # <<<<<<<<<<<<<<
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):
*/
    __pyx_t_2 = __pyx_v_n_data;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":1021
 * 	try:
 * 		for i in range(n_data):
 * 			data_c[i] = data[i]             # <<<<<<<<<<<<<<
 * 		for i in range(n_params):
 * 			params_c[i] = parameters[i]
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_data, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1021, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1021, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_data_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":1022
 * 		for i in range(n_data):
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):             # <<<<<<<<<<<<<<
 * 			params_c[i] = parameters[i]
 * 
*/
    __pyx_t_2 = __pyx_v_n_params;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "pyroxa/pybindings.pyx":1023
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):
 * 			params_c[i] = parameters[i]             # <<<<<<<<<<<<<<
 * 
 * 		return cross_validation_score(n_folds, n_data, data_c, n_params, params_c)
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_parameters, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1023, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1023, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_params_c[__pyx_v_i]) = __pyx_t_6;
    }

    /* "pyroxa/pybindings.pyx":1025
 * 			params_c[i] = parameters[i]
 * 
 * 		return cross_validation_score(n_folds, n_data, data_c, n_params, params_c)             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(data_c)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(cross_validation_score(__pyx_v_n_folds, __pyx_v_n_data, __pyx_v_data_c, __pyx_v_n_params, __pyx_v_params_c)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1025, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L3_return;
  }

  /* "pyroxa/pybindings.pyx":1027
 * 		return cross_validation_score(n_folds, n_data, data_c, n_params, params_c)
 * 	finally:
 * 		free(data_c)             # <<<<<<<<<<<<<<
 * 		free(params_c)
 * 
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ( unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_2 = __pyx_lineno; __pyx_t_3 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        free(__pyx_v_data_c);

        /* "pyroxa/pybindings.pyx":1028
 * 	finally:
 * 		free(data_c)
 * 		free(params_c)             # <<<<<<<<<<<<<<
 * 
 * def py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None):
*/
        free(__pyx_v_params_c);
      }
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_2; __pyx_clineno = __pyx_t_3; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_13 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1027
 * 		return cross_validation_score(n_folds, n_data, data_c, n_params, params_c)
 * 	finally:
 * 		free(data_c)             # <<<<<<<<<<<<<<
 * 		free(params_c)
 * 
*/
      free(__pyx_v_data_c);

      /* "pyroxa/pybindings.pyx":1028
 * 	finally:
 * 		free(data_c)
 * 		free(params_c)             # <<<<<<<<<<<<<<
 * 
 * def py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None):
*/
      free(__pyx_v_params_c);
      __pyx_r = __pyx_t_13;
      __pyx_t_13 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1012
 * 
 * # BATCH 9: Simple utility and validation functions
 * def py_cross_validation_score(data, parameters, int n_folds=5):             # <<<<<<<<<<<<<<
 * 	"""Calculate cross-validation score for model validation"""
 * 	cdef int n_data = len(data)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_cross_validation_score", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1030
 * 		free(params_c)
 * 
 * def py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None):             # <<<<<<<<<<<<<<
 * 	"""Kriging interpolation for spatial data"""
 * 	cdef int n_known = len(x_known)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_85py_kriging_interpolation(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_84py_kriging_interpolation, "py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None)\n\nKriging interpolation for spatial data");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_85py_kriging_interpolation = {"py_kriging_interpolation", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_85py_kriging_interpolation, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_84py_kriging_interpolation};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_85py_kriging_interpolation(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x_new = 0;
  PyObject *__pyx_v_x_known = 0;
  PyObject *__pyx_v_y_known = 0;
  PyObject *__pyx_v_variogram_params = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_kriging_interpolation (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_x_new,&__pyx_mstate_global->__pyx_n_u_x_known,&__pyx_mstate_global->__pyx_n_u_y_known,&__pyx_mstate_global->__pyx_n_u_variogram_params,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1030, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1030, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1030, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1030, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1030, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_kriging_interpolation", 0) < 0) __PYX_ERR(0, 1030, __pyx_L3_error)
      if (!values[3]) values[3] = __Pyx_NewRef(((PyObject *)Py_None));
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_kriging_interpolation", 0, 3, 4, i); __PYX_ERR(0, 1030, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1030, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1030, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1030, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1030, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[3]) values[3] = __Pyx_NewRef(((PyObject *)Py_None));
    }
    __pyx_v_x_new = values[0];
    __pyx_v_x_known = values[1];
    __pyx_v_y_known = values[2];
    __pyx_v_variogram_params = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_kriging_interpolation", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 1030, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_kriging_interpolation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_84py_kriging_interpolation(__pyx_self, __pyx_v_x_new, __pyx_v_x_known, __pyx_v_y_known, __pyx_v_variogram_params);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_84py_kriging_interpolation(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x_new, PyObject *__pyx_v_x_known, PyObject *__pyx_v_y_known, PyObject *__pyx_v_variogram_params) {
  int __pyx_v_n_known;
  PyObject *__pyx_v_x_new_list = NULL;
  double *__pyx_v_x_new_c;
  double *__pyx_v_x_known_c;
  double *__pyx_v_y_known_c;
  double *__pyx_v_var_params_c;
  Py_ssize_t __pyx_v_i;
  double __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  double __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  char const *__pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_kriging_interpolation", 0);
  __Pyx_INCREF(__pyx_v_variogram_params);

  /* "pyroxa/pybindings.pyx":1032
 * def py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None):
 * 	"""Kriging interpolation for spatial data"""
 * 	cdef int n_known = len(x_known)             # <<<<<<<<<<<<<<
 * 
 * 	# Handle single value vs array for x_new
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_x_known); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1032, __pyx_L1_error)
  __pyx_v_n_known = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":1035
 * 
 * 	# Handle single value vs array for x_new
 * 	if isinstance(x_new, (int, float)):             # <<<<<<<<<<<<<<
 * 		x_new_list = [float(x_new)]
 * 	else:
*/
  __pyx_t_3 = PyLong_Check(__pyx_v_x_new); 
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_x_new); 
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "pyroxa/pybindings.pyx":1036
 * 	# Handle single value vs array for x_new
 * 	if isinstance(x_new, (int, float)):
 * 		x_new_list = [float(x_new)]             # <<<<<<<<<<<<<<
 * 	else:
 * 		x_new_list = list(x_new)
*/
    __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_v_x_new); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1036, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1036, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_4) != (0)) __PYX_ERR(0, 1036, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_v_x_new_list = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":1035
 * 
 * 	# Handle single value vs array for x_new
 * 	if isinstance(x_new, (int, float)):             # <<<<<<<<<<<<<<
 * 		x_new_list = [float(x_new)]
 * 	else:
*/
    goto __pyx_L3;
  }

  /* "pyroxa/pybindings.pyx":1038
 * 		x_new_list = [float(x_new)]
 * 	else:
 * 		x_new_list = list(x_new)             # <<<<<<<<<<<<<<
 * 
 * 	# Default variogram parameters if not provided
*/
  /*else*/ {
    __pyx_t_5 = PySequence_List(__pyx_v_x_new); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1038, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_x_new_list = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L3:;

  /* "pyroxa/pybindings.pyx":1041
 * 
 * 	# Default variogram parameters if not provided
 * 	if variogram_params is None:             # <<<<<<<<<<<<<<
 * 		variogram_params = [1.0, 0.1, 1.0]  # [range, sill, nugget]
 * 
*/
  __pyx_t_2 = (__pyx_v_variogram_params == Py_None);
  if (__pyx_t_2) {

    /* "pyroxa/pybindings.pyx":1042
 * 	# Default variogram parameters if not provided
 * 	if variogram_params is None:
 * 		variogram_params = [1.0, 0.1, 1.0]  # [range, sill, nugget]             # <<<<<<<<<<<<<<
 * 
 * 	cdef double* x_new_c = <double*>malloc(len(x_new_list) * sizeof(double))
*/
    __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1042, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_float_1_0);
    __Pyx_GIVEREF(__pyx_mstate_global->__pyx_float_1_0);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_mstate_global->__pyx_float_1_0) != (0)) __PYX_ERR(0, 1042, __pyx_L1_error);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_float_0_1);
    __Pyx_GIVEREF(__pyx_mstate_global->__pyx_float_0_1);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_mstate_global->__pyx_float_0_1) != (0)) __PYX_ERR(0, 1042, __pyx_L1_error);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_float_1_0);
    __Pyx_GIVEREF(__pyx_mstate_global->__pyx_float_1_0);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_mstate_global->__pyx_float_1_0) != (0)) __PYX_ERR(0, 1042, __pyx_L1_error);
    __Pyx_DECREF_SET(__pyx_v_variogram_params, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":1041
 * 
 * 	# Default variogram parameters if not provided
 * 	if variogram_params is None:             # <<<<<<<<<<<<<<
 * 		variogram_params = [1.0, 0.1, 1.0]  # [range, sill, nugget]
 * 
*/
  }

  /* "pyroxa/pybindings.pyx":1044
 * 		variogram_params = [1.0, 0.1, 1.0]  # [range, sill, nugget]
 * 
 * 	cdef double* x_new_c = <double*>malloc(len(x_new_list) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* x_known_c = <double*>malloc(n_known * sizeof(double))
 * 	cdef double* y_known_c = <double*>malloc(n_known * sizeof(double))
*/
  __pyx_t_1 = __Pyx_PyList_GET_SIZE(__pyx_v_x_new_list); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1044, __pyx_L1_error)
  __pyx_v_x_new_c = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1045
 * 
 * 	cdef double* x_new_c = <double*>malloc(len(x_new_list) * sizeof(double))
 * 	cdef double* x_known_c = <double*>malloc(n_known * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* y_known_c = <double*>malloc(n_known * sizeof(double))
 * 	cdef double* var_params_c = <double*>malloc(len(variogram_params) * sizeof(double))
*/
  __pyx_v_x_known_c = ((double *)malloc((__pyx_v_n_known * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1046
 * 	cdef double* x_new_c = <double*>malloc(len(x_new_list) * sizeof(double))
 * 	cdef double* x_known_c = <double*>malloc(n_known * sizeof(double))
 * 	cdef double* y_known_c = <double*>malloc(n_known * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* var_params_c = <double*>malloc(len(variogram_params) * sizeof(double))
 * 
*/
  __pyx_v_y_known_c = ((double *)malloc((__pyx_v_n_known * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1047
 * 	cdef double* x_known_c = <double*>malloc(n_known * sizeof(double))
 * 	cdef double* y_known_c = <double*>malloc(n_known * sizeof(double))
 * 	cdef double* var_params_c = <double*>malloc(len(variogram_params) * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_variogram_params); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1047, __pyx_L1_error)
  __pyx_v_var_params_c = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1049
 * 	cdef double* var_params_c = <double*>malloc(len(variogram_params) * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(len(x_new_list)):
 * 			x_new_c[i] = x_new_list[i]
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1050
 * 
 * 	try:
 * 		for i in range(len(x_new_list)):             # <<<<<<<<<<<<<<
 * 			x_new_c[i] = x_new_list[i]
 * 		for i in range(n_known):
*/
    __pyx_t_1 = __Pyx_PyList_GET_SIZE(__pyx_v_x_new_list); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1050, __pyx_L8_error)
    __pyx_t_6 = __pyx_t_1;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1051
 * 	try:
 * 		for i in range(len(x_new_list)):
 * 			x_new_c[i] = x_new_list[i]             # <<<<<<<<<<<<<<
 * 		for i in range(n_known):
 * 			x_known_c[i] = x_known[i]
*/
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__Pyx_PyList_GET_ITEM(__pyx_v_x_new_list, __pyx_v_i)); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1051, __pyx_L8_error)
      (__pyx_v_x_new_c[__pyx_v_i]) = __pyx_t_8;
    }

    /* "pyroxa/pybindings.pyx":1052
 * 		for i in range(len(x_new_list)):
 * 			x_new_c[i] = x_new_list[i]
 * 		for i in range(n_known):             # <<<<<<<<<<<<<<
 * 			x_known_c[i] = x_known[i]
 * 			y_known_c[i] = y_known[i]
*/
    __pyx_t_9 = __pyx_v_n_known;
    __pyx_t_10 = __pyx_t_9;
    for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_10; __pyx_t_1+=1) {
      __pyx_v_i = __pyx_t_1;

      /* "pyroxa/pybindings.pyx":1053
 * 			x_new_c[i] = x_new_list[i]
 * 		for i in range(n_known):
 * 			x_known_c[i] = x_known[i]             # <<<<<<<<<<<<<<
 * 			y_known_c[i] = y_known[i]
 * 		for i in range(len(variogram_params)):
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_x_known, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1053, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1053, __pyx_L8_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_x_known_c[__pyx_v_i]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1054
 * 		for i in range(n_known):
 * 			x_known_c[i] = x_known[i]
 * 			y_known_c[i] = y_known[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(variogram_params)):
 * 			var_params_c[i] = variogram_params[i]
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_y_known, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1054, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1054, __pyx_L8_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_y_known_c[__pyx_v_i]) = __pyx_t_8;
    }

    /* "pyroxa/pybindings.pyx":1055
 * 			x_known_c[i] = x_known[i]
 * 			y_known_c[i] = y_known[i]
 * 		for i in range(len(variogram_params)):             # <<<<<<<<<<<<<<
 * 			var_params_c[i] = variogram_params[i]
 * 
*/
    __pyx_t_1 = PyObject_Length(__pyx_v_variogram_params); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1055, __pyx_L8_error)
    __pyx_t_6 = __pyx_t_1;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1056
 * 			y_known_c[i] = y_known[i]
 * 		for i in range(len(variogram_params)):
 * 			var_params_c[i] = variogram_params[i]             # <<<<<<<<<<<<<<
 * 
 * 		result = kriging_interpolation(x_new_c, n_known, x_known_c, y_known_c, var_params_c)
*/
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_variogram_params, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 0, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1056, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1056, __pyx_L8_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_var_params_c[__pyx_v_i]) = __pyx_t_8;
    }

    /* "pyroxa/pybindings.pyx":1058
 * 			var_params_c[i] = variogram_params[i]
 * 
 * 		result = kriging_interpolation(x_new_c, n_known, x_known_c, y_known_c, var_params_c)             # <<<<<<<<<<<<<<
 * 
 * 		# Return single value if input was single value
*/
    __pyx_v_result = kriging_interpolation(__pyx_v_x_new_c, __pyx_v_n_known, __pyx_v_x_known_c, __pyx_v_y_known_c, __pyx_v_var_params_c);

    /* "pyroxa/pybindings.pyx":1061
 * 
 * 		# Return single value if input was single value
 * 		if isinstance(x_new, (int, float)):             # <<<<<<<<<<<<<<
 * 			return result
 * 		else:
*/
    __pyx_t_3 = PyLong_Check(__pyx_v_x_new); 
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_3 = PyFloat_Check(__pyx_v_x_new); 
    __pyx_t_2 = __pyx_t_3;
    __pyx_L17_bool_binop_done:;
    if (__pyx_t_2) {

      /* "pyroxa/pybindings.pyx":1062
 * 		# Return single value if input was single value
 * 		if isinstance(x_new, (int, float)):
 * 			return result             # <<<<<<<<<<<<<<
 * 		else:
 * 			return [result]  # For now, return single result even for arrays
*/
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1062, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_r = __pyx_t_5;
      __pyx_t_5 = 0;
      goto __pyx_L7_return;

      /* "pyroxa/pybindings.pyx":1061
 * 
 * 		# Return single value if input was single value
 * 		if isinstance(x_new, (int, float)):             # <<<<<<<<<<<<<<
 * 			return result
 * 		else:
*/
    }

    /* "pyroxa/pybindings.pyx":1064
 * 			return result
 * 		else:
 * 			return [result]  # For now, return single result even for arrays             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(x_new_c)
*/
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1064, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1064, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_5) != (0)) __PYX_ERR(0, 1064, __pyx_L8_error);
      __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L7_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1066
 * 			return [result]  # For now, return single result even for arrays
 * 	finally:
 * 		free(x_new_c)             # <<<<<<<<<<<<<<
 * 		free(x_known_c)
 * 		free(y_known_c)
*/
  /*finally:*/ {
    __pyx_L8_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
      if ( unlikely(__Pyx_GetException(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14) < 0)) __Pyx_ErrFetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __pyx_t_9 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_11 = __pyx_filename;
      {
        free(__pyx_v_x_new_c);

        /* "pyroxa/pybindings.pyx":1067
 * 	finally:
 * 		free(x_new_c)
 * 		free(x_known_c)             # <<<<<<<<<<<<<<
 * 		free(y_known_c)
 * 		free(var_params_c)
*/
        free(__pyx_v_x_known_c);

        /* "pyroxa/pybindings.pyx":1068
 * 		free(x_new_c)
 * 		free(x_known_c)
 * 		free(y_known_c)             # <<<<<<<<<<<<<<
 * 		free(var_params_c)
 * 
*/
        free(__pyx_v_y_known_c);

        /* "pyroxa/pybindings.pyx":1069
 * 		free(x_known_c)
 * 		free(y_known_c)
 * 		free(var_params_c)             # <<<<<<<<<<<<<<
 * 
 * def py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000):
*/
        free(__pyx_v_var_params_c);
      }
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_ErrRestore(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
      __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_11;
      goto __pyx_L1_error;
    }
    __pyx_L7_return: {
      __pyx_t_17 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1066
 * 			return [result]  # For now, return single result even for arrays
 * 	finally:
 * 		free(x_new_c)             # <<<<<<<<<<<<<<
 * 		free(x_known_c)
 * 		free(y_known_c)
*/
      free(__pyx_v_x_new_c);

      /* "pyroxa/pybindings.pyx":1067
 * 	finally:
 * 		free(x_new_c)
 * 		free(x_known_c)             # <<<<<<<<<<<<<<
 * 		free(y_known_c)
 * 		free(var_params_c)
*/
      free(__pyx_v_x_known_c);

      /* "pyroxa/pybindings.pyx":1068
 * 		free(x_new_c)
 * 		free(x_known_c)
 * 		free(y_known_c)             # <<<<<<<<<<<<<<
 * 		free(var_params_c)
 * 
*/
      free(__pyx_v_y_known_c);

      /* "pyroxa/pybindings.pyx":1069
 * 		free(x_known_c)
 * 		free(y_known_c)
 * 		free(var_params_c)             # <<<<<<<<<<<<<<
 * 
 * def py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000):
*/
      free(__pyx_v_var_params_c);
      __pyx_r = __pyx_t_17;
      __pyx_t_17 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1030
 * 		free(params_c)
 * 
 * def py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None):             # <<<<<<<<<<<<<<
 * 	"""Kriging interpolation for spatial data"""
 * 	cdef int n_known = len(x_known)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_kriging_interpolation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x_new_list);
  __Pyx_XDECREF(__pyx_v_variogram_params);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1071
 * 		free(var_params_c)
 * 
 * def py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000):             # <<<<<<<<<<<<<<
 * 	"""Bootstrap uncertainty analysis"""
 * 	cdef int n_data = len(data)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_87py_bootstrap_uncertainty(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_86py_bootstrap_uncertainty, "py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000)\n\nBootstrap uncertainty analysis");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_87py_bootstrap_uncertainty = {"py_bootstrap_uncertainty", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_87py_bootstrap_uncertainty, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_86py_bootstrap_uncertainty};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_87py_bootstrap_uncertainty(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_parameters = 0;
  int __pyx_v_n_bootstrap;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_bootstrap_uncertainty (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_data,&__pyx_mstate_global->__pyx_n_u_parameters,&__pyx_mstate_global->__pyx_n_u_n_bootstrap,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1071, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1071, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1071, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1071, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_bootstrap_uncertainty", 0) < 0) __PYX_ERR(0, 1071, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_bootstrap_uncertainty", 0, 2, 3, i); __PYX_ERR(0, 1071, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1071, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1071, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1071, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_data = values[0];
    __pyx_v_parameters = values[1];
    if (values[2]) {
      __pyx_v_n_bootstrap = __Pyx_PyLong_As_int(values[2]); if (unlikely((__pyx_v_n_bootstrap == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1071, __pyx_L3_error)
    } else {
      __pyx_v_n_bootstrap = ((int)((int)0x3E8));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_bootstrap_uncertainty", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 1071, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_bootstrap_uncertainty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_86py_bootstrap_uncertainty(__pyx_self, __pyx_v_data, __pyx_v_parameters, __pyx_v_n_bootstrap);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_86py_bootstrap_uncertainty(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_parameters, int __pyx_v_n_bootstrap) {
  int __pyx_v_n_data;
  int __pyx_v_n_params;
  double *__pyx_v_data_c;
  double *__pyx_v_params_c;
  double *__pyx_v_param_distribution;
  PyObject *__pyx_v_i = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_distribution = NULL;
  PyObject *__pyx_v_param_samples = NULL;
  int __pyx_9genexpr24__pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  double __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_bootstrap_uncertainty", 0);

  /* "pyroxa/pybindings.pyx":1073
 * def py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000):
 * 	"""Bootstrap uncertainty analysis"""
 * 	cdef int n_data = len(data)             # <<<<<<<<<<<<<<
 * 	cdef int n_params = len(parameters)
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_data); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1073, __pyx_L1_error)
  __pyx_v_n_data = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":1074
 * 	"""Bootstrap uncertainty analysis"""
 * 	cdef int n_data = len(data)
 * 	cdef int n_params = len(parameters)             # <<<<<<<<<<<<<<
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_parameters); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1074, __pyx_L1_error)
  __pyx_v_n_params = __pyx_t_1;

  /* "pyroxa/pybindings.pyx":1075
 * 	cdef int n_data = len(data)
 * 	cdef int n_params = len(parameters)
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))
 * 	cdef double* param_distribution = <double*>malloc(n_params * n_bootstrap * sizeof(double))
*/
  __pyx_v_data_c = ((double *)malloc((__pyx_v_n_data * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1076
 * 	cdef int n_params = len(parameters)
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* param_distribution = <double*>malloc(n_params * n_bootstrap * sizeof(double))
 * 
*/
  __pyx_v_params_c = ((double *)malloc((__pyx_v_n_params * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1077
 * 	cdef double* data_c = <double*>malloc(n_data * sizeof(double))
 * 	cdef double* params_c = <double*>malloc(n_params * sizeof(double))
 * 	cdef double* param_distribution = <double*>malloc(n_params * n_bootstrap * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_param_distribution = ((double *)malloc(((__pyx_v_n_params * __pyx_v_n_bootstrap) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1079
 * 	cdef double* param_distribution = <double*>malloc(n_params * n_bootstrap * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(n_data):
 * 			data_c[i] = data[i]
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1080
 * 
 * 	try:
 * 		for i in range(n_data):             # <<<<<<<<<<<<<<
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_4 = __pyx_builtin_range; 
    __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_n_data); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1080, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1080, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1080, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1080, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1080, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1080, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1));
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1080, __pyx_L4_error)
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1080, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1081
 * 	try:
 * 		for i in range(n_data):
 * 			data_c[i] = data[i]             # <<<<<<<<<<<<<<
 * 		for i in range(n_params):
 * 			params_c[i] = parameters[i]
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_data, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1081, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1081, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1081, __pyx_L4_error)
      (__pyx_v_data_c[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1080
 * 
 * 	try:
 * 		for i in range(n_data):             # <<<<<<<<<<<<<<
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):
*/
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":1082
 * 		for i in range(n_data):
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):             # <<<<<<<<<<<<<<
 * 			params_c[i] = parameters[i]
 * 
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_5 = __pyx_builtin_range; 
    __pyx_t_3 = __Pyx_PyLong_From_int(__pyx_v_n_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1082, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1082, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1082, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1082, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1082, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1082, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1));
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1082, __pyx_L4_error)
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1082, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1083
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):
 * 			params_c[i] = parameters[i]             # <<<<<<<<<<<<<<
 * 
 * 		result = bootstrap_uncertainty(n_bootstrap, n_data, n_params, data_c, params_c, param_distribution)
*/
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_parameters, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1083, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1083, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1083, __pyx_L4_error)
      (__pyx_v_params_c[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1082
 * 		for i in range(n_data):
 * 			data_c[i] = data[i]
 * 		for i in range(n_params):             # <<<<<<<<<<<<<<
 * 			params_c[i] = parameters[i]
 * 
*/
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":1085
 * 			params_c[i] = parameters[i]
 * 
 * 		result = bootstrap_uncertainty(n_bootstrap, n_data, n_params, data_c, params_c, param_distribution)             # <<<<<<<<<<<<<<
 * 
 * 		if result > 0:
*/
    __pyx_v_result = bootstrap_uncertainty(__pyx_v_n_bootstrap, __pyx_v_n_data, __pyx_v_n_params, __pyx_v_data_c, __pyx_v_params_c, __pyx_v_param_distribution);

    /* "pyroxa/pybindings.pyx":1087
 * 		result = bootstrap_uncertainty(n_bootstrap, n_data, n_params, data_c, params_c, param_distribution)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Convert parameter distribution to list of lists
 * 			distribution = []
*/
    __pyx_t_10 = (__pyx_v_result > 0);
    if (__pyx_t_10) {

      /* "pyroxa/pybindings.pyx":1089
 * 		if result > 0:
 * 			# Convert parameter distribution to list of lists
 * 			distribution = []             # <<<<<<<<<<<<<<
 * 			for i in range(n_params):
 * 				param_samples = [param_distribution[i * n_bootstrap + j] for j in range(n_bootstrap)]
*/
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1089, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_v_distribution = ((PyObject*)__pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":1090
 * 			# Convert parameter distribution to list of lists
 * 			distribution = []
 * 			for i in range(n_params):             # <<<<<<<<<<<<<<
 * 				param_samples = [param_distribution[i * n_bootstrap + j] for j in range(n_bootstrap)]
 * 				distribution.append(param_samples)
*/
      __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_builtin_range);
      __pyx_t_3 = __pyx_builtin_range; 
      __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_n_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1090, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1090, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
      }
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3);
        __pyx_t_1 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1090, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1090, __pyx_L4_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1090, __pyx_L4_error)
              #endif
              if (__pyx_t_1 >= __pyx_temp) break;
            }
            __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
            ++__pyx_t_1;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1090, __pyx_L4_error)
              #endif
              if (__pyx_t_1 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
            #else
            __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
            #endif
            ++__pyx_t_1;
          }
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1090, __pyx_L4_error)
        } else {
          __pyx_t_5 = __pyx_t_7(__pyx_t_3);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1090, __pyx_L4_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "pyroxa/pybindings.pyx":1091
 * 			distribution = []
 * 			for i in range(n_params):
 * 				param_samples = [param_distribution[i * n_bootstrap + j] for j in range(n_bootstrap)]             # <<<<<<<<<<<<<<
 * 				distribution.append(param_samples)
 * 
*/
        { /* enter inner scope */
          __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1091, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_11 = __pyx_v_n_bootstrap;
          __pyx_t_12 = __pyx_t_11;
          for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
            __pyx_9genexpr24__pyx_v_j = __pyx_t_13;
            __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_n_bootstrap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1091, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_4 = PyNumber_Multiply(__pyx_v_i, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1091, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_9genexpr24__pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1091, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_14 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1091, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_14); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1091, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = PyFloat_FromDouble((__pyx_v_param_distribution[__pyx_t_9])); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1091, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_14);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_14))) __PYX_ERR(0, 1091, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_param_samples, ((PyObject*)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "pyroxa/pybindings.pyx":1092
 * 			for i in range(n_params):
 * 				param_samples = [param_distribution[i * n_bootstrap + j] for j in range(n_bootstrap)]
 * 				distribution.append(param_samples)             # <<<<<<<<<<<<<<
 * 
 * 			return {
*/
        __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_distribution, __pyx_v_param_samples); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1092, __pyx_L4_error)

        /* "pyroxa/pybindings.pyx":1090
 * 			# Convert parameter distribution to list of lists
 * 			distribution = []
 * 			for i in range(n_params):             # <<<<<<<<<<<<<<
 * 				param_samples = [param_distribution[i * n_bootstrap + j] for j in range(n_bootstrap)]
 * 				distribution.append(param_samples)
*/
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1094
 * 				distribution.append(param_samples)
 * 
 * 			return {             # <<<<<<<<<<<<<<
 * 				'success': True,
 * 				'parameter_distribution': distribution,
*/
      __Pyx_XDECREF(__pyx_r);

      /* "pyroxa/pybindings.pyx":1095
 * 
 * 			return {
 * 				'success': True,             # <<<<<<<<<<<<<<
 * 				'parameter_distribution': distribution,
 * 				'n_bootstrap': n_bootstrap
*/
      __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1095, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_success, Py_True) < 0) __PYX_ERR(0, 1095, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1096
 * 			return {
 * 				'success': True,
 * 				'parameter_distribution': distribution,             # <<<<<<<<<<<<<<
 * 				'n_bootstrap': n_bootstrap
 * 			}
*/
      if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_parameter_distribution, __pyx_v_distribution) < 0) __PYX_ERR(0, 1095, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1097
 * 				'success': True,
 * 				'parameter_distribution': distribution,
 * 				'n_bootstrap': n_bootstrap             # <<<<<<<<<<<<<<
 * 			}
 * 		else:
*/
      __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_n_bootstrap); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1097, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_n_bootstrap, __pyx_t_5) < 0) __PYX_ERR(0, 1095, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1087
 * 		result = bootstrap_uncertainty(n_bootstrap, n_data, n_params, data_c, params_c, param_distribution)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Convert parameter distribution to list of lists
 * 			distribution = []
*/
    }

    /* "pyroxa/pybindings.pyx":1100
 * 			}
 * 		else:
 * 			return {'success': False, 'parameter_distribution': []}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(data_c)
*/
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1100, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_success, Py_False) < 0) __PYX_ERR(0, 1100, __pyx_L4_error)
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1100, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_parameter_distribution, __pyx_t_5) < 0) __PYX_ERR(0, 1100, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1102
 * 			return {'success': False, 'parameter_distribution': []}
 * 	finally:
 * 		free(data_c)             # <<<<<<<<<<<<<<
 * 		free(params_c)
 * 		free(param_distribution)
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      if ( unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __pyx_t_11 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
      {
        free(__pyx_v_data_c);

        /* "pyroxa/pybindings.pyx":1103
 * 	finally:
 * 		free(data_c)
 * 		free(params_c)             # <<<<<<<<<<<<<<
 * 		free(param_distribution)
 * 
*/
        free(__pyx_v_params_c);

        /* "pyroxa/pybindings.pyx":1104
 * 		free(data_c)
 * 		free(params_c)
 * 		free(param_distribution)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 10: Matrix operations
*/
        free(__pyx_v_param_distribution);
      }
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __pyx_lineno = __pyx_t_11; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_16;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_22 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1102
 * 			return {'success': False, 'parameter_distribution': []}
 * 	finally:
 * 		free(data_c)             # <<<<<<<<<<<<<<
 * 		free(params_c)
 * 		free(param_distribution)
*/
      free(__pyx_v_data_c);

      /* "pyroxa/pybindings.pyx":1103
 * 	finally:
 * 		free(data_c)
 * 		free(params_c)             # <<<<<<<<<<<<<<
 * 		free(param_distribution)
 * 
*/
      free(__pyx_v_params_c);

      /* "pyroxa/pybindings.pyx":1104
 * 		free(data_c)
 * 		free(params_c)
 * 		free(param_distribution)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 10: Matrix operations
*/
      free(__pyx_v_param_distribution);
      __pyx_r = __pyx_t_22;
      __pyx_t_22 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1071
 * 		free(var_params_c)
 * 
 * def py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000):             # <<<<<<<<<<<<<<
 * 	"""Bootstrap uncertainty analysis"""
 * 	cdef int n_data = len(data)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("pyroxa._pybindings.py_bootstrap_uncertainty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_distribution);
  __Pyx_XDECREF(__pyx_v_param_samples);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1107
 * 
 * # BATCH 10: Matrix operations
 * def py_matrix_multiply(A, B):             # <<<<<<<<<<<<<<
 * 	"""Matrix multiplication C = A * B"""
 * 	import numpy as np
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_89py_matrix_multiply(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_88py_matrix_multiply, "py_matrix_multiply(A, B)\n\nMatrix multiplication C = A * B");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_89py_matrix_multiply = {"py_matrix_multiply", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_89py_matrix_multiply, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_88py_matrix_multiply};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_89py_matrix_multiply(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_A = 0;
  PyObject *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_matrix_multiply (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1107, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1107, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1107, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_matrix_multiply", 0) < 0) __PYX_ERR(0, 1107, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_matrix_multiply", 1, 2, 2, i); __PYX_ERR(0, 1107, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1107, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1107, __pyx_L3_error)
    }
    __pyx_v_A = values[0];
    __pyx_v_B = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_matrix_multiply", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1107, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_matrix_multiply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_88py_matrix_multiply(__pyx_self, __pyx_v_A, __pyx_v_B);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_88py_matrix_multiply(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_A, PyObject *__pyx_v_B) {
  PyObject *__pyx_v_np = NULL;
  int __pyx_v_m;
  int __pyx_v_n;
  int __pyx_v_p;
  double *__pyx_v_A_c;
  double *__pyx_v_B_c;
  double *__pyx_v_C_c;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_C = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  double __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_matrix_multiply", 0);
  __Pyx_INCREF(__pyx_v_A);
  __Pyx_INCREF(__pyx_v_B);

  /* "pyroxa/pybindings.pyx":1109
 * def py_matrix_multiply(A, B):
 * 	"""Matrix multiplication C = A * B"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 	A = np.array(A)
 * 	B = np.array(B)
*/
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_numpy, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1110
 * 	"""Matrix multiplication C = A * B"""
 * 	import numpy as np
 * 	A = np.array(A)             # <<<<<<<<<<<<<<
 * 	B = np.array(B)
 * 
*/
  __pyx_t_2 = __pyx_v_np;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_A};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_array, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF_SET(__pyx_v_A, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1111
 * 	import numpy as np
 * 	A = np.array(A)
 * 	B = np.array(B)             # <<<<<<<<<<<<<<
 * 
 * 	if A.ndim != 2 or B.ndim != 2:
*/
  __pyx_t_2 = __pyx_v_np;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_B};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_array, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF_SET(__pyx_v_B, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1113
 * 	B = np.array(B)
 * 
 * 	if A.ndim != 2 or B.ndim != 2:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Inputs must be 2D matrices")
 * 
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_mstate_global->__pyx_n_u_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = (__Pyx_PyLong_BoolNeObjC(__pyx_t_1, __pyx_mstate_global->__pyx_int_2, 2, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_B, __pyx_mstate_global->__pyx_n_u_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = (__Pyx_PyLong_BoolNeObjC(__pyx_t_1, __pyx_mstate_global->__pyx_int_2, 2, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "pyroxa/pybindings.pyx":1114
 * 
 * 	if A.ndim != 2 or B.ndim != 2:
 * 		raise ValueError("Inputs must be 2D matrices")             # <<<<<<<<<<<<<<
 * 
 * 	cdef int m = A.shape[0]
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_6 = __pyx_builtin_ValueError; 
    __pyx_t_3 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_kp_u_Inputs_must_be_2D_matrices};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1114, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1113
 * 	B = np.array(B)
 * 
 * 	if A.ndim != 2 or B.ndim != 2:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Inputs must be 2D matrices")
 * 
*/
  }

  /* "pyroxa/pybindings.pyx":1116
 * 		raise ValueError("Inputs must be 2D matrices")
 * 
 * 	cdef int m = A.shape[0]             # <<<<<<<<<<<<<<
 * 	cdef int n = A.shape[1]
 * 	cdef int p = B.shape[1]
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_mstate_global->__pyx_n_u_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyLong_As_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_m = __pyx_t_7;

  /* "pyroxa/pybindings.pyx":1117
 * 
 * 	cdef int m = A.shape[0]
 * 	cdef int n = A.shape[1]             # <<<<<<<<<<<<<<
 * 	cdef int p = B.shape[1]
 * 
*/
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_mstate_global->__pyx_n_u_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = __Pyx_PyLong_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n = __pyx_t_7;

  /* "pyroxa/pybindings.pyx":1118
 * 	cdef int m = A.shape[0]
 * 	cdef int n = A.shape[1]
 * 	cdef int p = B.shape[1]             # <<<<<<<<<<<<<<
 * 
 * 	if A.shape[1] != B.shape[0]:
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_B, __pyx_mstate_global->__pyx_n_u_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyLong_As_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_p = __pyx_t_7;

  /* "pyroxa/pybindings.pyx":1120
 * 	cdef int p = B.shape[1]
 * 
 * 	if A.shape[1] != B.shape[0]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Matrix dimensions incompatible for multiplication")
 * 
*/
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_mstate_global->__pyx_n_u_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_6, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_B, __pyx_mstate_global->__pyx_n_u_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "pyroxa/pybindings.pyx":1121
 * 
 * 	if A.shape[1] != B.shape[0]:
 * 		raise ValueError("Matrix dimensions incompatible for multiplication")             # <<<<<<<<<<<<<<
 * 
 * 	cdef double* A_c = <double*>malloc(m * n * sizeof(double))
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_1 = __pyx_builtin_ValueError; 
    __pyx_t_3 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_kp_u_Matrix_dimensions_incompatible_f};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1121, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1120
 * 	cdef int p = B.shape[1]
 * 
 * 	if A.shape[1] != B.shape[0]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Matrix dimensions incompatible for multiplication")
 * 
*/
  }

  /* "pyroxa/pybindings.pyx":1123
 * 		raise ValueError("Matrix dimensions incompatible for multiplication")
 * 
 * 	cdef double* A_c = <double*>malloc(m * n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* B_c = <double*>malloc(n * p * sizeof(double))
 * 	cdef double* C_c = <double*>malloc(m * p * sizeof(double))
*/
  __pyx_v_A_c = ((double *)malloc(((__pyx_v_m * __pyx_v_n) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1124
 * 
 * 	cdef double* A_c = <double*>malloc(m * n * sizeof(double))
 * 	cdef double* B_c = <double*>malloc(n * p * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* C_c = <double*>malloc(m * p * sizeof(double))
 * 
*/
  __pyx_v_B_c = ((double *)malloc(((__pyx_v_n * __pyx_v_p) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1125
 * 	cdef double* A_c = <double*>malloc(m * n * sizeof(double))
 * 	cdef double* B_c = <double*>malloc(n * p * sizeof(double))
 * 	cdef double* C_c = <double*>malloc(m * p * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_C_c = ((double *)malloc(((__pyx_v_m * __pyx_v_p) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1127
 * 	cdef double* C_c = <double*>malloc(m * p * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Flatten matrices to C arrays (row-major)
 * 		for i in range(m):
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1129
 * 	try:
 * 		# Flatten matrices to C arrays (row-major)
 * 		for i in range(m):             # <<<<<<<<<<<<<<
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]
*/
    __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_2 = __pyx_builtin_range; 
    __pyx_t_8 = __Pyx_PyLong_From_int(__pyx_v_m); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1129, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_8};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1129, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_6);
    }
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_2 = __pyx_t_6; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1129, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1129, __pyx_L8_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1129, __pyx_L8_error)
            #endif
            if (__pyx_t_9 >= __pyx_temp) break;
          }
          __pyx_t_6 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_9);
          ++__pyx_t_9;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1129, __pyx_L8_error)
            #endif
            if (__pyx_t_9 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_9));
          #else
          __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_9);
          #endif
          ++__pyx_t_9;
        }
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1129, __pyx_L8_error)
      } else {
        __pyx_t_6 = __pyx_t_10(__pyx_t_2);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1129, __pyx_L8_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "pyroxa/pybindings.pyx":1130
 * 		# Flatten matrices to C arrays (row-major)
 * 		for i in range(m):
 * 			for j in range(n):             # <<<<<<<<<<<<<<
 * 				A_c[i * n + j] = A[i, j]
 * 
*/
      __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_builtin_range);
      __pyx_t_1 = __pyx_builtin_range; 
      __pyx_t_11 = __Pyx_PyLong_From_int(__pyx_v_n); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1130, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_3 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_11};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1130, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_6);
      }
      if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
        __pyx_t_1 = __pyx_t_6; __Pyx_INCREF(__pyx_t_1);
        __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1130, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1130, __pyx_L8_error)
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1130, __pyx_L8_error)
              #endif
              if (__pyx_t_12 >= __pyx_temp) break;
            }
            __pyx_t_6 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_12);
            ++__pyx_t_12;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1130, __pyx_L8_error)
              #endif
              if (__pyx_t_12 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_12));
            #else
            __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_12);
            #endif
            ++__pyx_t_12;
          }
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1130, __pyx_L8_error)
        } else {
          __pyx_t_6 = __pyx_t_13(__pyx_t_1);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1130, __pyx_L8_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "pyroxa/pybindings.pyx":1131
 * 		for i in range(m):
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(n):
*/
        __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1131, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_i) != (0)) __PYX_ERR(0, 1131, __pyx_L8_error);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_j) != (0)) __PYX_ERR(0, 1131, __pyx_L8_error);
        __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_A, __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1131, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_14 = __Pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1131, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyLong_From_int(__pyx_v_n); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1131, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_6 = PyNumber_Multiply(__pyx_v_i, __pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1131, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyNumber_Add(__pyx_t_6, __pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1131, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_t_11); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1131, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        (__pyx_v_A_c[__pyx_t_15]) = __pyx_t_14;

        /* "pyroxa/pybindings.pyx":1130
 * 		# Flatten matrices to C arrays (row-major)
 * 		for i in range(m):
 * 			for j in range(n):             # <<<<<<<<<<<<<<
 * 				A_c[i * n + j] = A[i, j]
 * 
*/
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":1129
 * 	try:
 * 		# Flatten matrices to C arrays (row-major)
 * 		for i in range(m):             # <<<<<<<<<<<<<<
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1133
 * 				A_c[i * n + j] = A[i, j]
 * 
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			for j in range(p):
 * 				B_c[i * p + j] = B[i, j]
*/
    __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_11 = __pyx_builtin_range; 
    __pyx_t_6 = __Pyx_PyLong_From_int(__pyx_v_n); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1133, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_11 = __pyx_t_2; __Pyx_INCREF(__pyx_t_11);
      __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1133, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1133, __pyx_L8_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_11))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_11);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1133, __pyx_L8_error)
            #endif
            if (__pyx_t_9 >= __pyx_temp) break;
          }
          __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_11, __pyx_t_9);
          ++__pyx_t_9;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_11);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1133, __pyx_L8_error)
            #endif
            if (__pyx_t_9 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_9));
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_11, __pyx_t_9);
          #endif
          ++__pyx_t_9;
        }
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L8_error)
      } else {
        __pyx_t_2 = __pyx_t_10(__pyx_t_11);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1133, __pyx_L8_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1134
 * 
 * 		for i in range(n):
 * 			for j in range(p):             # <<<<<<<<<<<<<<
 * 				B_c[i * p + j] = B[i, j]
 * 
*/
      __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_builtin_range);
      __pyx_t_1 = __pyx_builtin_range; 
      __pyx_t_8 = __Pyx_PyLong_From_int(__pyx_v_p); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1134, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1134, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
      }
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1);
        __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1134, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1134, __pyx_L8_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1134, __pyx_L8_error)
              #endif
              if (__pyx_t_12 >= __pyx_temp) break;
            }
            __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_12);
            ++__pyx_t_12;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1134, __pyx_L8_error)
              #endif
              if (__pyx_t_12 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_12));
            #else
            __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_12);
            #endif
            ++__pyx_t_12;
          }
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1134, __pyx_L8_error)
        } else {
          __pyx_t_2 = __pyx_t_13(__pyx_t_1);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1134, __pyx_L8_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "pyroxa/pybindings.pyx":1135
 * 		for i in range(n):
 * 			for j in range(p):
 * 				B_c[i * p + j] = B[i, j]             # <<<<<<<<<<<<<<
 * 
 * 		result = matrix_multiply(A_c, B_c, C_c, m, n, p)
*/
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_i) != (0)) __PYX_ERR(0, 1135, __pyx_L8_error);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_j) != (0)) __PYX_ERR(0, 1135, __pyx_L8_error);
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_B, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1135, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_14 = __Pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1135, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyLong_From_int(__pyx_v_p); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1135, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_2 = PyNumber_Multiply(__pyx_v_i, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1135, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Add(__pyx_t_2, __pyx_v_j); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1135, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1135, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        (__pyx_v_B_c[__pyx_t_15]) = __pyx_t_14;

        /* "pyroxa/pybindings.pyx":1134
 * 
 * 		for i in range(n):
 * 			for j in range(p):             # <<<<<<<<<<<<<<
 * 				B_c[i * p + j] = B[i, j]
 * 
*/
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":1133
 * 				A_c[i * n + j] = A[i, j]
 * 
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			for j in range(p):
 * 				B_c[i * p + j] = B[i, j]
*/
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "pyroxa/pybindings.pyx":1137
 * 				B_c[i * p + j] = B[i, j]
 * 
 * 		result = matrix_multiply(A_c, B_c, C_c, m, n, p)             # <<<<<<<<<<<<<<
 * 
 * 		if result == 0:  # C functions return 0 on success
*/
    __pyx_v_result = matrix_multiply(__pyx_v_A_c, __pyx_v_B_c, __pyx_v_C_c, __pyx_v_m, __pyx_v_n, __pyx_v_p);

    /* "pyroxa/pybindings.pyx":1139
 * 		result = matrix_multiply(A_c, B_c, C_c, m, n, p)
 * 
 * 		if result == 0:  # C functions return 0 on success             # <<<<<<<<<<<<<<
 * 			# Convert back to Python matrix
 * 			C = np.zeros((m, p))
*/
    __pyx_t_4 = (__pyx_v_result == 0);
    if (likely(__pyx_t_4)) {

      /* "pyroxa/pybindings.pyx":1141
 * 		if result == 0:  # C functions return 0 on success
 * 			# Convert back to Python matrix
 * 			C = np.zeros((m, p))             # <<<<<<<<<<<<<<
 * 			for i in range(m):
 * 				for j in range(p):
*/
      __pyx_t_1 = __pyx_v_np;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyLong_From_int(__pyx_v_m); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1141, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_p); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1141, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1141, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8) != (0)) __PYX_ERR(0, 1141, __pyx_L8_error);
      __Pyx_GIVEREF(__pyx_t_2);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2) != (0)) __PYX_ERR(0, 1141, __pyx_L8_error);
      __pyx_t_8 = 0;
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_6};
        __pyx_t_11 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_zeros, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1141, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
      }
      __pyx_v_C = __pyx_t_11;
      __pyx_t_11 = 0;

      /* "pyroxa/pybindings.pyx":1142
 * 			# Convert back to Python matrix
 * 			C = np.zeros((m, p))
 * 			for i in range(m):             # <<<<<<<<<<<<<<
 * 				for j in range(p):
 * 					C[i, j] = C_c[i * p + j]
*/
      __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_builtin_range);
      __pyx_t_1 = __pyx_builtin_range; 
      __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_m); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1142, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_2};
        __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1142, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
      }
      if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
        __pyx_t_1 = __pyx_t_11; __Pyx_INCREF(__pyx_t_1);
        __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1142, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_10 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1142, __pyx_L8_error)
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1142, __pyx_L8_error)
              #endif
              if (__pyx_t_9 >= __pyx_temp) break;
            }
            __pyx_t_11 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_9);
            ++__pyx_t_9;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1142, __pyx_L8_error)
              #endif
              if (__pyx_t_9 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9));
            #else
            __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_9);
            #endif
            ++__pyx_t_9;
          }
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1142, __pyx_L8_error)
        } else {
          __pyx_t_11 = __pyx_t_10(__pyx_t_1);
          if (unlikely(!__pyx_t_11)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1142, __pyx_L8_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "pyroxa/pybindings.pyx":1143
 * 			C = np.zeros((m, p))
 * 			for i in range(m):
 * 				for j in range(p):             # <<<<<<<<<<<<<<
 * 					C[i, j] = C_c[i * p + j]
 * 			return C.tolist()
*/
        __pyx_t_2 = NULL;
        __Pyx_INCREF(__pyx_builtin_range);
        __pyx_t_6 = __pyx_builtin_range; 
        __pyx_t_8 = __Pyx_PyLong_From_int(__pyx_v_p); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1143, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_3 = 1;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_8};
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1143, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_11);
        }
        if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
          __pyx_t_6 = __pyx_t_11; __Pyx_INCREF(__pyx_t_6);
          __pyx_t_12 = 0;
          __pyx_t_13 = NULL;
        } else {
          __pyx_t_12 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1143, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_13 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1143, __pyx_L8_error)
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        for (;;) {
          if (likely(!__pyx_t_13)) {
            if (likely(PyList_CheckExact(__pyx_t_6))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_6);
                #if !CYTHON_ASSUME_SAFE_SIZE
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1143, __pyx_L8_error)
                #endif
                if (__pyx_t_12 >= __pyx_temp) break;
              }
              __pyx_t_11 = __Pyx_PyList_GetItemRef(__pyx_t_6, __pyx_t_12);
              ++__pyx_t_12;
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_6);
                #if !CYTHON_ASSUME_SAFE_SIZE
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1143, __pyx_L8_error)
                #endif
                if (__pyx_t_12 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_11 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_12));
              #else
              __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_12);
              #endif
              ++__pyx_t_12;
            }
            if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1143, __pyx_L8_error)
          } else {
            __pyx_t_11 = __pyx_t_13(__pyx_t_6);
            if (unlikely(!__pyx_t_11)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1143, __pyx_L8_error)
                PyErr_Clear();
              }
              break;
            }
          }
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_11);
          __pyx_t_11 = 0;

          /* "pyroxa/pybindings.pyx":1144
 * 			for i in range(m):
 * 				for j in range(p):
 * 					C[i, j] = C_c[i * p + j]             # <<<<<<<<<<<<<<
 * 			return C.tolist()
 * 		else:
*/
          __pyx_t_11 = __Pyx_PyLong_From_int(__pyx_v_p); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1144, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_8 = PyNumber_Multiply(__pyx_v_i, __pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1144, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = PyNumber_Add(__pyx_t_8, __pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1144, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_t_11); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1144, __pyx_L8_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = PyFloat_FromDouble((__pyx_v_C_c[__pyx_t_15])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1144, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1144, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_v_i);
          __Pyx_GIVEREF(__pyx_v_i);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_i) != (0)) __PYX_ERR(0, 1144, __pyx_L8_error);
          __Pyx_INCREF(__pyx_v_j);
          __Pyx_GIVEREF(__pyx_v_j);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_j) != (0)) __PYX_ERR(0, 1144, __pyx_L8_error);
          if (unlikely((PyObject_SetItem(__pyx_v_C, __pyx_t_8, __pyx_t_11) < 0))) __PYX_ERR(0, 1144, __pyx_L8_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "pyroxa/pybindings.pyx":1143
 * 			C = np.zeros((m, p))
 * 			for i in range(m):
 * 				for j in range(p):             # <<<<<<<<<<<<<<
 * 					C[i, j] = C_c[i * p + j]
 * 			return C.tolist()
*/
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "pyroxa/pybindings.pyx":1142
 * 			# Convert back to Python matrix
 * 			C = np.zeros((m, p))
 * 			for i in range(m):             # <<<<<<<<<<<<<<
 * 				for j in range(p):
 * 					C[i, j] = C_c[i * p + j]
*/
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":1145
 * 				for j in range(p):
 * 					C[i, j] = C_c[i * p + j]
 * 			return C.tolist()             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise RuntimeError("Matrix multiplication failed")
*/
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = __pyx_v_C;
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_3 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_tolist, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1145, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L7_return;

      /* "pyroxa/pybindings.pyx":1139
 * 		result = matrix_multiply(A_c, B_c, C_c, m, n, p)
 * 
 * 		if result == 0:  # C functions return 0 on success             # <<<<<<<<<<<<<<
 * 			# Convert back to Python matrix
 * 			C = np.zeros((m, p))
*/
    }

    /* "pyroxa/pybindings.pyx":1147
 * 			return C.tolist()
 * 		else:
 * 			raise RuntimeError("Matrix multiplication failed")             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(A_c)
*/
    /*else*/ {
      __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_builtin_RuntimeError);
      __pyx_t_11 = __pyx_builtin_RuntimeError; 
      __pyx_t_3 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_Matrix_multiplication_failed};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1147, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 1147, __pyx_L8_error)
    }
  }

  /* "pyroxa/pybindings.pyx":1149
 * 			raise RuntimeError("Matrix multiplication failed")
 * 	finally:
 * 		free(A_c)             # <<<<<<<<<<<<<<
 * 		free(B_c)
 * 		free(C_c)
*/
  /*finally:*/ {
    __pyx_L8_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
      if ( unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_23);
      __pyx_t_7 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
      {
        free(__pyx_v_A_c);

        /* "pyroxa/pybindings.pyx":1150
 * 	finally:
 * 		free(A_c)
 * 		free(B_c)             # <<<<<<<<<<<<<<
 * 		free(C_c)
 * 
*/
        free(__pyx_v_B_c);

        /* "pyroxa/pybindings.pyx":1151
 * 		free(A_c)
 * 		free(B_c)
 * 		free(C_c)             # <<<<<<<<<<<<<<
 * 
 * def py_matrix_invert(A):
*/
        free(__pyx_v_C_c);
      }
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_XGIVEREF(__pyx_t_23);
      __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
      __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
      goto __pyx_L1_error;
    }
    __pyx_L7_return: {
      __pyx_t_23 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1149
 * 			raise RuntimeError("Matrix multiplication failed")
 * 	finally:
 * 		free(A_c)             # <<<<<<<<<<<<<<
 * 		free(B_c)
 * 		free(C_c)
*/
      free(__pyx_v_A_c);

      /* "pyroxa/pybindings.pyx":1150
 * 	finally:
 * 		free(A_c)
 * 		free(B_c)             # <<<<<<<<<<<<<<
 * 		free(C_c)
 * 
*/
      free(__pyx_v_B_c);

      /* "pyroxa/pybindings.pyx":1151
 * 		free(A_c)
 * 		free(B_c)
 * 		free(C_c)             # <<<<<<<<<<<<<<
 * 
 * def py_matrix_invert(A):
*/
      free(__pyx_v_C_c);
      __pyx_r = __pyx_t_23;
      __pyx_t_23 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1107
 * 
 * # BATCH 10: Matrix operations
 * def py_matrix_multiply(A, B):             # <<<<<<<<<<<<<<
 * 	"""Matrix multiplication C = A * B"""
 * 	import numpy as np
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyroxa._pybindings.py_matrix_multiply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_C);
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_B);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1153
 * 		free(C_c)
 * 
 * def py_matrix_invert(A):             # <<<<<<<<<<<<<<
 * 	"""Matrix inversion A_inv = A^(-1)"""
 * 	import numpy as np
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_91py_matrix_invert(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_90py_matrix_invert, "py_matrix_invert(A)\n\nMatrix inversion A_inv = A^(-1)");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_91py_matrix_invert = {"py_matrix_invert", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_91py_matrix_invert, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_90py_matrix_invert};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_91py_matrix_invert(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_matrix_invert (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1153, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1153, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_matrix_invert", 0) < 0) __PYX_ERR(0, 1153, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_matrix_invert", 1, 1, 1, i); __PYX_ERR(0, 1153, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1153, __pyx_L3_error)
    }
    __pyx_v_A = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_matrix_invert", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1153, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_matrix_invert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_90py_matrix_invert(__pyx_self, __pyx_v_A);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_90py_matrix_invert(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_A) {
  PyObject *__pyx_v_np = NULL;
  int __pyx_v_n;
  double *__pyx_v_A_c;
  double *__pyx_v_A_inv_c;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_A_inv = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  double __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_matrix_invert", 0);
  __Pyx_INCREF(__pyx_v_A);

  /* "pyroxa/pybindings.pyx":1155
 * def py_matrix_invert(A):
 * 	"""Matrix inversion A_inv = A^(-1)"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 	A = np.array(A)
 * 
*/
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_numpy, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1156
 * 	"""Matrix inversion A_inv = A^(-1)"""
 * 	import numpy as np
 * 	A = np.array(A)             # <<<<<<<<<<<<<<
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:
*/
  __pyx_t_2 = __pyx_v_np;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_A};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_array, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF_SET(__pyx_v_A, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1158
 * 	A = np.array(A)
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Input must be a square matrix")
 * 
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_mstate_global->__pyx_n_u_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = (__Pyx_PyLong_BoolNeObjC(__pyx_t_1, __pyx_mstate_global->__pyx_int_2, 2, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_mstate_global->__pyx_n_u_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_mstate_global->__pyx_n_u_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "pyroxa/pybindings.pyx":1159
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:
 * 		raise ValueError("Input must be a square matrix")             # <<<<<<<<<<<<<<
 * 
 * 	cdef int n = A.shape[0]
*/
    __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_2 = __pyx_builtin_ValueError; 
    __pyx_t_3 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_Input_must_be_a_square_matrix};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1159, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1158
 * 	A = np.array(A)
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("Input must be a square matrix")
 * 
*/
  }

  /* "pyroxa/pybindings.pyx":1161
 * 		raise ValueError("Input must be a square matrix")
 * 
 * 	cdef int n = A.shape[0]             # <<<<<<<<<<<<<<
 * 	cdef double* A_c = <double*>malloc(n * n * sizeof(double))
 * 	cdef double* A_inv_c = <double*>malloc(n * n * sizeof(double))
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_mstate_global->__pyx_n_u_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyLong_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_n = __pyx_t_7;

  /* "pyroxa/pybindings.pyx":1162
 * 
 * 	cdef int n = A.shape[0]
 * 	cdef double* A_c = <double*>malloc(n * n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* A_inv_c = <double*>malloc(n * n * sizeof(double))
 * 
*/
  __pyx_v_A_c = ((double *)malloc(((__pyx_v_n * __pyx_v_n) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1163
 * 	cdef int n = A.shape[0]
 * 	cdef double* A_c = <double*>malloc(n * n * sizeof(double))
 * 	cdef double* A_inv_c = <double*>malloc(n * n * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_A_inv_c = ((double *)malloc(((__pyx_v_n * __pyx_v_n) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1165
 * 	cdef double* A_inv_c = <double*>malloc(n * n * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Flatten matrix to C array
 * 		for i in range(n):
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1167
 * 	try:
 * 		# Flatten matrix to C array
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]
*/
    __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_6 = __pyx_builtin_range; 
    __pyx_t_8 = __Pyx_PyLong_From_int(__pyx_v_n); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1167, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_8};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1167, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_6 = __pyx_t_2; __Pyx_INCREF(__pyx_t_6);
      __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1167, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1167, __pyx_L7_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_6);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1167, __pyx_L7_error)
            #endif
            if (__pyx_t_9 >= __pyx_temp) break;
          }
          __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_6, __pyx_t_9);
          ++__pyx_t_9;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_6);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1167, __pyx_L7_error)
            #endif
            if (__pyx_t_9 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_9));
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_9);
          #endif
          ++__pyx_t_9;
        }
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1167, __pyx_L7_error)
      } else {
        __pyx_t_2 = __pyx_t_10(__pyx_t_6);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1167, __pyx_L7_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1168
 * 		# Flatten matrix to C array
 * 		for i in range(n):
 * 			for j in range(n):             # <<<<<<<<<<<<<<
 * 				A_c[i * n + j] = A[i, j]
 * 
*/
      __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_builtin_range);
      __pyx_t_1 = __pyx_builtin_range; 
      __pyx_t_11 = __Pyx_PyLong_From_int(__pyx_v_n); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1168, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_3 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_11};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1168, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
      }
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1);
        __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1168, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1168, __pyx_L7_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1168, __pyx_L7_error)
              #endif
              if (__pyx_t_12 >= __pyx_temp) break;
            }
            __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_12);
            ++__pyx_t_12;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1168, __pyx_L7_error)
              #endif
              if (__pyx_t_12 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_12));
            #else
            __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_12);
            #endif
            ++__pyx_t_12;
          }
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1168, __pyx_L7_error)
        } else {
          __pyx_t_2 = __pyx_t_13(__pyx_t_1);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1168, __pyx_L7_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "pyroxa/pybindings.pyx":1169
 * 		for i in range(n):
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]             # <<<<<<<<<<<<<<
 * 
 * 		result = matrix_invert(A_c, A_inv_c, n)
*/
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1169, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_i) != (0)) __PYX_ERR(0, 1169, __pyx_L7_error);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_j) != (0)) __PYX_ERR(0, 1169, __pyx_L7_error);
        __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_A, __pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1169, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_14 = __Pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1169, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyLong_From_int(__pyx_v_n); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1169, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_2 = PyNumber_Multiply(__pyx_v_i, __pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1169, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyNumber_Add(__pyx_t_2, __pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1169, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_t_11); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1169, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        (__pyx_v_A_c[__pyx_t_15]) = __pyx_t_14;

        /* "pyroxa/pybindings.pyx":1168
 * 		# Flatten matrix to C array
 * 		for i in range(n):
 * 			for j in range(n):             # <<<<<<<<<<<<<<
 * 				A_c[i * n + j] = A[i, j]
 * 
*/
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":1167
 * 	try:
 * 		# Flatten matrix to C array
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]
*/
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pyroxa/pybindings.pyx":1171
 * 				A_c[i * n + j] = A[i, j]
 * 
 * 		result = matrix_invert(A_c, A_inv_c, n)             # <<<<<<<<<<<<<<
 * 
 * 		if result == 0:  # C functions return 0 on success
*/
    __pyx_v_result = matrix_invert(__pyx_v_A_c, __pyx_v_A_inv_c, __pyx_v_n);

    /* "pyroxa/pybindings.pyx":1173
 * 		result = matrix_invert(A_c, A_inv_c, n)
 * 
 * 		if result == 0:  # C functions return 0 on success             # <<<<<<<<<<<<<<
 * 			# Convert back to Python matrix
 * 			A_inv = np.zeros((n, n))
*/
    __pyx_t_4 = (__pyx_v_result == 0);
    if (likely(__pyx_t_4)) {

      /* "pyroxa/pybindings.pyx":1175
 * 		if result == 0:  # C functions return 0 on success
 * 			# Convert back to Python matrix
 * 			A_inv = np.zeros((n, n))             # <<<<<<<<<<<<<<
 * 			for i in range(n):
 * 				for j in range(n):
*/
      __pyx_t_1 = __pyx_v_np;
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_11 = __Pyx_PyLong_From_int(__pyx_v_n); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1175, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1175, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1175, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_11);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_11) != (0)) __PYX_ERR(0, 1175, __pyx_L7_error);
      __Pyx_GIVEREF(__pyx_t_2);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_2) != (0)) __PYX_ERR(0, 1175, __pyx_L7_error);
      __pyx_t_11 = 0;
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_8};
        __pyx_t_6 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_zeros, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1175, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_6);
      }
      __pyx_v_A_inv = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "pyroxa/pybindings.pyx":1176
 * 			# Convert back to Python matrix
 * 			A_inv = np.zeros((n, n))
 * 			for i in range(n):             # <<<<<<<<<<<<<<
 * 				for j in range(n):
 * 					A_inv[i, j] = A_inv_c[i * n + j]
*/
      __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_builtin_range);
      __pyx_t_1 = __pyx_builtin_range; 
      __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_n); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1176, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_2};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1176, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_6);
      }
      if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
        __pyx_t_1 = __pyx_t_6; __Pyx_INCREF(__pyx_t_1);
        __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1176, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_10 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1176, __pyx_L7_error)
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      for (;;) {
        if (likely(!__pyx_t_10)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1176, __pyx_L7_error)
              #endif
              if (__pyx_t_9 >= __pyx_temp) break;
            }
            __pyx_t_6 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_9);
            ++__pyx_t_9;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1176, __pyx_L7_error)
              #endif
              if (__pyx_t_9 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9));
            #else
            __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_9);
            #endif
            ++__pyx_t_9;
          }
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1176, __pyx_L7_error)
        } else {
          __pyx_t_6 = __pyx_t_10(__pyx_t_1);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1176, __pyx_L7_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "pyroxa/pybindings.pyx":1177
 * 			A_inv = np.zeros((n, n))
 * 			for i in range(n):
 * 				for j in range(n):             # <<<<<<<<<<<<<<
 * 					A_inv[i, j] = A_inv_c[i * n + j]
 * 			return A_inv.tolist()
*/
        __pyx_t_2 = NULL;
        __Pyx_INCREF(__pyx_builtin_range);
        __pyx_t_8 = __pyx_builtin_range; 
        __pyx_t_11 = __Pyx_PyLong_From_int(__pyx_v_n); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1177, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_3 = 1;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_11};
          __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1177, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
        }
        if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
          __pyx_t_8 = __pyx_t_6; __Pyx_INCREF(__pyx_t_8);
          __pyx_t_12 = 0;
          __pyx_t_13 = NULL;
        } else {
          __pyx_t_12 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1177, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_13 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1177, __pyx_L7_error)
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        for (;;) {
          if (likely(!__pyx_t_13)) {
            if (likely(PyList_CheckExact(__pyx_t_8))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_8);
                #if !CYTHON_ASSUME_SAFE_SIZE
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1177, __pyx_L7_error)
                #endif
                if (__pyx_t_12 >= __pyx_temp) break;
              }
              __pyx_t_6 = __Pyx_PyList_GetItemRef(__pyx_t_8, __pyx_t_12);
              ++__pyx_t_12;
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_8);
                #if !CYTHON_ASSUME_SAFE_SIZE
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1177, __pyx_L7_error)
                #endif
                if (__pyx_t_12 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_6 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_12));
              #else
              __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_12);
              #endif
              ++__pyx_t_12;
            }
            if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1177, __pyx_L7_error)
          } else {
            __pyx_t_6 = __pyx_t_13(__pyx_t_8);
            if (unlikely(!__pyx_t_6)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1177, __pyx_L7_error)
                PyErr_Clear();
              }
              break;
            }
          }
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_6);
          __pyx_t_6 = 0;

          /* "pyroxa/pybindings.pyx":1178
 * 			for i in range(n):
 * 				for j in range(n):
 * 					A_inv[i, j] = A_inv_c[i * n + j]             # <<<<<<<<<<<<<<
 * 			return A_inv.tolist()
 * 		else:
*/
          __pyx_t_6 = __Pyx_PyLong_From_int(__pyx_v_n); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1178, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = PyNumber_Multiply(__pyx_v_i, __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1178, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = PyNumber_Add(__pyx_t_11, __pyx_v_j); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1178, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_t_6); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1178, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = PyFloat_FromDouble((__pyx_v_A_inv_c[__pyx_t_15])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1178, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1178, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_v_i);
          __Pyx_GIVEREF(__pyx_v_i);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_i) != (0)) __PYX_ERR(0, 1178, __pyx_L7_error);
          __Pyx_INCREF(__pyx_v_j);
          __Pyx_GIVEREF(__pyx_v_j);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_j) != (0)) __PYX_ERR(0, 1178, __pyx_L7_error);
          if (unlikely((PyObject_SetItem(__pyx_v_A_inv, __pyx_t_11, __pyx_t_6) < 0))) __PYX_ERR(0, 1178, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "pyroxa/pybindings.pyx":1177
 * 			A_inv = np.zeros((n, n))
 * 			for i in range(n):
 * 				for j in range(n):             # <<<<<<<<<<<<<<
 * 					A_inv[i, j] = A_inv_c[i * n + j]
 * 			return A_inv.tolist()
*/
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "pyroxa/pybindings.pyx":1176
 * 			# Convert back to Python matrix
 * 			A_inv = np.zeros((n, n))
 * 			for i in range(n):             # <<<<<<<<<<<<<<
 * 				for j in range(n):
 * 					A_inv[i, j] = A_inv_c[i * n + j]
*/
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":1179
 * 				for j in range(n):
 * 					A_inv[i, j] = A_inv_c[i * n + j]
 * 			return A_inv.tolist()             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise RuntimeError("Matrix inversion failed (matrix may be singular)")
*/
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_8 = __pyx_v_A_inv;
      __Pyx_INCREF(__pyx_t_8);
      __pyx_t_3 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
        __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_tolist, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1179, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      __pyx_r = __pyx_t_1;
      __pyx_t_1 = 0;
      goto __pyx_L6_return;

      /* "pyroxa/pybindings.pyx":1173
 * 		result = matrix_invert(A_c, A_inv_c, n)
 * 
 * 		if result == 0:  # C functions return 0 on success             # <<<<<<<<<<<<<<
 * 			# Convert back to Python matrix
 * 			A_inv = np.zeros((n, n))
*/
    }

    /* "pyroxa/pybindings.pyx":1181
 * 			return A_inv.tolist()
 * 		else:
 * 			raise RuntimeError("Matrix inversion failed (matrix may be singular)")             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(A_c)
*/
    /*else*/ {
      __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_builtin_RuntimeError);
      __pyx_t_6 = __pyx_builtin_RuntimeError; 
      __pyx_t_3 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_mstate_global->__pyx_kp_u_Matrix_inversion_failed_matrix_m};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1181, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 1181, __pyx_L7_error)
    }
  }

  /* "pyroxa/pybindings.pyx":1183
 * 			raise RuntimeError("Matrix inversion failed (matrix may be singular)")
 * 	finally:
 * 		free(A_c)             # <<<<<<<<<<<<<<
 * 		free(A_inv_c)
 * 
*/
  /*finally:*/ {
    __pyx_L7_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
      if ( unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_23);
      __pyx_t_7 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
      {
        free(__pyx_v_A_c);

        /* "pyroxa/pybindings.pyx":1184
 * 	finally:
 * 		free(A_c)
 * 		free(A_inv_c)             # <<<<<<<<<<<<<<
 * 
 * # Simplified version using NumPy
*/
        free(__pyx_v_A_inv_c);
      }
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_XGIVEREF(__pyx_t_23);
      __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
      __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
      goto __pyx_L1_error;
    }
    __pyx_L6_return: {
      __pyx_t_23 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1183
 * 			raise RuntimeError("Matrix inversion failed (matrix may be singular)")
 * 	finally:
 * 		free(A_c)             # <<<<<<<<<<<<<<
 * 		free(A_inv_c)
 * 
*/
      free(__pyx_v_A_c);

      /* "pyroxa/pybindings.pyx":1184
 * 	finally:
 * 		free(A_c)
 * 		free(A_inv_c)             # <<<<<<<<<<<<<<
 * 
 * # Simplified version using NumPy
*/
      free(__pyx_v_A_inv_c);
      __pyx_r = __pyx_t_23;
      __pyx_t_23 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1153
 * 		free(C_c)
 * 
 * def py_matrix_invert(A):             # <<<<<<<<<<<<<<
 * 	"""Matrix inversion A_inv = A^(-1)"""
 * 	import numpy as np
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyroxa._pybindings.py_matrix_invert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_A_inv);
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1187
 * 
 * # Simplified version using NumPy
 * def py_solve_linear_system(A, b):             # <<<<<<<<<<<<<<
 * 	"""Solve linear system Ax = b"""
 * 	import numpy as np
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_93py_solve_linear_system(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_92py_solve_linear_system, "py_solve_linear_system(A, b)\n\nSolve linear system Ax = b");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_93py_solve_linear_system = {"py_solve_linear_system", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_93py_solve_linear_system, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_92py_solve_linear_system};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_93py_solve_linear_system(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_A = 0;
  PyObject *__pyx_v_b = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_solve_linear_system (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_b,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1187, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1187, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1187, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_solve_linear_system", 0) < 0) __PYX_ERR(0, 1187, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_solve_linear_system", 1, 2, 2, i); __PYX_ERR(0, 1187, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1187, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1187, __pyx_L3_error)
    }
    __pyx_v_A = values[0];
    __pyx_v_b = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_solve_linear_system", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1187, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_solve_linear_system", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_92py_solve_linear_system(__pyx_self, __pyx_v_A, __pyx_v_b);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_92py_solve_linear_system(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_A, PyObject *__pyx_v_b) {
  PyObject *__pyx_v_np = NULL;
  int __pyx_v_n;
  double *__pyx_v_A_c;
  double *__pyx_v_b_c;
  double *__pyx_v_x_c;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_x = NULL;
  int __pyx_9genexpr25__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  double __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  char const *__pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_solve_linear_system", 0);
  __Pyx_INCREF(__pyx_v_A);
  __Pyx_INCREF(__pyx_v_b);

  /* "pyroxa/pybindings.pyx":1189
 * def py_solve_linear_system(A, b):
 * 	"""Solve linear system Ax = b"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 	A = np.array(A)
 * 	b = np.array(b)
*/
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_numpy, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1190
 * 	"""Solve linear system Ax = b"""
 * 	import numpy as np
 * 	A = np.array(A)             # <<<<<<<<<<<<<<
 * 	b = np.array(b)
 * 
*/
  __pyx_t_2 = __pyx_v_np;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_A};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_array, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF_SET(__pyx_v_A, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1191
 * 	import numpy as np
 * 	A = np.array(A)
 * 	b = np.array(b)             # <<<<<<<<<<<<<<
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:
*/
  __pyx_t_2 = __pyx_v_np;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_b};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_array, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF_SET(__pyx_v_b, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1193
 * 	b = np.array(b)
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("A must be a square matrix")
 * 	if b.ndim != 1 or len(b) != A.shape[0]:
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_mstate_global->__pyx_n_u_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = (__Pyx_PyLong_BoolNeObjC(__pyx_t_1, __pyx_mstate_global->__pyx_int_2, 2, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_mstate_global->__pyx_n_u_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_mstate_global->__pyx_n_u_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "pyroxa/pybindings.pyx":1194
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:
 * 		raise ValueError("A must be a square matrix")             # <<<<<<<<<<<<<<
 * 	if b.ndim != 1 or len(b) != A.shape[0]:
 * 		raise ValueError("b must be a vector with length equal to A's dimension")
*/
    __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_2 = __pyx_builtin_ValueError; 
    __pyx_t_3 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_A_must_be_a_square_matrix};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1194, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1193
 * 	b = np.array(b)
 * 
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("A must be a square matrix")
 * 	if b.ndim != 1 or len(b) != A.shape[0]:
*/
  }

  /* "pyroxa/pybindings.pyx":1195
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:
 * 		raise ValueError("A must be a square matrix")
 * 	if b.ndim != 1 or len(b) != A.shape[0]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("b must be a vector with length equal to A's dimension")
 * 
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_b, __pyx_mstate_global->__pyx_n_u_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = (__Pyx_PyLong_BoolNeObjC(__pyx_t_1, __pyx_mstate_global->__pyx_int_1, 1, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_7 = PyObject_Length(__pyx_v_b); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1195, __pyx_L1_error)
  __pyx_t_1 = PyLong_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_mstate_global->__pyx_n_u_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L7_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "pyroxa/pybindings.pyx":1196
 * 		raise ValueError("A must be a square matrix")
 * 	if b.ndim != 1 or len(b) != A.shape[0]:
 * 		raise ValueError("b must be a vector with length equal to A's dimension")             # <<<<<<<<<<<<<<
 * 
 * 	cdef int n = A.shape[0]
*/
    __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_builtin_ValueError);
    __pyx_t_1 = __pyx_builtin_ValueError; 
    __pyx_t_3 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_b_must_be_a_vector_with_length_e};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1196, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1196, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1195
 * 	if A.ndim != 2 or A.shape[0] != A.shape[1]:
 * 		raise ValueError("A must be a square matrix")
 * 	if b.ndim != 1 or len(b) != A.shape[0]:             # <<<<<<<<<<<<<<
 * 		raise ValueError("b must be a vector with length equal to A's dimension")
 * 
*/
  }

  /* "pyroxa/pybindings.pyx":1198
 * 		raise ValueError("b must be a vector with length equal to A's dimension")
 * 
 * 	cdef int n = A.shape[0]             # <<<<<<<<<<<<<<
 * 	cdef double* A_c = <double*>malloc(n * n * sizeof(double))
 * 	cdef double* b_c = <double*>malloc(n * sizeof(double))
*/
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_mstate_global->__pyx_n_u_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_8 = __Pyx_PyLong_As_int(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n = __pyx_t_8;

  /* "pyroxa/pybindings.pyx":1199
 * 
 * 	cdef int n = A.shape[0]
 * 	cdef double* A_c = <double*>malloc(n * n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* b_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* x_c = <double*>malloc(n * sizeof(double))
*/
  __pyx_v_A_c = ((double *)malloc(((__pyx_v_n * __pyx_v_n) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1200
 * 	cdef int n = A.shape[0]
 * 	cdef double* A_c = <double*>malloc(n * n * sizeof(double))
 * 	cdef double* b_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* x_c = <double*>malloc(n * sizeof(double))
 * 
*/
  __pyx_v_b_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1201
 * 	cdef double* A_c = <double*>malloc(n * n * sizeof(double))
 * 	cdef double* b_c = <double*>malloc(n * sizeof(double))
 * 	cdef double* x_c = <double*>malloc(n * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_x_c = ((double *)malloc((__pyx_v_n * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1203
 * 	cdef double* x_c = <double*>malloc(n * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Flatten to C arrays
 * 		for i in range(n):
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1205
 * 	try:
 * 		# Flatten to C arrays
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_6 = __pyx_builtin_range; 
    __pyx_t_9 = __Pyx_PyLong_From_int(__pyx_v_n); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1205, __pyx_L10_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1205, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_6 = __pyx_t_1; __Pyx_INCREF(__pyx_t_6);
      __pyx_t_7 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1205, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1205, __pyx_L10_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_6);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1205, __pyx_L10_error)
            #endif
            if (__pyx_t_7 >= __pyx_temp) break;
          }
          __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_6, __pyx_t_7);
          ++__pyx_t_7;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_6);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1205, __pyx_L10_error)
            #endif
            if (__pyx_t_7 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7));
          #else
          __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_7);
          #endif
          ++__pyx_t_7;
        }
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1205, __pyx_L10_error)
      } else {
        __pyx_t_1 = __pyx_t_10(__pyx_t_6);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1205, __pyx_L10_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":1206
 * 		# Flatten to C arrays
 * 		for i in range(n):
 * 			for j in range(n):             # <<<<<<<<<<<<<<
 * 				A_c[i * n + j] = A[i, j]
 * 			b_c[i] = b[i]
*/
      __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_builtin_range);
      __pyx_t_2 = __pyx_builtin_range; 
      __pyx_t_11 = __Pyx_PyLong_From_int(__pyx_v_n); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1206, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_3 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_11};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1206, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
        __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
      } else {
        __pyx_t_12 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1206, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_13 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1206, __pyx_L10_error)
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (likely(!__pyx_t_13)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1206, __pyx_L10_error)
              #endif
              if (__pyx_t_12 >= __pyx_temp) break;
            }
            __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_12);
            ++__pyx_t_12;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1206, __pyx_L10_error)
              #endif
              if (__pyx_t_12 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_12));
            #else
            __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_12);
            #endif
            ++__pyx_t_12;
          }
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1206, __pyx_L10_error)
        } else {
          __pyx_t_1 = __pyx_t_13(__pyx_t_2);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1206, __pyx_L10_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "pyroxa/pybindings.pyx":1207
 * 		for i in range(n):
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]             # <<<<<<<<<<<<<<
 * 			b_c[i] = b[i]
 * 
*/
        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1207, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_i) != (0)) __PYX_ERR(0, 1207, __pyx_L10_error);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_j) != (0)) __PYX_ERR(0, 1207, __pyx_L10_error);
        __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_A, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1207, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_14 = __Pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1207, __pyx_L10_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyLong_From_int(__pyx_v_n); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1207, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_1 = PyNumber_Multiply(__pyx_v_i, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1207, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyNumber_Add(__pyx_t_1, __pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1207, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_15 = __Pyx_PyIndex_AsSsize_t(__pyx_t_11); if (unlikely((__pyx_t_15 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1207, __pyx_L10_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        (__pyx_v_A_c[__pyx_t_15]) = __pyx_t_14;

        /* "pyroxa/pybindings.pyx":1206
 * 		# Flatten to C arrays
 * 		for i in range(n):
 * 			for j in range(n):             # <<<<<<<<<<<<<<
 * 				A_c[i * n + j] = A[i, j]
 * 			b_c[i] = b[i]
*/
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1208
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]
 * 			b_c[i] = b[i]             # <<<<<<<<<<<<<<
 * 
 * 		result = solve_linear_system(A_c, b_c, x_c, n)
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_b, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1208, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_14 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1208, __pyx_L10_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1208, __pyx_L10_error)
      (__pyx_v_b_c[__pyx_t_12]) = __pyx_t_14;

      /* "pyroxa/pybindings.pyx":1205
 * 	try:
 * 		# Flatten to C arrays
 * 		for i in range(n):             # <<<<<<<<<<<<<<
 * 			for j in range(n):
 * 				A_c[i * n + j] = A[i, j]
*/
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "pyroxa/pybindings.pyx":1210
 * 			b_c[i] = b[i]
 * 
 * 		result = solve_linear_system(A_c, b_c, x_c, n)             # <<<<<<<<<<<<<<
 * 
 * 		if result == 0:  # C functions return 0 on success
*/
    __pyx_v_result = solve_linear_system(__pyx_v_A_c, __pyx_v_b_c, __pyx_v_x_c, __pyx_v_n);

    /* "pyroxa/pybindings.pyx":1212
 * 		result = solve_linear_system(A_c, b_c, x_c, n)
 * 
 * 		if result == 0:  # C functions return 0 on success             # <<<<<<<<<<<<<<
 * 			# Convert solution to Python list
 * 			x = [x_c[i] for i in range(n)]
*/
    __pyx_t_4 = (__pyx_v_result == 0);
    if (likely(__pyx_t_4)) {

      /* "pyroxa/pybindings.pyx":1214
 * 		if result == 0:  # C functions return 0 on success
 * 			# Convert solution to Python list
 * 			x = [x_c[i] for i in range(n)]             # <<<<<<<<<<<<<<
 * 			return x
 * 		else:
*/
      { /* enter inner scope */
        __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1214, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = __pyx_v_n;
        __pyx_t_16 = __pyx_t_8;
        for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
          __pyx_9genexpr25__pyx_v_i = __pyx_t_17;
          __pyx_t_2 = PyFloat_FromDouble((__pyx_v_x_c[__pyx_9genexpr25__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1214, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_2);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 1214, __pyx_L10_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
      } /* exit inner scope */
      __pyx_v_x = ((PyObject*)__pyx_t_6);
      __pyx_t_6 = 0;

      /* "pyroxa/pybindings.pyx":1215
 * 			# Convert solution to Python list
 * 			x = [x_c[i] for i in range(n)]
 * 			return x             # <<<<<<<<<<<<<<
 * 		else:
 * 			raise RuntimeError("Linear system solve failed (matrix may be singular)")
*/
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_x);
      __pyx_r = __pyx_v_x;
      goto __pyx_L9_return;

      /* "pyroxa/pybindings.pyx":1212
 * 		result = solve_linear_system(A_c, b_c, x_c, n)
 * 
 * 		if result == 0:  # C functions return 0 on success             # <<<<<<<<<<<<<<
 * 			# Convert solution to Python list
 * 			x = [x_c[i] for i in range(n)]
*/
    }

    /* "pyroxa/pybindings.pyx":1217
 * 			return x
 * 		else:
 * 			raise RuntimeError("Linear system solve failed (matrix may be singular)")             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(A_c)
*/
    /*else*/ {
      __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_builtin_RuntimeError);
      __pyx_t_11 = __pyx_builtin_RuntimeError; 
      __pyx_t_3 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_kp_u_Linear_system_solve_failed_matri};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1217, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 1217, __pyx_L10_error)
    }
  }

  /* "pyroxa/pybindings.pyx":1219
 * 			raise RuntimeError("Linear system solve failed (matrix may be singular)")
 * 	finally:
 * 		free(A_c)             # <<<<<<<<<<<<<<
 * 		free(b_c)
 * 		free(x_c)
*/
  /*finally:*/ {
    __pyx_L10_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_22, &__pyx_t_23, &__pyx_t_24);
      if ( unlikely(__Pyx_GetException(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21) < 0)) __Pyx_ErrFetch(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_23);
      __Pyx_XGOTREF(__pyx_t_24);
      __pyx_t_8 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_18 = __pyx_filename;
      {
        free(__pyx_v_A_c);

        /* "pyroxa/pybindings.pyx":1220
 * 	finally:
 * 		free(A_c)
 * 		free(b_c)             # <<<<<<<<<<<<<<
 * 		free(x_c)
 * 
*/
        free(__pyx_v_b_c);

        /* "pyroxa/pybindings.pyx":1221
 * 		free(A_c)
 * 		free(b_c)
 * 		free(x_c)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 11: Advanced optimization and sensitivity analysis
*/
        free(__pyx_v_x_c);
      }
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_XGIVEREF(__pyx_t_23);
      __Pyx_XGIVEREF(__pyx_t_24);
      __Pyx_ExceptionReset(__pyx_t_22, __pyx_t_23, __pyx_t_24);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_ErrRestore(__pyx_t_19, __pyx_t_20, __pyx_t_21);
      __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0;
      __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_18;
      goto __pyx_L1_error;
    }
    __pyx_L9_return: {
      __pyx_t_24 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1219
 * 			raise RuntimeError("Linear system solve failed (matrix may be singular)")
 * 	finally:
 * 		free(A_c)             # <<<<<<<<<<<<<<
 * 		free(b_c)
 * 		free(x_c)
*/
      free(__pyx_v_A_c);

      /* "pyroxa/pybindings.pyx":1220
 * 	finally:
 * 		free(A_c)
 * 		free(b_c)             # <<<<<<<<<<<<<<
 * 		free(x_c)
 * 
*/
      free(__pyx_v_b_c);

      /* "pyroxa/pybindings.pyx":1221
 * 		free(A_c)
 * 		free(b_c)
 * 		free(x_c)             # <<<<<<<<<<<<<<
 * 
 * # BATCH 11: Advanced optimization and sensitivity analysis
*/
      free(__pyx_v_x_c);
      __pyx_r = __pyx_t_24;
      __pyx_t_24 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1187
 * 
 * # Simplified version using NumPy
 * def py_solve_linear_system(A, b):             # <<<<<<<<<<<<<<
 * 	"""Solve linear system Ax = b"""
 * 	import numpy as np
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyroxa._pybindings.py_solve_linear_system", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_A);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1224
 * 
 * # BATCH 11: Advanced optimization and sensitivity analysis
 * def py_calculate_sensitivity(params, concentrations, rates, n_params, n_species):             # <<<<<<<<<<<<<<
 * 	"""Calculate sensitivity matrix for parameter estimation"""
 * 	# Simple implementation matching test interface
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_95py_calculate_sensitivity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_94py_calculate_sensitivity, "py_calculate_sensitivity(params, concentrations, rates, n_params, n_species)\n\nCalculate sensitivity matrix for parameter estimation");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_95py_calculate_sensitivity = {"py_calculate_sensitivity", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_95py_calculate_sensitivity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_94py_calculate_sensitivity};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_95py_calculate_sensitivity(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_params = 0;
  PyObject *__pyx_v_concentrations = 0;
  PyObject *__pyx_v_rates = 0;
  PyObject *__pyx_v_n_params = 0;
  PyObject *__pyx_v_n_species = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_sensitivity (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_params,&__pyx_mstate_global->__pyx_n_u_concentrations,&__pyx_mstate_global->__pyx_n_u_rates,&__pyx_mstate_global->__pyx_n_u_n_params,&__pyx_mstate_global->__pyx_n_u_n_species,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1224, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1224, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1224, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1224, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1224, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1224, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_calculate_sensitivity", 0) < 0) __PYX_ERR(0, 1224, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 5; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_calculate_sensitivity", 1, 5, 5, i); __PYX_ERR(0, 1224, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1224, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1224, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1224, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1224, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1224, __pyx_L3_error)
    }
    __pyx_v_params = values[0];
    __pyx_v_concentrations = values[1];
    __pyx_v_rates = values[2];
    __pyx_v_n_params = values[3];
    __pyx_v_n_species = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_sensitivity", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 1224, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_sensitivity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_94py_calculate_sensitivity(__pyx_self, __pyx_v_params, __pyx_v_concentrations, __pyx_v_rates, __pyx_v_n_params, __pyx_v_n_species);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_94py_calculate_sensitivity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_params, PyObject *__pyx_v_concentrations, PyObject *__pyx_v_rates, PyObject *__pyx_v_n_params, PyObject *__pyx_v_n_species) {
  PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_sensitivity_matrix = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_sensitivity", 0);

  /* "pyroxa/pybindings.pyx":1227
 * 	"""Calculate sensitivity matrix for parameter estimation"""
 * 	# Simple implementation matching test interface
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 	# Create a simple sensitivity matrix as output
*/
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_numpy, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1230
 * 
 * 	# Create a simple sensitivity matrix as output
 * 	sensitivity_matrix = np.zeros((n_params, n_species))             # <<<<<<<<<<<<<<
 * 
 * 	# Fill with simple finite difference approximation
*/
  __pyx_t_2 = __pyx_v_np;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_n_params);
  __Pyx_GIVEREF(__pyx_v_n_params);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_n_params) != (0)) __PYX_ERR(0, 1230, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_n_species);
  __Pyx_GIVEREF(__pyx_v_n_species);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_n_species) != (0)) __PYX_ERR(0, 1230, __pyx_L1_error);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_zeros, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_sensitivity_matrix = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1233
 * 
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_params):             # <<<<<<<<<<<<<<
 * 		for j in range(n_species):
 * 			# Simple sensitivity: how concentration j changes with parameter i
*/
  __pyx_t_3 = NULL;
  __Pyx_INCREF(__pyx_builtin_range);
  __pyx_t_2 = __pyx_builtin_range; 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_n_params};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1233, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1233, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_5);
        ++__pyx_t_5;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1233, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5));
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5);
        #endif
        ++__pyx_t_5;
      }
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1233, __pyx_L1_error)
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1233, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyroxa/pybindings.pyx":1234
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_params):
 * 		for j in range(n_species):             # <<<<<<<<<<<<<<
 * 			# Simple sensitivity: how concentration j changes with parameter i
 * 			sensitivity_matrix[i, j] = concentrations[j] * rates[j] * params[i] * 0.01
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_7 = __pyx_builtin_range; 
    __pyx_t_4 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_n_species};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_7 = __pyx_t_1; __Pyx_INCREF(__pyx_t_7);
      __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1234, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_7);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1234, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_7, __pyx_t_8);
          ++__pyx_t_8;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_7);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1234, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8));
          #else
          __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_7, __pyx_t_8);
          #endif
          ++__pyx_t_8;
        }
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
      } else {
        __pyx_t_1 = __pyx_t_9(__pyx_t_7);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1234, __pyx_L1_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":1236
 * 		for j in range(n_species):
 * 			# Simple sensitivity: how concentration j changes with parameter i
 * 			sensitivity_matrix[i, j] = concentrations[j] * rates[j] * params[i] * 0.01             # <<<<<<<<<<<<<<
 * 
 * 	return sensitivity_matrix.tolist()
*/
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_concentrations, __pyx_v_j); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_rates, __pyx_v_j); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_params, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyNumber_Multiply(__pyx_t_10, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_mstate_global->__pyx_float_0_01); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_i) != (0)) __PYX_ERR(0, 1236, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_j);
      __Pyx_GIVEREF(__pyx_v_j);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_j) != (0)) __PYX_ERR(0, 1236, __pyx_L1_error);
      if (unlikely((PyObject_SetItem(__pyx_v_sensitivity_matrix, __pyx_t_1, __pyx_t_3) < 0))) __PYX_ERR(0, 1236, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1234
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_params):
 * 		for j in range(n_species):             # <<<<<<<<<<<<<<
 * 			# Simple sensitivity: how concentration j changes with parameter i
 * 			sensitivity_matrix[i, j] = concentrations[j] * rates[j] * params[i] * 0.01
*/
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyroxa/pybindings.pyx":1233
 * 
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_params):             # <<<<<<<<<<<<<<
 * 		for j in range(n_species):
 * 			# Simple sensitivity: how concentration j changes with parameter i
*/
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1238
 * 			sensitivity_matrix[i, j] = concentrations[j] * rates[j] * params[i] * 0.01
 * 
 * 	return sensitivity_matrix.tolist()             # <<<<<<<<<<<<<<
 * 
 * 	# Simplified reaction indices (assumes single reactant/product)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __pyx_v_sensitivity_matrix;
  __Pyx_INCREF(__pyx_t_7);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_tolist, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":1224
 * 
 * # BATCH 11: Advanced optimization and sensitivity analysis
 * def py_calculate_sensitivity(params, concentrations, rates, n_params, n_species):             # <<<<<<<<<<<<<<
 * 	"""Calculate sensitivity matrix for parameter estimation"""
 * 	# Simple implementation matching test interface
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_sensitivity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_sensitivity_matrix);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1287
 * 		free(prod_idx); free(prod_nu); free(prod_off)
 * 
 * def py_calculate_jacobian(y, dydt, n_species):             # <<<<<<<<<<<<<<
 * 	"""Calculate Jacobian matrix for parameter estimation"""
 * 	import numpy as np
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_97py_calculate_jacobian(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_96py_calculate_jacobian, "py_calculate_jacobian(y, dydt, n_species)\n\nCalculate Jacobian matrix for parameter estimation");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_97py_calculate_jacobian = {"py_calculate_jacobian", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_97py_calculate_jacobian, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_96py_calculate_jacobian};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_97py_calculate_jacobian(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_dydt = 0;
  PyObject *__pyx_v_n_species = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_jacobian (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_y,&__pyx_mstate_global->__pyx_n_u_dydt,&__pyx_mstate_global->__pyx_n_u_n_species,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1287, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1287, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1287, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1287, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_calculate_jacobian", 0) < 0) __PYX_ERR(0, 1287, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_calculate_jacobian", 1, 3, 3, i); __PYX_ERR(0, 1287, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1287, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1287, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1287, __pyx_L3_error)
    }
    __pyx_v_y = values[0];
    __pyx_v_dydt = values[1];
    __pyx_v_n_species = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_jacobian", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1287, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_jacobian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_96py_calculate_jacobian(__pyx_self, __pyx_v_y, __pyx_v_dydt, __pyx_v_n_species);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_96py_calculate_jacobian(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_dydt, PyObject *__pyx_v_n_species) {
  PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_jacobian = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_jacobian", 0);

  /* "pyroxa/pybindings.pyx":1289
 * def py_calculate_jacobian(y, dydt, n_species):
 * 	"""Calculate Jacobian matrix for parameter estimation"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 	# Create a simple Jacobian matrix
*/
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_numpy, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1292
 * 
 * 	# Create a simple Jacobian matrix
 * 	jacobian = np.zeros((n_species, n_species))             # <<<<<<<<<<<<<<
 * 
 * 	# Fill with simple finite difference approximation
*/
  __pyx_t_2 = __pyx_v_np;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_n_species);
  __Pyx_GIVEREF(__pyx_v_n_species);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_n_species) != (0)) __PYX_ERR(0, 1292, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_n_species);
  __Pyx_GIVEREF(__pyx_v_n_species);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_n_species) != (0)) __PYX_ERR(0, 1292, __pyx_L1_error);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_zeros, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_jacobian = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1295
 * 
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_species):             # <<<<<<<<<<<<<<
 * 		for j in range(n_species):
 * 			if i == j:
*/
  __pyx_t_3 = NULL;
  __Pyx_INCREF(__pyx_builtin_range);
  __pyx_t_2 = __pyx_builtin_range; 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_n_species};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1295, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1295, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_5);
        ++__pyx_t_5;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1295, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5));
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_5);
        #endif
        ++__pyx_t_5;
      }
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1295, __pyx_L1_error)
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1295, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyroxa/pybindings.pyx":1296
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_species):
 * 		for j in range(n_species):             # <<<<<<<<<<<<<<
 * 			if i == j:
 * 				jacobian[i, j] = -dydt[i] / y[i] if y[i] != 0 else -1.0
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_7 = __pyx_builtin_range; 
    __pyx_t_4 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_n_species};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_7 = __pyx_t_1; __Pyx_INCREF(__pyx_t_7);
      __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1296, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1296, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_7);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1296, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_7, __pyx_t_8);
          ++__pyx_t_8;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_7);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1296, __pyx_L1_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8));
          #else
          __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_7, __pyx_t_8);
          #endif
          ++__pyx_t_8;
        }
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1296, __pyx_L1_error)
      } else {
        __pyx_t_1 = __pyx_t_9(__pyx_t_7);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1296, __pyx_L1_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "pyroxa/pybindings.pyx":1297
 * 	for i in range(n_species):
 * 		for j in range(n_species):
 * 			if i == j:             # <<<<<<<<<<<<<<
 * 				jacobian[i, j] = -dydt[i] / y[i] if y[i] != 0 else -1.0
 * 			else:
*/
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_i, __pyx_v_j, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1297, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_10) {

        /* "pyroxa/pybindings.pyx":1298
 * 		for j in range(n_species):
 * 			if i == j:
 * 				jacobian[i, j] = -dydt[i] / y[i] if y[i] != 0 else -1.0             # <<<<<<<<<<<<<<
 * 			else:
 * 				jacobian[i, j] = 0.1 * dydt[j] / y[i] if y[i] != 0 else 0.0
*/
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_y, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1298, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = (__Pyx_PyLong_BoolNeObjC(__pyx_t_3, __pyx_mstate_global->__pyx_int_0, 0, 0)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1298, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_10) {
          __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_dydt, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1298, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_11 = PyNumber_Negative(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1298, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_y, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1298, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_12 = __Pyx_PyNumber_Divide(__pyx_t_11, __pyx_t_3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1298, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_1 = __pyx_t_12;
          __pyx_t_12 = 0;
        } else {
          __Pyx_INCREF(__pyx_mstate_global->__pyx_float_neg_1_0);
          __pyx_t_1 = __pyx_mstate_global->__pyx_float_neg_1_0;
        }
        __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1298, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_i) != (0)) __PYX_ERR(0, 1298, __pyx_L1_error);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_v_j) != (0)) __PYX_ERR(0, 1298, __pyx_L1_error);
        if (unlikely((PyObject_SetItem(__pyx_v_jacobian, __pyx_t_12, __pyx_t_1) < 0))) __PYX_ERR(0, 1298, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "pyroxa/pybindings.pyx":1297
 * 	for i in range(n_species):
 * 		for j in range(n_species):
 * 			if i == j:             # <<<<<<<<<<<<<<
 * 				jacobian[i, j] = -dydt[i] / y[i] if y[i] != 0 else -1.0
 * 			else:
*/
        goto __pyx_L7;
      }

      /* "pyroxa/pybindings.pyx":1300
 * 				jacobian[i, j] = -dydt[i] / y[i] if y[i] != 0 else -1.0
 * 			else:
 * 				jacobian[i, j] = 0.1 * dydt[j] / y[i] if y[i] != 0 else 0.0             # <<<<<<<<<<<<<<
 * 
 * 	return jacobian.tolist()
*/
      /*else*/ {
        __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_v_y, __pyx_v_i); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1300, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_10 = (__Pyx_PyLong_BoolNeObjC(__pyx_t_12, __pyx_mstate_global->__pyx_int_0, 0, 0)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 1300, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (__pyx_t_10) {
          __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_v_dydt, __pyx_v_j); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1300, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_3 = PyNumber_Multiply(__pyx_mstate_global->__pyx_float_0_1, __pyx_t_12); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1300, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyObject_GetItem(__pyx_v_y, __pyx_v_i); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1300, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_11 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1300, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_1 = __pyx_t_11;
          __pyx_t_11 = 0;
        } else {
          __Pyx_INCREF(__pyx_mstate_global->__pyx_float_0_0);
          __pyx_t_1 = __pyx_mstate_global->__pyx_float_0_0;
        }
        __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1300, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_v_i) != (0)) __PYX_ERR(0, 1300, __pyx_L1_error);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_j) != (0)) __PYX_ERR(0, 1300, __pyx_L1_error);
        if (unlikely((PyObject_SetItem(__pyx_v_jacobian, __pyx_t_11, __pyx_t_1) < 0))) __PYX_ERR(0, 1300, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L7:;

      /* "pyroxa/pybindings.pyx":1296
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_species):
 * 		for j in range(n_species):             # <<<<<<<<<<<<<<
 * 			if i == j:
 * 				jacobian[i, j] = -dydt[i] / y[i] if y[i] != 0 else -1.0
*/
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyroxa/pybindings.pyx":1295
 * 
 * 	# Fill with simple finite difference approximation
 * 	for i in range(n_species):             # <<<<<<<<<<<<<<
 * 		for j in range(n_species):
 * 			if i == j:
*/
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1302
 * 				jacobian[i, j] = 0.1 * dydt[j] / y[i] if y[i] != 0 else 0.0
 * 
 * 	return jacobian.tolist()             # <<<<<<<<<<<<<<
 * 
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __pyx_v_jacobian;
  __Pyx_INCREF(__pyx_t_7);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_tolist, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":1287
 * 		free(prod_idx); free(prod_nu); free(prod_off)
 * 
 * def py_calculate_jacobian(y, dydt, n_species):             # <<<<<<<<<<<<<<
 * 	"""Calculate Jacobian matrix for parameter estimation"""
 * 	import numpy as np
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_jacobian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_jacobian);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1304
 * 	return jacobian.tolist()
 * 
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):             # <<<<<<<<<<<<<<
 * 	"""Perform stability analysis around steady state"""
 * 	import numpy as np
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_99py_stability_analysis(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_98py_stability_analysis, "py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0)\n\nPerform stability analysis around steady state");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_99py_stability_analysis = {"py_stability_analysis", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_99py_stability_analysis, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_98py_stability_analysis};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_99py_stability_analysis(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_steady_state = 0;
  PyObject *__pyx_v_n_species = 0;
  PyObject *__pyx_v_temperature = 0;
  PyObject *__pyx_v_pressure = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_stability_analysis (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_steady_state,&__pyx_mstate_global->__pyx_n_u_n_species,&__pyx_mstate_global->__pyx_n_u_temperature,&__pyx_mstate_global->__pyx_n_u_pressure,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1304, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1304, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1304, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1304, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1304, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_stability_analysis", 0) < 0) __PYX_ERR(0, 1304, __pyx_L3_error)
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_float_298_15)));
      if (!values[3]) values[3] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_float_101325_0)));
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_stability_analysis", 0, 2, 4, i); __PYX_ERR(0, 1304, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1304, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1304, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1304, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1304, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_float_298_15)));
      if (!values[3]) values[3] = __Pyx_NewRef(((PyObject *)((PyObject*)__pyx_mstate_global->__pyx_float_101325_0)));
    }
    __pyx_v_steady_state = values[0];
    __pyx_v_n_species = values[1];
    __pyx_v_temperature = values[2];
    __pyx_v_pressure = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_stability_analysis", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 1304, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_stability_analysis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_98py_stability_analysis(__pyx_self, __pyx_v_steady_state, __pyx_v_n_species, __pyx_v_temperature, __pyx_v_pressure);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pyroxa_11_pybindings_21py_stability_analysis_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyroxa/pybindings.pyx":1315
 * 		eigenvalues.append(eigenval)
 * 
 * 	is_stable = all(ev < 0 for ev in eigenvalues)             # <<<<<<<<<<<<<<
 * 
 * 	return {
*/

static PyObject *__pyx_pf_6pyroxa_11_pybindings_21py_stability_analysis_genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr(__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1315, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pyroxa_11_pybindings_21py_stability_analysis_2generator1, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[1]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_genexpr, __pyx_mstate_global->__pyx_n_u_py_stability_analysis_locals_gen, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings); if (unlikely(!gen)) __PYX_ERR(0, 1315, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_stability_analysis.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pyroxa_11_pybindings_21py_stability_analysis_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1315, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 1315, __pyx_L1_error) }
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1315, __pyx_L1_error)
      #endif
      if (__pyx_t_2 >= __pyx_temp) break;
    }
    __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_2);
    ++__pyx_t_2;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ev);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ev, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_ev, __pyx_mstate_global->__pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1315, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1315, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = (!__pyx_t_4);
    if (__pyx_t_5) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  if (__Pyx_PyErr_Occurred()) {
    __Pyx_Generator_Replace_StopIteration(0);
    __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1304
 * 	return jacobian.tolist()
 * 
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):             # <<<<<<<<<<<<<<
 * 	"""Perform stability analysis around steady state"""
 * 	import numpy as np
*/

static PyObject *__pyx_pf_6pyroxa_11_pybindings_98py_stability_analysis(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_steady_state, PyObject *__pyx_v_n_species, PyObject *__pyx_v_temperature, PyObject *__pyx_v_pressure) {
  CYTHON_UNUSED PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_eigenvalues = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_eigenval = NULL;
  PyObject *__pyx_v_is_stable = NULL;
  PyObject *__pyx_gb_6pyroxa_11_pybindings_21py_stability_analysis_2generator1 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_stability_analysis", 0);

  /* "pyroxa/pybindings.pyx":1306
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):
 * 	"""Perform stability analysis around steady state"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 	# Create a simple stability analysis result
*/
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_numpy, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1309
 * 
 * 	# Create a simple stability analysis result
 * 	eigenvalues = []             # <<<<<<<<<<<<<<
 * 	for i in range(n_species):
 * 		# Simple eigenvalue calculation based on steady state
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_eigenvalues = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1310
 * 	# Create a simple stability analysis result
 * 	eigenvalues = []
 * 	for i in range(n_species):             # <<<<<<<<<<<<<<
 * 		# Simple eigenvalue calculation based on steady state
 * 		eigenval = -steady_state[i] - 0.1 * i
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF(__pyx_builtin_range);
  __pyx_t_3 = __pyx_builtin_range; 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_n_species};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1310, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1310, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_5);
        ++__pyx_t_5;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1310, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5));
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5);
        #endif
        ++__pyx_t_5;
      }
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1310, __pyx_L1_error)
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1310, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyroxa/pybindings.pyx":1312
 * 	for i in range(n_species):
 * 		# Simple eigenvalue calculation based on steady state
 * 		eigenval = -steady_state[i] - 0.1 * i             # <<<<<<<<<<<<<<
 * 		eigenvalues.append(eigenval)
 * 
*/
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_steady_state, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Negative(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Multiply(__pyx_mstate_global->__pyx_float_0_1, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyNumber_Subtract(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_eigenval, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "pyroxa/pybindings.pyx":1313
 * 		# Simple eigenvalue calculation based on steady state
 * 		eigenval = -steady_state[i] - 0.1 * i
 * 		eigenvalues.append(eigenval)             # <<<<<<<<<<<<<<
 * 
 * 	is_stable = all(ev < 0 for ev in eigenvalues)
*/
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_eigenvalues, __pyx_v_eigenval); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 1313, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1310
 * 	# Create a simple stability analysis result
 * 	eigenvalues = []
 * 	for i in range(n_species):             # <<<<<<<<<<<<<<
 * 		# Simple eigenvalue calculation based on steady state
 * 		eigenval = -steady_state[i] - 0.1 * i
*/
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":1315
 * 		eigenvalues.append(eigenval)
 * 
 * 	is_stable = all(ev < 0 for ev in eigenvalues)             # <<<<<<<<<<<<<<
 * 
 * 	return {
*/
  __pyx_t_3 = __pyx_pf_6pyroxa_11_pybindings_21py_stability_analysis_genexpr(NULL, __pyx_v_eigenvalues); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_Generator_GetInlinedResult(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_is_stable = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "pyroxa/pybindings.pyx":1317
 * 	is_stable = all(ev < 0 for ev in eigenvalues)
 * 
 * 	return {             # <<<<<<<<<<<<<<
 * 		'eigenvalues': eigenvalues,
 * 		'is_stable': is_stable,
*/
  __Pyx_XDECREF(__pyx_r);

  /* "pyroxa/pybindings.pyx":1318
 * 
 * 	return {
 * 		'eigenvalues': eigenvalues,             # <<<<<<<<<<<<<<
 * 		'is_stable': is_stable,
 * 		'temperature': temperature,
*/
  __pyx_t_7 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_eigenvalues, __pyx_v_eigenvalues) < 0) __PYX_ERR(0, 1318, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1319
 * 	return {
 * 		'eigenvalues': eigenvalues,
 * 		'is_stable': is_stable,             # <<<<<<<<<<<<<<
 * 		'temperature': temperature,
 * 		'pressure': pressure
*/
  if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_is_stable, __pyx_v_is_stable) < 0) __PYX_ERR(0, 1318, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1320
 * 		'eigenvalues': eigenvalues,
 * 		'is_stable': is_stable,
 * 		'temperature': temperature,             # <<<<<<<<<<<<<<
 * 		'pressure': pressure
 * 	}
*/
  if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_temperature, __pyx_v_temperature) < 0) __PYX_ERR(0, 1318, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1321
 * 		'is_stable': is_stable,
 * 		'temperature': temperature,
 * 		'pressure': pressure             # <<<<<<<<<<<<<<
 * 	}
 * 
*/
  if (PyDict_SetItem(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_pressure, __pyx_v_pressure) < 0) __PYX_ERR(0, 1318, __pyx_L1_error)
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":1304
 * 	return jacobian.tolist()
 * 
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):             # <<<<<<<<<<<<<<
 * 	"""Perform stability analysis around steady state"""
 * 	import numpy as np
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyroxa._pybindings.py_stability_analysis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_eigenvalues);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_eigenval);
  __Pyx_XDECREF(__pyx_v_is_stable);
  __Pyx_XDECREF(__pyx_gb_6pyroxa_11_pybindings_21py_stability_analysis_2generator1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1324
 * 	}
 * 
 * def py_mpc_controller(current_state, setpoints, control_bounds, reaction_network, int horizon=10):             # <<<<<<<<<<<<<<
 * 	"""Model Predictive Control implementation"""
 * 	N = len(current_state)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_101py_mpc_controller(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_100py_mpc_controller, "py_mpc_controller(current_state, setpoints, control_bounds, reaction_network, int horizon=10)\n\nModel Predictive Control implementation");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_101py_mpc_controller = {"py_mpc_controller", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_101py_mpc_controller, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_100py_mpc_controller};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_101py_mpc_controller(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_current_state = 0;
  PyObject *__pyx_v_setpoints = 0;
  PyObject *__pyx_v_control_bounds = 0;
  PyObject *__pyx_v_reaction_network = 0;
  int __pyx_v_horizon;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_mpc_controller (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_current_state,&__pyx_mstate_global->__pyx_n_u_setpoints,&__pyx_mstate_global->__pyx_n_u_control_bounds,&__pyx_mstate_global->__pyx_n_u_reaction_network,&__pyx_mstate_global->__pyx_n_u_horizon,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1324, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1324, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1324, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1324, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1324, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1324, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_mpc_controller", 0) < 0) __PYX_ERR(0, 1324, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 4; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_mpc_controller", 0, 4, 5, i); __PYX_ERR(0, 1324, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1324, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1324, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1324, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1324, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1324, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_current_state = values[0];
    __pyx_v_setpoints = values[1];
    __pyx_v_control_bounds = values[2];
    __pyx_v_reaction_network = values[3];
    if (values[4]) {
      __pyx_v_horizon = __Pyx_PyLong_As_int(values[4]); if (unlikely((__pyx_v_horizon == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1324, __pyx_L3_error)
    } else {
      __pyx_v_horizon = ((int)((int)10));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_mpc_controller", 0, 4, 5, __pyx_nargs); __PYX_ERR(0, 1324, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_mpc_controller", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_100py_mpc_controller(__pyx_self, __pyx_v_current_state, __pyx_v_setpoints, __pyx_v_control_bounds, __pyx_v_reaction_network, __pyx_v_horizon);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_100py_mpc_controller(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_current_state, PyObject *__pyx_v_setpoints, PyObject *__pyx_v_control_bounds, PyObject *__pyx_v_reaction_network, int __pyx_v_horizon) {
  PyObject *__pyx_v_N = NULL;
  PyObject *__pyx_v_M = NULL;
  double *__pyx_v_state;
  double *__pyx_v_setpts;
  double *__pyx_v_bounds;
  double *__pyx_v_kf;
  double *__pyx_v_kr;
  double *__pyx_v_optimal_controls;
  int *__pyx_v_reac_idx;
  double *__pyx_v_reac_nu;
  int *__pyx_v_reac_off;
  int *__pyx_v_prod_idx;
  double *__pyx_v_prod_nu;
  int *__pyx_v_prod_off;
  PyObject *__pyx_v_i = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_control_actions = NULL;
  PyObject *__pyx_9genexpr27__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  double __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  double __pyx_t_10;
  int __pyx_t_11;
  long __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_mpc_controller", 0);

  /* "pyroxa/pybindings.pyx":1326
 * def py_mpc_controller(current_state, setpoints, control_bounds, reaction_network, int horizon=10):
 * 	"""Model Predictive Control implementation"""
 * 	N = len(current_state)             # <<<<<<<<<<<<<<
 * 	M = len(reaction_network.get('reactions', []))
 * 
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_current_state); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1326, __pyx_L1_error)
  __pyx_t_2 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_N = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1327
 * 	"""Model Predictive Control implementation"""
 * 	N = len(current_state)
 * 	M = len(reaction_network.get('reactions', []))             # <<<<<<<<<<<<<<
 * 
 * 	cdef double* state = <double*>malloc(N * sizeof(double))
*/
  __pyx_t_3 = __pyx_v_reaction_network;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_mstate_global->__pyx_n_u_reactions, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_t_1 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_M = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1329
 * 	M = len(reaction_network.get('reactions', []))
 * 
 * 	cdef double* state = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* setpts = <double*>malloc(N * sizeof(double))
 * 	cdef double* bounds = <double*>malloc(2 * sizeof(double))  # [min, max]
*/
  __pyx_t_2 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_N, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_state = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1330
 * 
 * 	cdef double* state = <double*>malloc(N * sizeof(double))
 * 	cdef double* setpts = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* bounds = <double*>malloc(2 * sizeof(double))  # [min, max]
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
*/
  __pyx_t_4 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_N, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_setpts = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1331
 * 	cdef double* state = <double*>malloc(N * sizeof(double))
 * 	cdef double* setpts = <double*>malloc(N * sizeof(double))
 * 	cdef double* bounds = <double*>malloc(2 * sizeof(double))  # [min, max]             # <<<<<<<<<<<<<<
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))
*/
  __pyx_v_bounds = ((double *)malloc((2 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1332
 * 	cdef double* setpts = <double*>malloc(N * sizeof(double))
 * 	cdef double* bounds = <double*>malloc(2 * sizeof(double))  # [min, max]
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))
 * 	cdef double* optimal_controls = <double*>malloc(N * sizeof(double))
*/
  __pyx_t_2 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_M, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_kf = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1333
 * 	cdef double* bounds = <double*>malloc(2 * sizeof(double))  # [min, max]
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* optimal_controls = <double*>malloc(N * sizeof(double))
 * 
*/
  __pyx_t_4 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_M, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_kr = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1334
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))
 * 	cdef double* optimal_controls = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	# Simplified reaction indices
*/
  __pyx_t_2 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_N, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_optimal_controls = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1337
 * 
 * 	# Simplified reaction indices
 * 	cdef int* reac_idx = <int*>malloc(M * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
*/
  __pyx_t_4 = __Pyx_PyLong_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_M, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_reac_idx = ((int *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1338
 * 	# Simplified reaction indices
 * 	cdef int* reac_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
*/
  __pyx_t_2 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_M, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_reac_nu = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1339
 * 	cdef int* reac_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))
*/
  __pyx_t_4 = __Pyx_PyLong_AddObjC(__pyx_v_M, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyLong_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_reac_off = ((int *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1340
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))
*/
  __pyx_t_3 = __Pyx_PyLong_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_M, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_prod_idx = ((int *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1341
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))
 * 
*/
  __pyx_t_2 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_M, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_prod_nu = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1342
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_t_3 = __Pyx_PyLong_AddObjC(__pyx_v_M, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyLong_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_prod_off = ((int *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1344
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(N):
 * 			state[i] = current_state[i]
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1345
 * 
 * 	try:
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			state[i] = current_state[i]
 * 			setpts[i] = setpoints[i]
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_3 = __pyx_builtin_range; 
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_N};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1345, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1345, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1345, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1345, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1345, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1345, __pyx_L4_error)
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1345, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1346
 * 	try:
 * 		for i in range(N):
 * 			state[i] = current_state[i]             # <<<<<<<<<<<<<<
 * 			setpts[i] = setpoints[i]
 * 
*/
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_current_state, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1346, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1346, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1346, __pyx_L4_error)
      (__pyx_v_state[__pyx_t_8]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1347
 * 		for i in range(N):
 * 			state[i] = current_state[i]
 * 			setpts[i] = setpoints[i]             # <<<<<<<<<<<<<<
 * 
 * 		bounds[0] = control_bounds[0] if len(control_bounds) > 0 else 0.0
*/
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_setpoints, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1347, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1347, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1347, __pyx_L4_error)
      (__pyx_v_setpts[__pyx_t_8]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1345
 * 
 * 	try:
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			state[i] = current_state[i]
 * 			setpts[i] = setpoints[i]
*/
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":1349
 * 			setpts[i] = setpoints[i]
 * 
 * 		bounds[0] = control_bounds[0] if len(control_bounds) > 0 else 0.0             # <<<<<<<<<<<<<<
 * 		bounds[1] = control_bounds[1] if len(control_bounds) > 1 else 10.0
 * 
*/
    __pyx_t_1 = PyObject_Length(__pyx_v_control_bounds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1349, __pyx_L4_error)
    __pyx_t_9 = (__pyx_t_1 > 0);
    if (__pyx_t_9) {
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_control_bounds, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1349, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1349, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __pyx_t_10;
    } else {
      __pyx_t_7 = 0.0;
    }
    (__pyx_v_bounds[0]) = __pyx_t_7;

    /* "pyroxa/pybindings.pyx":1350
 * 
 * 		bounds[0] = control_bounds[0] if len(control_bounds) > 0 else 0.0
 * 		bounds[1] = control_bounds[1] if len(control_bounds) > 1 else 10.0             # <<<<<<<<<<<<<<
 * 
 * 		# Set up simplified reaction network
*/
    __pyx_t_1 = PyObject_Length(__pyx_v_control_bounds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1350, __pyx_L4_error)
    __pyx_t_9 = (__pyx_t_1 > 1);
    if (__pyx_t_9) {
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_control_bounds, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1350, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1350, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __pyx_t_10;
    } else {
      __pyx_t_7 = 10.0;
    }
    (__pyx_v_bounds[1]) = __pyx_t_7;

    /* "pyroxa/pybindings.pyx":1353
 * 
 * 		# Set up simplified reaction network
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_2 = __pyx_builtin_range; 
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_M};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1353, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1353, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1353, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1353, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1353, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1));
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1353, __pyx_L4_error)
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1353, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1354
 * 		# Set up simplified reaction network
 * 		for i in range(M):
 * 			kf[i] = 1.0             # <<<<<<<<<<<<<<
 * 			kr[i] = 0.1
 * 			reac_idx[i] = 0
*/
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1354, __pyx_L4_error)
      (__pyx_v_kf[__pyx_t_8]) = 1.0;

      /* "pyroxa/pybindings.pyx":1355
 * 		for i in range(M):
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1             # <<<<<<<<<<<<<<
 * 			reac_idx[i] = 0
 * 			reac_nu[i] = 1.0
*/
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1355, __pyx_L4_error)
      (__pyx_v_kr[__pyx_t_8]) = 0.1;

      /* "pyroxa/pybindings.pyx":1356
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1
 * 			reac_idx[i] = 0             # <<<<<<<<<<<<<<
 * 			reac_nu[i] = 1.0
 * 			reac_off[i] = i
*/
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1356, __pyx_L4_error)
      (__pyx_v_reac_idx[__pyx_t_8]) = 0;

      /* "pyroxa/pybindings.pyx":1357
 * 			kr[i] = 0.1
 * 			reac_idx[i] = 0
 * 			reac_nu[i] = 1.0             # <<<<<<<<<<<<<<
 * 			reac_off[i] = i
 * 			prod_idx[i] = min(1, N-1)
*/
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1357, __pyx_L4_error)
      (__pyx_v_reac_nu[__pyx_t_8]) = 1.0;

      /* "pyroxa/pybindings.pyx":1358
 * 			reac_idx[i] = 0
 * 			reac_nu[i] = 1.0
 * 			reac_off[i] = i             # <<<<<<<<<<<<<<
 * 			prod_idx[i] = min(1, N-1)
 * 			prod_nu[i] = 1.0
*/
      __pyx_t_11 = __Pyx_PyLong_As_int(__pyx_v_i); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1358, __pyx_L4_error)
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1358, __pyx_L4_error)
      (__pyx_v_reac_off[__pyx_t_8]) = __pyx_t_11;

      /* "pyroxa/pybindings.pyx":1359
 * 			reac_nu[i] = 1.0
 * 			reac_off[i] = i
 * 			prod_idx[i] = min(1, N-1)             # <<<<<<<<<<<<<<
 * 			prod_nu[i] = 1.0
 * 			prod_off[i] = i
*/
      __pyx_t_3 = __Pyx_PyLong_SubtractObjC(__pyx_v_N, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1359, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_12 = 1;
      __pyx_t_13 = __Pyx_PyLong_From_long(__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1359, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyObject_RichCompare(__pyx_t_3, __pyx_t_13, Py_LT); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1359, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1359, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (__pyx_t_9) {
        __Pyx_INCREF(__pyx_t_3);
        __pyx_t_4 = __pyx_t_3;
      } else {
        __pyx_t_14 = __Pyx_PyLong_From_long(__pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1359, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_4 = __pyx_t_14;
        __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_11 = __Pyx_PyLong_As_int(__pyx_t_4); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1359, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1359, __pyx_L4_error)
      (__pyx_v_prod_idx[__pyx_t_8]) = __pyx_t_11;

      /* "pyroxa/pybindings.pyx":1360
 * 			reac_off[i] = i
 * 			prod_idx[i] = min(1, N-1)
 * 			prod_nu[i] = 1.0             # <<<<<<<<<<<<<<
 * 			prod_off[i] = i
 * 		reac_off[M] = M
*/
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1360, __pyx_L4_error)
      (__pyx_v_prod_nu[__pyx_t_8]) = 1.0;

      /* "pyroxa/pybindings.pyx":1361
 * 			prod_idx[i] = min(1, N-1)
 * 			prod_nu[i] = 1.0
 * 			prod_off[i] = i             # <<<<<<<<<<<<<<
 * 		reac_off[M] = M
 * 		prod_off[M] = M
*/
      __pyx_t_11 = __Pyx_PyLong_As_int(__pyx_v_i); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1361, __pyx_L4_error)
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1361, __pyx_L4_error)
      (__pyx_v_prod_off[__pyx_t_8]) = __pyx_t_11;

      /* "pyroxa/pybindings.pyx":1353
 * 
 * 		# Set up simplified reaction network
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1362
 * 			prod_nu[i] = 1.0
 * 			prod_off[i] = i
 * 		reac_off[M] = M             # <<<<<<<<<<<<<<
 * 		prod_off[M] = M
 * 
*/
    __pyx_t_11 = __Pyx_PyLong_As_int(__pyx_v_M); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1362, __pyx_L4_error)
    __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_M); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1362, __pyx_L4_error)
    (__pyx_v_reac_off[__pyx_t_1]) = __pyx_t_11;

    /* "pyroxa/pybindings.pyx":1363
 * 			prod_off[i] = i
 * 		reac_off[M] = M
 * 		prod_off[M] = M             # <<<<<<<<<<<<<<
 * 
 * 		result = mpc_controller(N, M, horizon, state, setpts, bounds,
*/
    __pyx_t_11 = __Pyx_PyLong_As_int(__pyx_v_M); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1363, __pyx_L4_error)
    __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_M); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1363, __pyx_L4_error)
    (__pyx_v_prod_off[__pyx_t_1]) = __pyx_t_11;

    /* "pyroxa/pybindings.pyx":1365
 * 		prod_off[M] = M
 * 
 * 		result = mpc_controller(N, M, horizon, state, setpts, bounds,             # <<<<<<<<<<<<<<
 * 							   kf, kr, reac_idx, reac_nu, reac_off,
 * 							   prod_idx, prod_nu, prod_off, optimal_controls)
*/
    __pyx_t_11 = __Pyx_PyLong_As_int(__pyx_v_N); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1365, __pyx_L4_error)
    __pyx_t_15 = __Pyx_PyLong_As_int(__pyx_v_M); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1365, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":1367
 * 		result = mpc_controller(N, M, horizon, state, setpts, bounds,
 * 							   kf, kr, reac_idx, reac_nu, reac_off,
 * 							   prod_idx, prod_nu, prod_off, optimal_controls)             # <<<<<<<<<<<<<<
 * 
 * 		if result > 0:
*/
    __pyx_v_result = mpc_controller(__pyx_t_11, __pyx_t_15, __pyx_v_horizon, __pyx_v_state, __pyx_v_setpts, __pyx_v_bounds, __pyx_v_kf, __pyx_v_kr, __pyx_v_reac_idx, __pyx_v_reac_nu, __pyx_v_reac_off, __pyx_v_prod_idx, __pyx_v_prod_nu, __pyx_v_prod_off, __pyx_v_optimal_controls);

    /* "pyroxa/pybindings.pyx":1369
 * 							   prod_idx, prod_nu, prod_off, optimal_controls)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			control_actions = [optimal_controls[i] for i in range(N)]
 * 			return {'control_actions': control_actions, 'horizon': horizon, 'success': True}
*/
    __pyx_t_9 = (__pyx_v_result > 0);
    if (__pyx_t_9) {

      /* "pyroxa/pybindings.pyx":1370
 * 
 * 		if result > 0:
 * 			control_actions = [optimal_controls[i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 			return {'control_actions': control_actions, 'horizon': horizon, 'success': True}
 * 		else:
*/
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1370, __pyx_L15_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_builtin_range);
        __pyx_t_14 = __pyx_builtin_range; 
        __pyx_t_5 = 1;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_N};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1370, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_4);
        }
        if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
          __pyx_t_14 = __pyx_t_4; __Pyx_INCREF(__pyx_t_14);
          __pyx_t_1 = 0;
          __pyx_t_6 = NULL;
        } else {
          __pyx_t_1 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1370, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1370, __pyx_L15_error)
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        for (;;) {
          if (likely(!__pyx_t_6)) {
            if (likely(PyList_CheckExact(__pyx_t_14))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_14);
                #if !CYTHON_ASSUME_SAFE_SIZE
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1370, __pyx_L15_error)
                #endif
                if (__pyx_t_1 >= __pyx_temp) break;
              }
              __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_14, __pyx_t_1);
              ++__pyx_t_1;
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_14);
                #if !CYTHON_ASSUME_SAFE_SIZE
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1370, __pyx_L15_error)
                #endif
                if (__pyx_t_1 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_1));
              #else
              __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_14, __pyx_t_1);
              #endif
              ++__pyx_t_1;
            }
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1370, __pyx_L15_error)
          } else {
            __pyx_t_4 = __pyx_t_6(__pyx_t_14);
            if (unlikely(!__pyx_t_4)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1370, __pyx_L15_error)
                PyErr_Clear();
              }
              break;
            }
          }
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_XDECREF_SET(__pyx_9genexpr27__pyx_v_i, __pyx_t_4);
          __pyx_t_4 = 0;
          __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_9genexpr27__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1370, __pyx_L15_error)
          __pyx_t_4 = PyFloat_FromDouble((__pyx_v_optimal_controls[__pyx_t_8])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1370, __pyx_L15_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 1370, __pyx_L15_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_9genexpr27__pyx_v_i); __pyx_9genexpr27__pyx_v_i = 0;
        goto __pyx_L19_exit_scope;
        __pyx_L15_error:;
        __Pyx_XDECREF(__pyx_9genexpr27__pyx_v_i); __pyx_9genexpr27__pyx_v_i = 0;
        goto __pyx_L4_error;
        __pyx_L19_exit_scope:;
      } /* exit inner scope */
      __pyx_v_control_actions = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1371
 * 		if result > 0:
 * 			control_actions = [optimal_controls[i] for i in range(N)]
 * 			return {'control_actions': control_actions, 'horizon': horizon, 'success': True}             # <<<<<<<<<<<<<<
 * 		else:
 * 			return {'control_actions': [0.0] * N, 'horizon': horizon, 'success': False}
*/
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1371, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_control_actions, __pyx_v_control_actions) < 0) __PYX_ERR(0, 1371, __pyx_L4_error)
      __pyx_t_14 = __Pyx_PyLong_From_int(__pyx_v_horizon); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1371, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_horizon, __pyx_t_14) < 0) __PYX_ERR(0, 1371, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_success, Py_True) < 0) __PYX_ERR(0, 1371, __pyx_L4_error)
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1369
 * 							   prod_idx, prod_nu, prod_off, optimal_controls)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			control_actions = [optimal_controls[i] for i in range(N)]
 * 			return {'control_actions': control_actions, 'horizon': horizon, 'success': True}
*/
    }

    /* "pyroxa/pybindings.pyx":1373
 * 			return {'control_actions': control_actions, 'horizon': horizon, 'success': True}
 * 		else:
 * 			return {'control_actions': [0.0] * N, 'horizon': horizon, 'success': False}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(state); free(setpts); free(bounds); free(kf); free(kr); free(optimal_controls)
*/
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1373, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_14 = PyList_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1373, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_mstate_global->__pyx_float_0_0);
      __Pyx_GIVEREF(__pyx_mstate_global->__pyx_float_0_0);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_mstate_global->__pyx_float_0_0) != (0)) __PYX_ERR(0, 1373, __pyx_L4_error);
      { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_14, __pyx_v_N); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 1373, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_temp);
        __Pyx_DECREF(__pyx_t_14);
        __pyx_t_14 = __pyx_temp;
      }
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_control_actions, __pyx_t_14) < 0) __PYX_ERR(0, 1373, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = __Pyx_PyLong_From_int(__pyx_v_horizon); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1373, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_horizon, __pyx_t_14) < 0) __PYX_ERR(0, 1373, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_success, Py_False) < 0) __PYX_ERR(0, 1373, __pyx_L4_error)
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1375
 * 			return {'control_actions': [0.0] * N, 'horizon': horizon, 'success': False}
 * 	finally:
 * 		free(state); free(setpts); free(bounds); free(kf); free(kr); free(optimal_controls)             # <<<<<<<<<<<<<<
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      if ( unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __pyx_t_15 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
      {
        free(__pyx_v_state);
        free(__pyx_v_setpts);
        free(__pyx_v_bounds);
        free(__pyx_v_kf);
        free(__pyx_v_kr);
        free(__pyx_v_optimal_controls);

        /* "pyroxa/pybindings.pyx":1376
 * 	finally:
 * 		free(state); free(setpts); free(bounds); free(kf); free(kr); free(optimal_controls)
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)             # <<<<<<<<<<<<<<
 * 
 * def py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network):
*/
        free(__pyx_v_reac_idx);
        free(__pyx_v_reac_nu);
        free(__pyx_v_reac_off);
        free(__pyx_v_prod_idx);
        free(__pyx_v_prod_nu);
        free(__pyx_v_prod_off);
      }
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __pyx_lineno = __pyx_t_15; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_16;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_22 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1375
 * 			return {'control_actions': [0.0] * N, 'horizon': horizon, 'success': False}
 * 	finally:
 * 		free(state); free(setpts); free(bounds); free(kf); free(kr); free(optimal_controls)             # <<<<<<<<<<<<<<
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
*/
      free(__pyx_v_state);
      free(__pyx_v_setpts);
      free(__pyx_v_bounds);
      free(__pyx_v_kf);
      free(__pyx_v_kr);
      free(__pyx_v_optimal_controls);

      /* "pyroxa/pybindings.pyx":1376
 * 	finally:
 * 		free(state); free(setpts); free(bounds); free(kf); free(kr); free(optimal_controls)
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)             # <<<<<<<<<<<<<<
 * 
 * def py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network):
*/
      free(__pyx_v_reac_idx);
      free(__pyx_v_reac_nu);
      free(__pyx_v_reac_off);
      free(__pyx_v_prod_idx);
      free(__pyx_v_prod_nu);
      free(__pyx_v_prod_off);
      __pyx_r = __pyx_t_22;
      __pyx_t_22 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1324
 * 	}
 * 
 * def py_mpc_controller(current_state, setpoints, control_bounds, reaction_network, int horizon=10):             # <<<<<<<<<<<<<<
 * 	"""Model Predictive Control implementation"""
 * 	N = len(current_state)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("pyroxa._pybindings.py_mpc_controller", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_N);
  __Pyx_XDECREF(__pyx_v_M);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_control_actions);
  __Pyx_XDECREF(__pyx_9genexpr27__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1378
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
 * def py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network):             # <<<<<<<<<<<<<<
 * 	"""Real-time optimization for process economics"""
 * 	N = len(current_concentrations)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_103py_real_time_optimization(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_102py_real_time_optimization, "py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network)\n\nReal-time optimization for process economics");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_103py_real_time_optimization = {"py_real_time_optimization", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_103py_real_time_optimization, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_102py_real_time_optimization};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_103py_real_time_optimization(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_current_concentrations = 0;
  PyObject *__pyx_v_economic_coefficients = 0;
  PyObject *__pyx_v_control_bounds = 0;
  PyObject *__pyx_v_reaction_network = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_real_time_optimization (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_current_concentrations,&__pyx_mstate_global->__pyx_n_u_economic_coefficients,&__pyx_mstate_global->__pyx_n_u_control_bounds,&__pyx_mstate_global->__pyx_n_u_reaction_network,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1378, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1378, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1378, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1378, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1378, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_real_time_optimization", 0) < 0) __PYX_ERR(0, 1378, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 4; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_real_time_optimization", 1, 4, 4, i); __PYX_ERR(0, 1378, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1378, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1378, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1378, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1378, __pyx_L3_error)
    }
    __pyx_v_current_concentrations = values[0];
    __pyx_v_economic_coefficients = values[1];
    __pyx_v_control_bounds = values[2];
    __pyx_v_reaction_network = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_real_time_optimization", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 1378, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_real_time_optimization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_102py_real_time_optimization(__pyx_self, __pyx_v_current_concentrations, __pyx_v_economic_coefficients, __pyx_v_control_bounds, __pyx_v_reaction_network);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_102py_real_time_optimization(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_current_concentrations, PyObject *__pyx_v_economic_coefficients, PyObject *__pyx_v_control_bounds, PyObject *__pyx_v_reaction_network) {
  PyObject *__pyx_v_N = NULL;
  PyObject *__pyx_v_M = NULL;
  PyObject *__pyx_v_n_controls = NULL;
  double *__pyx_v_concs;
  double *__pyx_v_econ_coeffs;
  double *__pyx_v_bounds;
  double *__pyx_v_kf;
  double *__pyx_v_kr;
  double *__pyx_v_optimal_controls;
  double __pyx_v_predicted_profit;
  int *__pyx_v_reac_idx;
  double *__pyx_v_reac_nu;
  int *__pyx_v_reac_off;
  int *__pyx_v_prod_idx;
  double *__pyx_v_prod_nu;
  int *__pyx_v_prod_off;
  PyObject *__pyx_v_i = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_optimal_settings = NULL;
  PyObject *__pyx_9genexpr28__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  double __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  double __pyx_t_10;
  int __pyx_t_11;
  long __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_real_time_optimization", 0);

  /* "pyroxa/pybindings.pyx":1380
 * def py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network):
 * 	"""Real-time optimization for process economics"""
 * 	N = len(current_concentrations)             # <<<<<<<<<<<<<<
 * 	M = len(reaction_network.get('reactions', []))
 * 	n_controls = len(control_bounds)
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_current_concentrations); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1380, __pyx_L1_error)
  __pyx_t_2 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_N = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1381
 * 	"""Real-time optimization for process economics"""
 * 	N = len(current_concentrations)
 * 	M = len(reaction_network.get('reactions', []))             # <<<<<<<<<<<<<<
 * 	n_controls = len(control_bounds)
 * 
*/
  __pyx_t_3 = __pyx_v_reaction_network;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_mstate_global->__pyx_n_u_reactions, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_t_1 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_M = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1382
 * 	N = len(current_concentrations)
 * 	M = len(reaction_network.get('reactions', []))
 * 	n_controls = len(control_bounds)             # <<<<<<<<<<<<<<
 * 
 * 	cdef double* concs = <double*>malloc(N * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_control_bounds); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1382, __pyx_L1_error)
  __pyx_t_2 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_n_controls = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1384
 * 	n_controls = len(control_bounds)
 * 
 * 	cdef double* concs = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* econ_coeffs = <double*>malloc(N * sizeof(double))
 * 	cdef double* bounds = <double*>malloc(2 * n_controls * sizeof(double))
*/
  __pyx_t_2 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_N, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_concs = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1385
 * 
 * 	cdef double* concs = <double*>malloc(N * sizeof(double))
 * 	cdef double* econ_coeffs = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* bounds = <double*>malloc(2 * n_controls * sizeof(double))
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
*/
  __pyx_t_4 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_N, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_econ_coeffs = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1386
 * 	cdef double* concs = <double*>malloc(N * sizeof(double))
 * 	cdef double* econ_coeffs = <double*>malloc(N * sizeof(double))
 * 	cdef double* bounds = <double*>malloc(2 * n_controls * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))
*/
  __pyx_t_2 = __Pyx_PyLong_MultiplyCObj(__pyx_mstate_global->__pyx_int_2, __pyx_v_n_controls, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_bounds = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1387
 * 	cdef double* econ_coeffs = <double*>malloc(N * sizeof(double))
 * 	cdef double* bounds = <double*>malloc(2 * n_controls * sizeof(double))
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))
 * 	cdef double* optimal_controls = <double*>malloc(n_controls * sizeof(double))
*/
  __pyx_t_3 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_M, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_kf = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1388
 * 	cdef double* bounds = <double*>malloc(2 * n_controls * sizeof(double))
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* optimal_controls = <double*>malloc(n_controls * sizeof(double))
 * 	cdef double predicted_profit = 0.0
*/
  __pyx_t_4 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_M, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_kr = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1389
 * 	cdef double* kf = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))
 * 	cdef double* optimal_controls = <double*>malloc(n_controls * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double predicted_profit = 0.0
 * 
*/
  __pyx_t_3 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_n_controls, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_optimal_controls = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1390
 * 	cdef double* kr = <double*>malloc(M * sizeof(double))
 * 	cdef double* optimal_controls = <double*>malloc(n_controls * sizeof(double))
 * 	cdef double predicted_profit = 0.0             # <<<<<<<<<<<<<<
 * 
 * 	# Simplified reaction indices
*/
  __pyx_v_predicted_profit = 0.0;

  /* "pyroxa/pybindings.pyx":1393
 * 
 * 	# Simplified reaction indices
 * 	cdef int* reac_idx = <int*>malloc(M * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
*/
  __pyx_t_4 = __Pyx_PyLong_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_M, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_reac_idx = ((int *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1394
 * 	# Simplified reaction indices
 * 	cdef int* reac_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
*/
  __pyx_t_3 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_M, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_reac_nu = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1395
 * 	cdef int* reac_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))
*/
  __pyx_t_4 = __Pyx_PyLong_AddObjC(__pyx_v_M, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyLong_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_reac_off = ((int *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1396
 * 	cdef double* reac_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))
*/
  __pyx_t_2 = __Pyx_PyLong_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_M, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_prod_idx = ((int *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1397
 * 	cdef int* reac_off = <int*>malloc((M + 1) * sizeof(int))
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))
 * 
*/
  __pyx_t_3 = __Pyx_PyLong_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_M, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_prod_nu = ((double *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1398
 * 	cdef int* prod_idx = <int*>malloc(M * sizeof(int))
 * 	cdef double* prod_nu = <double*>malloc(M * sizeof(double))
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_t_2 = __Pyx_PyLong_AddObjC(__pyx_v_M, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyLong_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyLong_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_prod_off = ((int *)malloc(__pyx_t_5));

  /* "pyroxa/pybindings.pyx":1400
 * 	cdef int* prod_off = <int*>malloc((M + 1) * sizeof(int))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		for i in range(N):
 * 			concs[i] = current_concentrations[i]
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1401
 * 
 * 	try:
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			concs[i] = current_concentrations[i]
 * 			econ_coeffs[i] = economic_coefficients[i] if i < len(economic_coefficients) else 0.0
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_2 = __pyx_builtin_range; 
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_N};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1401, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_2 = __pyx_t_4; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1401, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1401, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1401, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1401, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1));
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1401, __pyx_L4_error)
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_2);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1401, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1402
 * 	try:
 * 		for i in range(N):
 * 			concs[i] = current_concentrations[i]             # <<<<<<<<<<<<<<
 * 			econ_coeffs[i] = economic_coefficients[i] if i < len(economic_coefficients) else 0.0
 * 
*/
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_current_concentrations, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1402, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1402, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1402, __pyx_L4_error)
      (__pyx_v_concs[__pyx_t_8]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1403
 * 		for i in range(N):
 * 			concs[i] = current_concentrations[i]
 * 			econ_coeffs[i] = economic_coefficients[i] if i < len(economic_coefficients) else 0.0             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(n_controls):
*/
      __pyx_t_8 = PyObject_Length(__pyx_v_economic_coefficients); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1403, __pyx_L4_error)
      __pyx_t_4 = PyLong_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1403, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_i, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1403, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1403, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_9) {
        __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_economic_coefficients, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1403, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_10 = __Pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1403, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_7 = __pyx_t_10;
      } else {
        __pyx_t_7 = 0.0;
      }
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1403, __pyx_L4_error)
      (__pyx_v_econ_coeffs[__pyx_t_8]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1401
 * 
 * 	try:
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			concs[i] = current_concentrations[i]
 * 			econ_coeffs[i] = economic_coefficients[i] if i < len(economic_coefficients) else 0.0
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1405
 * 			econ_coeffs[i] = economic_coefficients[i] if i < len(economic_coefficients) else 0.0
 * 
 * 		for i in range(n_controls):             # <<<<<<<<<<<<<<
 * 			bounds[2*i] = control_bounds[i][0]    # min
 * 			bounds[2*i+1] = control_bounds[i][1]  # max
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_4 = __pyx_builtin_range; 
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_n_controls};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1405, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1405, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1405, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1405, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1405, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1));
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1405, __pyx_L4_error)
      } else {
        __pyx_t_2 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1405, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1406
 * 
 * 		for i in range(n_controls):
 * 			bounds[2*i] = control_bounds[i][0]    # min             # <<<<<<<<<<<<<<
 * 			bounds[2*i+1] = control_bounds[i][1]  # max
 * 
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_control_bounds, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1406, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1406, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = __Pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1406, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyLong_MultiplyCObj(__pyx_mstate_global->__pyx_int_2, __pyx_v_i, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1406, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1406, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      (__pyx_v_bounds[__pyx_t_8]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1407
 * 		for i in range(n_controls):
 * 			bounds[2*i] = control_bounds[i][0]    # min
 * 			bounds[2*i+1] = control_bounds[i][1]  # max             # <<<<<<<<<<<<<<
 * 
 * 		# Set up simplified reaction network
*/
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_control_bounds, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1407, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1407, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyLong_MultiplyCObj(__pyx_mstate_global->__pyx_int_2, __pyx_v_i, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1407, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyLong_AddObjC(__pyx_t_2, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1407, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1407, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      (__pyx_v_bounds[__pyx_t_8]) = __pyx_t_7;

      /* "pyroxa/pybindings.pyx":1405
 * 			econ_coeffs[i] = economic_coefficients[i] if i < len(economic_coefficients) else 0.0
 * 
 * 		for i in range(n_controls):             # <<<<<<<<<<<<<<
 * 			bounds[2*i] = control_bounds[i][0]    # min
 * 			bounds[2*i+1] = control_bounds[i][1]  # max
*/
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":1410
 * 
 * 		# Set up simplified reaction network
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_2 = __pyx_builtin_range; 
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_M};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1410, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_2 = __pyx_t_4; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1410, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1410, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1410, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1410, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1));
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1410, __pyx_L4_error)
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_2);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1410, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1411
 * 		# Set up simplified reaction network
 * 		for i in range(M):
 * 			kf[i] = 1.0             # <<<<<<<<<<<<<<
 * 			kr[i] = 0.1
 * 			reac_idx[i] = 0
*/
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1411, __pyx_L4_error)
      (__pyx_v_kf[__pyx_t_8]) = 1.0;

      /* "pyroxa/pybindings.pyx":1412
 * 		for i in range(M):
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1             # <<<<<<<<<<<<<<
 * 			reac_idx[i] = 0
 * 			reac_nu[i] = 1.0
*/
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1412, __pyx_L4_error)
      (__pyx_v_kr[__pyx_t_8]) = 0.1;

      /* "pyroxa/pybindings.pyx":1413
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1
 * 			reac_idx[i] = 0             # <<<<<<<<<<<<<<
 * 			reac_nu[i] = 1.0
 * 			reac_off[i] = i
*/
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1413, __pyx_L4_error)
      (__pyx_v_reac_idx[__pyx_t_8]) = 0;

      /* "pyroxa/pybindings.pyx":1414
 * 			kr[i] = 0.1
 * 			reac_idx[i] = 0
 * 			reac_nu[i] = 1.0             # <<<<<<<<<<<<<<
 * 			reac_off[i] = i
 * 			prod_idx[i] = min(1, N-1)
*/
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1414, __pyx_L4_error)
      (__pyx_v_reac_nu[__pyx_t_8]) = 1.0;

      /* "pyroxa/pybindings.pyx":1415
 * 			reac_idx[i] = 0
 * 			reac_nu[i] = 1.0
 * 			reac_off[i] = i             # <<<<<<<<<<<<<<
 * 			prod_idx[i] = min(1, N-1)
 * 			prod_nu[i] = 1.0
*/
      __pyx_t_11 = __Pyx_PyLong_As_int(__pyx_v_i); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1415, __pyx_L4_error)
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1415, __pyx_L4_error)
      (__pyx_v_reac_off[__pyx_t_8]) = __pyx_t_11;

      /* "pyroxa/pybindings.pyx":1416
 * 			reac_nu[i] = 1.0
 * 			reac_off[i] = i
 * 			prod_idx[i] = min(1, N-1)             # <<<<<<<<<<<<<<
 * 			prod_nu[i] = 1.0
 * 			prod_off[i] = i
*/
      __pyx_t_4 = __Pyx_PyLong_SubtractObjC(__pyx_v_N, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1416, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = 1;
      __pyx_t_13 = __Pyx_PyLong_From_long(__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1416, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyObject_RichCompare(__pyx_t_4, __pyx_t_13, Py_LT); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1416, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1416, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (__pyx_t_9) {
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_3 = __pyx_t_4;
      } else {
        __pyx_t_14 = __Pyx_PyLong_From_long(__pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1416, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_3 = __pyx_t_14;
        __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_11 = __Pyx_PyLong_As_int(__pyx_t_3); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1416, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1416, __pyx_L4_error)
      (__pyx_v_prod_idx[__pyx_t_8]) = __pyx_t_11;

      /* "pyroxa/pybindings.pyx":1417
 * 			reac_off[i] = i
 * 			prod_idx[i] = min(1, N-1)
 * 			prod_nu[i] = 1.0             # <<<<<<<<<<<<<<
 * 			prod_off[i] = i
 * 		reac_off[M] = M
*/
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1417, __pyx_L4_error)
      (__pyx_v_prod_nu[__pyx_t_8]) = 1.0;

      /* "pyroxa/pybindings.pyx":1418
 * 			prod_idx[i] = min(1, N-1)
 * 			prod_nu[i] = 1.0
 * 			prod_off[i] = i             # <<<<<<<<<<<<<<
 * 		reac_off[M] = M
 * 		prod_off[M] = M
*/
      __pyx_t_11 = __Pyx_PyLong_As_int(__pyx_v_i); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1418, __pyx_L4_error)
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1418, __pyx_L4_error)
      (__pyx_v_prod_off[__pyx_t_8]) = __pyx_t_11;

      /* "pyroxa/pybindings.pyx":1410
 * 
 * 		# Set up simplified reaction network
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf[i] = 1.0
 * 			kr[i] = 0.1
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1419
 * 			prod_nu[i] = 1.0
 * 			prod_off[i] = i
 * 		reac_off[M] = M             # <<<<<<<<<<<<<<
 * 		prod_off[M] = M
 * 
*/
    __pyx_t_11 = __Pyx_PyLong_As_int(__pyx_v_M); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1419, __pyx_L4_error)
    __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_M); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1419, __pyx_L4_error)
    (__pyx_v_reac_off[__pyx_t_1]) = __pyx_t_11;

    /* "pyroxa/pybindings.pyx":1420
 * 			prod_off[i] = i
 * 		reac_off[M] = M
 * 		prod_off[M] = M             # <<<<<<<<<<<<<<
 * 
 * 		result = real_time_optimization(N, M, n_controls, concs, econ_coeffs, bounds,
*/
    __pyx_t_11 = __Pyx_PyLong_As_int(__pyx_v_M); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1420, __pyx_L4_error)
    __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_M); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1420, __pyx_L4_error)
    (__pyx_v_prod_off[__pyx_t_1]) = __pyx_t_11;

    /* "pyroxa/pybindings.pyx":1422
 * 		prod_off[M] = M
 * 
 * 		result = real_time_optimization(N, M, n_controls, concs, econ_coeffs, bounds,             # <<<<<<<<<<<<<<
 * 									   kf, kr, reac_idx, reac_nu, reac_off,
 * 									   prod_idx, prod_nu, prod_off, optimal_controls, &predicted_profit)
*/
    __pyx_t_11 = __Pyx_PyLong_As_int(__pyx_v_N); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1422, __pyx_L4_error)
    __pyx_t_15 = __Pyx_PyLong_As_int(__pyx_v_M); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1422, __pyx_L4_error)
    __pyx_t_16 = __Pyx_PyLong_As_int(__pyx_v_n_controls); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1422, __pyx_L4_error)

    /* "pyroxa/pybindings.pyx":1424
 * 		result = real_time_optimization(N, M, n_controls, concs, econ_coeffs, bounds,
 * 									   kf, kr, reac_idx, reac_nu, reac_off,
 * 									   prod_idx, prod_nu, prod_off, optimal_controls, &predicted_profit)             # <<<<<<<<<<<<<<
 * 
 * 		if result > 0:
*/
    __pyx_v_result = real_time_optimization(__pyx_t_11, __pyx_t_15, __pyx_t_16, __pyx_v_concs, __pyx_v_econ_coeffs, __pyx_v_bounds, __pyx_v_kf, __pyx_v_kr, __pyx_v_reac_idx, __pyx_v_reac_nu, __pyx_v_reac_off, __pyx_v_prod_idx, __pyx_v_prod_nu, __pyx_v_prod_off, __pyx_v_optimal_controls, (&__pyx_v_predicted_profit));

    /* "pyroxa/pybindings.pyx":1426
 * 									   prod_idx, prod_nu, prod_off, optimal_controls, &predicted_profit)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			optimal_settings = [optimal_controls[i] for i in range(n_controls)]
 * 			return {
*/
    __pyx_t_9 = (__pyx_v_result > 0);
    if (__pyx_t_9) {

      /* "pyroxa/pybindings.pyx":1427
 * 
 * 		if result > 0:
 * 			optimal_settings = [optimal_controls[i] for i in range(n_controls)]             # <<<<<<<<<<<<<<
 * 			return {
 * 				'optimal_controls': optimal_settings,
*/
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1427, __pyx_L18_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_builtin_range);
        __pyx_t_14 = __pyx_builtin_range; 
        __pyx_t_5 = 1;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_n_controls};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1427, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_3);
        }
        if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
          __pyx_t_14 = __pyx_t_3; __Pyx_INCREF(__pyx_t_14);
          __pyx_t_1 = 0;
          __pyx_t_6 = NULL;
        } else {
          __pyx_t_1 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1427, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1427, __pyx_L18_error)
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        for (;;) {
          if (likely(!__pyx_t_6)) {
            if (likely(PyList_CheckExact(__pyx_t_14))) {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_14);
                #if !CYTHON_ASSUME_SAFE_SIZE
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1427, __pyx_L18_error)
                #endif
                if (__pyx_t_1 >= __pyx_temp) break;
              }
              __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_14, __pyx_t_1);
              ++__pyx_t_1;
            } else {
              {
                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_14);
                #if !CYTHON_ASSUME_SAFE_SIZE
                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1427, __pyx_L18_error)
                #endif
                if (__pyx_t_1 >= __pyx_temp) break;
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_1));
              #else
              __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_14, __pyx_t_1);
              #endif
              ++__pyx_t_1;
            }
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1427, __pyx_L18_error)
          } else {
            __pyx_t_3 = __pyx_t_6(__pyx_t_14);
            if (unlikely(!__pyx_t_3)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1427, __pyx_L18_error)
                PyErr_Clear();
              }
              break;
            }
          }
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_XDECREF_SET(__pyx_9genexpr28__pyx_v_i, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_9genexpr28__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1427, __pyx_L18_error)
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_optimal_controls[__pyx_t_8])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1427, __pyx_L18_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1427, __pyx_L18_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_i); __pyx_9genexpr28__pyx_v_i = 0;
        goto __pyx_L22_exit_scope;
        __pyx_L18_error:;
        __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_i); __pyx_9genexpr28__pyx_v_i = 0;
        goto __pyx_L4_error;
        __pyx_L22_exit_scope:;
      } /* exit inner scope */
      __pyx_v_optimal_settings = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1428
 * 		if result > 0:
 * 			optimal_settings = [optimal_controls[i] for i in range(n_controls)]
 * 			return {             # <<<<<<<<<<<<<<
 * 				'optimal_controls': optimal_settings,
 * 				'predicted_profit': predicted_profit,
*/
      __Pyx_XDECREF(__pyx_r);

      /* "pyroxa/pybindings.pyx":1429
 * 			optimal_settings = [optimal_controls[i] for i in range(n_controls)]
 * 			return {
 * 				'optimal_controls': optimal_settings,             # <<<<<<<<<<<<<<
 * 				'predicted_profit': predicted_profit,
 * 				'success': True
*/
      __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1429, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_optimal_controls, __pyx_v_optimal_settings) < 0) __PYX_ERR(0, 1429, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1430
 * 			return {
 * 				'optimal_controls': optimal_settings,
 * 				'predicted_profit': predicted_profit,             # <<<<<<<<<<<<<<
 * 				'success': True
 * 			}
*/
      __pyx_t_14 = PyFloat_FromDouble(__pyx_v_predicted_profit); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1430, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_predicted_profit, __pyx_t_14) < 0) __PYX_ERR(0, 1429, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "pyroxa/pybindings.pyx":1431
 * 				'optimal_controls': optimal_settings,
 * 				'predicted_profit': predicted_profit,
 * 				'success': True             # <<<<<<<<<<<<<<
 * 			}
 * 		else:
*/
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_success, Py_True) < 0) __PYX_ERR(0, 1429, __pyx_L4_error)
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1426
 * 									   prod_idx, prod_nu, prod_off, optimal_controls, &predicted_profit)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			optimal_settings = [optimal_controls[i] for i in range(n_controls)]
 * 			return {
*/
    }

    /* "pyroxa/pybindings.pyx":1434
 * 			}
 * 		else:
 * 			return {'optimal_controls': [0.0] * n_controls, 'predicted_profit': 0.0, 'success': False}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(concs); free(econ_coeffs); free(bounds); free(kf); free(kr); free(optimal_controls)
*/
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1434, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_14 = PyList_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1434, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_mstate_global->__pyx_float_0_0);
      __Pyx_GIVEREF(__pyx_mstate_global->__pyx_float_0_0);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_mstate_global->__pyx_float_0_0) != (0)) __PYX_ERR(0, 1434, __pyx_L4_error);
      { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_14, __pyx_v_n_controls); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 1434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_temp);
        __Pyx_DECREF(__pyx_t_14);
        __pyx_t_14 = __pyx_temp;
      }
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_optimal_controls, __pyx_t_14) < 0) __PYX_ERR(0, 1434, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_predicted_profit, __pyx_mstate_global->__pyx_float_0_0) < 0) __PYX_ERR(0, 1434, __pyx_L4_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_success, Py_False) < 0) __PYX_ERR(0, 1434, __pyx_L4_error)
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1436
 * 			return {'optimal_controls': [0.0] * n_controls, 'predicted_profit': 0.0, 'success': False}
 * 	finally:
 * 		free(concs); free(econ_coeffs); free(bounds); free(kf); free(kr); free(optimal_controls)             # <<<<<<<<<<<<<<
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
      if ( unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __Pyx_XGOTREF(__pyx_t_23);
      __pyx_t_16 = __pyx_lineno; __pyx_t_15 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
      {
        free(__pyx_v_concs);
        free(__pyx_v_econ_coeffs);
        free(__pyx_v_bounds);
        free(__pyx_v_kf);
        free(__pyx_v_kr);
        free(__pyx_v_optimal_controls);

        /* "pyroxa/pybindings.pyx":1437
 * 	finally:
 * 		free(concs); free(econ_coeffs); free(bounds); free(kf); free(kr); free(optimal_controls)
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)             # <<<<<<<<<<<<<<
 * 
 * """
*/
        free(__pyx_v_reac_idx);
        free(__pyx_v_reac_nu);
        free(__pyx_v_reac_off);
        free(__pyx_v_prod_idx);
        free(__pyx_v_prod_nu);
        free(__pyx_v_prod_off);
      }
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_XGIVEREF(__pyx_t_23);
      __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
      __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
      __pyx_lineno = __pyx_t_16; __pyx_clineno = __pyx_t_15; __pyx_filename = __pyx_t_17;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_23 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1436
 * 			return {'optimal_controls': [0.0] * n_controls, 'predicted_profit': 0.0, 'success': False}
 * 	finally:
 * 		free(concs); free(econ_coeffs); free(bounds); free(kf); free(kr); free(optimal_controls)             # <<<<<<<<<<<<<<
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
*/
      free(__pyx_v_concs);
      free(__pyx_v_econ_coeffs);
      free(__pyx_v_bounds);
      free(__pyx_v_kf);
      free(__pyx_v_kr);
      free(__pyx_v_optimal_controls);

      /* "pyroxa/pybindings.pyx":1437
 * 	finally:
 * 		free(concs); free(econ_coeffs); free(bounds); free(kf); free(kr); free(optimal_controls)
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)             # <<<<<<<<<<<<<<
 * 
 * """
*/
      free(__pyx_v_reac_idx);
      free(__pyx_v_reac_nu);
      free(__pyx_v_reac_off);
      free(__pyx_v_prod_idx);
      free(__pyx_v_prod_nu);
      free(__pyx_v_prod_off);
      __pyx_r = __pyx_t_23;
      __pyx_t_23 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1378
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
 * def py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network):             # <<<<<<<<<<<<<<
 * 	"""Real-time optimization for process economics"""
 * 	N = len(current_concentrations)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("pyroxa._pybindings.py_real_time_optimization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_N);
  __Pyx_XDECREF(__pyx_v_M);
  __Pyx_XDECREF(__pyx_v_n_controls);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_optimal_settings);
  __Pyx_XDECREF(__pyx_9genexpr28__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1448
 * 
 * # BATCH 12: Advanced reactor simulations
 * def py_simulate_packed_bed(int N, int M, int nseg, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 						   prod_idx, prod_nu, prod_off, conc0, double flow_rate,
 * 						   double bed_length, double bed_porosity, double particle_diameter,
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_105py_simulate_packed_bed(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_104py_simulate_packed_bed, "py_simulate_packed_bed(int N, int M, int nseg, kf, kr, reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off, conc0, double flow_rate, double bed_length, double bed_porosity, double particle_diameter, double catalyst_density, double effectiveness_factor, double time_span, double dt, int max_len=1000)\n\nSimulate packed bed reactor using original complex C++ implementation with full parameter exposure");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_105py_simulate_packed_bed = {"py_simulate_packed_bed", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_105py_simulate_packed_bed, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_104py_simulate_packed_bed};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_105py_simulate_packed_bed(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_N;
  int __pyx_v_M;
  int __pyx_v_nseg;
  PyObject *__pyx_v_kf = 0;
  PyObject *__pyx_v_kr = 0;
  PyObject *__pyx_v_reac_idx = 0;
  PyObject *__pyx_v_reac_nu = 0;
  PyObject *__pyx_v_reac_off = 0;
  PyObject *__pyx_v_prod_idx = 0;
  PyObject *__pyx_v_prod_nu = 0;
  PyObject *__pyx_v_prod_off = 0;
  PyObject *__pyx_v_conc0 = 0;
  double __pyx_v_flow_rate;
  double __pyx_v_bed_length;
  double __pyx_v_bed_porosity;
  double __pyx_v_particle_diameter;
  double __pyx_v_catalyst_density;
  double __pyx_v_effectiveness_factor;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_v_max_len;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[21] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_simulate_packed_bed (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_N,&__pyx_mstate_global->__pyx_n_u_M,&__pyx_mstate_global->__pyx_n_u_nseg,&__pyx_mstate_global->__pyx_n_u_kf,&__pyx_mstate_global->__pyx_n_u_kr,&__pyx_mstate_global->__pyx_n_u_reac_idx,&__pyx_mstate_global->__pyx_n_u_reac_nu,&__pyx_mstate_global->__pyx_n_u_reac_off,&__pyx_mstate_global->__pyx_n_u_prod_idx,&__pyx_mstate_global->__pyx_n_u_prod_nu,&__pyx_mstate_global->__pyx_n_u_prod_off,&__pyx_mstate_global->__pyx_n_u_conc0,&__pyx_mstate_global->__pyx_n_u_flow_rate,&__pyx_mstate_global->__pyx_n_u_bed_length,&__pyx_mstate_global->__pyx_n_u_bed_porosity,&__pyx_mstate_global->__pyx_n_u_particle_diameter,&__pyx_mstate_global->__pyx_n_u_catalyst_density,&__pyx_mstate_global->__pyx_n_u_effectiveness_factor,&__pyx_mstate_global->__pyx_n_u_time_span,&__pyx_mstate_global->__pyx_n_u_dt,&__pyx_mstate_global->__pyx_n_u_max_len,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1448, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case 21:
        values[20] = __Pyx_ArgRef_FASTCALL(__pyx_args, 20);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[20])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 20:
        values[19] = __Pyx_ArgRef_FASTCALL(__pyx_args, 19);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[19])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 19:
        values[18] = __Pyx_ArgRef_FASTCALL(__pyx_args, 18);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[18])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 18:
        values[17] = __Pyx_ArgRef_FASTCALL(__pyx_args, 17);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[17])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 17:
        values[16] = __Pyx_ArgRef_FASTCALL(__pyx_args, 16);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[16])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 16:
        values[15] = __Pyx_ArgRef_FASTCALL(__pyx_args, 15);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[15])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 15:
        values[14] = __Pyx_ArgRef_FASTCALL(__pyx_args, 14);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[14])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 14:
        values[13] = __Pyx_ArgRef_FASTCALL(__pyx_args, 13);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[13])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 13:
        values[12] = __Pyx_ArgRef_FASTCALL(__pyx_args, 12);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[12])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 12:
        values[11] = __Pyx_ArgRef_FASTCALL(__pyx_args, 11);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[11])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 11:
        values[10] = __Pyx_ArgRef_FASTCALL(__pyx_args, 10);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[10])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 10:
        values[9] = __Pyx_ArgRef_FASTCALL(__pyx_args, 9);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[9])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  9:
        values[8] = __Pyx_ArgRef_FASTCALL(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  8:
        values[7] = __Pyx_ArgRef_FASTCALL(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  7:
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_simulate_packed_bed", 0) < 0) __PYX_ERR(0, 1448, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 20; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, i); __PYX_ERR(0, 1448, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case 21:
        values[20] = __Pyx_ArgRef_FASTCALL(__pyx_args, 20);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[20])) __PYX_ERR(0, 1448, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 20:
        values[19] = __Pyx_ArgRef_FASTCALL(__pyx_args, 19);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[19])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[18] = __Pyx_ArgRef_FASTCALL(__pyx_args, 18);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[18])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[17] = __Pyx_ArgRef_FASTCALL(__pyx_args, 17);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[17])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[16] = __Pyx_ArgRef_FASTCALL(__pyx_args, 16);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[16])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[15] = __Pyx_ArgRef_FASTCALL(__pyx_args, 15);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[15])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[14] = __Pyx_ArgRef_FASTCALL(__pyx_args, 14);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[14])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[13] = __Pyx_ArgRef_FASTCALL(__pyx_args, 13);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[13])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[12] = __Pyx_ArgRef_FASTCALL(__pyx_args, 12);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[12])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[11] = __Pyx_ArgRef_FASTCALL(__pyx_args, 11);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[11])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[10] = __Pyx_ArgRef_FASTCALL(__pyx_args, 10);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[10])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[9] = __Pyx_ArgRef_FASTCALL(__pyx_args, 9);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[9])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[8] = __Pyx_ArgRef_FASTCALL(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[7] = __Pyx_ArgRef_FASTCALL(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1448, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1448, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_N = __Pyx_PyLong_As_int(values[0]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1448, __pyx_L3_error)
    __pyx_v_M = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_M == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1448, __pyx_L3_error)
    __pyx_v_nseg = __Pyx_PyLong_As_int(values[2]); if (unlikely((__pyx_v_nseg == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1448, __pyx_L3_error)
    __pyx_v_kf = values[3];
    __pyx_v_kr = values[4];
    __pyx_v_reac_idx = values[5];
    __pyx_v_reac_nu = values[6];
    __pyx_v_reac_off = values[7];
    __pyx_v_prod_idx = values[8];
    __pyx_v_prod_nu = values[9];
    __pyx_v_prod_off = values[10];
    __pyx_v_conc0 = values[11];
    __pyx_v_flow_rate = __Pyx_PyFloat_AsDouble(values[12]); if (unlikely((__pyx_v_flow_rate == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1449, __pyx_L3_error)
    __pyx_v_bed_length = __Pyx_PyFloat_AsDouble(values[13]); if (unlikely((__pyx_v_bed_length == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1450, __pyx_L3_error)
    __pyx_v_bed_porosity = __Pyx_PyFloat_AsDouble(values[14]); if (unlikely((__pyx_v_bed_porosity == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1450, __pyx_L3_error)
    __pyx_v_particle_diameter = __Pyx_PyFloat_AsDouble(values[15]); if (unlikely((__pyx_v_particle_diameter == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1450, __pyx_L3_error)
    __pyx_v_catalyst_density = __Pyx_PyFloat_AsDouble(values[16]); if (unlikely((__pyx_v_catalyst_density == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1451, __pyx_L3_error)
    __pyx_v_effectiveness_factor = __Pyx_PyFloat_AsDouble(values[17]); if (unlikely((__pyx_v_effectiveness_factor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1451, __pyx_L3_error)
    __pyx_v_time_span = __Pyx_PyFloat_AsDouble(values[18]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1452, __pyx_L3_error)
    __pyx_v_dt = __Pyx_PyFloat_AsDouble(values[19]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1452, __pyx_L3_error)
    if (values[20]) {
      __pyx_v_max_len = __Pyx_PyLong_As_int(values[20]); if (unlikely((__pyx_v_max_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1452, __pyx_L3_error)
    } else {
      __pyx_v_max_len = ((int)((int)0x3E8));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_simulate_packed_bed", 0, 20, 21, __pyx_nargs); __PYX_ERR(0, 1448, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_packed_bed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_104py_simulate_packed_bed(__pyx_self, __pyx_v_N, __pyx_v_M, __pyx_v_nseg, __pyx_v_kf, __pyx_v_kr, __pyx_v_reac_idx, __pyx_v_reac_nu, __pyx_v_reac_off, __pyx_v_prod_idx, __pyx_v_prod_nu, __pyx_v_prod_off, __pyx_v_conc0, __pyx_v_flow_rate, __pyx_v_bed_length, __pyx_v_bed_porosity, __pyx_v_particle_diameter, __pyx_v_catalyst_density, __pyx_v_effectiveness_factor, __pyx_v_time_span, __pyx_v_dt, __pyx_v_max_len);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_104py_simulate_packed_bed(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, int __pyx_v_nseg, PyObject *__pyx_v_kf, PyObject *__pyx_v_kr, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_flow_rate, double __pyx_v_bed_length, double __pyx_v_bed_porosity, double __pyx_v_particle_diameter, double __pyx_v_catalyst_density, double __pyx_v_effectiveness_factor, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len) {
  double *__pyx_v_kf_arr;
  double *__pyx_v_kr_arr;
  int *__pyx_v_reac_idx_arr;
  double *__pyx_v_reac_nu_arr;
  int *__pyx_v_reac_off_arr;
  int *__pyx_v_prod_idx_arr;
  double *__pyx_v_prod_nu_arr;
  int *__pyx_v_prod_off_arr;
  double *__pyx_v_conc0_arr;
  double *__pyx_v_times;
  double *__pyx_v_conc_out_flat;
  double *__pyx_v_pressure_out;
  PyObject *__pyx_v_i = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_times_out = NULL;
  PyObject *__pyx_v_conc_matrix = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_conc_t = NULL;
  PyObject *__pyx_v_pressure_out_list = NULL;
  int __pyx_9genexpr29__pyx_v_i;
  int __pyx_9genexpr30__pyx_v_i;
  int __pyx_9genexpr31__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  double __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_simulate_packed_bed", 0);

  /* "pyroxa/pybindings.pyx":1456
 * 
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
*/
  __pyx_v_kf_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1457
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
*/
  __pyx_v_kr_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1458
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1458, __pyx_L1_error)
  __pyx_v_reac_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1459
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1459, __pyx_L1_error)
  __pyx_v_reac_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1460
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1460, __pyx_L1_error)
  __pyx_v_reac_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1461
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1461, __pyx_L1_error)
  __pyx_v_prod_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1462
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1462, __pyx_L1_error)
  __pyx_v_prod_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1463
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1463, __pyx_L1_error)
  __pyx_v_prod_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1464
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
*/
  __pyx_v_conc0_arr = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1465
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* pressure_out = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_v_times = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1466
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* pressure_out = <double*>malloc(max_len * sizeof(double))
 * 
*/
  __pyx_v_conc_out_flat = ((double *)malloc(((__pyx_v_N * __pyx_v_max_len) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1467
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* pressure_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_pressure_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1469
 * 	cdef double* pressure_out = <double*>malloc(max_len * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Copy input arrays
 * 		for i in range(M):
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1471
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_4 = __pyx_builtin_range; 
    __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_M); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1471, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1471, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1471, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1471, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1471, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1471, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1));
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1471, __pyx_L4_error)
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1471, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1472
 * 		# Copy input arrays
 * 		for i in range(M):
 * 			kf_arr[i] = kf[i]             # <<<<<<<<<<<<<<
 * 			kr_arr[i] = kr[i]
 * 
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_kf, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1472, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1472, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1472, __pyx_L4_error)
      (__pyx_v_kf_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1473
 * 		for i in range(M):
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(len(reac_idx)):
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_kr, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1473, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1473, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1473, __pyx_L4_error)
      (__pyx_v_kr_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1471
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]
*/
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":1475
 * 			kr_arr[i] = kr[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_5 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1475, __pyx_L4_error)
    __pyx_t_3 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1475, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1475, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1475, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1475, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1475, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1475, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1));
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1475, __pyx_L4_error)
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1475, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1476
 * 
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
*/
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_reac_idx, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1476, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_4); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1476, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1476, __pyx_L4_error)
      (__pyx_v_reac_idx_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1475
 * 			kr_arr[i] = kr[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
*/
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":1477
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_3 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1477, __pyx_L4_error)
    __pyx_t_2 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1477, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1477, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1477, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1477, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1477, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1477, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1477, __pyx_L4_error)
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1477, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":1478
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
*/
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_reac_nu, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1478, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1478, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1478, __pyx_L4_error)
      (__pyx_v_reac_nu_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1477
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
*/
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":1479
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
*/
    __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_2 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1479, __pyx_L4_error)
    __pyx_t_4 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1479, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1479, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1479, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1479, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1479, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1479, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1));
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1479, __pyx_L4_error)
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1479, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1480
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
*/
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_off, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1480, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1480, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1480, __pyx_L4_error)
      (__pyx_v_reac_off_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1479
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1481
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_4 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1481, __pyx_L4_error)
    __pyx_t_5 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1481, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1481, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1481, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1481, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1481, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1481, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1));
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1481, __pyx_L4_error)
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1481, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1482
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_prod_idx, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1482, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1482, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1482, __pyx_L4_error)
      (__pyx_v_prod_idx_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1481
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
*/
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":1483
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_5 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1483, __pyx_L4_error)
    __pyx_t_3 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1483, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1483, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1483, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1483, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1483, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1483, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1));
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1483, __pyx_L4_error)
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1483, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1484
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]
*/
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_prod_nu, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1484, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1484, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1484, __pyx_L4_error)
      (__pyx_v_prod_nu_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1483
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
*/
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":1485
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_3 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1485, __pyx_L4_error)
    __pyx_t_2 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1485, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1485, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1485, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1485, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1485, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1485, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1485, __pyx_L4_error)
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1485, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":1486
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(N):
*/
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_prod_off, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1486, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_5); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1486, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1486, __pyx_L4_error)
      (__pyx_v_prod_off_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1485
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
*/
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":1488
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
*/
    __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_2 = __pyx_builtin_range; 
    __pyx_t_4 = __Pyx_PyLong_From_int(__pyx_v_N); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1488, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1488, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1488, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1488, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1488, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1488, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1));
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1488, __pyx_L4_error)
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1488, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1489
 * 
 * 		for i in range(N):
 * 			conc0_arr[i] = conc0[i]             # <<<<<<<<<<<<<<
 * 
 * 		# Call original complex C++ function (24 parameters)
*/
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_conc0, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1489, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1489, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1489, __pyx_L4_error)
      (__pyx_v_conc0_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1488
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1492
 * 
 * 		# Call original complex C++ function (24 parameters)
 * 		result = simulate_packed_bed(N, M, nseg, kf_arr, kr_arr, reac_idx_arr, reac_nu_arr, reac_off_arr,             # <<<<<<<<<<<<<<
 * 									prod_idx_arr, prod_nu_arr, prod_off_arr, conc0_arr, flow_rate,
 * 									bed_length, bed_porosity, particle_diameter,
*/
    __pyx_v_result = simulate_packed_bed(__pyx_v_N, __pyx_v_M, __pyx_v_nseg, __pyx_v_kf_arr, __pyx_v_kr_arr, __pyx_v_reac_idx_arr, __pyx_v_reac_nu_arr, __pyx_v_reac_off_arr, __pyx_v_prod_idx_arr, __pyx_v_prod_nu_arr, __pyx_v_prod_off_arr, __pyx_v_conc0_arr, __pyx_v_flow_rate, __pyx_v_bed_length, __pyx_v_bed_porosity, __pyx_v_particle_diameter, __pyx_v_catalyst_density, __pyx_v_effectiveness_factor, __pyx_v_time_span, __pyx_v_dt, __pyx_v_times, __pyx_v_conc_out_flat, __pyx_v_pressure_out, __pyx_v_max_len);

    /* "pyroxa/pybindings.pyx":1498
 * 									times, conc_out_flat, pressure_out, max_len)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
*/
    __pyx_t_11 = (__pyx_v_result > 0);
    if (__pyx_t_11) {

      /* "pyroxa/pybindings.pyx":1500
 * 		if result > 0:
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]             # <<<<<<<<<<<<<<
 * 			conc_matrix = []
 * 			for t in range(result):
*/
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1500, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __pyx_v_result;
        __pyx_t_12 = __pyx_t_10;
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_9genexpr29__pyx_v_i = __pyx_t_13;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_times[__pyx_9genexpr29__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1500, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1500, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_times_out = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1501
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
 * 			conc_matrix = []             # <<<<<<<<<<<<<<
 * 			for t in range(result):
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
*/
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1501, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_conc_matrix = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1502
 * 			times_out = [times[i] for i in range(result)]
 * 			conc_matrix = []
 * 			for t in range(result):             # <<<<<<<<<<<<<<
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)
*/
      __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_builtin_range);
      __pyx_t_4 = __pyx_builtin_range; 
      __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1502, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1502, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
      }
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4);
        __pyx_t_1 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1502, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1502, __pyx_L4_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1502, __pyx_L4_error)
              #endif
              if (__pyx_t_1 >= __pyx_temp) break;
            }
            __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_1);
            ++__pyx_t_1;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1502, __pyx_L4_error)
              #endif
              if (__pyx_t_1 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1));
            #else
            __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1);
            #endif
            ++__pyx_t_1;
          }
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1502, __pyx_L4_error)
        } else {
          __pyx_t_2 = __pyx_t_7(__pyx_t_4);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1502, __pyx_L4_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "pyroxa/pybindings.pyx":1503
 * 			conc_matrix = []
 * 			for t in range(result):
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 				conc_matrix.append(conc_t)
 * 			pressure_out_list = [pressure_out[i] for i in range(result)]
*/
        { /* enter inner scope */
          __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1503, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = __pyx_v_N;
          __pyx_t_12 = __pyx_t_10;
          for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
            __pyx_9genexpr30__pyx_v_i = __pyx_t_13;
            __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_N); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1503, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_3 = PyNumber_Multiply(__pyx_v_t, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1503, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_9genexpr30__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1503, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_14 = PyNumber_Add(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1503, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_14); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1503, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = PyFloat_FromDouble((__pyx_v_conc_out_flat[__pyx_t_9])); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1503, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_14);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_14))) __PYX_ERR(0, 1503, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_conc_t, ((PyObject*)__pyx_t_2));
        __pyx_t_2 = 0;

        /* "pyroxa/pybindings.pyx":1504
 * 			for t in range(result):
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)             # <<<<<<<<<<<<<<
 * 			pressure_out_list = [pressure_out[i] for i in range(result)]
 * 
*/
        __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_conc_matrix, __pyx_v_conc_t); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1504, __pyx_L4_error)

        /* "pyroxa/pybindings.pyx":1502
 * 			times_out = [times[i] for i in range(result)]
 * 			conc_matrix = []
 * 			for t in range(result):             # <<<<<<<<<<<<<<
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)
*/
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1505
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)
 * 			pressure_out_list = [pressure_out[i] for i in range(result)]             # <<<<<<<<<<<<<<
 * 
 * 			return {
*/
      { /* enter inner scope */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1505, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = __pyx_v_result;
        __pyx_t_12 = __pyx_t_10;
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_9genexpr31__pyx_v_i = __pyx_t_13;
          __pyx_t_2 = PyFloat_FromDouble((__pyx_v_pressure_out[__pyx_9genexpr31__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1505, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 1505, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
      } /* exit inner scope */
      __pyx_v_pressure_out_list = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1507
 * 			pressure_out_list = [pressure_out[i] for i in range(result)]
 * 
 * 			return {             # <<<<<<<<<<<<<<
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,
*/
      __Pyx_XDECREF(__pyx_r);

      /* "pyroxa/pybindings.pyx":1508
 * 
 * 			return {
 * 				'times': times_out,             # <<<<<<<<<<<<<<
 * 				'concentrations': conc_matrix,
 * 				'pressure_drop': pressure_out_list,
*/
      __pyx_t_4 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1508, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_times, __pyx_v_times_out) < 0) __PYX_ERR(0, 1508, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1509
 * 			return {
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,             # <<<<<<<<<<<<<<
 * 				'pressure_drop': pressure_out_list,
 * 				'n_points': result,
*/
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_concentrations, __pyx_v_conc_matrix) < 0) __PYX_ERR(0, 1508, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1510
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,
 * 				'pressure_drop': pressure_out_list,             # <<<<<<<<<<<<<<
 * 				'n_points': result,
 * 				'success': True
*/
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_pressure_drop, __pyx_v_pressure_out_list) < 0) __PYX_ERR(0, 1508, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1511
 * 				'concentrations': conc_matrix,
 * 				'pressure_drop': pressure_out_list,
 * 				'n_points': result,             # <<<<<<<<<<<<<<
 * 				'success': True
 * 			}
*/
      __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1511, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_n_points, __pyx_t_2) < 0) __PYX_ERR(0, 1508, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1512
 * 				'pressure_drop': pressure_out_list,
 * 				'n_points': result,
 * 				'success': True             # <<<<<<<<<<<<<<
 * 			}
 * 		else:
*/
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_success, Py_True) < 0) __PYX_ERR(0, 1508, __pyx_L4_error)
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1498
 * 									times, conc_out_flat, pressure_out, max_len)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
*/
    }

    /* "pyroxa/pybindings.pyx":1515
 * 			}
 * 		else:
 * 			return {'success': False, 'error': 'Simulation failed'}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(kf_arr)
*/
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1515, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_success, Py_False) < 0) __PYX_ERR(0, 1515, __pyx_L4_error)
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_error, __pyx_mstate_global->__pyx_kp_u_Simulation_failed) < 0) __PYX_ERR(0, 1515, __pyx_L4_error)
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1517
 * 			return {'success': False, 'error': 'Simulation failed'}
 * 	finally:
 * 		free(kf_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      if ( unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __pyx_t_10 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
      {
        free(__pyx_v_kf_arr);

        /* "pyroxa/pybindings.pyx":1518
 * 	finally:
 * 		free(kf_arr)
 * 		free(kr_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
*/
        free(__pyx_v_kr_arr);

        /* "pyroxa/pybindings.pyx":1519
 * 		free(kf_arr)
 * 		free(kr_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
*/
        free(__pyx_v_reac_idx_arr);

        /* "pyroxa/pybindings.pyx":1520
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
*/
        free(__pyx_v_reac_nu_arr);

        /* "pyroxa/pybindings.pyx":1521
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
*/
        free(__pyx_v_reac_off_arr);

        /* "pyroxa/pybindings.pyx":1522
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
*/
        free(__pyx_v_prod_idx_arr);

        /* "pyroxa/pybindings.pyx":1523
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
*/
        free(__pyx_v_prod_nu_arr);

        /* "pyroxa/pybindings.pyx":1524
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(times)
*/
        free(__pyx_v_prod_off_arr);

        /* "pyroxa/pybindings.pyx":1525
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(times)
 * 		free(conc_out_flat)
*/
        free(__pyx_v_conc0_arr);

        /* "pyroxa/pybindings.pyx":1526
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(conc_out_flat)
 * 		free(pressure_out)
*/
        free(__pyx_v_times);

        /* "pyroxa/pybindings.pyx":1527
 * 		free(conc0_arr)
 * 		free(times)
 * 		free(conc_out_flat)             # <<<<<<<<<<<<<<
 * 		free(pressure_out)
 * 
*/
        free(__pyx_v_conc_out_flat);

        /* "pyroxa/pybindings.pyx":1528
 * 		free(times)
 * 		free(conc_out_flat)
 * 		free(pressure_out)             # <<<<<<<<<<<<<<
 * 
 * def py_simulate_fluidized_bed(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,
*/
        free(__pyx_v_pressure_out);
      }
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_16;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_22 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1517
 * 			return {'success': False, 'error': 'Simulation failed'}
 * 	finally:
 * 		free(kf_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
*/
      free(__pyx_v_kf_arr);

      /* "pyroxa/pybindings.pyx":1518
 * 	finally:
 * 		free(kf_arr)
 * 		free(kr_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
*/
      free(__pyx_v_kr_arr);

      /* "pyroxa/pybindings.pyx":1519
 * 		free(kf_arr)
 * 		free(kr_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
*/
      free(__pyx_v_reac_idx_arr);

      /* "pyroxa/pybindings.pyx":1520
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
*/
      free(__pyx_v_reac_nu_arr);

      /* "pyroxa/pybindings.pyx":1521
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
*/
      free(__pyx_v_reac_off_arr);

      /* "pyroxa/pybindings.pyx":1522
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
*/
      free(__pyx_v_prod_idx_arr);

      /* "pyroxa/pybindings.pyx":1523
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
*/
      free(__pyx_v_prod_nu_arr);

      /* "pyroxa/pybindings.pyx":1524
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(times)
*/
      free(__pyx_v_prod_off_arr);

      /* "pyroxa/pybindings.pyx":1525
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(times)
 * 		free(conc_out_flat)
*/
      free(__pyx_v_conc0_arr);

      /* "pyroxa/pybindings.pyx":1526
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(conc_out_flat)
 * 		free(pressure_out)
*/
      free(__pyx_v_times);

      /* "pyroxa/pybindings.pyx":1527
 * 		free(conc0_arr)
 * 		free(times)
 * 		free(conc_out_flat)             # <<<<<<<<<<<<<<
 * 		free(pressure_out)
 * 
*/
      free(__pyx_v_conc_out_flat);

      /* "pyroxa/pybindings.pyx":1528
 * 		free(times)
 * 		free(conc_out_flat)
 * 		free(pressure_out)             # <<<<<<<<<<<<<<
 * 
 * def py_simulate_fluidized_bed(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,
*/
      free(__pyx_v_pressure_out);
      __pyx_r = __pyx_t_22;
      __pyx_t_22 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1448
 * 
 * # BATCH 12: Advanced reactor simulations
 * def py_simulate_packed_bed(int N, int M, int nseg, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 						   prod_idx, prod_nu, prod_off, conc0, double flow_rate,
 * 						   double bed_length, double bed_porosity, double particle_diameter,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_packed_bed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_times_out);
  __Pyx_XDECREF(__pyx_v_conc_matrix);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_conc_t);
  __Pyx_XDECREF(__pyx_v_pressure_out_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1530
 * 		free(pressure_out)
 * 
 * def py_simulate_fluidized_bed(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 							  prod_idx, prod_nu, prod_off, conc0, double gas_velocity,
 * 							  double bed_height, double bed_porosity, double bubble_fraction,
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_107py_simulate_fluidized_bed(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_106py_simulate_fluidized_bed, "py_simulate_fluidized_bed(int N, int M, kf, kr, reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off, conc0, double gas_velocity, double bed_height, double bed_porosity, double bubble_fraction, double particle_diameter, double catalyst_density, double time_span, double dt, int max_len=1000)\n\nSimulate fluidized bed reactor using original complex C++ implementation with full parameter exposure");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_107py_simulate_fluidized_bed = {"py_simulate_fluidized_bed", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_107py_simulate_fluidized_bed, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_106py_simulate_fluidized_bed};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_107py_simulate_fluidized_bed(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_N;
  int __pyx_v_M;
  PyObject *__pyx_v_kf = 0;
  PyObject *__pyx_v_kr = 0;
  PyObject *__pyx_v_reac_idx = 0;
  PyObject *__pyx_v_reac_nu = 0;
  PyObject *__pyx_v_reac_off = 0;
  PyObject *__pyx_v_prod_idx = 0;
  PyObject *__pyx_v_prod_nu = 0;
  PyObject *__pyx_v_prod_off = 0;
  PyObject *__pyx_v_conc0 = 0;
  double __pyx_v_gas_velocity;
  double __pyx_v_bed_height;
  double __pyx_v_bed_porosity;
  double __pyx_v_bubble_fraction;
  double __pyx_v_particle_diameter;
  double __pyx_v_catalyst_density;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_v_max_len;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_simulate_fluidized_bed (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_N,&__pyx_mstate_global->__pyx_n_u_M,&__pyx_mstate_global->__pyx_n_u_kf,&__pyx_mstate_global->__pyx_n_u_kr,&__pyx_mstate_global->__pyx_n_u_reac_idx,&__pyx_mstate_global->__pyx_n_u_reac_nu,&__pyx_mstate_global->__pyx_n_u_reac_off,&__pyx_mstate_global->__pyx_n_u_prod_idx,&__pyx_mstate_global->__pyx_n_u_prod_nu,&__pyx_mstate_global->__pyx_n_u_prod_off,&__pyx_mstate_global->__pyx_n_u_conc0,&__pyx_mstate_global->__pyx_n_u_gas_velocity,&__pyx_mstate_global->__pyx_n_u_bed_height,&__pyx_mstate_global->__pyx_n_u_bed_porosity,&__pyx_mstate_global->__pyx_n_u_bubble_fraction,&__pyx_mstate_global->__pyx_n_u_particle_diameter,&__pyx_mstate_global->__pyx_n_u_catalyst_density,&__pyx_mstate_global->__pyx_n_u_time_span,&__pyx_mstate_global->__pyx_n_u_dt,&__pyx_mstate_global->__pyx_n_u_max_len,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1530, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case 20:
        values[19] = __Pyx_ArgRef_FASTCALL(__pyx_args, 19);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[19])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 19:
        values[18] = __Pyx_ArgRef_FASTCALL(__pyx_args, 18);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[18])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 18:
        values[17] = __Pyx_ArgRef_FASTCALL(__pyx_args, 17);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[17])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 17:
        values[16] = __Pyx_ArgRef_FASTCALL(__pyx_args, 16);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[16])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 16:
        values[15] = __Pyx_ArgRef_FASTCALL(__pyx_args, 15);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[15])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 15:
        values[14] = __Pyx_ArgRef_FASTCALL(__pyx_args, 14);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[14])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 14:
        values[13] = __Pyx_ArgRef_FASTCALL(__pyx_args, 13);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[13])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 13:
        values[12] = __Pyx_ArgRef_FASTCALL(__pyx_args, 12);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[12])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 12:
        values[11] = __Pyx_ArgRef_FASTCALL(__pyx_args, 11);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[11])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 11:
        values[10] = __Pyx_ArgRef_FASTCALL(__pyx_args, 10);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[10])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 10:
        values[9] = __Pyx_ArgRef_FASTCALL(__pyx_args, 9);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[9])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  9:
        values[8] = __Pyx_ArgRef_FASTCALL(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  8:
        values[7] = __Pyx_ArgRef_FASTCALL(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  7:
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_simulate_fluidized_bed", 0) < 0) __PYX_ERR(0, 1530, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 19; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, i); __PYX_ERR(0, 1530, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case 20:
        values[19] = __Pyx_ArgRef_FASTCALL(__pyx_args, 19);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[19])) __PYX_ERR(0, 1530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 19:
        values[18] = __Pyx_ArgRef_FASTCALL(__pyx_args, 18);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[18])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[17] = __Pyx_ArgRef_FASTCALL(__pyx_args, 17);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[17])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[16] = __Pyx_ArgRef_FASTCALL(__pyx_args, 16);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[16])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[15] = __Pyx_ArgRef_FASTCALL(__pyx_args, 15);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[15])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[14] = __Pyx_ArgRef_FASTCALL(__pyx_args, 14);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[14])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[13] = __Pyx_ArgRef_FASTCALL(__pyx_args, 13);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[13])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[12] = __Pyx_ArgRef_FASTCALL(__pyx_args, 12);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[12])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[11] = __Pyx_ArgRef_FASTCALL(__pyx_args, 11);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[11])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[10] = __Pyx_ArgRef_FASTCALL(__pyx_args, 10);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[10])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[9] = __Pyx_ArgRef_FASTCALL(__pyx_args, 9);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[9])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[8] = __Pyx_ArgRef_FASTCALL(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[7] = __Pyx_ArgRef_FASTCALL(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1530, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1530, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_N = __Pyx_PyLong_As_int(values[0]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1530, __pyx_L3_error)
    __pyx_v_M = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_M == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1530, __pyx_L3_error)
    __pyx_v_kf = values[2];
    __pyx_v_kr = values[3];
    __pyx_v_reac_idx = values[4];
    __pyx_v_reac_nu = values[5];
    __pyx_v_reac_off = values[6];
    __pyx_v_prod_idx = values[7];
    __pyx_v_prod_nu = values[8];
    __pyx_v_prod_off = values[9];
    __pyx_v_conc0 = values[10];
    __pyx_v_gas_velocity = __Pyx_PyFloat_AsDouble(values[11]); if (unlikely((__pyx_v_gas_velocity == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1531, __pyx_L3_error)
    __pyx_v_bed_height = __Pyx_PyFloat_AsDouble(values[12]); if (unlikely((__pyx_v_bed_height == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1532, __pyx_L3_error)
    __pyx_v_bed_porosity = __Pyx_PyFloat_AsDouble(values[13]); if (unlikely((__pyx_v_bed_porosity == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1532, __pyx_L3_error)
    __pyx_v_bubble_fraction = __Pyx_PyFloat_AsDouble(values[14]); if (unlikely((__pyx_v_bubble_fraction == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1532, __pyx_L3_error)
    __pyx_v_particle_diameter = __Pyx_PyFloat_AsDouble(values[15]); if (unlikely((__pyx_v_particle_diameter == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1533, __pyx_L3_error)
    __pyx_v_catalyst_density = __Pyx_PyFloat_AsDouble(values[16]); if (unlikely((__pyx_v_catalyst_density == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1533, __pyx_L3_error)
    __pyx_v_time_span = __Pyx_PyFloat_AsDouble(values[17]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1534, __pyx_L3_error)
    __pyx_v_dt = __Pyx_PyFloat_AsDouble(values[18]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1534, __pyx_L3_error)
    if (values[19]) {
      __pyx_v_max_len = __Pyx_PyLong_As_int(values[19]); if (unlikely((__pyx_v_max_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1534, __pyx_L3_error)
    } else {
      __pyx_v_max_len = ((int)((int)0x3E8));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_simulate_fluidized_bed", 0, 19, 20, __pyx_nargs); __PYX_ERR(0, 1530, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_fluidized_bed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_106py_simulate_fluidized_bed(__pyx_self, __pyx_v_N, __pyx_v_M, __pyx_v_kf, __pyx_v_kr, __pyx_v_reac_idx, __pyx_v_reac_nu, __pyx_v_reac_off, __pyx_v_prod_idx, __pyx_v_prod_nu, __pyx_v_prod_off, __pyx_v_conc0, __pyx_v_gas_velocity, __pyx_v_bed_height, __pyx_v_bed_porosity, __pyx_v_bubble_fraction, __pyx_v_particle_diameter, __pyx_v_catalyst_density, __pyx_v_time_span, __pyx_v_dt, __pyx_v_max_len);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_106py_simulate_fluidized_bed(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, PyObject *__pyx_v_kf, PyObject *__pyx_v_kr, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_gas_velocity, double __pyx_v_bed_height, double __pyx_v_bed_porosity, double __pyx_v_bubble_fraction, double __pyx_v_particle_diameter, double __pyx_v_catalyst_density, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len) {
  double *__pyx_v_kf_arr;
  double *__pyx_v_kr_arr;
  int *__pyx_v_reac_idx_arr;
  double *__pyx_v_reac_nu_arr;
  int *__pyx_v_reac_off_arr;
  int *__pyx_v_prod_idx_arr;
  double *__pyx_v_prod_nu_arr;
  int *__pyx_v_prod_off_arr;
  double *__pyx_v_conc0_arr;
  double *__pyx_v_times;
  double *__pyx_v_conc_out_flat;
  double *__pyx_v_bubble_conc_out;
  double *__pyx_v_emulsion_conc_out;
  PyObject *__pyx_v_i = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_times_out = NULL;
  PyObject *__pyx_v_conc_matrix = NULL;
  PyObject *__pyx_v_bubble_matrix = NULL;
  PyObject *__pyx_v_emulsion_matrix = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_conc_t = NULL;
  PyObject *__pyx_v_bubble_t = NULL;
  PyObject *__pyx_v_emulsion_t = NULL;
  int __pyx_9genexpr32__pyx_v_i;
  int __pyx_9genexpr33__pyx_v_i;
  int __pyx_9genexpr34__pyx_v_i;
  int __pyx_9genexpr35__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  double __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_simulate_fluidized_bed", 0);

  /* "pyroxa/pybindings.pyx":1538
 * 
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
*/
  __pyx_v_kf_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1539
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
*/
  __pyx_v_kr_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1540
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1540, __pyx_L1_error)
  __pyx_v_reac_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1541
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1541, __pyx_L1_error)
  __pyx_v_reac_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1542
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1542, __pyx_L1_error)
  __pyx_v_reac_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1543
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1543, __pyx_L1_error)
  __pyx_v_prod_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1544
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1544, __pyx_L1_error)
  __pyx_v_prod_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1545
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1545, __pyx_L1_error)
  __pyx_v_prod_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1546
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
*/
  __pyx_v_conc0_arr = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1547
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* bubble_conc_out = <double*>malloc(N * max_len * sizeof(double))
*/
  __pyx_v_times = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1548
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* bubble_conc_out = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* emulsion_conc_out = <double*>malloc(N * max_len * sizeof(double))
*/
  __pyx_v_conc_out_flat = ((double *)malloc(((__pyx_v_N * __pyx_v_max_len) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1549
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* bubble_conc_out = <double*>malloc(N * max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* emulsion_conc_out = <double*>malloc(N * max_len * sizeof(double))
 * 
*/
  __pyx_v_bubble_conc_out = ((double *)malloc(((__pyx_v_N * __pyx_v_max_len) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1550
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* bubble_conc_out = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* emulsion_conc_out = <double*>malloc(N * max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_emulsion_conc_out = ((double *)malloc(((__pyx_v_N * __pyx_v_max_len) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1552
 * 	cdef double* emulsion_conc_out = <double*>malloc(N * max_len * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Copy input arrays
 * 		for i in range(M):
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1554
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_4 = __pyx_builtin_range; 
    __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_M); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1554, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1554, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1554, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1554, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1554, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1554, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1));
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1554, __pyx_L4_error)
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1554, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1555
 * 		# Copy input arrays
 * 		for i in range(M):
 * 			kf_arr[i] = kf[i]             # <<<<<<<<<<<<<<
 * 			kr_arr[i] = kr[i]
 * 
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_kf, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1555, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1555, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1555, __pyx_L4_error)
      (__pyx_v_kf_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1556
 * 		for i in range(M):
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(len(reac_idx)):
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_kr, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1556, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1556, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1556, __pyx_L4_error)
      (__pyx_v_kr_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1554
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]
*/
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":1558
 * 			kr_arr[i] = kr[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_5 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1558, __pyx_L4_error)
    __pyx_t_3 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1558, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1558, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1558, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1558, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1558, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1558, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1));
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1558, __pyx_L4_error)
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1558, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1559
 * 
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
*/
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_reac_idx, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1559, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_4); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1559, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1559, __pyx_L4_error)
      (__pyx_v_reac_idx_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1558
 * 			kr_arr[i] = kr[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
*/
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":1560
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_3 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1560, __pyx_L4_error)
    __pyx_t_2 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1560, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1560, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1560, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1560, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1560, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1560, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1560, __pyx_L4_error)
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1560, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":1561
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
*/
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_reac_nu, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1561, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1561, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1561, __pyx_L4_error)
      (__pyx_v_reac_nu_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1560
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
*/
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":1562
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
*/
    __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_2 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1562, __pyx_L4_error)
    __pyx_t_4 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1562, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1562, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1562, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1562, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1562, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1562, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1));
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1562, __pyx_L4_error)
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1562, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1563
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
*/
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_off, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1563, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1563, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1563, __pyx_L4_error)
      (__pyx_v_reac_off_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1562
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1564
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_4 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1564, __pyx_L4_error)
    __pyx_t_5 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1564, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1564, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1564, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1564, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1564, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1564, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1));
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1564, __pyx_L4_error)
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1564, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1565
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_prod_idx, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1565, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1565, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1565, __pyx_L4_error)
      (__pyx_v_prod_idx_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1564
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
*/
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":1566
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_5 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1566, __pyx_L4_error)
    __pyx_t_3 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1566, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1566, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1566, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1566, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1566, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1566, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1));
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1566, __pyx_L4_error)
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1566, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1567
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]
*/
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_prod_nu, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1567, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1567, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1567, __pyx_L4_error)
      (__pyx_v_prod_nu_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1566
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
*/
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":1568
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_3 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1568, __pyx_L4_error)
    __pyx_t_2 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1568, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1568, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1568, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1568, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1568, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1568, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1568, __pyx_L4_error)
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1568, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":1569
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(N):
*/
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_prod_off, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1569, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_5); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1569, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1569, __pyx_L4_error)
      (__pyx_v_prod_off_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1568
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
*/
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":1571
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
*/
    __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_2 = __pyx_builtin_range; 
    __pyx_t_4 = __Pyx_PyLong_From_int(__pyx_v_N); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1571, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1571, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1571, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1571, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1571, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1571, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1));
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1571, __pyx_L4_error)
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1571, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1572
 * 
 * 		for i in range(N):
 * 			conc0_arr[i] = conc0[i]             # <<<<<<<<<<<<<<
 * 
 * 		# Call original complex C++ function (24 parameters)
*/
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_conc0, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1572, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1572, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1572, __pyx_L4_error)
      (__pyx_v_conc0_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1571
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1575
 * 
 * 		# Call original complex C++ function (24 parameters)
 * 		result = simulate_fluidized_bed(N, M, kf_arr, kr_arr, reac_idx_arr, reac_nu_arr, reac_off_arr,             # <<<<<<<<<<<<<<
 * 										prod_idx_arr, prod_nu_arr, prod_off_arr, conc0_arr,
 * 										gas_velocity, bed_height, bed_porosity, bubble_fraction,
*/
    __pyx_v_result = simulate_fluidized_bed(__pyx_v_N, __pyx_v_M, __pyx_v_kf_arr, __pyx_v_kr_arr, __pyx_v_reac_idx_arr, __pyx_v_reac_nu_arr, __pyx_v_reac_off_arr, __pyx_v_prod_idx_arr, __pyx_v_prod_nu_arr, __pyx_v_prod_off_arr, __pyx_v_conc0_arr, __pyx_v_gas_velocity, __pyx_v_bed_height, __pyx_v_bed_porosity, __pyx_v_bubble_fraction, __pyx_v_particle_diameter, __pyx_v_catalyst_density, __pyx_v_time_span, __pyx_v_dt, __pyx_v_times, __pyx_v_conc_out_flat, __pyx_v_bubble_conc_out, __pyx_v_emulsion_conc_out, __pyx_v_max_len);

    /* "pyroxa/pybindings.pyx":1581
 * 										times, conc_out_flat, bubble_conc_out, emulsion_conc_out, max_len)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
*/
    __pyx_t_11 = (__pyx_v_result > 0);
    if (__pyx_t_11) {

      /* "pyroxa/pybindings.pyx":1583
 * 		if result > 0:
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]             # <<<<<<<<<<<<<<
 * 			conc_matrix = []
 * 			bubble_matrix = []
*/
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1583, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __pyx_v_result;
        __pyx_t_12 = __pyx_t_10;
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_9genexpr32__pyx_v_i = __pyx_t_13;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_times[__pyx_9genexpr32__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1583, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1583, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_times_out = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1584
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
 * 			conc_matrix = []             # <<<<<<<<<<<<<<
 * 			bubble_matrix = []
 * 			emulsion_matrix = []
*/
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1584, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_conc_matrix = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1585
 * 			times_out = [times[i] for i in range(result)]
 * 			conc_matrix = []
 * 			bubble_matrix = []             # <<<<<<<<<<<<<<
 * 			emulsion_matrix = []
 * 
*/
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1585, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_bubble_matrix = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1586
 * 			conc_matrix = []
 * 			bubble_matrix = []
 * 			emulsion_matrix = []             # <<<<<<<<<<<<<<
 * 
 * 			for t in range(result):
*/
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1586, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_emulsion_matrix = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1588
 * 			emulsion_matrix = []
 * 
 * 			for t in range(result):             # <<<<<<<<<<<<<<
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				bubble_t = [bubble_conc_out[t*N + i] for i in range(N)]
*/
      __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_builtin_range);
      __pyx_t_4 = __pyx_builtin_range; 
      __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1588, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1588, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
      }
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4);
        __pyx_t_1 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1588, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1588, __pyx_L4_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1588, __pyx_L4_error)
              #endif
              if (__pyx_t_1 >= __pyx_temp) break;
            }
            __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_1);
            ++__pyx_t_1;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1588, __pyx_L4_error)
              #endif
              if (__pyx_t_1 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1));
            #else
            __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1);
            #endif
            ++__pyx_t_1;
          }
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1588, __pyx_L4_error)
        } else {
          __pyx_t_2 = __pyx_t_7(__pyx_t_4);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1588, __pyx_L4_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "pyroxa/pybindings.pyx":1589
 * 
 * 			for t in range(result):
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 				bubble_t = [bubble_conc_out[t*N + i] for i in range(N)]
 * 				emulsion_t = [emulsion_conc_out[t*N + i] for i in range(N)]
*/
        { /* enter inner scope */
          __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1589, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = __pyx_v_N;
          __pyx_t_12 = __pyx_t_10;
          for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
            __pyx_9genexpr33__pyx_v_i = __pyx_t_13;
            __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_N); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1589, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_3 = PyNumber_Multiply(__pyx_v_t, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1589, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_9genexpr33__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1589, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_14 = PyNumber_Add(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1589, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_14); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1589, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = PyFloat_FromDouble((__pyx_v_conc_out_flat[__pyx_t_9])); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1589, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_14);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_14))) __PYX_ERR(0, 1589, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_conc_t, ((PyObject*)__pyx_t_2));
        __pyx_t_2 = 0;

        /* "pyroxa/pybindings.pyx":1590
 * 			for t in range(result):
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				bubble_t = [bubble_conc_out[t*N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 				emulsion_t = [emulsion_conc_out[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)
*/
        { /* enter inner scope */
          __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1590, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = __pyx_v_N;
          __pyx_t_12 = __pyx_t_10;
          for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
            __pyx_9genexpr34__pyx_v_i = __pyx_t_13;
            __pyx_t_14 = __Pyx_PyLong_From_int(__pyx_v_N); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1590, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_5 = PyNumber_Multiply(__pyx_v_t, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1590, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = __Pyx_PyLong_From_int(__pyx_9genexpr34__pyx_v_i); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1590, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_3 = PyNumber_Add(__pyx_t_5, __pyx_t_14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1590, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1590, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = PyFloat_FromDouble((__pyx_v_bubble_conc_out[__pyx_t_9])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1590, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1590, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_bubble_t, ((PyObject*)__pyx_t_2));
        __pyx_t_2 = 0;

        /* "pyroxa/pybindings.pyx":1591
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				bubble_t = [bubble_conc_out[t*N + i] for i in range(N)]
 * 				emulsion_t = [emulsion_conc_out[t*N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 				conc_matrix.append(conc_t)
 * 				bubble_matrix.append(bubble_t)
*/
        { /* enter inner scope */
          __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1591, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = __pyx_v_N;
          __pyx_t_12 = __pyx_t_10;
          for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
            __pyx_9genexpr35__pyx_v_i = __pyx_t_13;
            __pyx_t_3 = __Pyx_PyLong_From_int(__pyx_v_N); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1591, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_14 = PyNumber_Multiply(__pyx_v_t, __pyx_t_3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1591, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_PyLong_From_int(__pyx_9genexpr35__pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1591, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_5 = PyNumber_Add(__pyx_t_14, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1591, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1591, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = PyFloat_FromDouble((__pyx_v_emulsion_conc_out[__pyx_t_9])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1591, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1591, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_emulsion_t, ((PyObject*)__pyx_t_2));
        __pyx_t_2 = 0;

        /* "pyroxa/pybindings.pyx":1592
 * 				bubble_t = [bubble_conc_out[t*N + i] for i in range(N)]
 * 				emulsion_t = [emulsion_conc_out[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)             # <<<<<<<<<<<<<<
 * 				bubble_matrix.append(bubble_t)
 * 				emulsion_matrix.append(emulsion_t)
*/
        __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_conc_matrix, __pyx_v_conc_t); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1592, __pyx_L4_error)

        /* "pyroxa/pybindings.pyx":1593
 * 				emulsion_t = [emulsion_conc_out[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)
 * 				bubble_matrix.append(bubble_t)             # <<<<<<<<<<<<<<
 * 				emulsion_matrix.append(emulsion_t)
 * 
*/
        __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_bubble_matrix, __pyx_v_bubble_t); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1593, __pyx_L4_error)

        /* "pyroxa/pybindings.pyx":1594
 * 				conc_matrix.append(conc_t)
 * 				bubble_matrix.append(bubble_t)
 * 				emulsion_matrix.append(emulsion_t)             # <<<<<<<<<<<<<<
 * 
 * 			return {
*/
        __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_emulsion_matrix, __pyx_v_emulsion_t); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1594, __pyx_L4_error)

        /* "pyroxa/pybindings.pyx":1588
 * 			emulsion_matrix = []
 * 
 * 			for t in range(result):             # <<<<<<<<<<<<<<
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				bubble_t = [bubble_conc_out[t*N + i] for i in range(N)]
*/
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1596
 * 				emulsion_matrix.append(emulsion_t)
 * 
 * 			return {             # <<<<<<<<<<<<<<
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,
*/
      __Pyx_XDECREF(__pyx_r);

      /* "pyroxa/pybindings.pyx":1597
 * 
 * 			return {
 * 				'times': times_out,             # <<<<<<<<<<<<<<
 * 				'concentrations': conc_matrix,
 * 				'bubble_concentrations': bubble_matrix,
*/
      __pyx_t_4 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1597, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_times, __pyx_v_times_out) < 0) __PYX_ERR(0, 1597, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1598
 * 			return {
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,             # <<<<<<<<<<<<<<
 * 				'bubble_concentrations': bubble_matrix,
 * 				'emulsion_concentrations': emulsion_matrix,
*/
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_concentrations, __pyx_v_conc_matrix) < 0) __PYX_ERR(0, 1597, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1599
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,
 * 				'bubble_concentrations': bubble_matrix,             # <<<<<<<<<<<<<<
 * 				'emulsion_concentrations': emulsion_matrix,
 * 				'n_points': result,
*/
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_bubble_concentrations, __pyx_v_bubble_matrix) < 0) __PYX_ERR(0, 1597, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1600
 * 				'concentrations': conc_matrix,
 * 				'bubble_concentrations': bubble_matrix,
 * 				'emulsion_concentrations': emulsion_matrix,             # <<<<<<<<<<<<<<
 * 				'n_points': result,
 * 				'success': True
*/
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_emulsion_concentrations, __pyx_v_emulsion_matrix) < 0) __PYX_ERR(0, 1597, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1601
 * 				'bubble_concentrations': bubble_matrix,
 * 				'emulsion_concentrations': emulsion_matrix,
 * 				'n_points': result,             # <<<<<<<<<<<<<<
 * 				'success': True
 * 			}
*/
      __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1601, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_n_points, __pyx_t_2) < 0) __PYX_ERR(0, 1597, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1602
 * 				'emulsion_concentrations': emulsion_matrix,
 * 				'n_points': result,
 * 				'success': True             # <<<<<<<<<<<<<<
 * 			}
 * 		else:
*/
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_success, Py_True) < 0) __PYX_ERR(0, 1597, __pyx_L4_error)
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1581
 * 										times, conc_out_flat, bubble_conc_out, emulsion_conc_out, max_len)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
*/
    }

    /* "pyroxa/pybindings.pyx":1605
 * 			}
 * 		else:
 * 			return {'success': False, 'error': 'Simulation failed'}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(kf_arr)
*/
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1605, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_success, Py_False) < 0) __PYX_ERR(0, 1605, __pyx_L4_error)
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_error, __pyx_mstate_global->__pyx_kp_u_Simulation_failed) < 0) __PYX_ERR(0, 1605, __pyx_L4_error)
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1607
 * 			return {'success': False, 'error': 'Simulation failed'}
 * 	finally:
 * 		free(kf_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      if ( unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __pyx_t_10 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
      {
        free(__pyx_v_kf_arr);

        /* "pyroxa/pybindings.pyx":1608
 * 	finally:
 * 		free(kf_arr)
 * 		free(kr_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
*/
        free(__pyx_v_kr_arr);

        /* "pyroxa/pybindings.pyx":1609
 * 		free(kf_arr)
 * 		free(kr_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
*/
        free(__pyx_v_reac_idx_arr);

        /* "pyroxa/pybindings.pyx":1610
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
*/
        free(__pyx_v_reac_nu_arr);

        /* "pyroxa/pybindings.pyx":1611
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
*/
        free(__pyx_v_reac_off_arr);

        /* "pyroxa/pybindings.pyx":1612
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
*/
        free(__pyx_v_prod_idx_arr);

        /* "pyroxa/pybindings.pyx":1613
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
*/
        free(__pyx_v_prod_nu_arr);

        /* "pyroxa/pybindings.pyx":1614
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(times)
*/
        free(__pyx_v_prod_off_arr);

        /* "pyroxa/pybindings.pyx":1615
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(times)
 * 		free(conc_out_flat)
*/
        free(__pyx_v_conc0_arr);

        /* "pyroxa/pybindings.pyx":1616
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(conc_out_flat)
 * 		free(bubble_conc_out)
*/
        free(__pyx_v_times);

        /* "pyroxa/pybindings.pyx":1617
 * 		free(conc0_arr)
 * 		free(times)
 * 		free(conc_out_flat)             # <<<<<<<<<<<<<<
 * 		free(bubble_conc_out)
 * 		free(emulsion_conc_out)
*/
        free(__pyx_v_conc_out_flat);

        /* "pyroxa/pybindings.pyx":1618
 * 		free(times)
 * 		free(conc_out_flat)
 * 		free(bubble_conc_out)             # <<<<<<<<<<<<<<
 * 		free(emulsion_conc_out)
 * 
*/
        free(__pyx_v_bubble_conc_out);

        /* "pyroxa/pybindings.pyx":1619
 * 		free(conc_out_flat)
 * 		free(bubble_conc_out)
 * 		free(emulsion_conc_out)             # <<<<<<<<<<<<<<
 * 
 * def py_simulate_homogeneous_batch(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,
*/
        free(__pyx_v_emulsion_conc_out);
      }
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_16;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_22 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1607
 * 			return {'success': False, 'error': 'Simulation failed'}
 * 	finally:
 * 		free(kf_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
*/
      free(__pyx_v_kf_arr);

      /* "pyroxa/pybindings.pyx":1608
 * 	finally:
 * 		free(kf_arr)
 * 		free(kr_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
*/
      free(__pyx_v_kr_arr);

      /* "pyroxa/pybindings.pyx":1609
 * 		free(kf_arr)
 * 		free(kr_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
*/
      free(__pyx_v_reac_idx_arr);

      /* "pyroxa/pybindings.pyx":1610
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
*/
      free(__pyx_v_reac_nu_arr);

      /* "pyroxa/pybindings.pyx":1611
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
*/
      free(__pyx_v_reac_off_arr);

      /* "pyroxa/pybindings.pyx":1612
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
*/
      free(__pyx_v_prod_idx_arr);

      /* "pyroxa/pybindings.pyx":1613
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
*/
      free(__pyx_v_prod_nu_arr);

      /* "pyroxa/pybindings.pyx":1614
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(times)
*/
      free(__pyx_v_prod_off_arr);

      /* "pyroxa/pybindings.pyx":1615
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(times)
 * 		free(conc_out_flat)
*/
      free(__pyx_v_conc0_arr);

      /* "pyroxa/pybindings.pyx":1616
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(conc_out_flat)
 * 		free(bubble_conc_out)
*/
      free(__pyx_v_times);

      /* "pyroxa/pybindings.pyx":1617
 * 		free(conc0_arr)
 * 		free(times)
 * 		free(conc_out_flat)             # <<<<<<<<<<<<<<
 * 		free(bubble_conc_out)
 * 		free(emulsion_conc_out)
*/
      free(__pyx_v_conc_out_flat);

      /* "pyroxa/pybindings.pyx":1618
 * 		free(times)
 * 		free(conc_out_flat)
 * 		free(bubble_conc_out)             # <<<<<<<<<<<<<<
 * 		free(emulsion_conc_out)
 * 
*/
      free(__pyx_v_bubble_conc_out);

      /* "pyroxa/pybindings.pyx":1619
 * 		free(conc_out_flat)
 * 		free(bubble_conc_out)
 * 		free(emulsion_conc_out)             # <<<<<<<<<<<<<<
 * 
 * def py_simulate_homogeneous_batch(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,
*/
      free(__pyx_v_emulsion_conc_out);
      __pyx_r = __pyx_t_22;
      __pyx_t_22 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1530
 * 		free(pressure_out)
 * 
 * def py_simulate_fluidized_bed(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 							  prod_idx, prod_nu, prod_off, conc0, double gas_velocity,
 * 							  double bed_height, double bed_porosity, double bubble_fraction,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_fluidized_bed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_times_out);
  __Pyx_XDECREF(__pyx_v_conc_matrix);
  __Pyx_XDECREF(__pyx_v_bubble_matrix);
  __Pyx_XDECREF(__pyx_v_emulsion_matrix);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_conc_t);
  __Pyx_XDECREF(__pyx_v_bubble_t);
  __Pyx_XDECREF(__pyx_v_emulsion_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1621
 * 		free(emulsion_conc_out)
 * 
 * def py_simulate_homogeneous_batch(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 								  prod_idx, prod_nu, prod_off, conc0, double volume,
 * 								  double mixing_intensity, double time_span, double dt,
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_109py_simulate_homogeneous_batch(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_108py_simulate_homogeneous_batch, "py_simulate_homogeneous_batch(int N, int M, kf, kr, reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off, conc0, double volume, double mixing_intensity, double time_span, double dt, int max_len=1000)\n\nSimulate homogeneous batch reactor using original complex C++ implementation with full parameter exposure");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_109py_simulate_homogeneous_batch = {"py_simulate_homogeneous_batch", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_109py_simulate_homogeneous_batch, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_108py_simulate_homogeneous_batch};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_109py_simulate_homogeneous_batch(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_N;
  int __pyx_v_M;
  PyObject *__pyx_v_kf = 0;
  PyObject *__pyx_v_kr = 0;
  PyObject *__pyx_v_reac_idx = 0;
  PyObject *__pyx_v_reac_nu = 0;
  PyObject *__pyx_v_reac_off = 0;
  PyObject *__pyx_v_prod_idx = 0;
  PyObject *__pyx_v_prod_nu = 0;
  PyObject *__pyx_v_prod_off = 0;
  PyObject *__pyx_v_conc0 = 0;
  double __pyx_v_volume;
  double __pyx_v_mixing_intensity;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_v_max_len;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_simulate_homogeneous_batch (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_N,&__pyx_mstate_global->__pyx_n_u_M,&__pyx_mstate_global->__pyx_n_u_kf,&__pyx_mstate_global->__pyx_n_u_kr,&__pyx_mstate_global->__pyx_n_u_reac_idx,&__pyx_mstate_global->__pyx_n_u_reac_nu,&__pyx_mstate_global->__pyx_n_u_reac_off,&__pyx_mstate_global->__pyx_n_u_prod_idx,&__pyx_mstate_global->__pyx_n_u_prod_nu,&__pyx_mstate_global->__pyx_n_u_prod_off,&__pyx_mstate_global->__pyx_n_u_conc0,&__pyx_mstate_global->__pyx_n_u_volume,&__pyx_mstate_global->__pyx_n_u_mixing_intensity,&__pyx_mstate_global->__pyx_n_u_time_span,&__pyx_mstate_global->__pyx_n_u_dt,&__pyx_mstate_global->__pyx_n_u_max_len,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1621, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case 16:
        values[15] = __Pyx_ArgRef_FASTCALL(__pyx_args, 15);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[15])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 15:
        values[14] = __Pyx_ArgRef_FASTCALL(__pyx_args, 14);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[14])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 14:
        values[13] = __Pyx_ArgRef_FASTCALL(__pyx_args, 13);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[13])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 13:
        values[12] = __Pyx_ArgRef_FASTCALL(__pyx_args, 12);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[12])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 12:
        values[11] = __Pyx_ArgRef_FASTCALL(__pyx_args, 11);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[11])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 11:
        values[10] = __Pyx_ArgRef_FASTCALL(__pyx_args, 10);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[10])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 10:
        values[9] = __Pyx_ArgRef_FASTCALL(__pyx_args, 9);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[9])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  9:
        values[8] = __Pyx_ArgRef_FASTCALL(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  8:
        values[7] = __Pyx_ArgRef_FASTCALL(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  7:
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_simulate_homogeneous_batch", 0) < 0) __PYX_ERR(0, 1621, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 15; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, i); __PYX_ERR(0, 1621, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case 16:
        values[15] = __Pyx_ArgRef_FASTCALL(__pyx_args, 15);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[15])) __PYX_ERR(0, 1621, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 15:
        values[14] = __Pyx_ArgRef_FASTCALL(__pyx_args, 14);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[14])) __PYX_ERR(0, 1621, __pyx_L3_error)
        values[13] = __Pyx_ArgRef_FASTCALL(__pyx_args, 13);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[13])) __PYX_ERR(0, 1621, __pyx_L3_error)
        values[12] = __Pyx_ArgRef_FASTCALL(__pyx_args, 12);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[12])) __PYX_ERR(0, 1621, __pyx_L3_error)
        values[11] = __Pyx_ArgRef_FASTCALL(__pyx_args, 11);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[11])) __PYX_ERR(0, 1621, __pyx_L3_error)
        values[10] = __Pyx_ArgRef_FASTCALL(__pyx_args, 10);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[10])) __PYX_ERR(0, 1621, __pyx_L3_error)
        values[9] = __Pyx_ArgRef_FASTCALL(__pyx_args, 9);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[9])) __PYX_ERR(0, 1621, __pyx_L3_error)
        values[8] = __Pyx_ArgRef_FASTCALL(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 1621, __pyx_L3_error)
        values[7] = __Pyx_ArgRef_FASTCALL(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 1621, __pyx_L3_error)
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 1621, __pyx_L3_error)
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1621, __pyx_L3_error)
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1621, __pyx_L3_error)
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1621, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1621, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1621, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1621, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_N = __Pyx_PyLong_As_int(values[0]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1621, __pyx_L3_error)
    __pyx_v_M = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_M == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1621, __pyx_L3_error)
    __pyx_v_kf = values[2];
    __pyx_v_kr = values[3];
    __pyx_v_reac_idx = values[4];
    __pyx_v_reac_nu = values[5];
    __pyx_v_reac_off = values[6];
    __pyx_v_prod_idx = values[7];
    __pyx_v_prod_nu = values[8];
    __pyx_v_prod_off = values[9];
    __pyx_v_conc0 = values[10];
    __pyx_v_volume = __Pyx_PyFloat_AsDouble(values[11]); if (unlikely((__pyx_v_volume == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1622, __pyx_L3_error)
    __pyx_v_mixing_intensity = __Pyx_PyFloat_AsDouble(values[12]); if (unlikely((__pyx_v_mixing_intensity == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1623, __pyx_L3_error)
    __pyx_v_time_span = __Pyx_PyFloat_AsDouble(values[13]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1623, __pyx_L3_error)
    __pyx_v_dt = __Pyx_PyFloat_AsDouble(values[14]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1623, __pyx_L3_error)
    if (values[15]) {
      __pyx_v_max_len = __Pyx_PyLong_As_int(values[15]); if (unlikely((__pyx_v_max_len == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1624, __pyx_L3_error)
    } else {
      __pyx_v_max_len = ((int)((int)0x3E8));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_simulate_homogeneous_batch", 0, 15, 16, __pyx_nargs); __PYX_ERR(0, 1621, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_homogeneous_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_108py_simulate_homogeneous_batch(__pyx_self, __pyx_v_N, __pyx_v_M, __pyx_v_kf, __pyx_v_kr, __pyx_v_reac_idx, __pyx_v_reac_nu, __pyx_v_reac_off, __pyx_v_prod_idx, __pyx_v_prod_nu, __pyx_v_prod_off, __pyx_v_conc0, __pyx_v_volume, __pyx_v_mixing_intensity, __pyx_v_time_span, __pyx_v_dt, __pyx_v_max_len);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_108py_simulate_homogeneous_batch(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, PyObject *__pyx_v_kf, PyObject *__pyx_v_kr, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_volume, double __pyx_v_mixing_intensity, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_max_len) {
  double *__pyx_v_kf_arr;
  double *__pyx_v_kr_arr;
  int *__pyx_v_reac_idx_arr;
  double *__pyx_v_reac_nu_arr;
  int *__pyx_v_reac_off_arr;
  int *__pyx_v_prod_idx_arr;
  double *__pyx_v_prod_nu_arr;
  int *__pyx_v_prod_off_arr;
  double *__pyx_v_conc0_arr;
  double *__pyx_v_times;
  double *__pyx_v_conc_out_flat;
  double *__pyx_v_mixing_efficiency_out;
  PyObject *__pyx_v_i = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_times_out = NULL;
  PyObject *__pyx_v_conc_matrix = NULL;
  PyObject *__pyx_v_mixing_efficiency = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_conc_t = NULL;
  int __pyx_9genexpr36__pyx_v_i;
  int __pyx_9genexpr37__pyx_v_i;
  int __pyx_9genexpr38__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  double __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  char const *__pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_simulate_homogeneous_batch", 0);

  /* "pyroxa/pybindings.pyx":1628
 * 
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
*/
  __pyx_v_kf_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1629
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
*/
  __pyx_v_kr_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1630
 * 	cdef double* kf_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1630, __pyx_L1_error)
  __pyx_v_reac_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1631
 * 	cdef double* kr_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1631, __pyx_L1_error)
  __pyx_v_reac_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1632
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1632, __pyx_L1_error)
  __pyx_v_reac_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1633
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1633, __pyx_L1_error)
  __pyx_v_prod_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1634
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1634, __pyx_L1_error)
  __pyx_v_prod_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1635
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1635, __pyx_L1_error)
  __pyx_v_prod_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1636
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
*/
  __pyx_v_conc0_arr = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1637
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* mixing_efficiency_out = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_v_times = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1638
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* mixing_efficiency_out = <double*>malloc(max_len * sizeof(double))
 * 
*/
  __pyx_v_conc_out_flat = ((double *)malloc(((__pyx_v_N * __pyx_v_max_len) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1639
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
 * 	cdef double* conc_out_flat = <double*>malloc(N * max_len * sizeof(double))
 * 	cdef double* mixing_efficiency_out = <double*>malloc(max_len * sizeof(double))             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_mixing_efficiency_out = ((double *)malloc((__pyx_v_max_len * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1641
 * 	cdef double* mixing_efficiency_out = <double*>malloc(max_len * sizeof(double))
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Copy input arrays
 * 		for i in range(M):
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1643
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_4 = __pyx_builtin_range; 
    __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_M); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1643, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1643, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1643, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1643, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1643, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1643, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1));
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1643, __pyx_L4_error)
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1643, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1644
 * 		# Copy input arrays
 * 		for i in range(M):
 * 			kf_arr[i] = kf[i]             # <<<<<<<<<<<<<<
 * 			kr_arr[i] = kr[i]
 * 
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_kf, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1644, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1644, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1644, __pyx_L4_error)
      (__pyx_v_kf_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1645
 * 		for i in range(M):
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(len(reac_idx)):
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_kr, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1645, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1645, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1645, __pyx_L4_error)
      (__pyx_v_kr_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1643
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_arr[i] = kf[i]
 * 			kr_arr[i] = kr[i]
*/
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":1647
 * 			kr_arr[i] = kr[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_5 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1647, __pyx_L4_error)
    __pyx_t_3 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1647, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1647, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1647, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1647, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1647, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1647, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1));
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1647, __pyx_L4_error)
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1647, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1648
 * 
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
*/
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_reac_idx, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1648, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_4); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1648, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1648, __pyx_L4_error)
      (__pyx_v_reac_idx_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1647
 * 			kr_arr[i] = kr[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
*/
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":1649
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_3 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1649, __pyx_L4_error)
    __pyx_t_2 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1649, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1649, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1649, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1649, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1649, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1649, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1649, __pyx_L4_error)
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1649, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":1650
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
*/
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_reac_nu, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1650, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1650, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1650, __pyx_L4_error)
      (__pyx_v_reac_nu_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1649
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
*/
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":1651
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
*/
    __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_2 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1651, __pyx_L4_error)
    __pyx_t_4 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1651, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1651, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1651, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1651, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1651, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1651, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1));
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1651, __pyx_L4_error)
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1651, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1652
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
*/
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_off, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1652, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1652, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1652, __pyx_L4_error)
      (__pyx_v_reac_off_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1651
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1653
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_4 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1653, __pyx_L4_error)
    __pyx_t_5 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1653, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1653, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1653, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1653, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1653, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1653, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1));
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1653, __pyx_L4_error)
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1653, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1654
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_prod_idx, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1654, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1654, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1654, __pyx_L4_error)
      (__pyx_v_prod_idx_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1653
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
*/
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":1655
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_5 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1655, __pyx_L4_error)
    __pyx_t_3 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1655, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1655, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1655, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1655, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1655, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1655, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1));
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1655, __pyx_L4_error)
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1655, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1656
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]
*/
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_prod_nu, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1656, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1656, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1656, __pyx_L4_error)
      (__pyx_v_prod_nu_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1655
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
*/
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":1657
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_3 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1657, __pyx_L4_error)
    __pyx_t_2 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1657, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1657, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1657, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1657, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1657, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1657, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1657, __pyx_L4_error)
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1657, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":1658
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(N):
*/
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_prod_off, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1658, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_5); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1658, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1658, __pyx_L4_error)
      (__pyx_v_prod_off_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1657
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
*/
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":1660
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
*/
    __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_2 = __pyx_builtin_range; 
    __pyx_t_4 = __Pyx_PyLong_From_int(__pyx_v_N); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1660, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1660, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1660, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1660, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1660, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1660, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1));
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1660, __pyx_L4_error)
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1660, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1661
 * 
 * 		for i in range(N):
 * 			conc0_arr[i] = conc0[i]             # <<<<<<<<<<<<<<
 * 
 * 		# Call original complex C++ function (19 parameters)
*/
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_conc0, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1661, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1661, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1661, __pyx_L4_error)
      (__pyx_v_conc0_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1660
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1664
 * 
 * 		# Call original complex C++ function (19 parameters)
 * 		result = simulate_homogeneous_batch(N, M, kf_arr, kr_arr, reac_idx_arr, reac_nu_arr, reac_off_arr,             # <<<<<<<<<<<<<<
 * 											prod_idx_arr, prod_nu_arr, prod_off_arr, conc0_arr,
 * 											volume, mixing_intensity, time_span, dt,
*/
    __pyx_v_result = simulate_homogeneous_batch(__pyx_v_N, __pyx_v_M, __pyx_v_kf_arr, __pyx_v_kr_arr, __pyx_v_reac_idx_arr, __pyx_v_reac_nu_arr, __pyx_v_reac_off_arr, __pyx_v_prod_idx_arr, __pyx_v_prod_nu_arr, __pyx_v_prod_off_arr, __pyx_v_conc0_arr, __pyx_v_volume, __pyx_v_mixing_intensity, __pyx_v_time_span, __pyx_v_dt, __pyx_v_times, __pyx_v_conc_out_flat, __pyx_v_mixing_efficiency_out, __pyx_v_max_len);

    /* "pyroxa/pybindings.pyx":1669
 * 											times, conc_out_flat, mixing_efficiency_out, max_len)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
*/
    __pyx_t_11 = (__pyx_v_result > 0);
    if (__pyx_t_11) {

      /* "pyroxa/pybindings.pyx":1671
 * 		if result > 0:
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]             # <<<<<<<<<<<<<<
 * 			conc_matrix = []
 * 			mixing_efficiency = [mixing_efficiency_out[i] for i in range(result)]
*/
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1671, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __pyx_v_result;
        __pyx_t_12 = __pyx_t_10;
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_9genexpr36__pyx_v_i = __pyx_t_13;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_times[__pyx_9genexpr36__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1671, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1671, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_times_out = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1672
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
 * 			conc_matrix = []             # <<<<<<<<<<<<<<
 * 			mixing_efficiency = [mixing_efficiency_out[i] for i in range(result)]
 * 
*/
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1672, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_conc_matrix = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1673
 * 			times_out = [times[i] for i in range(result)]
 * 			conc_matrix = []
 * 			mixing_efficiency = [mixing_efficiency_out[i] for i in range(result)]             # <<<<<<<<<<<<<<
 * 
 * 			for t in range(result):
*/
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1673, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __pyx_v_result;
        __pyx_t_12 = __pyx_t_10;
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_9genexpr37__pyx_v_i = __pyx_t_13;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_mixing_efficiency_out[__pyx_9genexpr37__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1673, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1673, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_mixing_efficiency = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1675
 * 			mixing_efficiency = [mixing_efficiency_out[i] for i in range(result)]
 * 
 * 			for t in range(result):             # <<<<<<<<<<<<<<
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)
*/
      __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_builtin_range);
      __pyx_t_4 = __pyx_builtin_range; 
      __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1675, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1675, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
      }
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4);
        __pyx_t_1 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1675, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1675, __pyx_L4_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1675, __pyx_L4_error)
              #endif
              if (__pyx_t_1 >= __pyx_temp) break;
            }
            __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_1);
            ++__pyx_t_1;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1675, __pyx_L4_error)
              #endif
              if (__pyx_t_1 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1));
            #else
            __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1);
            #endif
            ++__pyx_t_1;
          }
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1675, __pyx_L4_error)
        } else {
          __pyx_t_2 = __pyx_t_7(__pyx_t_4);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1675, __pyx_L4_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "pyroxa/pybindings.pyx":1676
 * 
 * 			for t in range(result):
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 				conc_matrix.append(conc_t)
 * 
*/
        { /* enter inner scope */
          __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1676, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_10 = __pyx_v_N;
          __pyx_t_12 = __pyx_t_10;
          for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
            __pyx_9genexpr38__pyx_v_i = __pyx_t_13;
            __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_N); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1676, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_3 = PyNumber_Multiply(__pyx_v_t, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1676, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_9genexpr38__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1676, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_14 = PyNumber_Add(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1676, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_14); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1676, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = PyFloat_FromDouble((__pyx_v_conc_out_flat[__pyx_t_9])); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1676, __pyx_L4_error)
            __Pyx_GOTREF(__pyx_t_14);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_14))) __PYX_ERR(0, 1676, __pyx_L4_error)
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
        } /* exit inner scope */
        __Pyx_XDECREF_SET(__pyx_v_conc_t, ((PyObject*)__pyx_t_2));
        __pyx_t_2 = 0;

        /* "pyroxa/pybindings.pyx":1677
 * 			for t in range(result):
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)             # <<<<<<<<<<<<<<
 * 
 * 			return {
*/
        __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_conc_matrix, __pyx_v_conc_t); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 1677, __pyx_L4_error)

        /* "pyroxa/pybindings.pyx":1675
 * 			mixing_efficiency = [mixing_efficiency_out[i] for i in range(result)]
 * 
 * 			for t in range(result):             # <<<<<<<<<<<<<<
 * 				conc_t = [conc_out_flat[t*N + i] for i in range(N)]
 * 				conc_matrix.append(conc_t)
*/
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1679
 * 				conc_matrix.append(conc_t)
 * 
 * 			return {             # <<<<<<<<<<<<<<
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,
*/
      __Pyx_XDECREF(__pyx_r);

      /* "pyroxa/pybindings.pyx":1680
 * 
 * 			return {
 * 				'times': times_out,             # <<<<<<<<<<<<<<
 * 				'concentrations': conc_matrix,
 * 				'mixing_efficiency': mixing_efficiency,
*/
      __pyx_t_4 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1680, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_times, __pyx_v_times_out) < 0) __PYX_ERR(0, 1680, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1681
 * 			return {
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,             # <<<<<<<<<<<<<<
 * 				'mixing_efficiency': mixing_efficiency,
 * 				'n_points': result,
*/
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_concentrations, __pyx_v_conc_matrix) < 0) __PYX_ERR(0, 1680, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1682
 * 				'times': times_out,
 * 				'concentrations': conc_matrix,
 * 				'mixing_efficiency': mixing_efficiency,             # <<<<<<<<<<<<<<
 * 				'n_points': result,
 * 				'success': True
*/
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_mixing_efficiency, __pyx_v_mixing_efficiency) < 0) __PYX_ERR(0, 1680, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1683
 * 				'concentrations': conc_matrix,
 * 				'mixing_efficiency': mixing_efficiency,
 * 				'n_points': result,             # <<<<<<<<<<<<<<
 * 				'success': True
 * 			}
*/
      __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1683, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_n_points, __pyx_t_2) < 0) __PYX_ERR(0, 1680, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1684
 * 				'mixing_efficiency': mixing_efficiency,
 * 				'n_points': result,
 * 				'success': True             # <<<<<<<<<<<<<<
 * 			}
 * 		else:
*/
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_success, Py_True) < 0) __PYX_ERR(0, 1680, __pyx_L4_error)
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1669
 * 											times, conc_out_flat, mixing_efficiency_out, max_len)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract results
 * 			times_out = [times[i] for i in range(result)]
*/
    }

    /* "pyroxa/pybindings.pyx":1687
 * 			}
 * 		else:
 * 			return {'success': False, 'error': 'Simulation failed'}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(kf_arr)
*/
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1687, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_success, Py_False) < 0) __PYX_ERR(0, 1687, __pyx_L4_error)
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_error, __pyx_mstate_global->__pyx_kp_u_Simulation_failed) < 0) __PYX_ERR(0, 1687, __pyx_L4_error)
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1689
 * 			return {'success': False, 'error': 'Simulation failed'}
 * 	finally:
 * 		free(kf_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
      if ( unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __Pyx_XGOTREF(__pyx_t_21);
      __Pyx_XGOTREF(__pyx_t_22);
      __pyx_t_10 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
      {
        free(__pyx_v_kf_arr);

        /* "pyroxa/pybindings.pyx":1690
 * 	finally:
 * 		free(kf_arr)
 * 		free(kr_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
*/
        free(__pyx_v_kr_arr);

        /* "pyroxa/pybindings.pyx":1691
 * 		free(kf_arr)
 * 		free(kr_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
*/
        free(__pyx_v_reac_idx_arr);

        /* "pyroxa/pybindings.pyx":1692
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
*/
        free(__pyx_v_reac_nu_arr);

        /* "pyroxa/pybindings.pyx":1693
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
*/
        free(__pyx_v_reac_off_arr);

        /* "pyroxa/pybindings.pyx":1694
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
*/
        free(__pyx_v_prod_idx_arr);

        /* "pyroxa/pybindings.pyx":1695
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
*/
        free(__pyx_v_prod_nu_arr);

        /* "pyroxa/pybindings.pyx":1696
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(times)
*/
        free(__pyx_v_prod_off_arr);

        /* "pyroxa/pybindings.pyx":1697
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(times)
 * 		free(conc_out_flat)
*/
        free(__pyx_v_conc0_arr);

        /* "pyroxa/pybindings.pyx":1698
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(conc_out_flat)
 * 		free(mixing_efficiency_out)
*/
        free(__pyx_v_times);

        /* "pyroxa/pybindings.pyx":1699
 * 		free(conc0_arr)
 * 		free(times)
 * 		free(conc_out_flat)             # <<<<<<<<<<<<<<
 * 		free(mixing_efficiency_out)
 * 
*/
        free(__pyx_v_conc_out_flat);

        /* "pyroxa/pybindings.pyx":1700
 * 		free(times)
 * 		free(conc_out_flat)
 * 		free(mixing_efficiency_out)             # <<<<<<<<<<<<<<
 * 
 * def py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None):
*/
        free(__pyx_v_mixing_efficiency_out);
      }
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_21);
      __Pyx_XGIVEREF(__pyx_t_22);
      __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
      __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_16;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_22 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1689
 * 			return {'success': False, 'error': 'Simulation failed'}
 * 	finally:
 * 		free(kf_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
*/
      free(__pyx_v_kf_arr);

      /* "pyroxa/pybindings.pyx":1690
 * 	finally:
 * 		free(kf_arr)
 * 		free(kr_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
*/
      free(__pyx_v_kr_arr);

      /* "pyroxa/pybindings.pyx":1691
 * 		free(kf_arr)
 * 		free(kr_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
*/
      free(__pyx_v_reac_idx_arr);

      /* "pyroxa/pybindings.pyx":1692
 * 		free(kr_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
*/
      free(__pyx_v_reac_nu_arr);

      /* "pyroxa/pybindings.pyx":1693
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
*/
      free(__pyx_v_reac_off_arr);

      /* "pyroxa/pybindings.pyx":1694
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
*/
      free(__pyx_v_prod_idx_arr);

      /* "pyroxa/pybindings.pyx":1695
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
*/
      free(__pyx_v_prod_nu_arr);

      /* "pyroxa/pybindings.pyx":1696
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(times)
*/
      free(__pyx_v_prod_off_arr);

      /* "pyroxa/pybindings.pyx":1697
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(times)
 * 		free(conc_out_flat)
*/
      free(__pyx_v_conc0_arr);

      /* "pyroxa/pybindings.pyx":1698
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(times)             # <<<<<<<<<<<<<<
 * 		free(conc_out_flat)
 * 		free(mixing_efficiency_out)
*/
      free(__pyx_v_times);

      /* "pyroxa/pybindings.pyx":1699
 * 		free(conc0_arr)
 * 		free(times)
 * 		free(conc_out_flat)             # <<<<<<<<<<<<<<
 * 		free(mixing_efficiency_out)
 * 
*/
      free(__pyx_v_conc_out_flat);

      /* "pyroxa/pybindings.pyx":1700
 * 		free(times)
 * 		free(conc_out_flat)
 * 		free(mixing_efficiency_out)             # <<<<<<<<<<<<<<
 * 
 * def py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None):
*/
      free(__pyx_v_mixing_efficiency_out);
      __pyx_r = __pyx_t_22;
      __pyx_t_22 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1621
 * 		free(emulsion_conc_out)
 * 
 * def py_simulate_homogeneous_batch(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 								  prod_idx, prod_nu, prod_off, conc0, double volume,
 * 								  double mixing_intensity, double time_span, double dt,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_homogeneous_batch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_times_out);
  __Pyx_XDECREF(__pyx_v_conc_matrix);
  __Pyx_XDECREF(__pyx_v_mixing_efficiency);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_conc_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1702
 * 		free(mixing_efficiency_out)
 * 
 * def py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None):             # <<<<<<<<<<<<<<
 * 	"""Simulate multi-reactor system with adaptive control"""
 * 	import numpy as np
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_111py_simulate_multi_reactor_adaptive(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_110py_simulate_multi_reactor_adaptive, "py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None)\n\nSimulate multi-reactor system with adaptive control");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_111py_simulate_multi_reactor_adaptive = {"py_simulate_multi_reactor_adaptive", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_111py_simulate_multi_reactor_adaptive, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_110py_simulate_multi_reactor_adaptive};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_111py_simulate_multi_reactor_adaptive(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_reactor_config = 0;
  CYTHON_UNUSED PyObject *__pyx_v_feed_conditions = 0;
  CYTHON_UNUSED PyObject *__pyx_v_control_strategy = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_simulate_multi_reactor_adaptive (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_reactor_config,&__pyx_mstate_global->__pyx_n_u_feed_conditions,&__pyx_mstate_global->__pyx_n_u_control_strategy,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1702, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1702, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1702, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1702, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_simulate_multi_reactor_adaptive", 0) < 0) __PYX_ERR(0, 1702, __pyx_L3_error)
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)Py_None));
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_simulate_multi_reactor_adaptive", 0, 2, 3, i); __PYX_ERR(0, 1702, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1702, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1702, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1702, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)Py_None));
    }
    __pyx_v_reactor_config = values[0];
    __pyx_v_feed_conditions = values[1];
    __pyx_v_control_strategy = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_simulate_multi_reactor_adaptive", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 1702, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_multi_reactor_adaptive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_110py_simulate_multi_reactor_adaptive(__pyx_self, __pyx_v_reactor_config, __pyx_v_feed_conditions, __pyx_v_control_strategy);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_110py_simulate_multi_reactor_adaptive(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_reactor_config, CYTHON_UNUSED PyObject *__pyx_v_feed_conditions, CYTHON_UNUSED PyObject *__pyx_v_control_strategy) {
  CYTHON_UNUSED PyObject *__pyx_v_np = NULL;
  Py_ssize_t __pyx_v_n_reactors;
  PyObject *__pyx_v_reactor_outputs = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_reactor_output = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  size_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_simulate_multi_reactor_adaptive", 0);

  /* "pyroxa/pybindings.pyx":1704
 * def py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None):
 * 	"""Simulate multi-reactor system with adaptive control"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 	n_reactors = len(reactor_config) if isinstance(reactor_config, list) else 3
*/
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_numpy, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1706
 * 	import numpy as np
 * 
 * 	n_reactors = len(reactor_config) if isinstance(reactor_config, list) else 3             # <<<<<<<<<<<<<<
 * 
 * 	# Create simple multi-reactor simulation result
*/
  __pyx_t_3 = PyList_Check(__pyx_v_reactor_config); 
  if (__pyx_t_3) {
    __pyx_t_4 = PyObject_Length(__pyx_v_reactor_config); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1706, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_4;
  } else {
    __pyx_t_2 = 3;
  }
  __pyx_v_n_reactors = __pyx_t_2;

  /* "pyroxa/pybindings.pyx":1709
 * 
 * 	# Create simple multi-reactor simulation result
 * 	reactor_outputs = []             # <<<<<<<<<<<<<<
 * 	for i in range(n_reactors):
 * 		reactor_output = {
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_reactor_outputs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1710
 * 	# Create simple multi-reactor simulation result
 * 	reactor_outputs = []
 * 	for i in range(n_reactors):             # <<<<<<<<<<<<<<
 * 		reactor_output = {
 * 			'reactor_id': i + 1,
*/
  __pyx_t_5 = NULL;
  __Pyx_INCREF(__pyx_builtin_range);
  __pyx_t_6 = __pyx_builtin_range; 
  __pyx_t_7 = PyLong_FromSsize_t(__pyx_v_n_reactors); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_8, (2-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1710, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_6 = __pyx_t_1; __Pyx_INCREF(__pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1710, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1710, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_6))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_6);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1710, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_6, __pyx_t_2);
        ++__pyx_t_2;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_6);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1710, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_2));
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_2);
        #endif
        ++__pyx_t_2;
      }
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1710, __pyx_L1_error)
    } else {
      __pyx_t_1 = __pyx_t_9(__pyx_t_6);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1710, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyroxa/pybindings.pyx":1712
 * 	for i in range(n_reactors):
 * 		reactor_output = {
 * 			'reactor_id': i + 1,             # <<<<<<<<<<<<<<
 * 			'conversion': 0.7 + i * 0.1,  # Increasing conversion
 * 			'temperature': 298.15 + i * 50,  # Temperature profile
*/
    __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1712, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyLong_AddObjC(__pyx_v_i, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1712, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_reactor_id, __pyx_t_7) < 0) __PYX_ERR(0, 1712, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyroxa/pybindings.pyx":1713
 * 		reactor_output = {
 * 			'reactor_id': i + 1,
 * 			'conversion': 0.7 + i * 0.1,  # Increasing conversion             # <<<<<<<<<<<<<<
 * 			'temperature': 298.15 + i * 50,  # Temperature profile
 * 			'concentrations': [1.0 - (i + 1) * 0.2, (i + 1) * 0.15, (i + 1) * 0.05]
*/
    __pyx_t_7 = PyNumber_Multiply(__pyx_v_i, __pyx_mstate_global->__pyx_float_0_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyFloat_AddCObj(__pyx_mstate_global->__pyx_float_0_7, __pyx_t_7, 0.7, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_conversion, __pyx_t_5) < 0) __PYX_ERR(0, 1712, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":1714
 * 			'reactor_id': i + 1,
 * 			'conversion': 0.7 + i * 0.1,  # Increasing conversion
 * 			'temperature': 298.15 + i * 50,  # Temperature profile             # <<<<<<<<<<<<<<
 * 			'concentrations': [1.0 - (i + 1) * 0.2, (i + 1) * 0.15, (i + 1) * 0.05]
 * 		}
*/
    __pyx_t_5 = __Pyx_PyLong_MultiplyObjC(__pyx_v_i, __pyx_mstate_global->__pyx_int_50, 50, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyFloat_AddCObj(__pyx_mstate_global->__pyx_float_298_15, __pyx_t_5, 298.15, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_temperature, __pyx_t_7) < 0) __PYX_ERR(0, 1712, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "pyroxa/pybindings.pyx":1715
 * 			'conversion': 0.7 + i * 0.1,  # Increasing conversion
 * 			'temperature': 298.15 + i * 50,  # Temperature profile
 * 			'concentrations': [1.0 - (i + 1) * 0.2, (i + 1) * 0.15, (i + 1) * 0.05]             # <<<<<<<<<<<<<<
 * 		}
 * 		reactor_outputs.append(reactor_output)
*/
    __pyx_t_7 = __Pyx_PyLong_AddObjC(__pyx_v_i, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_7, __pyx_mstate_global->__pyx_float_0_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyFloat_SubtractCObj(__pyx_mstate_global->__pyx_float_1_0, __pyx_t_5, 1.0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyLong_AddObjC(__pyx_v_i, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = PyNumber_Multiply(__pyx_t_5, __pyx_mstate_global->__pyx_float_0_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyLong_AddObjC(__pyx_v_i, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = PyNumber_Multiply(__pyx_t_5, __pyx_mstate_global->__pyx_float_0_05); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_7) != (0)) __PYX_ERR(0, 1715, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_10);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_10) != (0)) __PYX_ERR(0, 1715, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_11);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_11) != (0)) __PYX_ERR(0, 1715, __pyx_L1_error);
    __pyx_t_7 = 0;
    __pyx_t_10 = 0;
    __pyx_t_11 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_concentrations, __pyx_t_5) < 0) __PYX_ERR(0, 1712, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_reactor_output, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pyroxa/pybindings.pyx":1717
 * 			'concentrations': [1.0 - (i + 1) * 0.2, (i + 1) * 0.15, (i + 1) * 0.05]
 * 		}
 * 		reactor_outputs.append(reactor_output)             # <<<<<<<<<<<<<<
 * 
 * 	return {
*/
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_reactor_outputs, __pyx_v_reactor_output); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 1717, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1710
 * 	# Create simple multi-reactor simulation result
 * 	reactor_outputs = []
 * 	for i in range(n_reactors):             # <<<<<<<<<<<<<<
 * 		reactor_output = {
 * 			'reactor_id': i + 1,
*/
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pyroxa/pybindings.pyx":1719
 * 		reactor_outputs.append(reactor_output)
 * 
 * 	return {             # <<<<<<<<<<<<<<
 * 		'reactor_outputs': reactor_outputs,
 * 		'overall_conversion': 0.9,
*/
  __Pyx_XDECREF(__pyx_r);

  /* "pyroxa/pybindings.pyx":1720
 * 
 * 	return {
 * 		'reactor_outputs': reactor_outputs,             # <<<<<<<<<<<<<<
 * 		'overall_conversion': 0.9,
 * 		'control_actions': ['temperature_adjust', 'flow_rate_adjust'],
*/
  __pyx_t_6 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_reactor_outputs, __pyx_v_reactor_outputs) < 0) __PYX_ERR(0, 1720, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_overall_conversion, __pyx_mstate_global->__pyx_float_0_9) < 0) __PYX_ERR(0, 1720, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1722
 * 		'reactor_outputs': reactor_outputs,
 * 		'overall_conversion': 0.9,
 * 		'control_actions': ['temperature_adjust', 'flow_rate_adjust'],             # <<<<<<<<<<<<<<
 * 		'success': True
 * 	}
*/
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_temperature_adjust);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_temperature_adjust);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_mstate_global->__pyx_n_u_temperature_adjust) != (0)) __PYX_ERR(0, 1722, __pyx_L1_error);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_flow_rate_adjust);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_flow_rate_adjust);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_mstate_global->__pyx_n_u_flow_rate_adjust) != (0)) __PYX_ERR(0, 1722, __pyx_L1_error);
  if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_control_actions, __pyx_t_1) < 0) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1723
 * 		'overall_conversion': 0.9,
 * 		'control_actions': ['temperature_adjust', 'flow_rate_adjust'],
 * 		'success': True             # <<<<<<<<<<<<<<
 * 	}
 * 
*/
  if (PyDict_SetItem(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_success, Py_True) < 0) __PYX_ERR(0, 1720, __pyx_L1_error)
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":1702
 * 		free(mixing_efficiency_out)
 * 
 * def py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None):             # <<<<<<<<<<<<<<
 * 	"""Simulate multi-reactor system with adaptive control"""
 * 	import numpy as np
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyroxa._pybindings.py_simulate_multi_reactor_adaptive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_reactor_outputs);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_reactor_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1727
 * 
 * # BATCH 13: Energy analysis and statistical methods
 * def py_calculate_energy_balance(int N, int M, conc, reaction_rates,             # <<<<<<<<<<<<<<
 * 								enthalpies_formation, heat_capacities, double T):
 * 	"""Calculate energy balance using original complex C++ implementation with full parameter exposure"""
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_113py_calculate_energy_balance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_112py_calculate_energy_balance, "py_calculate_energy_balance(int N, int M, conc, reaction_rates, enthalpies_formation, heat_capacities, double T)\n\nCalculate energy balance using original complex C++ implementation with full parameter exposure");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_113py_calculate_energy_balance = {"py_calculate_energy_balance", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_113py_calculate_energy_balance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_112py_calculate_energy_balance};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_113py_calculate_energy_balance(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_N;
  int __pyx_v_M;
  PyObject *__pyx_v_conc = 0;
  PyObject *__pyx_v_reaction_rates = 0;
  PyObject *__pyx_v_enthalpies_formation = 0;
  PyObject *__pyx_v_heat_capacities = 0;
  double __pyx_v_T;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_calculate_energy_balance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_N,&__pyx_mstate_global->__pyx_n_u_M,&__pyx_mstate_global->__pyx_n_u_conc,&__pyx_mstate_global->__pyx_n_u_reaction_rates,&__pyx_mstate_global->__pyx_n_u_enthalpies_formation,&__pyx_mstate_global->__pyx_n_u_heat_capacities,&__pyx_mstate_global->__pyx_n_u_T,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1727, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  7:
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 1727, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1727, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1727, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1727, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1727, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1727, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1727, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_calculate_energy_balance", 0) < 0) __PYX_ERR(0, 1727, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 7; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_calculate_energy_balance", 1, 7, 7, i); __PYX_ERR(0, 1727, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 7)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1727, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1727, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1727, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1727, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1727, __pyx_L3_error)
      values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1727, __pyx_L3_error)
      values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 1727, __pyx_L3_error)
    }
    __pyx_v_N = __Pyx_PyLong_As_int(values[0]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1727, __pyx_L3_error)
    __pyx_v_M = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_M == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1727, __pyx_L3_error)
    __pyx_v_conc = values[2];
    __pyx_v_reaction_rates = values[3];
    __pyx_v_enthalpies_formation = values[4];
    __pyx_v_heat_capacities = values[5];
    __pyx_v_T = __Pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_T == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1728, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_calculate_energy_balance", 1, 7, 7, __pyx_nargs); __PYX_ERR(0, 1727, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_energy_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_112py_calculate_energy_balance(__pyx_self, __pyx_v_N, __pyx_v_M, __pyx_v_conc, __pyx_v_reaction_rates, __pyx_v_enthalpies_formation, __pyx_v_heat_capacities, __pyx_v_T);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_112py_calculate_energy_balance(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, PyObject *__pyx_v_conc, PyObject *__pyx_v_reaction_rates, PyObject *__pyx_v_enthalpies_formation, PyObject *__pyx_v_heat_capacities, double __pyx_v_T) {
  double *__pyx_v_conc_arr;
  double *__pyx_v_rates_arr;
  double *__pyx_v_enthalpies_arr;
  double *__pyx_v_cp_arr;
  double __pyx_v_heat_generation_val;
  int __pyx_v_i;
  int __pyx_v_result;
  int __pyx_9genexpr39__pyx_v_i;
  int __pyx_9genexpr40__pyx_v_i;
  int __pyx_9genexpr41__pyx_v_i;
  int __pyx_9genexpr42__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  char const *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_calculate_energy_balance", 0);

  /* "pyroxa/pybindings.pyx":1732
 * 
 * 	# Allocate arrays for the complex function
 * 	cdef double* conc_arr = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* rates_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* enthalpies_arr = <double*>malloc(N * sizeof(double))
*/
  __pyx_v_conc_arr = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1733
 * 	# Allocate arrays for the complex function
 * 	cdef double* conc_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* rates_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* enthalpies_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* cp_arr = <double*>malloc(N * sizeof(double))
*/
  __pyx_v_rates_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1734
 * 	cdef double* conc_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* rates_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* enthalpies_arr = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* cp_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double heat_generation_val = 0.0
*/
  __pyx_v_enthalpies_arr = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1735
 * 	cdef double* rates_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* enthalpies_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* cp_arr = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double heat_generation_val = 0.0
 * 
*/
  __pyx_v_cp_arr = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1736
 * 	cdef double* enthalpies_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* cp_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double heat_generation_val = 0.0             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_heat_generation_val = 0.0;

  /* "pyroxa/pybindings.pyx":1738
 * 	cdef double heat_generation_val = 0.0
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Copy input arrays
 * 		for i in range(N):
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1740
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc_arr[i] = conc[i]
 * 			enthalpies_arr[i] = enthalpies_formation[i]
*/
    __pyx_t_1 = __pyx_v_N;
    __pyx_t_2 = __pyx_t_1;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "pyroxa/pybindings.pyx":1741
 * 		# Copy input arrays
 * 		for i in range(N):
 * 			conc_arr[i] = conc[i]             # <<<<<<<<<<<<<<
 * 			enthalpies_arr[i] = enthalpies_formation[i]
 * 			cp_arr[i] = heat_capacities[i]
*/
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_conc, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1741, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1741, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_conc_arr[__pyx_v_i]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1742
 * 		for i in range(N):
 * 			conc_arr[i] = conc[i]
 * 			enthalpies_arr[i] = enthalpies_formation[i]             # <<<<<<<<<<<<<<
 * 			cp_arr[i] = heat_capacities[i]
 * 
*/
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_enthalpies_formation, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1742, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1742, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_enthalpies_arr[__pyx_v_i]) = __pyx_t_5;

      /* "pyroxa/pybindings.pyx":1743
 * 			conc_arr[i] = conc[i]
 * 			enthalpies_arr[i] = enthalpies_formation[i]
 * 			cp_arr[i] = heat_capacities[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(M):
*/
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_heat_capacities, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1743, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1743, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_cp_arr[__pyx_v_i]) = __pyx_t_5;
    }

    /* "pyroxa/pybindings.pyx":1745
 * 			cp_arr[i] = heat_capacities[i]
 * 
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			rates_arr[i] = reaction_rates[i]
 * 
*/
    __pyx_t_1 = __pyx_v_M;
    __pyx_t_2 = __pyx_t_1;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "pyroxa/pybindings.pyx":1746
 * 
 * 		for i in range(M):
 * 			rates_arr[i] = reaction_rates[i]             # <<<<<<<<<<<<<<
 * 
 * 		# Call original complex C++ function (8 parameters)
*/
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_reaction_rates, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1746, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1746, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_rates_arr[__pyx_v_i]) = __pyx_t_5;
    }

    /* "pyroxa/pybindings.pyx":1749
 * 
 * 		# Call original complex C++ function (8 parameters)
 * 		result = calculate_energy_balance(N, M, conc_arr, rates_arr,             # <<<<<<<<<<<<<<
 * 										 enthalpies_arr, cp_arr, T, &heat_generation_val)
 * 
*/
    __pyx_v_result = calculate_energy_balance(__pyx_v_N, __pyx_v_M, __pyx_v_conc_arr, __pyx_v_rates_arr, __pyx_v_enthalpies_arr, __pyx_v_cp_arr, __pyx_v_T, (&__pyx_v_heat_generation_val));

    /* "pyroxa/pybindings.pyx":1752
 * 										 enthalpies_arr, cp_arr, T, &heat_generation_val)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			return {
 * 				'heat_generation': heat_generation_val,
*/
    __pyx_t_6 = (__pyx_v_result > 0);
    if (__pyx_t_6) {

      /* "pyroxa/pybindings.pyx":1753
 * 
 * 		if result > 0:
 * 			return {             # <<<<<<<<<<<<<<
 * 				'heat_generation': heat_generation_val,
 * 				'temperature': T,
*/
      __Pyx_XDECREF(__pyx_r);

      /* "pyroxa/pybindings.pyx":1754
 * 		if result > 0:
 * 			return {
 * 				'heat_generation': heat_generation_val,             # <<<<<<<<<<<<<<
 * 				'temperature': T,
 * 				'concentrations': [conc_arr[i] for i in range(N)],
*/
      __pyx_t_4 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1754, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_heat_generation_val); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1754, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_heat_generation, __pyx_t_7) < 0) __PYX_ERR(0, 1754, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "pyroxa/pybindings.pyx":1755
 * 			return {
 * 				'heat_generation': heat_generation_val,
 * 				'temperature': T,             # <<<<<<<<<<<<<<
 * 				'concentrations': [conc_arr[i] for i in range(N)],
 * 				'reaction_rates': [rates_arr[i] for i in range(M)],
*/
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_T); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1755, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_temperature, __pyx_t_7) < 0) __PYX_ERR(0, 1754, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      { /* enter inner scope */

        /* "pyroxa/pybindings.pyx":1756
 * 				'heat_generation': heat_generation_val,
 * 				'temperature': T,
 * 				'concentrations': [conc_arr[i] for i in range(N)],             # <<<<<<<<<<<<<<
 * 				'reaction_rates': [rates_arr[i] for i in range(M)],
 * 				'enthalpies_formation': [enthalpies_arr[i] for i in range(N)],
*/
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1756, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __pyx_v_N;
        __pyx_t_2 = __pyx_t_1;
        for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
          __pyx_9genexpr39__pyx_v_i = __pyx_t_3;
          __pyx_t_8 = PyFloat_FromDouble((__pyx_v_conc_arr[__pyx_9genexpr39__pyx_v_i])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1756, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1756, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      } /* exit inner scope */
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_concentrations, __pyx_t_7) < 0) __PYX_ERR(0, 1754, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      { /* enter inner scope */

        /* "pyroxa/pybindings.pyx":1757
 * 				'temperature': T,
 * 				'concentrations': [conc_arr[i] for i in range(N)],
 * 				'reaction_rates': [rates_arr[i] for i in range(M)],             # <<<<<<<<<<<<<<
 * 				'enthalpies_formation': [enthalpies_arr[i] for i in range(N)],
 * 				'heat_capacities': [cp_arr[i] for i in range(N)],
*/
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1757, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __pyx_v_M;
        __pyx_t_2 = __pyx_t_1;
        for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
          __pyx_9genexpr40__pyx_v_i = __pyx_t_3;
          __pyx_t_8 = PyFloat_FromDouble((__pyx_v_rates_arr[__pyx_9genexpr40__pyx_v_i])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1757, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1757, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      } /* exit inner scope */
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_reaction_rates, __pyx_t_7) < 0) __PYX_ERR(0, 1754, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      { /* enter inner scope */

        /* "pyroxa/pybindings.pyx":1758
 * 				'concentrations': [conc_arr[i] for i in range(N)],
 * 				'reaction_rates': [rates_arr[i] for i in range(M)],
 * 				'enthalpies_formation': [enthalpies_arr[i] for i in range(N)],             # <<<<<<<<<<<<<<
 * 				'heat_capacities': [cp_arr[i] for i in range(N)],
 * 				'success': True
*/
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1758, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __pyx_v_N;
        __pyx_t_2 = __pyx_t_1;
        for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
          __pyx_9genexpr41__pyx_v_i = __pyx_t_3;
          __pyx_t_8 = PyFloat_FromDouble((__pyx_v_enthalpies_arr[__pyx_9genexpr41__pyx_v_i])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1758, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1758, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      } /* exit inner scope */
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_enthalpies_formation, __pyx_t_7) < 0) __PYX_ERR(0, 1754, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      { /* enter inner scope */

        /* "pyroxa/pybindings.pyx":1759
 * 				'reaction_rates': [rates_arr[i] for i in range(M)],
 * 				'enthalpies_formation': [enthalpies_arr[i] for i in range(N)],
 * 				'heat_capacities': [cp_arr[i] for i in range(N)],             # <<<<<<<<<<<<<<
 * 				'success': True
 * 			}
*/
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1759, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = __pyx_v_N;
        __pyx_t_2 = __pyx_t_1;
        for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
          __pyx_9genexpr42__pyx_v_i = __pyx_t_3;
          __pyx_t_8 = PyFloat_FromDouble((__pyx_v_cp_arr[__pyx_9genexpr42__pyx_v_i])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1759, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1759, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      } /* exit inner scope */
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_heat_capacities, __pyx_t_7) < 0) __PYX_ERR(0, 1754, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "pyroxa/pybindings.pyx":1760
 * 				'enthalpies_formation': [enthalpies_arr[i] for i in range(N)],
 * 				'heat_capacities': [cp_arr[i] for i in range(N)],
 * 				'success': True             # <<<<<<<<<<<<<<
 * 			}
 * 		else:
*/
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_success, Py_True) < 0) __PYX_ERR(0, 1754, __pyx_L4_error)
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1752
 * 										 enthalpies_arr, cp_arr, T, &heat_generation_val)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			return {
 * 				'heat_generation': heat_generation_val,
*/
    }

    /* "pyroxa/pybindings.pyx":1763
 * 			}
 * 		else:
 * 			return {'success': False, 'error': 'Energy balance calculation failed'}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(conc_arr)
*/
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1763, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_success, Py_False) < 0) __PYX_ERR(0, 1763, __pyx_L4_error)
      if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_error, __pyx_mstate_global->__pyx_kp_u_Energy_balance_calculation_faile) < 0) __PYX_ERR(0, 1763, __pyx_L4_error)
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1765
 * 			return {'success': False, 'error': 'Energy balance calculation failed'}
 * 	finally:
 * 		free(conc_arr)             # <<<<<<<<<<<<<<
 * 		free(rates_arr)
 * 		free(enthalpies_arr)
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if ( unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __pyx_t_1 = __pyx_lineno; __pyx_t_2 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
      {
        free(__pyx_v_conc_arr);

        /* "pyroxa/pybindings.pyx":1766
 * 	finally:
 * 		free(conc_arr)
 * 		free(rates_arr)             # <<<<<<<<<<<<<<
 * 		free(enthalpies_arr)
 * 		free(cp_arr)
*/
        free(__pyx_v_rates_arr);

        /* "pyroxa/pybindings.pyx":1767
 * 		free(conc_arr)
 * 		free(rates_arr)
 * 		free(enthalpies_arr)             # <<<<<<<<<<<<<<
 * 		free(cp_arr)
 * 
*/
        free(__pyx_v_enthalpies_arr);

        /* "pyroxa/pybindings.pyx":1768
 * 		free(rates_arr)
 * 		free(enthalpies_arr)
 * 		free(cp_arr)             # <<<<<<<<<<<<<<
 * 
 * def py_monte_carlo_simulation(int N, int M, int nsamples, kf_mean, kr_mean, kf_std, kr_std,
*/
        free(__pyx_v_cp_arr);
      }
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __pyx_lineno = __pyx_t_1; __pyx_clineno = __pyx_t_2; __pyx_filename = __pyx_t_9;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_15 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1765
 * 			return {'success': False, 'error': 'Energy balance calculation failed'}
 * 	finally:
 * 		free(conc_arr)             # <<<<<<<<<<<<<<
 * 		free(rates_arr)
 * 		free(enthalpies_arr)
*/
      free(__pyx_v_conc_arr);

      /* "pyroxa/pybindings.pyx":1766
 * 	finally:
 * 		free(conc_arr)
 * 		free(rates_arr)             # <<<<<<<<<<<<<<
 * 		free(enthalpies_arr)
 * 		free(cp_arr)
*/
      free(__pyx_v_rates_arr);

      /* "pyroxa/pybindings.pyx":1767
 * 		free(conc_arr)
 * 		free(rates_arr)
 * 		free(enthalpies_arr)             # <<<<<<<<<<<<<<
 * 		free(cp_arr)
 * 
*/
      free(__pyx_v_enthalpies_arr);

      /* "pyroxa/pybindings.pyx":1768
 * 		free(rates_arr)
 * 		free(enthalpies_arr)
 * 		free(cp_arr)             # <<<<<<<<<<<<<<
 * 
 * def py_monte_carlo_simulation(int N, int M, int nsamples, kf_mean, kr_mean, kf_std, kr_std,
*/
      free(__pyx_v_cp_arr);
      __pyx_r = __pyx_t_15;
      __pyx_t_15 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1727
 * 
 * # BATCH 13: Energy analysis and statistical methods
 * def py_calculate_energy_balance(int N, int M, conc, reaction_rates,             # <<<<<<<<<<<<<<
 * 								enthalpies_formation, heat_capacities, double T):
 * 	"""Calculate energy balance using original complex C++ implementation with full parameter exposure"""
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyroxa._pybindings.py_calculate_energy_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1770
 * 		free(cp_arr)
 * 
 * def py_monte_carlo_simulation(int N, int M, int nsamples, kf_mean, kr_mean, kf_std, kr_std,             # <<<<<<<<<<<<<<
 * 							  reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off,
 * 							  conc0, double time_span, double dt, int nthreads=1):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_115py_monte_carlo_simulation(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_114py_monte_carlo_simulation, "py_monte_carlo_simulation(int N, int M, int nsamples, kf_mean, kr_mean, kf_std, kr_std, reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off, conc0, double time_span, double dt, int nthreads=1)\n\nMonte Carlo simulation using original complex C++ implementation with full parameter exposure");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_115py_monte_carlo_simulation = {"py_monte_carlo_simulation", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_115py_monte_carlo_simulation, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_114py_monte_carlo_simulation};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_115py_monte_carlo_simulation(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_N;
  int __pyx_v_M;
  int __pyx_v_nsamples;
  PyObject *__pyx_v_kf_mean = 0;
  PyObject *__pyx_v_kr_mean = 0;
  PyObject *__pyx_v_kf_std = 0;
  PyObject *__pyx_v_kr_std = 0;
  PyObject *__pyx_v_reac_idx = 0;
  PyObject *__pyx_v_reac_nu = 0;
  PyObject *__pyx_v_reac_off = 0;
  PyObject *__pyx_v_prod_idx = 0;
  PyObject *__pyx_v_prod_nu = 0;
  PyObject *__pyx_v_prod_off = 0;
  PyObject *__pyx_v_conc0 = 0;
  double __pyx_v_time_span;
  double __pyx_v_dt;
  int __pyx_v_nthreads;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[17] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_monte_carlo_simulation (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_N,&__pyx_mstate_global->__pyx_n_u_M,&__pyx_mstate_global->__pyx_n_u_nsamples,&__pyx_mstate_global->__pyx_n_u_kf_mean,&__pyx_mstate_global->__pyx_n_u_kr_mean,&__pyx_mstate_global->__pyx_n_u_kf_std,&__pyx_mstate_global->__pyx_n_u_kr_std,&__pyx_mstate_global->__pyx_n_u_reac_idx,&__pyx_mstate_global->__pyx_n_u_reac_nu,&__pyx_mstate_global->__pyx_n_u_reac_off,&__pyx_mstate_global->__pyx_n_u_prod_idx,&__pyx_mstate_global->__pyx_n_u_prod_nu,&__pyx_mstate_global->__pyx_n_u_prod_off,&__pyx_mstate_global->__pyx_n_u_conc0,&__pyx_mstate_global->__pyx_n_u_time_span,&__pyx_mstate_global->__pyx_n_u_dt,&__pyx_mstate_global->__pyx_n_u_nthreads,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1770, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case 17:
        values[16] = __Pyx_ArgRef_FASTCALL(__pyx_args, 16);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[16])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 16:
        values[15] = __Pyx_ArgRef_FASTCALL(__pyx_args, 15);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[15])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 15:
        values[14] = __Pyx_ArgRef_FASTCALL(__pyx_args, 14);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[14])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 14:
        values[13] = __Pyx_ArgRef_FASTCALL(__pyx_args, 13);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[13])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 13:
        values[12] = __Pyx_ArgRef_FASTCALL(__pyx_args, 12);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[12])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 12:
        values[11] = __Pyx_ArgRef_FASTCALL(__pyx_args, 11);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[11])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 11:
        values[10] = __Pyx_ArgRef_FASTCALL(__pyx_args, 10);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[10])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 10:
        values[9] = __Pyx_ArgRef_FASTCALL(__pyx_args, 9);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[9])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  9:
        values[8] = __Pyx_ArgRef_FASTCALL(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  8:
        values[7] = __Pyx_ArgRef_FASTCALL(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  7:
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_monte_carlo_simulation", 0) < 0) __PYX_ERR(0, 1770, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 16; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, i); __PYX_ERR(0, 1770, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case 17:
        values[16] = __Pyx_ArgRef_FASTCALL(__pyx_args, 16);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[16])) __PYX_ERR(0, 1770, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case 16:
        values[15] = __Pyx_ArgRef_FASTCALL(__pyx_args, 15);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[15])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[14] = __Pyx_ArgRef_FASTCALL(__pyx_args, 14);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[14])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[13] = __Pyx_ArgRef_FASTCALL(__pyx_args, 13);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[13])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[12] = __Pyx_ArgRef_FASTCALL(__pyx_args, 12);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[12])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[11] = __Pyx_ArgRef_FASTCALL(__pyx_args, 11);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[11])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[10] = __Pyx_ArgRef_FASTCALL(__pyx_args, 10);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[10])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[9] = __Pyx_ArgRef_FASTCALL(__pyx_args, 9);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[9])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[8] = __Pyx_ArgRef_FASTCALL(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[7] = __Pyx_ArgRef_FASTCALL(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[6] = __Pyx_ArgRef_FASTCALL(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1770, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1770, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_N = __Pyx_PyLong_As_int(values[0]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1770, __pyx_L3_error)
    __pyx_v_M = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_M == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1770, __pyx_L3_error)
    __pyx_v_nsamples = __Pyx_PyLong_As_int(values[2]); if (unlikely((__pyx_v_nsamples == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1770, __pyx_L3_error)
    __pyx_v_kf_mean = values[3];
    __pyx_v_kr_mean = values[4];
    __pyx_v_kf_std = values[5];
    __pyx_v_kr_std = values[6];
    __pyx_v_reac_idx = values[7];
    __pyx_v_reac_nu = values[8];
    __pyx_v_reac_off = values[9];
    __pyx_v_prod_idx = values[10];
    __pyx_v_prod_nu = values[11];
    __pyx_v_prod_off = values[12];
    __pyx_v_conc0 = values[13];
    __pyx_v_time_span = __Pyx_PyFloat_AsDouble(values[14]); if (unlikely((__pyx_v_time_span == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1772, __pyx_L3_error)
    __pyx_v_dt = __Pyx_PyFloat_AsDouble(values[15]); if (unlikely((__pyx_v_dt == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1772, __pyx_L3_error)
    if (values[16]) {
      __pyx_v_nthreads = __Pyx_PyLong_As_int(values[16]); if (unlikely((__pyx_v_nthreads == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1772, __pyx_L3_error)
    } else {
      __pyx_v_nthreads = ((int)((int)1));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_monte_carlo_simulation", 0, 16, 17, __pyx_nargs); __PYX_ERR(0, 1770, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_monte_carlo_simulation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_114py_monte_carlo_simulation(__pyx_self, __pyx_v_N, __pyx_v_M, __pyx_v_nsamples, __pyx_v_kf_mean, __pyx_v_kr_mean, __pyx_v_kf_std, __pyx_v_kr_std, __pyx_v_reac_idx, __pyx_v_reac_nu, __pyx_v_reac_off, __pyx_v_prod_idx, __pyx_v_prod_nu, __pyx_v_prod_off, __pyx_v_conc0, __pyx_v_time_span, __pyx_v_dt, __pyx_v_nthreads);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_114py_monte_carlo_simulation(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_N, int __pyx_v_M, int __pyx_v_nsamples, PyObject *__pyx_v_kf_mean, PyObject *__pyx_v_kr_mean, PyObject *__pyx_v_kf_std, PyObject *__pyx_v_kr_std, PyObject *__pyx_v_reac_idx, PyObject *__pyx_v_reac_nu, PyObject *__pyx_v_reac_off, PyObject *__pyx_v_prod_idx, PyObject *__pyx_v_prod_nu, PyObject *__pyx_v_prod_off, PyObject *__pyx_v_conc0, double __pyx_v_time_span, double __pyx_v_dt, int __pyx_v_nthreads) {
  double *__pyx_v_kf_mean_arr;
  double *__pyx_v_kr_mean_arr;
  double *__pyx_v_kf_std_arr;
  double *__pyx_v_kr_std_arr;
  int *__pyx_v_reac_idx_arr;
  double *__pyx_v_reac_nu_arr;
  int *__pyx_v_reac_off_arr;
  int *__pyx_v_prod_idx_arr;
  double *__pyx_v_prod_nu_arr;
  int *__pyx_v_prod_off_arr;
  double *__pyx_v_conc0_arr;
  double *__pyx_v_statistics_output;
  PyObject *__pyx_v_i = NULL;
  int __pyx_v_result;
  PyObject *__pyx_v_mean_list = NULL;
  PyObject *__pyx_v_std_list = NULL;
  PyObject *__pyx_v_min_list = NULL;
  PyObject *__pyx_v_max_list = NULL;
  int __pyx_9genexpr43__pyx_v_i;
  int __pyx_9genexpr44__pyx_v_i;
  int __pyx_9genexpr45__pyx_v_i;
  int __pyx_9genexpr46__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  double __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  char const *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_monte_carlo_simulation", 0);

  /* "pyroxa/pybindings.pyx":1776
 * 
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_mean_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr_mean_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kf_std_arr = <double*>malloc(M * sizeof(double))
*/
  __pyx_v_kf_mean_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1777
 * 	# Allocate arrays for the complex function
 * 	cdef double* kf_mean_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_mean_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kf_std_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_std_arr = <double*>malloc(M * sizeof(double))
*/
  __pyx_v_kr_mean_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1778
 * 	cdef double* kf_mean_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_mean_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kf_std_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* kr_std_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
*/
  __pyx_v_kf_std_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1779
 * 	cdef double* kr_mean_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kf_std_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_std_arr = <double*>malloc(M * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
*/
  __pyx_v_kr_std_arr = ((double *)malloc((__pyx_v_M * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1780
 * 	cdef double* kf_std_arr = <double*>malloc(M * sizeof(double))
 * 	cdef double* kr_std_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1780, __pyx_L1_error)
  __pyx_v_reac_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1781
 * 	cdef double* kr_std_arr = <double*>malloc(M * sizeof(double))
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1781, __pyx_L1_error)
  __pyx_v_reac_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1782
 * 	cdef int* reac_idx_arr = <int*>malloc(len(reac_idx) * sizeof(int))
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1782, __pyx_L1_error)
  __pyx_v_reac_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1783
 * 	cdef double* reac_nu_arr = <double*>malloc(len(reac_nu) * sizeof(double))
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1783, __pyx_L1_error)
  __pyx_v_prod_idx_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1784
 * 	cdef int* reac_off_arr = <int*>malloc(len(reac_off) * sizeof(int))
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1784, __pyx_L1_error)
  __pyx_v_prod_nu_arr = ((double *)malloc((__pyx_t_1 * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1785
 * 	cdef int* prod_idx_arr = <int*>malloc(len(prod_idx) * sizeof(int))
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))             # <<<<<<<<<<<<<<
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* statistics_output = <double*>malloc(N * 4 * sizeof(double))  # mean, std, min, max for each species
*/
  __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1785, __pyx_L1_error)
  __pyx_v_prod_off_arr = ((int *)malloc((__pyx_t_1 * (sizeof(int)))));

  /* "pyroxa/pybindings.pyx":1786
 * 	cdef double* prod_nu_arr = <double*>malloc(len(prod_nu) * sizeof(double))
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))             # <<<<<<<<<<<<<<
 * 	cdef double* statistics_output = <double*>malloc(N * 4 * sizeof(double))  # mean, std, min, max for each species
 * 
*/
  __pyx_v_conc0_arr = ((double *)malloc((__pyx_v_N * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1787
 * 	cdef int* prod_off_arr = <int*>malloc(len(prod_off) * sizeof(int))
 * 	cdef double* conc0_arr = <double*>malloc(N * sizeof(double))
 * 	cdef double* statistics_output = <double*>malloc(N * 4 * sizeof(double))  # mean, std, min, max for each species             # <<<<<<<<<<<<<<
 * 
 * 	try:
*/
  __pyx_v_statistics_output = ((double *)malloc(((__pyx_v_N * 4) * (sizeof(double)))));

  /* "pyroxa/pybindings.pyx":1789
 * 	cdef double* statistics_output = <double*>malloc(N * 4 * sizeof(double))  # mean, std, min, max for each species
 * 
 * 	try:             # <<<<<<<<<<<<<<
 * 		# Copy input arrays
 * 		for i in range(M):
*/
  /*try:*/ {

    /* "pyroxa/pybindings.pyx":1791
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_mean_arr[i] = kf_mean[i]
 * 			kr_mean_arr[i] = kr_mean[i]
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_4 = __pyx_builtin_range; 
    __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_M); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1791, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1791, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1791, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1791, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1791, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1791, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1));
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1791, __pyx_L4_error)
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1791, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1792
 * 		# Copy input arrays
 * 		for i in range(M):
 * 			kf_mean_arr[i] = kf_mean[i]             # <<<<<<<<<<<<<<
 * 			kr_mean_arr[i] = kr_mean[i]
 * 			kf_std_arr[i] = kf_std[i]
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_kf_mean, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1792, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1792, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1792, __pyx_L4_error)
      (__pyx_v_kf_mean_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1793
 * 		for i in range(M):
 * 			kf_mean_arr[i] = kf_mean[i]
 * 			kr_mean_arr[i] = kr_mean[i]             # <<<<<<<<<<<<<<
 * 			kf_std_arr[i] = kf_std[i]
 * 			kr_std_arr[i] = kr_std[i]
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_kr_mean, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1793, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1793, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1793, __pyx_L4_error)
      (__pyx_v_kr_mean_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1794
 * 			kf_mean_arr[i] = kf_mean[i]
 * 			kr_mean_arr[i] = kr_mean[i]
 * 			kf_std_arr[i] = kf_std[i]             # <<<<<<<<<<<<<<
 * 			kr_std_arr[i] = kr_std[i]
 * 
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_kf_std, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1794, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1794, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1794, __pyx_L4_error)
      (__pyx_v_kf_std_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1795
 * 			kr_mean_arr[i] = kr_mean[i]
 * 			kf_std_arr[i] = kf_std[i]
 * 			kr_std_arr[i] = kr_std[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(len(reac_idx)):
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_kr_std, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1795, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1795, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1795, __pyx_L4_error)
      (__pyx_v_kr_std_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1791
 * 	try:
 * 		# Copy input arrays
 * 		for i in range(M):             # <<<<<<<<<<<<<<
 * 			kf_mean_arr[i] = kf_mean[i]
 * 			kr_mean_arr[i] = kr_mean[i]
*/
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":1797
 * 			kr_std_arr[i] = kr_std[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_5 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1797, __pyx_L4_error)
    __pyx_t_3 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1797, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1797, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1797, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1797, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1797, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1797, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1));
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1797, __pyx_L4_error)
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1797, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1798
 * 
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
*/
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_reac_idx, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1798, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_4); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1798, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1798, __pyx_L4_error)
      (__pyx_v_reac_idx_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1797
 * 			kr_std_arr[i] = kr_std[i]
 * 
 * 		for i in range(len(reac_idx)):             # <<<<<<<<<<<<<<
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
*/
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":1799
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_3 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1799, __pyx_L4_error)
    __pyx_t_2 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1799, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1799, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1799, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1799, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1799, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1799, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1799, __pyx_L4_error)
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1799, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":1800
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
*/
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_reac_nu, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1800, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1800, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1800, __pyx_L4_error)
      (__pyx_v_reac_nu_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1799
 * 		for i in range(len(reac_idx)):
 * 			reac_idx_arr[i] = reac_idx[i]
 * 		for i in range(len(reac_nu)):             # <<<<<<<<<<<<<<
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
*/
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":1801
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
*/
    __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_2 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_reac_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1801, __pyx_L4_error)
    __pyx_t_4 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1801, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1801, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1801, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1801, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1801, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1801, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1));
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1801, __pyx_L4_error)
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1801, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1802
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
*/
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_reac_off, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1802, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1802, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1802, __pyx_L4_error)
      (__pyx_v_reac_off_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1801
 * 		for i in range(len(reac_nu)):
 * 			reac_nu_arr[i] = reac_nu[i]
 * 		for i in range(len(reac_off)):             # <<<<<<<<<<<<<<
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1803
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_4 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_idx); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1803, __pyx_L4_error)
    __pyx_t_5 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1803, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1803, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1803, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1803, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1803, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1803, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1));
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1803, __pyx_L4_error)
      } else {
        __pyx_t_2 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1803, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1804
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_prod_idx, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1804, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_2); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1804, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1804, __pyx_L4_error)
      (__pyx_v_prod_idx_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1803
 * 		for i in range(len(reac_off)):
 * 			reac_off_arr[i] = reac_off[i]
 * 		for i in range(len(prod_idx)):             # <<<<<<<<<<<<<<
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
*/
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyroxa/pybindings.pyx":1805
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_5 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_nu); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1805, __pyx_L4_error)
    __pyx_t_3 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1805, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1805, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1805, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1805, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1805, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1805, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1));
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1805, __pyx_L4_error)
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1805, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1806
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]             # <<<<<<<<<<<<<<
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]
*/
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_prod_nu, __pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1806, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1806, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1806, __pyx_L4_error)
      (__pyx_v_prod_nu_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1805
 * 		for i in range(len(prod_idx)):
 * 			prod_idx_arr[i] = prod_idx[i]
 * 		for i in range(len(prod_nu)):             # <<<<<<<<<<<<<<
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
*/
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyroxa/pybindings.pyx":1807
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_3 = __pyx_builtin_range; 
    __pyx_t_1 = PyObject_Length(__pyx_v_prod_off); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1807, __pyx_L4_error)
    __pyx_t_2 = PyLong_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1807, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1807, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_3 = __pyx_t_5; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1807, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1807, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1807, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1807, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
          #else
          __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1807, __pyx_L4_error)
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1807, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyroxa/pybindings.pyx":1808
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):
 * 			prod_off_arr[i] = prod_off[i]             # <<<<<<<<<<<<<<
 * 
 * 		for i in range(N):
*/
      __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_prod_off, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1808, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = __Pyx_PyLong_As_int(__pyx_t_5); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1808, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1808, __pyx_L4_error)
      (__pyx_v_prod_off_arr[__pyx_t_9]) = __pyx_t_10;

      /* "pyroxa/pybindings.pyx":1807
 * 		for i in range(len(prod_nu)):
 * 			prod_nu_arr[i] = prod_nu[i]
 * 		for i in range(len(prod_off)):             # <<<<<<<<<<<<<<
 * 			prod_off_arr[i] = prod_off[i]
 * 
*/
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pyroxa/pybindings.pyx":1810
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
*/
    __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_2 = __pyx_builtin_range; 
    __pyx_t_4 = __Pyx_PyLong_From_int(__pyx_v_N); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1810, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1810, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1810, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1810, __pyx_L4_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1810, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_1);
          ++__pyx_t_1;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1810, __pyx_L4_error)
            #endif
            if (__pyx_t_1 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1));
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_1);
          #endif
          ++__pyx_t_1;
        }
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1810, __pyx_L4_error)
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1810, __pyx_L4_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1811
 * 
 * 		for i in range(N):
 * 			conc0_arr[i] = conc0[i]             # <<<<<<<<<<<<<<
 * 
 * 		# Call original complex C++ function (18 parameters)
*/
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_conc0, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1811, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1811, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1811, __pyx_L4_error)
      (__pyx_v_conc0_arr[__pyx_t_9]) = __pyx_t_8;

      /* "pyroxa/pybindings.pyx":1810
 * 			prod_off_arr[i] = prod_off[i]
 * 
 * 		for i in range(N):             # <<<<<<<<<<<<<<
 * 			conc0_arr[i] = conc0[i]
 * 
*/
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyroxa/pybindings.pyx":1814
 * 
 * 		# Call original complex C++ function (18 parameters)
 * 		result = monte_carlo_simulation(N, M, nsamples, kf_mean_arr, kr_mean_arr,             # <<<<<<<<<<<<<<
 * 										kf_std_arr, kr_std_arr, reac_idx_arr, reac_nu_arr, reac_off_arr,
 * 										prod_idx_arr, prod_nu_arr, prod_off_arr, conc0_arr,
*/
    __pyx_v_result = monte_carlo_simulation(__pyx_v_N, __pyx_v_M, __pyx_v_nsamples, __pyx_v_kf_mean_arr, __pyx_v_kr_mean_arr, __pyx_v_kf_std_arr, __pyx_v_kr_std_arr, __pyx_v_reac_idx_arr, __pyx_v_reac_nu_arr, __pyx_v_reac_off_arr, __pyx_v_prod_idx_arr, __pyx_v_prod_nu_arr, __pyx_v_prod_off_arr, __pyx_v_conc0_arr, __pyx_v_time_span, __pyx_v_dt, __pyx_v_statistics_output, __pyx_v_nthreads);

    /* "pyroxa/pybindings.pyx":1819
 * 										time_span, dt, statistics_output, nthreads)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract statistics (mean, std, min, max for each species)
 * 			mean_list = [statistics_output[i] for i in range(N)]
*/
    __pyx_t_11 = (__pyx_v_result > 0);
    if (__pyx_t_11) {

      /* "pyroxa/pybindings.pyx":1821
 * 		if result > 0:
 * 			# Extract statistics (mean, std, min, max for each species)
 * 			mean_list = [statistics_output[i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 			std_list = [statistics_output[N + i] for i in range(N)]
 * 			min_list = [statistics_output[2*N + i] for i in range(N)]
*/
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1821, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __pyx_v_N;
        __pyx_t_12 = __pyx_t_10;
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_9genexpr43__pyx_v_i = __pyx_t_13;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_statistics_output[__pyx_9genexpr43__pyx_v_i])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1821, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1821, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_mean_list = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1822
 * 			# Extract statistics (mean, std, min, max for each species)
 * 			mean_list = [statistics_output[i] for i in range(N)]
 * 			std_list = [statistics_output[N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 			min_list = [statistics_output[2*N + i] for i in range(N)]
 * 			max_list = [statistics_output[3*N + i] for i in range(N)]
*/
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1822, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __pyx_v_N;
        __pyx_t_12 = __pyx_t_10;
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_9genexpr44__pyx_v_i = __pyx_t_13;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_statistics_output[(__pyx_v_N + __pyx_9genexpr44__pyx_v_i)])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1822, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1822, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_std_list = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1823
 * 			mean_list = [statistics_output[i] for i in range(N)]
 * 			std_list = [statistics_output[N + i] for i in range(N)]
 * 			min_list = [statistics_output[2*N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 			max_list = [statistics_output[3*N + i] for i in range(N)]
 * 
*/
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1823, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __pyx_v_N;
        __pyx_t_12 = __pyx_t_10;
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_9genexpr45__pyx_v_i = __pyx_t_13;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_statistics_output[((2 * __pyx_v_N) + __pyx_9genexpr45__pyx_v_i)])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1823, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1823, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_min_list = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1824
 * 			std_list = [statistics_output[N + i] for i in range(N)]
 * 			min_list = [statistics_output[2*N + i] for i in range(N)]
 * 			max_list = [statistics_output[3*N + i] for i in range(N)]             # <<<<<<<<<<<<<<
 * 
 * 			return {
*/
      { /* enter inner scope */
        __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1824, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __pyx_v_N;
        __pyx_t_12 = __pyx_t_10;
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_9genexpr46__pyx_v_i = __pyx_t_13;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_statistics_output[((3 * __pyx_v_N) + __pyx_9genexpr46__pyx_v_i)])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1824, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1824, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      } /* exit inner scope */
      __pyx_v_max_list = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "pyroxa/pybindings.pyx":1826
 * 			max_list = [statistics_output[3*N + i] for i in range(N)]
 * 
 * 			return {             # <<<<<<<<<<<<<<
 * 				'statistics': {
 * 					'mean': mean_list,
*/
      __Pyx_XDECREF(__pyx_r);

      /* "pyroxa/pybindings.pyx":1827
 * 
 * 			return {
 * 				'statistics': {             # <<<<<<<<<<<<<<
 * 					'mean': mean_list,
 * 					'std': std_list,
*/
      __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1827, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "pyroxa/pybindings.pyx":1828
 * 			return {
 * 				'statistics': {
 * 					'mean': mean_list,             # <<<<<<<<<<<<<<
 * 					'std': std_list,
 * 					'min': min_list,
*/
      __pyx_t_3 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1828, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_mean, __pyx_v_mean_list) < 0) __PYX_ERR(0, 1828, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1829
 * 				'statistics': {
 * 					'mean': mean_list,
 * 					'std': std_list,             # <<<<<<<<<<<<<<
 * 					'min': min_list,
 * 					'max': max_list,
*/
      if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_std, __pyx_v_std_list) < 0) __PYX_ERR(0, 1828, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1830
 * 					'mean': mean_list,
 * 					'std': std_list,
 * 					'min': min_list,             # <<<<<<<<<<<<<<
 * 					'max': max_list,
 * 					'n_samples': nsamples,
*/
      if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_min, __pyx_v_min_list) < 0) __PYX_ERR(0, 1828, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1831
 * 					'std': std_list,
 * 					'min': min_list,
 * 					'max': max_list,             # <<<<<<<<<<<<<<
 * 					'n_samples': nsamples,
 * 					'n_species': N,
*/
      if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_max, __pyx_v_max_list) < 0) __PYX_ERR(0, 1828, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1832
 * 					'min': min_list,
 * 					'max': max_list,
 * 					'n_samples': nsamples,             # <<<<<<<<<<<<<<
 * 					'n_species': N,
 * 					'n_reactions': M
*/
      __pyx_t_4 = __Pyx_PyLong_From_int(__pyx_v_nsamples); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1832, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_n_samples, __pyx_t_4) < 0) __PYX_ERR(0, 1828, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1833
 * 					'max': max_list,
 * 					'n_samples': nsamples,
 * 					'n_species': N,             # <<<<<<<<<<<<<<
 * 					'n_reactions': M
 * 				},
*/
      __pyx_t_4 = __Pyx_PyLong_From_int(__pyx_v_N); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1833, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_n_species, __pyx_t_4) < 0) __PYX_ERR(0, 1828, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyroxa/pybindings.pyx":1834
 * 					'n_samples': nsamples,
 * 					'n_species': N,
 * 					'n_reactions': M             # <<<<<<<<<<<<<<
 * 				},
 * 				'convergence': True,
*/
      __pyx_t_4 = __Pyx_PyLong_From_int(__pyx_v_M); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1834, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_n_reactions, __pyx_t_4) < 0) __PYX_ERR(0, 1828, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_statistics, __pyx_t_3) < 0) __PYX_ERR(0, 1827, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1836
 * 					'n_reactions': M
 * 				},
 * 				'convergence': True,             # <<<<<<<<<<<<<<
 * 				'nthreads': nthreads,
 * 				'success': True
*/
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_convergence, Py_True) < 0) __PYX_ERR(0, 1827, __pyx_L4_error)

      /* "pyroxa/pybindings.pyx":1837
 * 				},
 * 				'convergence': True,
 * 				'nthreads': nthreads,             # <<<<<<<<<<<<<<
 * 				'success': True
 * 			}
*/
      __pyx_t_3 = __Pyx_PyLong_From_int(__pyx_v_nthreads); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1837, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_nthreads, __pyx_t_3) < 0) __PYX_ERR(0, 1827, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyroxa/pybindings.pyx":1838
 * 				'convergence': True,
 * 				'nthreads': nthreads,
 * 				'success': True             # <<<<<<<<<<<<<<
 * 			}
 * 		else:
*/
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_success, Py_True) < 0) __PYX_ERR(0, 1827, __pyx_L4_error)
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;

      /* "pyroxa/pybindings.pyx":1819
 * 										time_span, dt, statistics_output, nthreads)
 * 
 * 		if result > 0:             # <<<<<<<<<<<<<<
 * 			# Extract statistics (mean, std, min, max for each species)
 * 			mean_list = [statistics_output[i] for i in range(N)]
*/
    }

    /* "pyroxa/pybindings.pyx":1841
 * 			}
 * 		else:
 * 			return {'success': False, 'error': 'Monte Carlo simulation failed'}             # <<<<<<<<<<<<<<
 * 	finally:
 * 		free(kf_mean_arr)
*/
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1841, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_success, Py_False) < 0) __PYX_ERR(0, 1841, __pyx_L4_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_error, __pyx_mstate_global->__pyx_kp_u_Monte_Carlo_simulation_failed) < 0) __PYX_ERR(0, 1841, __pyx_L4_error)
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L3_return;
    }
  }

  /* "pyroxa/pybindings.pyx":1843
 * 			return {'success': False, 'error': 'Monte Carlo simulation failed'}
 * 	finally:
 * 		free(kf_mean_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_mean_arr)
 * 		free(kf_std_arr)
*/
  /*finally:*/ {
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
      if ( unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __pyx_t_10 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
      {
        free(__pyx_v_kf_mean_arr);

        /* "pyroxa/pybindings.pyx":1844
 * 	finally:
 * 		free(kf_mean_arr)
 * 		free(kr_mean_arr)             # <<<<<<<<<<<<<<
 * 		free(kf_std_arr)
 * 		free(kr_std_arr)
*/
        free(__pyx_v_kr_mean_arr);

        /* "pyroxa/pybindings.pyx":1845
 * 		free(kf_mean_arr)
 * 		free(kr_mean_arr)
 * 		free(kf_std_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_std_arr)
 * 		free(reac_idx_arr)
*/
        free(__pyx_v_kf_std_arr);

        /* "pyroxa/pybindings.pyx":1846
 * 		free(kr_mean_arr)
 * 		free(kf_std_arr)
 * 		free(kr_std_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
*/
        free(__pyx_v_kr_std_arr);

        /* "pyroxa/pybindings.pyx":1847
 * 		free(kf_std_arr)
 * 		free(kr_std_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
*/
        free(__pyx_v_reac_idx_arr);

        /* "pyroxa/pybindings.pyx":1848
 * 		free(kr_std_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
*/
        free(__pyx_v_reac_nu_arr);

        /* "pyroxa/pybindings.pyx":1849
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
*/
        free(__pyx_v_reac_off_arr);

        /* "pyroxa/pybindings.pyx":1850
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
*/
        free(__pyx_v_prod_idx_arr);

        /* "pyroxa/pybindings.pyx":1851
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
*/
        free(__pyx_v_prod_nu_arr);

        /* "pyroxa/pybindings.pyx":1852
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(statistics_output)
*/
        free(__pyx_v_prod_off_arr);

        /* "pyroxa/pybindings.pyx":1853
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(statistics_output)
 * 
*/
        free(__pyx_v_conc0_arr);

        /* "pyroxa/pybindings.pyx":1854
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(statistics_output)             # <<<<<<<<<<<<<<
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):
*/
        free(__pyx_v_statistics_output);
      }
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_XGIVEREF(__pyx_t_20);
      __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_14;
      goto __pyx_L1_error;
    }
    __pyx_L3_return: {
      __pyx_t_20 = __pyx_r;
      __pyx_r = 0;

      /* "pyroxa/pybindings.pyx":1843
 * 			return {'success': False, 'error': 'Monte Carlo simulation failed'}
 * 	finally:
 * 		free(kf_mean_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_mean_arr)
 * 		free(kf_std_arr)
*/
      free(__pyx_v_kf_mean_arr);

      /* "pyroxa/pybindings.pyx":1844
 * 	finally:
 * 		free(kf_mean_arr)
 * 		free(kr_mean_arr)             # <<<<<<<<<<<<<<
 * 		free(kf_std_arr)
 * 		free(kr_std_arr)
*/
      free(__pyx_v_kr_mean_arr);

      /* "pyroxa/pybindings.pyx":1845
 * 		free(kf_mean_arr)
 * 		free(kr_mean_arr)
 * 		free(kf_std_arr)             # <<<<<<<<<<<<<<
 * 		free(kr_std_arr)
 * 		free(reac_idx_arr)
*/
      free(__pyx_v_kf_std_arr);

      /* "pyroxa/pybindings.pyx":1846
 * 		free(kr_mean_arr)
 * 		free(kf_std_arr)
 * 		free(kr_std_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
*/
      free(__pyx_v_kr_std_arr);

      /* "pyroxa/pybindings.pyx":1847
 * 		free(kf_std_arr)
 * 		free(kr_std_arr)
 * 		free(reac_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
*/
      free(__pyx_v_reac_idx_arr);

      /* "pyroxa/pybindings.pyx":1848
 * 		free(kr_std_arr)
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
*/
      free(__pyx_v_reac_nu_arr);

      /* "pyroxa/pybindings.pyx":1849
 * 		free(reac_idx_arr)
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
*/
      free(__pyx_v_reac_off_arr);

      /* "pyroxa/pybindings.pyx":1850
 * 		free(reac_nu_arr)
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
*/
      free(__pyx_v_prod_idx_arr);

      /* "pyroxa/pybindings.pyx":1851
 * 		free(reac_off_arr)
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)             # <<<<<<<<<<<<<<
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
*/
      free(__pyx_v_prod_nu_arr);

      /* "pyroxa/pybindings.pyx":1852
 * 		free(prod_idx_arr)
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)             # <<<<<<<<<<<<<<
 * 		free(conc0_arr)
 * 		free(statistics_output)
*/
      free(__pyx_v_prod_off_arr);

      /* "pyroxa/pybindings.pyx":1853
 * 		free(prod_nu_arr)
 * 		free(prod_off_arr)
 * 		free(conc0_arr)             # <<<<<<<<<<<<<<
 * 		free(statistics_output)
 * 
*/
      free(__pyx_v_conc0_arr);

      /* "pyroxa/pybindings.pyx":1854
 * 		free(prod_off_arr)
 * 		free(conc0_arr)
 * 		free(statistics_output)             # <<<<<<<<<<<<<<
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):
*/
      free(__pyx_v_statistics_output);
      __pyx_r = __pyx_t_20;
      __pyx_t_20 = 0;
      goto __pyx_L0;
    }
  }

  /* "pyroxa/pybindings.pyx":1770
 * 		free(cp_arr)
 * 
 * def py_monte_carlo_simulation(int N, int M, int nsamples, kf_mean, kr_mean, kf_std, kr_std,             # <<<<<<<<<<<<<<
 * 							  reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off,
 * 							  conc0, double time_span, double dt, int nthreads=1):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyroxa._pybindings.py_monte_carlo_simulation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_mean_list);
  __Pyx_XDECREF(__pyx_v_std_list);
  __Pyx_XDECREF(__pyx_v_min_list);
  __Pyx_XDECREF(__pyx_v_max_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1856
 * 		free(statistics_output)
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):             # <<<<<<<<<<<<<<
 * 	"""Calculate residence time distribution for tank series"""
 * 	import numpy as np
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_117py_residence_time_distribution(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_116py_residence_time_distribution, "py_residence_time_distribution(flow_rates, volumes, n_tanks)\n\nCalculate residence time distribution for tank series");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_117py_residence_time_distribution = {"py_residence_time_distribution", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_117py_residence_time_distribution, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_116py_residence_time_distribution};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_117py_residence_time_distribution(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_flow_rates = 0;
  PyObject *__pyx_v_volumes = 0;
  PyObject *__pyx_v_n_tanks = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_residence_time_distribution (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_flow_rates,&__pyx_mstate_global->__pyx_n_u_volumes,&__pyx_mstate_global->__pyx_n_u_n_tanks,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1856, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1856, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1856, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1856, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_residence_time_distribution", 0) < 0) __PYX_ERR(0, 1856, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_residence_time_distribution", 1, 3, 3, i); __PYX_ERR(0, 1856, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1856, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1856, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1856, __pyx_L3_error)
    }
    __pyx_v_flow_rates = values[0];
    __pyx_v_volumes = values[1];
    __pyx_v_n_tanks = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_residence_time_distribution", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1856, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_residence_time_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_116py_residence_time_distribution(__pyx_self, __pyx_v_flow_rates, __pyx_v_volumes, __pyx_v_n_tanks);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyroxa/pybindings.pyx":1870
 * 
 * 	# Overall mean residence time
 * 	total_volume = sum(volumes[i] for i in range(n_tanks))             # <<<<<<<<<<<<<<
 * 	total_flow = sum(flow_rates[i] for i in range(n_tanks))
 * 	overall_mean_tau = total_volume / total_flow if total_flow > 0 else 0.0
*/

static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_genexpr(PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr(__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1870, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_2generator2, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[2]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_genexpr, __pyx_mstate_global->__pyx_n_u_py_residence_time_distribution_l, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings); if (unlikely(!gen)) __PYX_ERR(0, 1870, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_residence_time_distribution.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_2generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(__pyx_sent_value != Py_None)) {
    if (unlikely(__pyx_sent_value)) PyErr_SetString(PyExc_TypeError, "can't send non-None value to a just-started generator");
    __PYX_ERR(0, 1870, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 1870, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_genexpr_arg_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1870, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1870, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_2);
        ++__pyx_t_2;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1870, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2));
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2);
        #endif
        ++__pyx_t_2;
      }
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1870, __pyx_L1_error)
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1870, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_volumes)) { __Pyx_RaiseClosureNameError("volumes"); __PYX_ERR(0, 1870, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_volumes, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1870, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  if (__Pyx_PyErr_Occurred()) {
    __Pyx_Generator_Replace_StopIteration(0);
    __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_5generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyroxa/pybindings.pyx":1871
 * 	# Overall mean residence time
 * 	total_volume = sum(volumes[i] for i in range(n_tanks))
 * 	total_flow = sum(flow_rates[i] for i in range(n_tanks))             # <<<<<<<<<<<<<<
 * 	overall_mean_tau = total_volume / total_flow if total_flow > 0 else 0.0
 * 
*/

static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_3genexpr(PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr(__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1871, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_5generator3, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[3]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_genexpr, __pyx_mstate_global->__pyx_n_u_py_residence_time_distribution_l, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings); if (unlikely(!gen)) __PYX_ERR(0, 1871, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_residence_time_distribution.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_5generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(__pyx_sent_value != Py_None)) {
    if (unlikely(__pyx_sent_value)) PyErr_SetString(PyExc_TypeError, "can't send non-None value to a just-started generator");
    __PYX_ERR(0, 1871, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 1871, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_genexpr_arg_0)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_genexpr_arg_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1871, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1871, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_2);
        ++__pyx_t_2;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1871, __pyx_L1_error)
          #endif
          if (__pyx_t_2 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2));
        #else
        __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_2);
        #endif
        ++__pyx_t_2;
      }
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1871, __pyx_L1_error)
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1871, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_flow_rates)) { __Pyx_RaiseClosureNameError("flow_rates"); __PYX_ERR(0, 1871, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_flow_rates, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1871, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  if (__Pyx_PyErr_Occurred()) {
    __Pyx_Generator_Replace_StopIteration(0);
    __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_8generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pyroxa/pybindings.pyx":1875
 * 
 * 	# Calculate variance (assuming CSTR in series)
 * 	variance = sum(tau**2 for tau in mean_residence_times)             # <<<<<<<<<<<<<<
 * 
 * 	return {
*/

static PyObject *__pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_6genexpr(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr(__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1875, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_genexpr_arg_0);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_8generator4, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[4]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_genexpr, __pyx_mstate_global->__pyx_n_u_py_residence_time_distribution_l, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings); if (unlikely(!gen)) __PYX_ERR(0, 1875, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyroxa._pybindings.py_residence_time_distribution.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_8generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(__pyx_sent_value != Py_None)) {
    if (unlikely(__pyx_sent_value)) PyErr_SetString(PyExc_TypeError, "can't send non-None value to a just-started generator");
    __PYX_ERR(0, 1875, __pyx_L1_error)
  }
  if (unlikely(!__pyx_cur_scope->__pyx_genexpr_arg_0)) { __Pyx_RaiseUnboundLocalError(".0"); __PYX_ERR(0, 1875, __pyx_L1_error) }
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1875, __pyx_L1_error)
      #endif
      if (__pyx_t_2 >= __pyx_temp) break;
    }
    __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_2);
    ++__pyx_t_2;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1875, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tau);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tau, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Power(__pyx_cur_scope->__pyx_v_tau, __pyx_mstate_global->__pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1875, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1875, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  if (__Pyx_PyErr_Occurred()) {
    __Pyx_Generator_Replace_StopIteration(0);
    __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1856
 * 		free(statistics_output)
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):             # <<<<<<<<<<<<<<
 * 	"""Calculate residence time distribution for tank series"""
 * 	import numpy as np
*/

static PyObject *__pyx_pf_6pyroxa_11_pybindings_116py_residence_time_distribution(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_flow_rates, PyObject *__pyx_v_volumes, PyObject *__pyx_v_n_tanks) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *__pyx_cur_scope;
  CYTHON_UNUSED PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_mean_residence_times = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_tau = NULL;
  PyObject *__pyx_v_total_volume = NULL;
  PyObject *__pyx_v_total_flow = NULL;
  PyObject *__pyx_v_overall_mean_tau = NULL;
  PyObject *__pyx_v_variance = NULL;
  PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_2generator2 = 0;
  PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_5generator3 = 0;
  PyObject *__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_8generator4 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_residence_time_distribution", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution(__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1856, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_flow_rates = __pyx_v_flow_rates;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_flow_rates);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_flow_rates);
  __pyx_cur_scope->__pyx_v_volumes = __pyx_v_volumes;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_volumes);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_volumes);

  /* "pyroxa/pybindings.pyx":1858
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):
 * 	"""Calculate residence time distribution for tank series"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 	# Calculate mean residence time for each tank
*/
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_numpy, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1861
 * 
 * 	# Calculate mean residence time for each tank
 * 	mean_residence_times = []             # <<<<<<<<<<<<<<
 * 	for i in range(n_tanks):
 * 		if flow_rates[i] > 0:
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mean_residence_times = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1862
 * 	# Calculate mean residence time for each tank
 * 	mean_residence_times = []
 * 	for i in range(n_tanks):             # <<<<<<<<<<<<<<
 * 		if flow_rates[i] > 0:
 * 			tau = volumes[i] / flow_rates[i]
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF(__pyx_builtin_range);
  __pyx_t_3 = __pyx_builtin_range; 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_n_tanks};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1862, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1862, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_5);
        ++__pyx_t_5;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1862, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5));
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_5);
        #endif
        ++__pyx_t_5;
      }
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1862, __pyx_L1_error)
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1862, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyroxa/pybindings.pyx":1863
 * 	mean_residence_times = []
 * 	for i in range(n_tanks):
 * 		if flow_rates[i] > 0:             # <<<<<<<<<<<<<<
 * 			tau = volumes[i] / flow_rates[i]
 * 		else:
*/
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_flow_rates, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1863, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1863, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_7) {

      /* "pyroxa/pybindings.pyx":1864
 * 	for i in range(n_tanks):
 * 		if flow_rates[i] > 0:
 * 			tau = volumes[i] / flow_rates[i]             # <<<<<<<<<<<<<<
 * 		else:
 * 			tau = 0.0
*/
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_volumes, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_cur_scope->__pyx_v_flow_rates, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_tau, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "pyroxa/pybindings.pyx":1863
 * 	mean_residence_times = []
 * 	for i in range(n_tanks):
 * 		if flow_rates[i] > 0:             # <<<<<<<<<<<<<<
 * 			tau = volumes[i] / flow_rates[i]
 * 		else:
*/
      goto __pyx_L5;
    }

    /* "pyroxa/pybindings.pyx":1866
 * 			tau = volumes[i] / flow_rates[i]
 * 		else:
 * 			tau = 0.0             # <<<<<<<<<<<<<<
 * 		mean_residence_times.append(tau)
 * 
*/
    /*else*/ {
      __Pyx_INCREF(__pyx_mstate_global->__pyx_float_0_0);
      __Pyx_XDECREF_SET(__pyx_v_tau, __pyx_mstate_global->__pyx_float_0_0);
    }
    __pyx_L5:;

    /* "pyroxa/pybindings.pyx":1867
 * 		else:
 * 			tau = 0.0
 * 		mean_residence_times.append(tau)             # <<<<<<<<<<<<<<
 * 
 * 	# Overall mean residence time
*/
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_mean_residence_times, __pyx_v_tau); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 1867, __pyx_L1_error)

    /* "pyroxa/pybindings.pyx":1862
 * 	# Calculate mean residence time for each tank
 * 	mean_residence_times = []
 * 	for i in range(n_tanks):             # <<<<<<<<<<<<<<
 * 		if flow_rates[i] > 0:
 * 			tau = volumes[i] / flow_rates[i]
*/
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":1870
 * 
 * 	# Overall mean residence time
 * 	total_volume = sum(volumes[i] for i in range(n_tanks))             # <<<<<<<<<<<<<<
 * 	total_flow = sum(flow_rates[i] for i in range(n_tanks))
 * 	overall_mean_tau = total_volume / total_flow if total_flow > 0 else 0.0
*/
  __pyx_t_8 = NULL;
  __Pyx_INCREF(__pyx_builtin_sum);
  __pyx_t_1 = __pyx_builtin_sum; 
  __pyx_t_10 = NULL;
  __Pyx_INCREF(__pyx_builtin_range);
  __pyx_t_11 = __pyx_builtin_range; 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_v_n_tanks};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_t_11 = __pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_genexpr(((PyObject*)__pyx_cur_scope), __pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_11};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_v_total_volume = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":1871
 * 	# Overall mean residence time
 * 	total_volume = sum(volumes[i] for i in range(n_tanks))
 * 	total_flow = sum(flow_rates[i] for i in range(n_tanks))             # <<<<<<<<<<<<<<
 * 	overall_mean_tau = total_volume / total_flow if total_flow > 0 else 0.0
 * 
*/
  __pyx_t_1 = NULL;
  __Pyx_INCREF(__pyx_builtin_sum);
  __pyx_t_11 = __pyx_builtin_sum; 
  __pyx_t_2 = NULL;
  __Pyx_INCREF(__pyx_builtin_range);
  __pyx_t_10 = __pyx_builtin_range; 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_n_tanks};
    __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
  }
  __pyx_t_10 = __pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_3genexpr(((PyObject*)__pyx_cur_scope), __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_10};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_v_total_flow = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":1872
 * 	total_volume = sum(volumes[i] for i in range(n_tanks))
 * 	total_flow = sum(flow_rates[i] for i in range(n_tanks))
 * 	overall_mean_tau = total_volume / total_flow if total_flow > 0 else 0.0             # <<<<<<<<<<<<<<
 * 
 * 	# Calculate variance (assuming CSTR in series)
*/
  __pyx_t_11 = PyObject_RichCompare(__pyx_v_total_flow, __pyx_mstate_global->__pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1872, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1872, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (__pyx_t_7) {
    __pyx_t_11 = __Pyx_PyNumber_Divide(__pyx_v_total_volume, __pyx_v_total_flow); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1872, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_3 = __pyx_t_11;
    __pyx_t_11 = 0;
  } else {
    __Pyx_INCREF(__pyx_mstate_global->__pyx_float_0_0);
    __pyx_t_3 = __pyx_mstate_global->__pyx_float_0_0;
  }
  __pyx_v_overall_mean_tau = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":1875
 * 
 * 	# Calculate variance (assuming CSTR in series)
 * 	variance = sum(tau**2 for tau in mean_residence_times)             # <<<<<<<<<<<<<<
 * 
 * 	return {
*/
  __pyx_t_11 = NULL;
  __Pyx_INCREF(__pyx_builtin_sum);
  __pyx_t_10 = __pyx_builtin_sum; 
  __pyx_t_1 = __pyx_pf_6pyroxa_11_pybindings_30py_residence_time_distribution_6genexpr(NULL, __pyx_v_mean_residence_times); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_1};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1875, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_v_variance = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":1877
 * 	variance = sum(tau**2 for tau in mean_residence_times)
 * 
 * 	return {             # <<<<<<<<<<<<<<
 * 		'mean_residence_time': overall_mean_tau,
 * 		'variance': variance,
*/
  __Pyx_XDECREF(__pyx_r);

  /* "pyroxa/pybindings.pyx":1878
 * 
 * 	return {
 * 		'mean_residence_time': overall_mean_tau,             # <<<<<<<<<<<<<<
 * 		'variance': variance,
 * 		'tank_residence_times': mean_residence_times,
*/
  __pyx_t_3 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_mean_residence_time, __pyx_v_overall_mean_tau) < 0) __PYX_ERR(0, 1878, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1879
 * 	return {
 * 		'mean_residence_time': overall_mean_tau,
 * 		'variance': variance,             # <<<<<<<<<<<<<<
 * 		'tank_residence_times': mean_residence_times,
 * 		'dimensionless_variance': variance / (overall_mean_tau**2) if overall_mean_tau > 0 else 0.0,
*/
  if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_variance, __pyx_v_variance) < 0) __PYX_ERR(0, 1878, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1880
 * 		'mean_residence_time': overall_mean_tau,
 * 		'variance': variance,
 * 		'tank_residence_times': mean_residence_times,             # <<<<<<<<<<<<<<
 * 		'dimensionless_variance': variance / (overall_mean_tau**2) if overall_mean_tau > 0 else 0.0,
 * 		'success': True
*/
  if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_tank_residence_times, __pyx_v_mean_residence_times) < 0) __PYX_ERR(0, 1878, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1881
 * 		'variance': variance,
 * 		'tank_residence_times': mean_residence_times,
 * 		'dimensionless_variance': variance / (overall_mean_tau**2) if overall_mean_tau > 0 else 0.0,             # <<<<<<<<<<<<<<
 * 		'success': True
 * 	}
*/
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_overall_mean_tau, __pyx_mstate_global->__pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1881, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1881, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {
    __pyx_t_1 = PyNumber_Power(__pyx_v_overall_mean_tau, __pyx_mstate_global->__pyx_int_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1881, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyNumber_Divide(__pyx_v_variance, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1881, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_t_11;
    __pyx_t_11 = 0;
  } else {
    __Pyx_INCREF(__pyx_mstate_global->__pyx_float_0_0);
    __pyx_t_10 = __pyx_mstate_global->__pyx_float_0_0;
  }
  if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_dimensionless_variance, __pyx_t_10) < 0) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "pyroxa/pybindings.pyx":1882
 * 		'tank_residence_times': mean_residence_times,
 * 		'dimensionless_variance': variance / (overall_mean_tau**2) if overall_mean_tau > 0 else 0.0,
 * 		'success': True             # <<<<<<<<<<<<<<
 * 	}
 * 
*/
  if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_success, Py_True) < 0) __PYX_ERR(0, 1878, __pyx_L1_error)
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":1856
 * 		free(statistics_output)
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):             # <<<<<<<<<<<<<<
 * 	"""Calculate residence time distribution for tank series"""
 * 	import numpy as np
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyroxa._pybindings.py_residence_time_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_mean_residence_times);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_tau);
  __Pyx_XDECREF(__pyx_v_total_volume);
  __Pyx_XDECREF(__pyx_v_total_flow);
  __Pyx_XDECREF(__pyx_v_overall_mean_tau);
  __Pyx_XDECREF(__pyx_v_variance);
  __Pyx_XDECREF(__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_2generator2);
  __Pyx_XDECREF(__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_5generator3);
  __Pyx_XDECREF(__pyx_gb_6pyroxa_11_pybindings_30py_residence_time_distribution_8generator4);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1886
 * 
 * # BATCH 14: Final functions
 * def py_catalyst_deactivation_model(initial_activity, deactivation_constant, time, temperature, partial_pressure_poison):             # <<<<<<<<<<<<<<
 * 	"""Model catalyst deactivation over time"""
 * 	import numpy as np
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_119py_catalyst_deactivation_model(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_118py_catalyst_deactivation_model, "py_catalyst_deactivation_model(initial_activity, deactivation_constant, time, temperature, partial_pressure_poison)\n\nModel catalyst deactivation over time");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_119py_catalyst_deactivation_model = {"py_catalyst_deactivation_model", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_119py_catalyst_deactivation_model, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_118py_catalyst_deactivation_model};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_119py_catalyst_deactivation_model(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_initial_activity = 0;
  PyObject *__pyx_v_deactivation_constant = 0;
  PyObject *__pyx_v_time = 0;
  PyObject *__pyx_v_temperature = 0;
  PyObject *__pyx_v_partial_pressure_poison = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_catalyst_deactivation_model (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_initial_activity,&__pyx_mstate_global->__pyx_n_u_deactivation_constant,&__pyx_mstate_global->__pyx_n_u_time,&__pyx_mstate_global->__pyx_n_u_temperature,&__pyx_mstate_global->__pyx_n_u_partial_pressure_poison,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1886, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1886, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1886, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1886, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1886, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1886, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_catalyst_deactivation_model", 0) < 0) __PYX_ERR(0, 1886, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 5; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_catalyst_deactivation_model", 1, 5, 5, i); __PYX_ERR(0, 1886, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1886, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1886, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1886, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1886, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1886, __pyx_L3_error)
    }
    __pyx_v_initial_activity = values[0];
    __pyx_v_deactivation_constant = values[1];
    __pyx_v_time = values[2];
    __pyx_v_temperature = values[3];
    __pyx_v_partial_pressure_poison = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_catalyst_deactivation_model", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 1886, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_catalyst_deactivation_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_118py_catalyst_deactivation_model(__pyx_self, __pyx_v_initial_activity, __pyx_v_deactivation_constant, __pyx_v_time, __pyx_v_temperature, __pyx_v_partial_pressure_poison);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_118py_catalyst_deactivation_model(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_initial_activity, PyObject *__pyx_v_deactivation_constant, PyObject *__pyx_v_time, PyObject *__pyx_v_temperature, PyObject *__pyx_v_partial_pressure_poison) {
  PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_temp_factor = NULL;
  PyObject *__pyx_v_poison_factor = NULL;
  PyObject *__pyx_v_effective_kd = NULL;
  PyObject *__pyx_v_current_activity = NULL;
  PyObject *__pyx_v_deactivation_rate = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_catalyst_deactivation_model", 0);

  /* "pyroxa/pybindings.pyx":1888
 * def py_catalyst_deactivation_model(initial_activity, deactivation_constant, time, temperature, partial_pressure_poison):
 * 	"""Model catalyst deactivation over time"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 	# Exponential deactivation model
*/
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_numpy, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1894
 * 
 * 	# Temperature dependency (Arrhenius-type)
 * 	temp_factor = np.exp(-5000 / (8.314 * temperature))  # Simple activation energy             # <<<<<<<<<<<<<<
 * 
 * 	# Poison partial pressure effect
*/
  __pyx_t_2 = __pyx_v_np;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_mstate_global->__pyx_float_8_314, __pyx_v_temperature); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_mstate_global->__pyx_int_neg_5000, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_exp, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_temp_factor = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1897
 * 
 * 	# Poison partial pressure effect
 * 	poison_factor = 1 + 10 * partial_pressure_poison             # <<<<<<<<<<<<<<
 * 
 * 	# Overall deactivation
*/
  __pyx_t_1 = __Pyx_PyLong_MultiplyCObj(__pyx_mstate_global->__pyx_int_10, __pyx_v_partial_pressure_poison, 10, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyLong_AddCObj(__pyx_mstate_global->__pyx_int_1, __pyx_t_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_poison_factor = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "pyroxa/pybindings.pyx":1900
 * 
 * 	# Overall deactivation
 * 	effective_kd = deactivation_constant * temp_factor * poison_factor             # <<<<<<<<<<<<<<
 * 	current_activity = initial_activity * np.exp(-effective_kd * time)
 * 
*/
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_deactivation_constant, __pyx_v_temp_factor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_4, __pyx_v_poison_factor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_effective_kd = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1901
 * 	# Overall deactivation
 * 	effective_kd = deactivation_constant * temp_factor * poison_factor
 * 	current_activity = initial_activity * np.exp(-effective_kd * time)             # <<<<<<<<<<<<<<
 * 
 * 	# Deactivation rate
*/
  __pyx_t_4 = __pyx_v_np;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_2 = PyNumber_Negative(__pyx_v_effective_kd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_exp, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_initial_activity, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_current_activity = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":1904
 * 
 * 	# Deactivation rate
 * 	deactivation_rate = -effective_kd * current_activity             # <<<<<<<<<<<<<<
 * 
 * 	return {
*/
  __pyx_t_3 = PyNumber_Negative(__pyx_v_effective_kd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_v_current_activity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_deactivation_rate = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1906
 * 	deactivation_rate = -effective_kd * current_activity
 * 
 * 	return {             # <<<<<<<<<<<<<<
 * 		'current_activity': current_activity,
 * 		'deactivation_rate': deactivation_rate,
*/
  __Pyx_XDECREF(__pyx_r);

  /* "pyroxa/pybindings.pyx":1907
 * 
 * 	return {
 * 		'current_activity': current_activity,             # <<<<<<<<<<<<<<
 * 		'deactivation_rate': deactivation_rate,
 * 		'remaining_lifetime': -np.log(0.1) / effective_kd,  # Time to 10% activity
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_current_activity, __pyx_v_current_activity) < 0) __PYX_ERR(0, 1907, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1908
 * 	return {
 * 		'current_activity': current_activity,
 * 		'deactivation_rate': deactivation_rate,             # <<<<<<<<<<<<<<
 * 		'remaining_lifetime': -np.log(0.1) / effective_kd,  # Time to 10% activity
 * 		'temperature_factor': temp_factor,
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_deactivation_rate, __pyx_v_deactivation_rate) < 0) __PYX_ERR(0, 1907, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1909
 * 		'current_activity': current_activity,
 * 		'deactivation_rate': deactivation_rate,
 * 		'remaining_lifetime': -np.log(0.1) / effective_kd,  # Time to 10% activity             # <<<<<<<<<<<<<<
 * 		'temperature_factor': temp_factor,
 * 		'poison_factor': poison_factor,
*/
  __pyx_t_4 = __pyx_v_np;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_float_0_1};
    __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_log, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_t_4 = PyNumber_Negative(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_effective_kd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_remaining_lifetime, __pyx_t_3) < 0) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyroxa/pybindings.pyx":1910
 * 		'deactivation_rate': deactivation_rate,
 * 		'remaining_lifetime': -np.log(0.1) / effective_kd,  # Time to 10% activity
 * 		'temperature_factor': temp_factor,             # <<<<<<<<<<<<<<
 * 		'poison_factor': poison_factor,
 * 		'success': True
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_temperature_factor, __pyx_v_temp_factor) < 0) __PYX_ERR(0, 1907, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1911
 * 		'remaining_lifetime': -np.log(0.1) / effective_kd,  # Time to 10% activity
 * 		'temperature_factor': temp_factor,
 * 		'poison_factor': poison_factor,             # <<<<<<<<<<<<<<
 * 		'success': True
 * 	}
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_poison_factor, __pyx_v_poison_factor) < 0) __PYX_ERR(0, 1907, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1912
 * 		'temperature_factor': temp_factor,
 * 		'poison_factor': poison_factor,
 * 		'success': True             # <<<<<<<<<<<<<<
 * 	}
 * 
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_success, Py_True) < 0) __PYX_ERR(0, 1907, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":1886
 * 
 * # BATCH 14: Final functions
 * def py_catalyst_deactivation_model(initial_activity, deactivation_constant, time, temperature, partial_pressure_poison):             # <<<<<<<<<<<<<<
 * 	"""Model catalyst deactivation over time"""
 * 	import numpy as np
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyroxa._pybindings.py_catalyst_deactivation_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_temp_factor);
  __Pyx_XDECREF(__pyx_v_poison_factor);
  __Pyx_XDECREF(__pyx_v_effective_kd);
  __Pyx_XDECREF(__pyx_v_current_activity);
  __Pyx_XDECREF(__pyx_v_deactivation_rate);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyroxa/pybindings.pyx":1915
 * 	}
 * 
 * def py_process_scale_up(lab_scale_volume, pilot_scale_volume, lab_conditions):             # <<<<<<<<<<<<<<
 * 	"""Scale up process from lab to pilot scale"""
 * 	import numpy as np
*/

/* Python wrapper */
static PyObject *__pyx_pw_6pyroxa_11_pybindings_121py_process_scale_up(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_6pyroxa_11_pybindings_120py_process_scale_up, "py_process_scale_up(lab_scale_volume, pilot_scale_volume, lab_conditions)\n\nScale up process from lab to pilot scale");
static PyMethodDef __pyx_mdef_6pyroxa_11_pybindings_121py_process_scale_up = {"py_process_scale_up", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_121py_process_scale_up, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_120py_process_scale_up};
static PyObject *__pyx_pw_6pyroxa_11_pybindings_121py_process_scale_up(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_lab_scale_volume = 0;
  PyObject *__pyx_v_pilot_scale_volume = 0;
  PyObject *__pyx_v_lab_conditions = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("py_process_scale_up (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_lab_scale_volume,&__pyx_mstate_global->__pyx_n_u_pilot_scale_volume,&__pyx_mstate_global->__pyx_n_u_lab_conditions,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1915, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1915, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1915, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1915, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "py_process_scale_up", 0) < 0) __PYX_ERR(0, 1915, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("py_process_scale_up", 1, 3, 3, i); __PYX_ERR(0, 1915, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1915, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1915, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1915, __pyx_L3_error)
    }
    __pyx_v_lab_scale_volume = values[0];
    __pyx_v_pilot_scale_volume = values[1];
    __pyx_v_lab_conditions = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("py_process_scale_up", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1915, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("pyroxa._pybindings.py_process_scale_up", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyroxa_11_pybindings_120py_process_scale_up(__pyx_self, __pyx_v_lab_scale_volume, __pyx_v_pilot_scale_volume, __pyx_v_lab_conditions);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyroxa_11_pybindings_120py_process_scale_up(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lab_scale_volume, PyObject *__pyx_v_pilot_scale_volume, PyObject *__pyx_v_lab_conditions) {
  CYTHON_UNUSED PyObject *__pyx_v_np = NULL;
  PyObject *__pyx_v_scale_factor = NULL;
  PyObject *__pyx_v_length_scale = NULL;
  PyObject *__pyx_v_area_scale = NULL;
  PyObject *__pyx_v_pilot_conditions = NULL;
  PyObject *__pyx_v_power_scale = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_process_scale_up", 0);

  /* "pyroxa/pybindings.pyx":1917
 * def py_process_scale_up(lab_scale_volume, pilot_scale_volume, lab_conditions):
 * 	"""Scale up process from lab to pilot scale"""
 * 	import numpy as np             # <<<<<<<<<<<<<<
 * 
 * 	# Scale-up factor
*/
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_numpy, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_np = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1920
 * 
 * 	# Scale-up factor
 * 	scale_factor = pilot_scale_volume / lab_scale_volume             # <<<<<<<<<<<<<<
 * 
 * 	# Geometric scaling (maintaining similar ratios)
*/
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_pilot_scale_volume, __pyx_v_lab_scale_volume); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_scale_factor = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1923
 * 
 * 	# Geometric scaling (maintaining similar ratios)
 * 	length_scale = scale_factor**(1/3)  # Cubic root for volume scaling             # <<<<<<<<<<<<<<
 * 	area_scale = scale_factor**(2/3)   # Surface area scaling
 * 
*/
  __pyx_t_1 = __Pyx_PyLong_From_long((1 / 3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Power(__pyx_v_scale_factor, __pyx_t_1, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_length_scale = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1924
 * 	# Geometric scaling (maintaining similar ratios)
 * 	length_scale = scale_factor**(1/3)  # Cubic root for volume scaling
 * 	area_scale = scale_factor**(2/3)   # Surface area scaling             # <<<<<<<<<<<<<<
 * 
 * 	# Scale process conditions
*/
  __pyx_t_2 = __Pyx_PyLong_From_long((2 / 3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Power(__pyx_v_scale_factor, __pyx_t_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_area_scale = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1927
 * 
 * 	# Scale process conditions
 * 	pilot_conditions = {}             # <<<<<<<<<<<<<<
 * 
 * 	# Flow rate scales with volume
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pilot_conditions = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1930
 * 
 * 	# Flow rate scales with volume
 * 	pilot_conditions['flow_rate'] = lab_conditions['flow_rate'] * scale_factor             # <<<<<<<<<<<<<<
 * 
 * 	# Temperature and pressure remain the same
*/
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_lab_conditions, __pyx_mstate_global->__pyx_n_u_flow_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_scale_factor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely((PyDict_SetItem(__pyx_v_pilot_conditions, __pyx_mstate_global->__pyx_n_u_flow_rate, __pyx_t_2) < 0))) __PYX_ERR(0, 1930, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1933
 * 
 * 	# Temperature and pressure remain the same
 * 	pilot_conditions['temperature'] = lab_conditions['temperature']             # <<<<<<<<<<<<<<
 * 	pilot_conditions['pressure'] = lab_conditions['pressure']
 * 
*/
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_lab_conditions, __pyx_mstate_global->__pyx_n_u_temperature); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1933, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely((PyDict_SetItem(__pyx_v_pilot_conditions, __pyx_mstate_global->__pyx_n_u_temperature, __pyx_t_2) < 0))) __PYX_ERR(0, 1933, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1934
 * 	# Temperature and pressure remain the same
 * 	pilot_conditions['temperature'] = lab_conditions['temperature']
 * 	pilot_conditions['pressure'] = lab_conditions['pressure']             # <<<<<<<<<<<<<<
 * 
 * 	# Heat transfer coefficient decreases with scale (surface/volume effect)
*/
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_lab_conditions, __pyx_mstate_global->__pyx_n_u_pressure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely((PyDict_SetItem(__pyx_v_pilot_conditions, __pyx_mstate_global->__pyx_n_u_pressure, __pyx_t_2) < 0))) __PYX_ERR(0, 1934, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1937
 * 
 * 	# Heat transfer coefficient decreases with scale (surface/volume effect)
 * 	pilot_conditions['heat_transfer_coeff'] = lab_conditions['heat_transfer_coeff'] / length_scale             # <<<<<<<<<<<<<<
 * 
 * 	# Mixing time increases with scale
*/
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_lab_conditions, __pyx_mstate_global->__pyx_n_u_heat_transfer_coeff); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_length_scale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely((PyDict_SetItem(__pyx_v_pilot_conditions, __pyx_mstate_global->__pyx_n_u_heat_transfer_coeff, __pyx_t_1) < 0))) __PYX_ERR(0, 1937, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1940
 * 
 * 	# Mixing time increases with scale
 * 	pilot_conditions['mixing_time'] = lab_conditions['mixing_time'] * length_scale             # <<<<<<<<<<<<<<
 * 
 * 	# Power requirements scale differently
*/
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_lab_conditions, __pyx_mstate_global->__pyx_n_u_mixing_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_length_scale); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely((PyDict_SetItem(__pyx_v_pilot_conditions, __pyx_mstate_global->__pyx_n_u_mixing_time, __pyx_t_2) < 0))) __PYX_ERR(0, 1940, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1943
 * 
 * 	# Power requirements scale differently
 * 	power_scale = scale_factor * length_scale  # Approximation             # <<<<<<<<<<<<<<
 * 
 * 	return {
*/
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_scale_factor, __pyx_v_length_scale); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_power_scale = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1945
 * 	power_scale = scale_factor * length_scale  # Approximation
 * 
 * 	return {             # <<<<<<<<<<<<<<
 * 		'pilot_conditions': pilot_conditions,
 * 		'scale_factor': scale_factor,
*/
  __Pyx_XDECREF(__pyx_r);

  /* "pyroxa/pybindings.pyx":1946
 * 
 * 	return {
 * 		'pilot_conditions': pilot_conditions,             # <<<<<<<<<<<<<<
 * 		'scale_factor': scale_factor,
 * 		'length_scale': length_scale,
*/
  __pyx_t_2 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_pilot_conditions, __pyx_v_pilot_conditions) < 0) __PYX_ERR(0, 1946, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1947
 * 	return {
 * 		'pilot_conditions': pilot_conditions,
 * 		'scale_factor': scale_factor,             # <<<<<<<<<<<<<<
 * 		'length_scale': length_scale,
 * 		'area_scale': area_scale,
*/
  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_scale_factor, __pyx_v_scale_factor) < 0) __PYX_ERR(0, 1946, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1948
 * 		'pilot_conditions': pilot_conditions,
 * 		'scale_factor': scale_factor,
 * 		'length_scale': length_scale,             # <<<<<<<<<<<<<<
 * 		'area_scale': area_scale,
 * 		'power_scale': power_scale,
*/
  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_length_scale, __pyx_v_length_scale) < 0) __PYX_ERR(0, 1946, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1949
 * 		'scale_factor': scale_factor,
 * 		'length_scale': length_scale,
 * 		'area_scale': area_scale,             # <<<<<<<<<<<<<<
 * 		'power_scale': power_scale,
 * 		'recommendations': {
*/
  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_area_scale, __pyx_v_area_scale) < 0) __PYX_ERR(0, 1946, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1950
 * 		'length_scale': length_scale,
 * 		'area_scale': area_scale,
 * 		'power_scale': power_scale,             # <<<<<<<<<<<<<<
 * 		'recommendations': {
 * 			'heat_transfer': 'Consider enhanced mixing at larger scale',
*/
  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_power_scale, __pyx_v_power_scale) < 0) __PYX_ERR(0, 1946, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":1952
 * 		'power_scale': power_scale,
 * 		'recommendations': {
 * 			'heat_transfer': 'Consider enhanced mixing at larger scale',             # <<<<<<<<<<<<<<
 * 			'mass_transfer': 'Monitor for scale-up effects',
 * 			'residence_time': 'Verify similar residence time distribution'
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_heat_transfer, __pyx_mstate_global->__pyx_kp_u_Consider_enhanced_mixing_at_larg) < 0) __PYX_ERR(0, 1952, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_mass_transfer, __pyx_mstate_global->__pyx_kp_u_Monitor_for_scale_up_effects) < 0) __PYX_ERR(0, 1952, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_residence_time, __pyx_mstate_global->__pyx_kp_u_Verify_similar_residence_time_di) < 0) __PYX_ERR(0, 1952, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_recommendations, __pyx_t_1) < 0) __PYX_ERR(0, 1946, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pyroxa/pybindings.pyx":1956
 * 			'residence_time': 'Verify similar residence time distribution'
 * 		},
 * 		'success': True             # <<<<<<<<<<<<<<
 * 	}
*/
  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_success, Py_True) < 0) __PYX_ERR(0, 1946, __pyx_L1_error)
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyroxa/pybindings.pyx":1915
 * 	}
 * 
 * def py_process_scale_up(lab_scale_volume, pilot_scale_volume, lab_conditions):             # <<<<<<<<<<<<<<
 * 	"""Scale up process from lab to pilot scale"""
 * 	import numpy as np
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyroxa._pybindings.py_process_scale_up", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_np);
  __Pyx_XDECREF(__pyx_v_scale_factor);
  __Pyx_XDECREF(__pyx_v_length_scale);
  __Pyx_XDECREF(__pyx_v_area_scale);
  __Pyx_XDECREF(__pyx_v_pilot_conditions);
  __Pyx_XDECREF(__pyx_v_power_scale);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
/* #### Code section: module_exttypes ### */

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_Thermodynamics(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings_Thermodynamics(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pyroxa_11_pybindings_Thermodynamics) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_6pyroxa_11_pybindings_Thermodynamics[] = {
  {"enthalpy", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_3enthalpy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_2enthalpy},
  {"entropy", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_5entropy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_4entropy},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_14Thermodynamics_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_14Thermodynamics_8__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pyroxa_11_pybindings_Thermodynamics_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pyroxa_11_pybindings_Thermodynamics},
  {Py_tp_methods, (void *)__pyx_methods_6pyroxa_11_pybindings_Thermodynamics},
  {Py_tp_new, (void *)__pyx_tp_new_6pyroxa_11_pybindings_Thermodynamics},
  {0, 0},
};
static PyType_Spec __pyx_type_6pyroxa_11_pybindings_Thermodynamics_spec = {
  "pyroxa._pybindings.Thermodynamics",
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6pyroxa_11_pybindings_Thermodynamics_slots,
};
#else

static PyTypeObject __pyx_type_6pyroxa_11_pybindings_Thermodynamics = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.""Thermodynamics", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_Thermodynamics), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings_Thermodynamics, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyroxa_11_pybindings_Thermodynamics, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings_Thermodynamics, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_Reaction(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_6pyroxa_11_pybindings_8Reaction_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings_Reaction(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pyroxa_11_pybindings_Reaction) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_6pyroxa_11_pybindings_Reaction[] = {
  {"rate", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_8Reaction_3rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_8Reaction_2rate},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_8Reaction_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_8Reaction_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_8Reaction_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_8Reaction_6__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pyroxa_11_pybindings_Reaction_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pyroxa_11_pybindings_Reaction},
  {Py_tp_methods, (void *)__pyx_methods_6pyroxa_11_pybindings_Reaction},
  {Py_tp_new, (void *)__pyx_tp_new_6pyroxa_11_pybindings_Reaction},
  {0, 0},
};
static PyType_Spec __pyx_type_6pyroxa_11_pybindings_Reaction_spec = {
  "pyroxa._pybindings.Reaction",
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_Reaction),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6pyroxa_11_pybindings_Reaction_slots,
};
#else

static PyTypeObject __pyx_type_6pyroxa_11_pybindings_Reaction = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.""Reaction", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_Reaction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings_Reaction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyroxa_11_pybindings_Reaction, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings_Reaction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6pyroxa_11_pybindings_ReactionMulti __pyx_vtable_6pyroxa_11_pybindings_ReactionMulti;

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_ReactionMulti(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pyroxa_11_pybindings_ReactionMulti;
  p->reactants = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->products = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings_ReactionMulti(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *p = (struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pyroxa_11_pybindings_ReactionMulti) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->reactants);
  Py_CLEAR(p->products);
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings_ReactionMulti(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *p = (struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->reactants) {
    e = (*v)(p->reactants, a); if (e) return e;
  }
  if (p->products) {
    e = (*v)(p->products, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyroxa_11_pybindings_ReactionMulti(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *p = (struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *)o;
  tmp = ((PyObject*)p->reactants);
  p->reactants = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->products);
  p->products = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6pyroxa_11_pybindings_ReactionMulti[] = {
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_13ReactionMulti_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_13ReactionMulti_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_13ReactionMulti_6__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pyroxa_11_pybindings_ReactionMulti_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pyroxa_11_pybindings_ReactionMulti},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6pyroxa_11_pybindings_ReactionMulti},
  {Py_tp_clear, (void *)__pyx_tp_clear_6pyroxa_11_pybindings_ReactionMulti},
  {Py_tp_methods, (void *)__pyx_methods_6pyroxa_11_pybindings_ReactionMulti},
  {Py_tp_new, (void *)__pyx_tp_new_6pyroxa_11_pybindings_ReactionMulti},
  {0, 0},
};
static PyType_Spec __pyx_type_6pyroxa_11_pybindings_ReactionMulti_spec = {
  "pyroxa._pybindings.ReactionMulti",
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_6pyroxa_11_pybindings_ReactionMulti_slots,
};
#else

static PyTypeObject __pyx_type_6pyroxa_11_pybindings_ReactionMulti = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.""ReactionMulti", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings_ReactionMulti, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings_ReactionMulti, /*tp_traverse*/
  __pyx_tp_clear_6pyroxa_11_pybindings_ReactionMulti, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyroxa_11_pybindings_ReactionMulti, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings_ReactionMulti, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6pyroxa_11_pybindings_MultiReactor __pyx_vtable_6pyroxa_11_pybindings_MultiReactor;

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_MultiReactor(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pyroxa_11_pybindings_MultiReactor;
  p->species = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->conc = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->reactions = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings_MultiReactor(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *p = (struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pyroxa_11_pybindings_MultiReactor) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->species);
  Py_CLEAR(p->conc);
  Py_CLEAR(p->reactions);
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings_MultiReactor(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *p = (struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->species) {
    e = (*v)(p->species, a); if (e) return e;
  }
  if (p->conc) {
    e = (*v)(p->conc, a); if (e) return e;
  }
  if (p->reactions) {
    e = (*v)(p->reactions, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyroxa_11_pybindings_MultiReactor(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *p = (struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *)o;
  tmp = ((PyObject*)p->species);
  p->species = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->conc);
  p->conc = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->reactions);
  p->reactions = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6pyroxa_11_pybindings_MultiReactor[] = {
  {"step", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_5step, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_4step},
  {"run", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_7run, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_6run},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_9__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_12MultiReactor_11__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_12MultiReactor_10__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pyroxa_11_pybindings_MultiReactor_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pyroxa_11_pybindings_MultiReactor},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6pyroxa_11_pybindings_MultiReactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_6pyroxa_11_pybindings_MultiReactor},
  {Py_tp_methods, (void *)__pyx_methods_6pyroxa_11_pybindings_MultiReactor},
  {Py_tp_new, (void *)__pyx_tp_new_6pyroxa_11_pybindings_MultiReactor},
  {0, 0},
};
static PyType_Spec __pyx_type_6pyroxa_11_pybindings_MultiReactor_spec = {
  "pyroxa._pybindings.MultiReactor",
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_6pyroxa_11_pybindings_MultiReactor_slots,
};
#else

static PyTypeObject __pyx_type_6pyroxa_11_pybindings_MultiReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.""MultiReactor", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings_MultiReactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings_MultiReactor, /*tp_traverse*/
  __pyx_tp_clear_6pyroxa_11_pybindings_MultiReactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyroxa_11_pybindings_MultiReactor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings_MultiReactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings_Reactor(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_6pyroxa_11_pybindings_7Reactor_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings_Reactor(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pyroxa_11_pybindings_Reactor) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_6pyroxa_11_pybindings_Reactor[] = {
  {"run", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_7Reactor_3run, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_7Reactor_2run},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_7Reactor_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_7Reactor_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6pyroxa_11_pybindings_7Reactor_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_6pyroxa_11_pybindings_7Reactor_6__setstate_cython__},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pyroxa_11_pybindings_Reactor_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pyroxa_11_pybindings_Reactor},
  {Py_tp_methods, (void *)__pyx_methods_6pyroxa_11_pybindings_Reactor},
  {Py_tp_new, (void *)__pyx_tp_new_6pyroxa_11_pybindings_Reactor},
  {0, 0},
};
static PyType_Spec __pyx_type_6pyroxa_11_pybindings_Reactor_spec = {
  "pyroxa._pybindings.Reactor",
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_Reactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6pyroxa_11_pybindings_Reactor_slots,
};
#else

static PyTypeObject __pyx_type_6pyroxa_11_pybindings_Reactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.""Reactor", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings_Reactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings_Reactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyroxa_11_pybindings_Reactor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings_Reactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct__genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct__genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct__genexpr[--__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct__genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct__genexpr(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct__genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_x);
  Py_CLEAR(p->__pyx_t_0);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct__genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr)))) {
    __pyx_mstate_global->__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct__genexpr[__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct__genexpr++] = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct__genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_x) {
    e = (*v)(p->__pyx_v_x, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct__genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct__genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct__genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__genexpr_spec = {
  "pyroxa._pybindings.__pyx_scope_struct__genexpr",
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__genexpr_slots,
};
#else

static PyTypeObject __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.""__pyx_scope_struct__genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct__genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct__genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct__genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct__genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr[--__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_ev);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr)))) {
    __pyx_mstate_global->__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr[__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_ev) {
    e = (*v)(p->__pyx_v_ev, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr_spec = {
  "pyroxa._pybindings.__pyx_scope_struct_1_genexpr",
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.""__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution[--__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution];
    memset(o, 0, sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_flow_rates);
  Py_CLEAR(p->__pyx_v_volumes);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution)))) {
    __pyx_mstate_global->__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution[__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution++] = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_v_flow_rates) {
    e = (*v)(p->__pyx_v_flow_rates, a); if (e) return e;
  }
  if (p->__pyx_v_volumes) {
    e = (*v)(p->__pyx_v_volumes, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution *)o;
  tmp = ((PyObject*)p->__pyx_v_flow_rates);
  p->__pyx_v_flow_rates = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_volumes);
  p->__pyx_v_volumes = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution},
  {Py_tp_clear, (void *)__pyx_tp_clear_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution},
  {Py_tp_new, (void *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution},
  {0, 0},
};
static PyType_Spec __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution_spec = {
  "pyroxa._pybindings.__pyx_scope_struct_2_py_residence_time_distribution",
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution_slots,
};
#else

static PyTypeObject __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.""__pyx_scope_struct_2_py_residence_time_distribution", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution, /*tp_traverse*/
  __pyx_tp_clear_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr[--__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_t_0);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr)))) {
    __pyx_mstate_global->__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr[__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr_spec = {
  "pyroxa._pybindings.__pyx_scope_struct_3_genexpr",
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.""__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr[--__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_t_0);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr)))) {
    __pyx_mstate_global->__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr[__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr++] = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr_spec = {
  "pyroxa._pybindings.__pyx_scope_struct_4_genexpr",
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.""__pyx_scope_struct_4_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr[--__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr(PyObject *o) {
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_genexpr_arg_0);
  Py_CLEAR(p->__pyx_v_tau);
  Py_CLEAR(p->__pyx_t_0);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr)))) {
    __pyx_mstate_global->__pyx_freelist_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr[__pyx_mstate_global->__pyx_freecount_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr++] = ((struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_tau) {
    e = (*v)(p->__pyx_v_tau, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr_spec = {
  "pyroxa._pybindings.__pyx_scope_struct_5_genexpr",
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyroxa._pybindings.""__pyx_scope_struct_5_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
/* #### Code section: initfunc_declarations ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate); /*proto*/
/* #### Code section: init_module ### */

static int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pyroxa_11_pybindings_Thermodynamics_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics)) __PYX_ERR(0, 260, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pyroxa_11_pybindings_Thermodynamics_spec, __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics) < 0) __PYX_ERR(0, 260, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics = &__pyx_type_6pyroxa_11_pybindings_Thermodynamics;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics) < 0) __PYX_ERR(0, 260, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics->tp_dictoffset && __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_Thermodynamics, (PyObject *) __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics) < 0) __PYX_ERR(0, 260, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics) < 0) __PYX_ERR(0, 260, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reaction = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pyroxa_11_pybindings_Reaction_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reaction)) __PYX_ERR(0, 273, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pyroxa_11_pybindings_Reaction_spec, __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reaction) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reaction = &__pyx_type_6pyroxa_11_pybindings_Reaction;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reaction) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reaction->tp_dictoffset && __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reaction->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reaction->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_Reaction, (PyObject *) __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reaction) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reaction) < 0) __PYX_ERR(0, 273, __pyx_L1_error)
  __pyx_vtabptr_6pyroxa_11_pybindings_ReactionMulti = &__pyx_vtable_6pyroxa_11_pybindings_ReactionMulti;
  __pyx_vtable_6pyroxa_11_pybindings_ReactionMulti.rate = (double (*)(struct __pyx_obj_6pyroxa_11_pybindings_ReactionMulti *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6pyroxa_11_pybindings_13ReactionMulti_rate;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pyroxa_11_pybindings_ReactionMulti_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti)) __PYX_ERR(0, 285, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pyroxa_11_pybindings_ReactionMulti_spec, __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti = &__pyx_type_6pyroxa_11_pybindings_ReactionMulti;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti->tp_dictoffset && __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti, __pyx_vtabptr_6pyroxa_11_pybindings_ReactionMulti) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_ReactionMulti, (PyObject *) __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  __pyx_vtabptr_6pyroxa_11_pybindings_MultiReactor = &__pyx_vtable_6pyroxa_11_pybindings_MultiReactor;
  __pyx_vtable_6pyroxa_11_pybindings_MultiReactor._dcdt = (PyObject *(*)(struct __pyx_obj_6pyroxa_11_pybindings_MultiReactor *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6pyroxa_11_pybindings_12MultiReactor__dcdt;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pyroxa_11_pybindings_MultiReactor_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor)) __PYX_ERR(0, 318, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pyroxa_11_pybindings_MultiReactor_spec, __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor) < 0) __PYX_ERR(0, 318, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor = &__pyx_type_6pyroxa_11_pybindings_MultiReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor) < 0) __PYX_ERR(0, 318, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor->tp_dictoffset && __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor, __pyx_vtabptr_6pyroxa_11_pybindings_MultiReactor) < 0) __PYX_ERR(0, 318, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor) < 0) __PYX_ERR(0, 318, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_MultiReactor, (PyObject *) __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor) < 0) __PYX_ERR(0, 318, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor) < 0) __PYX_ERR(0, 318, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pyroxa_11_pybindings_Reactor_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reactor)) __PYX_ERR(0, 369, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pyroxa_11_pybindings_Reactor_spec, __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reactor) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reactor = &__pyx_type_6pyroxa_11_pybindings_Reactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reactor) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reactor->tp_dictoffset && __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reactor->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_Reactor, (PyObject *) __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reactor) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings_Reactor) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__genexpr_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__genexpr)) __PYX_ERR(0, 969, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__genexpr_spec, __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__genexpr) < 0) __PYX_ERR(0, 969, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__genexpr = &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct__genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__genexpr) < 0) __PYX_ERR(0, 969, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__genexpr->tp_dictoffset && __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct__genexpr->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr)) __PYX_ERR(0, 1315, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr_spec, __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 1315, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr = &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 1315, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr->tp_dictoffset && __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_1_genexpr->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution)) __PYX_ERR(0, 1856, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution_spec, __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution) < 0) __PYX_ERR(0, 1856, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution = &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution) < 0) __PYX_ERR(0, 1856, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution->tp_dictoffset && __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_2_py_residence_time_distribution->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr)) __PYX_ERR(0, 1870, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr_spec, __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 1870, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr = &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 1870, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr->tp_dictoffset && __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_3_genexpr->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr)) __PYX_ERR(0, 1871, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr_spec, __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr) < 0) __PYX_ERR(0, 1871, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr = &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr) < 0) __PYX_ERR(0, 1871, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr->tp_dictoffset && __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_4_genexpr->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr)) __PYX_ERR(0, 1875, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr_spec, __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr) < 0) __PYX_ERR(0, 1875, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr = &__pyx_type_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr) < 0) __PYX_ERR(0, 1875, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr->tp_dictoffset && __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6pyroxa_11_pybindings___pyx_scope_struct_5_genexpr->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_1_3(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  0, 0,
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_5numpy_dtype = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "dtype",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyArray_Descr),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyArray_Descr),
  #else
  sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyArray_Descr),
  #endif
  __Pyx_ImportType_CheckSize_Ignore_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 228, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_flatiter = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "flatiter",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyArrayIterObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyArrayIterObject),
  #else
  sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyArrayIterObject),
  #endif
  __Pyx_ImportType_CheckSize_Ignore_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 273, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_broadcast = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "broadcast",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyArrayMultiIterObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyArrayMultiIterObject),
  #else
  sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyArrayMultiIterObject),
  #endif
  __Pyx_ImportType_CheckSize_Ignore_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 277, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_ndarray = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "ndarray",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyArrayObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyArrayObject),
  #else
  sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyArrayObject),
  #endif
  __Pyx_ImportType_CheckSize_Ignore_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 316, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_generic = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "generic",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_generic) __PYX_ERR(2, 825, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_number = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "number",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_number) __PYX_ERR(2, 827, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_integer = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "integer",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_integer) __PYX_ERR(2, 829, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_signedinteger = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "signedinteger",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 831, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "unsignedinteger",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 833, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_inexact = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "inexact",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 835, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_floating = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "floating",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_floating) __PYX_ERR(2, 837, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_complexfloating = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "complexfloating",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 839, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_flexible = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "flexible",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 841, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_character = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "character",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_character) __PYX_ERR(2, 843, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_ufunc = __Pyx_ImportType_3_1_3(__pyx_t_1, "numpy", "ufunc",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyUFuncObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyUFuncObject),
  #else
  sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyUFuncObject),
  #endif
  __Pyx_ImportType_CheckSize_Ignore_3_1_3); if (!__pyx_mstate->__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 907, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__pybindings(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__pybindings},
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
  {Py_mod_gil, Py_MOD_GIL_USED},
  #endif
  #if PY_VERSION_HEX >= 0x030C0000 && CYTHON_USE_MODULE_STATE
  {Py_mod_multiple_interpreters, Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED},
  #endif
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "_pybindings",
      0, /* m_doc */
    #if CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstatetype), /* m_size */
    #else
      (CYTHON_PEP489_MULTI_PHASE_INIT) ? 0 : -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif

/* PyModInitFuncType */
#ifndef CYTHON_NO_PYINIT_EXPORT
  #define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#else
  #ifdef __cplusplus
  #define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
  #else
  #define __Pyx_PyMODINIT_FUNC PyObject *
  #endif
#endif

__Pyx_PyMODINIT_FUNC PyInit__pybindings(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__pybindings(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
/* ModuleCreationPEP489 */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03090000
static PY_INT64_T __Pyx_GetCurrentInterpreterId(void) {
    {
        PyObject *module = PyImport_ImportModule("_interpreters"); // 3.13+ I think
        if (!module) {
            PyErr_Clear(); // just try the 3.8-3.12 version
            module = PyImport_ImportModule("_xxsubinterpreters");
            if (!module) goto bad;
        }
        PyObject *current = PyObject_CallMethod(module, "get_current", NULL);
        Py_DECREF(module);
        if (!current) goto bad;
        if (PyTuple_Check(current)) {
            PyObject *new_current = PySequence_GetItem(current, 0);
            Py_DECREF(current);
            current = new_current;
            if (!new_current) goto bad;
        }
        long long as_c_int = PyLong_AsLongLong(current);
        Py_DECREF(current);
        return as_c_int;
    }
  bad:
    PySys_WriteStderr("__Pyx_GetCurrentInterpreterId failed. Try setting the C define CYTHON_PEP489_MULTI_PHASE_INIT=0\n");
    return -1;
}
#endif
#if !CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    static PY_INT64_T main_interpreter_id = -1;
#if CYTHON_COMPILING_IN_GRAAL
    PY_INT64_T current_id = PyInterpreterState_GetIDFromThreadState(PyThreadState_Get());
#elif CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX >= 0x03090000
    PY_INT64_T current_id = PyInterpreterState_GetID(PyInterpreterState_Get());
#elif CYTHON_COMPILING_IN_LIMITED_API
    PY_INT64_T current_id = __Pyx_GetCurrentInterpreterId();
#else
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
#endif
    if (unlikely(current_id == -1)) {
        return -1;
    }
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return 0;
    } else if (unlikely(main_interpreter_id != current_id)) {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#endif
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    #if !CYTHON_USE_MODULE_STATE
    if (__Pyx_check_single_interpreter())
        return NULL;
    #endif
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__pybindings(PyObject *__pyx_pyinit_module)
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  __pyx_mstatetype *__pyx_mstate = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_pybindings' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #else
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_t_1 = __pyx_pyinit_module;
  Py_INCREF(__pyx_t_1);
  #else
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #if CYTHON_USE_MODULE_STATE
  {
    int add_module_result = __Pyx_State_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "_pybindings" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = __pyx_t_1;
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
  PyUnstable_Module_SetGIL(__pyx_m, Py_MOD_GIL_USED);
  #endif
  __pyx_mstate = __pyx_mstate_global;
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_mstate->__pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_mstate->__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_mstate->__pyx_d);
  __pyx_mstate->__pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_mstate->__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_cython_runtime = __Pyx_PyImport_AddModuleRef("cython_runtime"); if (unlikely(!__pyx_mstate->__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_mstate->__pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /* ImportRefnannyAPI */
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif

__Pyx_RefNannySetupContext("PyInit__pybindings", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_mstate->__pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_mstate->__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if 0 || defined(__Pyx_CyFunction_USED) || defined(__Pyx_FusedFunction_USED) || defined(__Pyx_Coroutine_USED) || defined(__Pyx_Generator_USED) || defined(__Pyx_AsyncGen_USED)
  if (__pyx_CommonTypesMetaclass_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  if (__pyx_module_is_main_pyroxa___pybindings) {
    if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_name, __pyx_mstate_global->__pyx_n_u_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyroxa._pybindings")) {
      if (unlikely((PyDict_SetItemString(modules, "pyroxa._pybindings", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_CreateCodeObjects(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code(__pyx_mstate);
  (void)__Pyx_modinit_variable_export_code(__pyx_mstate);
  (void)__Pyx_modinit_function_export_code(__pyx_mstate);
  if (unlikely((__Pyx_modinit_type_init_code(__pyx_mstate) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code(__pyx_mstate) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code(__pyx_mstate);
  (void)__Pyx_modinit_function_import_code(__pyx_mstate);
  /*--- Execution code ---*/

  /* "pyroxa/pybindings.pyx":255
 * 	                                 double* statistics_min, double* statistics_max)
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * _HAS_NUMPY = True
*/
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_numpy, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_np, __pyx_t_2) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":257
 * import numpy as np
 * cimport numpy as np
 * _HAS_NUMPY = True             # <<<<<<<<<<<<<<
 * 
 * 
*/
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_HAS_NUMPY, Py_True) < 0) __PYX_ERR(0, 257, __pyx_L1_error)

  /* "pyroxa/pybindings.pyx":266
 * 		self.cp = cp
 * 
 * 	def enthalpy(self, double T):             # <<<<<<<<<<<<<<
 * 		return enthalpy_c(self.cp, T)
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_14Thermodynamics_3enthalpy, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Thermodynamics_enthalpy, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[5])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics, __pyx_mstate_global->__pyx_n_u_enthalpy, __pyx_t_2) < 0) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":269
 * 		return enthalpy_c(self.cp, T)
 * 
 * 	def entropy(self, double T):             # <<<<<<<<<<<<<<
 * 		return entropy_c(self.cp, T)
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_14Thermodynamics_5entropy, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Thermodynamics_entropy, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[6])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_Thermodynamics, __pyx_mstate_global->__pyx_n_u_entropy, __pyx_t_2) < 0) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_14Thermodynamics_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Thermodynamics___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[7])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_14Thermodynamics_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Thermodynamics___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[8])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":281
 * 		self.kr = kr
 * 
 * 	def rate(self, double A, double B):             # <<<<<<<<<<<<<<
 * 		return self.kf * A - self.kr * B
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_8Reaction_3rate, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Reaction_rate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[9])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_Reaction, __pyx_mstate_global->__pyx_n_u_rate, __pyx_t_2) < 0) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_8Reaction_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Reaction___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[10])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_8Reaction_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Reaction___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[11])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":297
 * 		self.products = products if products is not None else {}
 * 
 * 	cpdef double rate(self, list conc):             # <<<<<<<<<<<<<<
 * 		cdef double f = 1.0
 * 		cdef double r = 1.0
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_13ReactionMulti_3rate, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ReactionMulti_rate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[12])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_ReactionMulti, __pyx_mstate_global->__pyx_n_u_rate, __pyx_t_2) < 0) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_13ReactionMulti_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ReactionMulti___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[13])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_13ReactionMulti_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ReactionMulti___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[14])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":330
 * 		self.T = T
 * 
 * 	cpdef list _dcdt(self, list conc):             # <<<<<<<<<<<<<<
 * 		cdef int N = len(conc)
 * 		cdef list d = [0.0] * N
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_12MultiReactor_3_dcdt, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_MultiReactor__dcdt, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[15])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor, __pyx_mstate_global->__pyx_n_u_dcdt, __pyx_t_2) < 0) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":343
 * 		return d
 * 
 * 	def step(self, double dt):             # <<<<<<<<<<<<<<
 * 		y0 = self.conc
 * 		k1 = self._dcdt(y0)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_12MultiReactor_5step, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_MultiReactor_step, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[16])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor, __pyx_mstate_global->__pyx_n_u_step, __pyx_t_2) < 0) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":357
 * 				self.conc[i] = 0.0
 * 
 * 	def run(self, double time_span, double dt):             # <<<<<<<<<<<<<<
 * 		cdef int nsteps = <int>round(time_span / dt)
 * 		cdef int i
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_12MultiReactor_7run, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_MultiReactor_run, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[17])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_MultiReactor, __pyx_mstate_global->__pyx_n_u_run, __pyx_t_2) < 0) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_12MultiReactor_9__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_MultiReactor___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[18])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_12MultiReactor_11__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_MultiReactor___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[19])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":385
 * 		self.dt = dt
 * 
 * 	def run(self):             # <<<<<<<<<<<<<<
 * 		cdef int nsteps = <int>round(self.time_span / self.dt)
 * 		cdef int npts = nsteps + 1
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_7Reactor_3run, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Reactor_run, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[20])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6pyroxa_11_pybindings_Reactor, __pyx_mstate_global->__pyx_n_u_run, __pyx_t_2) < 0) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_7Reactor_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Reactor___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[21])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_7Reactor_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_Reactor___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[22])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":420
 * 
 * 
 * def run_simulation_cpp(spec):             # <<<<<<<<<<<<<<
 * 	"""High-level helper that takes a Python dict spec and runs the C++ reactor.
 * 
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_1run_simulation_cpp, 0, __pyx_mstate_global->__pyx_n_u_run_simulation_cpp, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[23])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_run_simulation_cpp, __pyx_t_2) < 0) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":598
 * 
 * # Enhanced thermodynamics functions
 * def py_gibbs_free_energy(double enthalpy, double entropy, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate Gibbs free energy"""
 * 	return gibbs_free_energy(enthalpy, entropy, T)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_3py_gibbs_free_energy, 0, __pyx_mstate_global->__pyx_n_u_py_gibbs_free_energy, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[24])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_gibbs_free_energy, __pyx_t_2) < 0) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":602
 * 	return gibbs_free_energy(enthalpy, entropy, T)
 * 
 * def py_equilibrium_constant(double delta_G, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate equilibrium constant from Gibbs free energy"""
 * 	return equilibrium_constant(delta_G, T)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_5py_equilibrium_constant, 0, __pyx_mstate_global->__pyx_n_u_py_equilibrium_constant, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[25])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_equilibrium_constant, __pyx_t_2) < 0) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":606
 * 	return equilibrium_constant(delta_G, T)
 * 
 * def py_arrhenius_rate(double A, double Ea, double T, double R=8.314):             # <<<<<<<<<<<<<<
 * 	"""Calculate Arrhenius rate constant"""
 * 	return arrhenius_rate(A, Ea, T, R)
*/
  __pyx_t_2 = PyFloat_FromDouble(((double)8.314)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_7py_arrhenius_rate, 0, __pyx_mstate_global->__pyx_n_u_py_arrhenius_rate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[26])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_arrhenius_rate, __pyx_t_2) < 0) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":610
 * 	return arrhenius_rate(A, Ea, T, R)
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_9py_pressure_peng_robinson, 0, __pyx_mstate_global->__pyx_n_u_py_pressure_peng_robinson, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[27])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_pressure_peng_robinson, __pyx_t_2) < 0) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":614
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate fugacity coefficient"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_11py_fugacity_coefficient, 0, __pyx_mstate_global->__pyx_n_u_py_fugacity_coefficient, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[28])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_fugacity_coefficient, __pyx_t_2) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":619
 * 
 * # Additional kinetics functions
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):             # <<<<<<<<<<<<<<
 * 	"""Calculate Langmuir-Hinshelwood surface reaction rate"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_13py_langmuir_hinshelwood_rate, 0, __pyx_mstate_global->__pyx_n_u_py_langmuir_hinshelwood_rate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[29])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_langmuir_hinshelwood_rate, __pyx_t_2) < 0) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":623
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,             # <<<<<<<<<<<<<<
 * 						 double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_15py_photochemical_rate, 0, __pyx_mstate_global->__pyx_n_u_py_photochemical_rate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[30])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_photochemical_rate, __pyx_t_2) < 0) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":629
 * 
 * # Python wrapper functions for newly implemented C++ functions
 * def py_autocatalytic_rate(double k, double A, double B, double temperature=298.15):             # <<<<<<<<<<<<<<
 * 	"""Calculate autocatalytic reaction rate with temperature dependency"""
 * 	return autocatalytic_rate(k, A, B, temperature)
*/
  __pyx_t_2 = PyFloat_FromDouble(((double)298.15)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_17py_autocatalytic_rate, 0, __pyx_mstate_global->__pyx_n_u_py_autocatalytic_rate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[31])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_autocatalytic_rate, __pyx_t_2) < 0) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":633
 * 	return autocatalytic_rate(k, A, B, temperature)
 * 
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):             # <<<<<<<<<<<<<<
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_19py_michaelis_menten_rate, 0, __pyx_mstate_global->__pyx_n_u_py_michaelis_menten_rate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[32])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_michaelis_menten_rate, __pyx_t_2) < 0) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":637
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,             # <<<<<<<<<<<<<<
 * 								   double inhibitor_conc, double Ki):
 * 	"""Calculate competitive inhibition rate"""
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_21py_competitive_inhibition_rate, 0, __pyx_mstate_global->__pyx_n_u_py_competitive_inhibition_rate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[33])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_competitive_inhibition_rate, __pyx_t_2) < 0) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":642
 * 	return competitive_inhibition_rate(Vmax, Km, substrate_conc, inhibitor_conc, Ki)
 * 
 * def py_heat_capacity_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate heat capacity using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_23py_heat_capacity_nasa, 0, __pyx_mstate_global->__pyx_n_u_py_heat_capacity_nasa, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[34])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_heat_capacity_nasa, __pyx_t_2) < 0) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":655
 * 		free(c_coeffs)
 * 
 * def py_enthalpy_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate enthalpy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_25py_enthalpy_nasa, 0, __pyx_mstate_global->__pyx_n_u_py_enthalpy_nasa, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[35])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_enthalpy_nasa, __pyx_t_2) < 0) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":668
 * 		free(c_coeffs)
 * 
 * def py_entropy_nasa(double T, coeffs):             # <<<<<<<<<<<<<<
 * 	"""Calculate entropy using NASA polynomial"""
 * 	cdef double* c_coeffs = <double*>malloc(7 * sizeof(double))
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_27py_entropy_nasa, 0, __pyx_mstate_global->__pyx_n_u_py_entropy_nasa, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[36])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_entropy_nasa, __pyx_t_2) < 0) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":681
 * 		free(c_coeffs)
 * 
 * def py_mass_transfer_correlation(double Re, double Sc, double geometry_factor):             # <<<<<<<<<<<<<<
 * 	"""Calculate Sherwood number from Reynolds and Schmidt numbers"""
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_29py_mass_transfer_correlation, 0, __pyx_mstate_global->__pyx_n_u_py_mass_transfer_correlation, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[37])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_mass_transfer_correlation, __pyx_t_2) < 0) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":685
 * 	return mass_transfer_correlation(Re, Sc, geometry_factor)
 * 
 * def py_heat_transfer_correlation(double Re, double Pr, double geometry_factor):             # <<<<<<<<<<<<<<
 * 	"""Calculate Nusselt number from Reynolds and Prandtl numbers"""
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_31py_heat_transfer_correlation, 0, __pyx_mstate_global->__pyx_n_u_py_heat_transfer_correlation, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[38])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_heat_transfer_correlation, __pyx_t_2) < 0) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":689
 * 	return heat_transfer_correlation(Re, Pr, geometry_factor)
 * 
 * def py_effective_diffusivity(double molecular_diff, double porosity,             # <<<<<<<<<<<<<<
 * 							 double tortuosity, double constriction_factor):
 * 	"""Calculate effective diffusivity in porous media"""
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_33py_effective_diffusivity, 0, __pyx_mstate_global->__pyx_n_u_py_effective_diffusivity, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[39])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_effective_diffusivity, __pyx_t_2) < 0) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":694
 * 	return effective_diffusivity(molecular_diff, porosity, tortuosity, constriction_factor)
 * 
 * def py_pressure_drop_ergun(double velocity, double density, double viscosity,             # <<<<<<<<<<<<<<
 * 						   double particle_diameter, double bed_porosity, double bed_length):
 * 	"""Calculate pressure drop using Ergun equation"""
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_35py_pressure_drop_ergun, 0, __pyx_mstate_global->__pyx_n_u_py_pressure_drop_ergun, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[40])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_pressure_drop_ergun, __pyx_t_2) < 0) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":700
 * 							   particle_diameter, bed_porosity, bed_length)
 * 
 * def py_pid_controller(double setpoint, double process_variable, double dt,             # <<<<<<<<<<<<<<
 * 					  double Kp, double Ki, double Kd):
 * 	"""PID controller implementation"""
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_37py_pid_controller, 0, __pyx_mstate_global->__pyx_n_u_py_pid_controller, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[41])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_pid_controller, __pyx_t_2) < 0) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":709
 * 
 * # Simple thermodynamic calculations
 * def py_gibbs_free_energy(double enthalpy, double entropy, double temperature):             # <<<<<<<<<<<<<<
 * 	"""Calculate Gibbs free energy from enthalpy and entropy"""
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_39py_gibbs_free_energy, 0, __pyx_mstate_global->__pyx_n_u_py_gibbs_free_energy, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[42])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_gibbs_free_energy, __pyx_t_2) < 0) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":713
 * 	return gibbs_free_energy(enthalpy, entropy, temperature)
 * 
 * def py_equilibrium_constant(double delta_G, double temperature):             # <<<<<<<<<<<<<<
 * 	"""Calculate equilibrium constant from Gibbs free energy change"""
 * 	return equilibrium_constant(delta_G, temperature)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_41py_equilibrium_constant, 0, __pyx_mstate_global->__pyx_n_u_py_equilibrium_constant, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[43])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_equilibrium_constant, __pyx_t_2) < 0) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":717
 * 	return equilibrium_constant(delta_G, temperature)
 * 
 * def py_arrhenius_rate(double pre_exponential, double activation_energy, double temperature, double gas_constant=8.314):             # <<<<<<<<<<<<<<
 * 	"""Calculate reaction rate constant using Arrhenius equation"""
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)
*/
  __pyx_t_2 = PyFloat_FromDouble(((double)8.314)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_43py_arrhenius_rate, 0, __pyx_mstate_global->__pyx_n_u_py_arrhenius_rate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[44])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_arrhenius_rate, __pyx_t_2) < 0) __PYX_ERR(0, 717, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":721
 * 	return arrhenius_rate(pre_exponential, activation_energy, temperature, gas_constant)
 * 
 * def py_pressure_peng_robinson(double n, double V, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate pressure using Peng-Robinson equation of state"""
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_45py_pressure_peng_robinson, 0, __pyx_mstate_global->__pyx_n_u_py_pressure_peng_robinson, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[45])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_pressure_peng_robinson, __pyx_t_2) < 0) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":725
 * 	return pressure_peng_robinson(n, V, T, Tc, Pc, omega)
 * 
 * def py_fugacity_coefficient(double P, double T, double Tc, double Pc, double omega):             # <<<<<<<<<<<<<<
 * 	"""Calculate fugacity coefficient using Peng-Robinson equation"""
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_47py_fugacity_coefficient, 0, __pyx_mstate_global->__pyx_n_u_py_fugacity_coefficient, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[46])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_fugacity_coefficient, __pyx_t_2) < 0) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":729
 * 	return fugacity_coefficient(P, T, Tc, Pc, omega)
 * 
 * def py_langmuir_hinshelwood_rate(double k, double K_A, double K_B, double conc_A, double conc_B):             # <<<<<<<<<<<<<<
 * 	"""Calculate reaction rate using Langmuir-Hinshelwood kinetics"""
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_49py_langmuir_hinshelwood_rate, 0, __pyx_mstate_global->__pyx_n_u_py_langmuir_hinshelwood_rate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[47])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_langmuir_hinshelwood_rate, __pyx_t_2) < 0) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":733
 * 	return langmuir_hinshelwood_rate(k, K_A, K_B, conc_A, conc_B)
 * 
 * def py_photochemical_rate(double quantum_yield, double molar_absorptivity,             # <<<<<<<<<<<<<<
 * 						  double path_length, double light_intensity, double concentration):
 * 	"""Calculate photochemical reaction rate"""
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_51py_photochemical_rate, 0, __pyx_mstate_global->__pyx_n_u_py_photochemical_rate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[48])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_photochemical_rate, __pyx_t_2) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":739
 * 
 * # BATCH 1: Simple utility functions (statistics and interpolation)
 * def py_linear_interpolate(double x, x_data, y_data):             # <<<<<<<<<<<<<<
 * 	"""Linear interpolation between data points"""
 * 	cdef int n = len(x_data)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_53py_linear_interpolate, 0, __pyx_mstate_global->__pyx_n_u_py_linear_interpolate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[49])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_linear_interpolate, __pyx_t_2) < 0) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":755
 * 		free(y_data_c)
 * 
 * def py_cubic_spline_interpolate(double x, x_data, y_data):             # <<<<<<<<<<<<<<
 * 	"""Cubic spline interpolation between data points"""
 * 	cdef int n = len(x_data)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_55py_cubic_spline_interpolate, 0, __pyx_mstate_global->__pyx_n_u_py_cubic_spline_interpolate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[50])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_cubic_spline_interpolate, __pyx_t_2) < 0) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":771
 * 		free(y_data_c)
 * 
 * def py_calculate_r_squared(experimental, predicted):             # <<<<<<<<<<<<<<
 * 	"""Calculate R-squared coefficient of determination"""
 * 	cdef int n = len(experimental)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_57py_calculate_r_squared, 0, __pyx_mstate_global->__pyx_n_u_py_calculate_r_squared, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[51])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_calculate_r_squared, __pyx_t_2) < 0) __PYX_ERR(0, 771, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":787
 * 		free(pred_c)
 * 
 * def py_calculate_rmse(experimental, predicted):             # <<<<<<<<<<<<<<
 * 	"""Calculate Root Mean Square Error"""
 * 	cdef int n = len(experimental)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_59py_calculate_rmse, 0, __pyx_mstate_global->__pyx_n_u_py_calculate_rmse, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[52])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_calculate_rmse, __pyx_t_2) < 0) __PYX_ERR(0, 787, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":803
 * 		free(pred_c)
 * 
 * def py_calculate_aic(experimental, predicted, int nparams):             # <<<<<<<<<<<<<<
 * 	"""Calculate Akaike Information Criterion"""
 * 	cdef int ndata = len(experimental)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_61py_calculate_aic, 0, __pyx_mstate_global->__pyx_n_u_py_calculate_aic, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[53])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_calculate_aic, __pyx_t_2) < 0) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":820
 * 
 * # BATCH 2: Additional kinetic functions
 * def py_michaelis_menten_rate(double Vmax, double Km, double substrate_conc):             # <<<<<<<<<<<<<<
 * 	"""Calculate Michaelis-Menten enzyme kinetics rate"""
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_63py_michaelis_menten_rate, 0, __pyx_mstate_global->__pyx_n_u_py_michaelis_menten_rate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[54])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_michaelis_menten_rate, __pyx_t_2) < 0) __PYX_ERR(0, 820, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":824
 * 	return michaelis_menten_rate(Vmax, Km, substrate_conc)
 * 
 * def py_competitive_inhibition_rate(double Vmax, double Km, double substrate_conc,             # <<<<<<<<<<<<<<
 * 								  double inhibitor_conc, double Ki):
 * 	"""Calculate rate with competitive inhibition"""
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_65py_competitive_inhibition_rate, 0, __pyx_mstate_global->__pyx_n_u_py_competitive_inhibition_rate, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[55])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_competitive_inhibition_rate, __pyx_t_2) < 0) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":830
 * 
 * # BATCH 5: Core thermodynamic functions
 * def py_enthalpy_c(double cp, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate enthalpy using constant pressure heat capacity"""
 * 	return enthalpy_c(cp, T)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_67py_enthalpy_c, 0, __pyx_mstate_global->__pyx_n_u_py_enthalpy_c, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[56])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_enthalpy_c, __pyx_t_2) < 0) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":834
 * 	return enthalpy_c(cp, T)
 * 
 * def py_entropy_c(double cp, double T):             # <<<<<<<<<<<<<<
 * 	"""Calculate entropy using constant pressure heat capacity"""
 * 	return entropy_c(cp, T)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_69py_entropy_c, 0, __pyx_mstate_global->__pyx_n_u_py_entropy_c, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[57])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_entropy_c, __pyx_t_2) < 0) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":839
 * 
 * # BATCH 6: Analytical solutions
 * def py_analytical_first_order(double k, double A0, double time_span, double dt, int max_len=1000):             # <<<<<<<<<<<<<<
 * 	"""Analytical solution for A -> B (first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_t_2 = __Pyx_PyLong_From_int(((int)0x3E8)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_71py_analytical_first_order, 0, __pyx_mstate_global->__pyx_n_u_py_analytical_first_order, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[58])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_analytical_first_order, __pyx_t_2) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":866
 * 
 * def py_analytical_reversible_first_order(double kf, double kr, double A0, double B0,
 * 										 double time_span, double dt, int max_len=1000):             # <<<<<<<<<<<<<<
 * 	"""Analytical solution for A <=> B (reversible first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_t_2 = __Pyx_PyLong_From_int(((int)0x3E8)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pyroxa/pybindings.pyx":865
 * 		free(B_out)
 * 
 * def py_analytical_reversible_first_order(double kf, double kr, double A0, double B0,             # <<<<<<<<<<<<<<
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A <=> B (reversible first order)"""
*/
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_73py_analytical_reversible_first_order, 0, __pyx_mstate_global->__pyx_n_u_py_analytical_reversible_first_o, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[59])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_analytical_reversible_first_o, __pyx_t_2) < 0) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":894
 * 
 * def py_analytical_consecutive_first_order(double k1, double k2, double A0,
 * 										 double time_span, double dt, int max_len=1000):             # <<<<<<<<<<<<<<
 * 	"""Analytical solution for A -> B -> C (consecutive first order)"""
 * 	cdef double* times = <double*>malloc(max_len * sizeof(double))
*/
  __pyx_t_2 = __Pyx_PyLong_From_int(((int)0x3E8)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pyroxa/pybindings.pyx":893
 * 		free(B_out)
 * 
 * def py_analytical_consecutive_first_order(double k1, double k2, double A0,             # <<<<<<<<<<<<<<
 * 										 double time_span, double dt, int max_len=1000):
 * 	"""Analytical solution for A -> B -> C (consecutive first order)"""
*/
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_75py_analytical_consecutive_first_order, 0, __pyx_mstate_global->__pyx_n_u_py_analytical_consecutive_first, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[60])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_analytical_consecutive_first, __pyx_t_2) < 0) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":926
 * 
 * # BATCH 8: Simple utility and optimization functions
 * def py_calculate_objective_function(experimental_data, simulated_data, weights=None):             # <<<<<<<<<<<<<<
 * 	"""Calculate objective function (sum of squared residuals) for optimization"""
 * 	cdef int ndata = len(experimental_data)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_77py_calculate_objective_function, 0, __pyx_mstate_global->__pyx_n_u_py_calculate_objective_function, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[61])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[7]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_calculate_objective_function, __pyx_t_2) < 0) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":945
 * 		free(weight_c)
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):             # <<<<<<<<<<<<<<
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_79py_check_mass_conservation, 0, __pyx_mstate_global->__pyx_n_u_py_check_mass_conservation, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[62])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[8]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_check_mass_conservation, __pyx_t_2) < 0) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":975
 * 		free(mass_balance)
 * 
 * def py_calculate_rate_constants(kf_ref, kr_ref, Ea_f, Ea_r, double T, double T_ref=298.15):             # <<<<<<<<<<<<<<
 * 	"""Calculate temperature-dependent rate constants using Arrhenius equation"""
 * 	cdef int M = len(kf_ref)
*/
  __pyx_t_2 = PyFloat_FromDouble(((double)298.15)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_81py_calculate_rate_constants, 0, __pyx_mstate_global->__pyx_n_u_py_calculate_rate_constants, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[63])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_calculate_rate_constants, __pyx_t_2) < 0) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1012
 * 
 * # BATCH 9: Simple utility and validation functions
 * def py_cross_validation_score(data, parameters, int n_folds=5):             # <<<<<<<<<<<<<<
 * 	"""Calculate cross-validation score for model validation"""
 * 	cdef int n_data = len(data)
*/
  __pyx_t_2 = __Pyx_PyLong_From_int(((int)5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_83py_cross_validation_score, 0, __pyx_mstate_global->__pyx_n_u_py_cross_validation_score, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[64])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_cross_validation_score, __pyx_t_2) < 0) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1030
 * 		free(params_c)
 * 
 * def py_kriging_interpolation(x_new, x_known, y_known, variogram_params=None):             # <<<<<<<<<<<<<<
 * 	"""Kriging interpolation for spatial data"""
 * 	cdef int n_known = len(x_known)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_85py_kriging_interpolation, 0, __pyx_mstate_global->__pyx_n_u_py_kriging_interpolation, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[65])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[7]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_kriging_interpolation, __pyx_t_2) < 0) __PYX_ERR(0, 1030, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1071
 * 		free(var_params_c)
 * 
 * def py_bootstrap_uncertainty(data, parameters, int n_bootstrap=1000):             # <<<<<<<<<<<<<<
 * 	"""Bootstrap uncertainty analysis"""
 * 	cdef int n_data = len(data)
*/
  __pyx_t_2 = __Pyx_PyLong_From_int(((int)0x3E8)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_87py_bootstrap_uncertainty, 0, __pyx_mstate_global->__pyx_n_u_py_bootstrap_uncertainty, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[66])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_bootstrap_uncertainty, __pyx_t_2) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1107
 * 
 * # BATCH 10: Matrix operations
 * def py_matrix_multiply(A, B):             # <<<<<<<<<<<<<<
 * 	"""Matrix multiplication C = A * B"""
 * 	import numpy as np
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_89py_matrix_multiply, 0, __pyx_mstate_global->__pyx_n_u_py_matrix_multiply, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[67])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_matrix_multiply, __pyx_t_2) < 0) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1153
 * 		free(C_c)
 * 
 * def py_matrix_invert(A):             # <<<<<<<<<<<<<<
 * 	"""Matrix inversion A_inv = A^(-1)"""
 * 	import numpy as np
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_91py_matrix_invert, 0, __pyx_mstate_global->__pyx_n_u_py_matrix_invert, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[68])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_matrix_invert, __pyx_t_2) < 0) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1187
 * 
 * # Simplified version using NumPy
 * def py_solve_linear_system(A, b):             # <<<<<<<<<<<<<<
 * 	"""Solve linear system Ax = b"""
 * 	import numpy as np
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_93py_solve_linear_system, 0, __pyx_mstate_global->__pyx_n_u_py_solve_linear_system, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[69])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_solve_linear_system, __pyx_t_2) < 0) __PYX_ERR(0, 1187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1224
 * 
 * # BATCH 11: Advanced optimization and sensitivity analysis
 * def py_calculate_sensitivity(params, concentrations, rates, n_params, n_species):             # <<<<<<<<<<<<<<
 * 	"""Calculate sensitivity matrix for parameter estimation"""
 * 	# Simple implementation matching test interface
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_95py_calculate_sensitivity, 0, __pyx_mstate_global->__pyx_n_u_py_calculate_sensitivity, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[70])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_calculate_sensitivity, __pyx_t_2) < 0) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1287
 * 		free(prod_idx); free(prod_nu); free(prod_off)
 * 
 * def py_calculate_jacobian(y, dydt, n_species):             # <<<<<<<<<<<<<<
 * 	"""Calculate Jacobian matrix for parameter estimation"""
 * 	import numpy as np
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_97py_calculate_jacobian, 0, __pyx_mstate_global->__pyx_n_u_py_calculate_jacobian, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[71])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_calculate_jacobian, __pyx_t_2) < 0) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1304
 * 	return jacobian.tolist()
 * 
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):             # <<<<<<<<<<<<<<
 * 	"""Perform stability analysis around steady state"""
 * 	import numpy as np
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_99py_stability_analysis, 0, __pyx_mstate_global->__pyx_n_u_py_stability_analysis, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[72])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[9]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_stability_analysis, __pyx_t_2) < 0) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1324
 * 	}
 * 
 * def py_mpc_controller(current_state, setpoints, control_bounds, reaction_network, int horizon=10):             # <<<<<<<<<<<<<<
 * 	"""Model Predictive Control implementation"""
 * 	N = len(current_state)
*/
  __pyx_t_2 = __Pyx_PyLong_From_int(((int)10)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_101py_mpc_controller, 0, __pyx_mstate_global->__pyx_n_u_py_mpc_controller, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[73])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_mpc_controller, __pyx_t_2) < 0) __PYX_ERR(0, 1324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1378
 * 		free(reac_idx); free(reac_nu); free(reac_off); free(prod_idx); free(prod_nu); free(prod_off)
 * 
 * def py_real_time_optimization(current_concentrations, economic_coefficients, control_bounds, reaction_network):             # <<<<<<<<<<<<<<
 * 	"""Real-time optimization for process economics"""
 * 	N = len(current_concentrations)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_103py_real_time_optimization, 0, __pyx_mstate_global->__pyx_n_u_py_real_time_optimization, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[74])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_real_time_optimization, __pyx_t_2) < 0) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1452
 * 						   double bed_length, double bed_porosity, double particle_diameter,
 * 						   double catalyst_density, double effectiveness_factor,
 * 						   double time_span, double dt, int max_len=1000):             # <<<<<<<<<<<<<<
 * 	"""Simulate packed bed reactor using original complex C++ implementation with full parameter exposure"""
 * 
*/
  __pyx_t_2 = __Pyx_PyLong_From_int(((int)0x3E8)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pyroxa/pybindings.pyx":1448
 * 
 * # BATCH 12: Advanced reactor simulations
 * def py_simulate_packed_bed(int N, int M, int nseg, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 						   prod_idx, prod_nu, prod_off, conc0, double flow_rate,
 * 						   double bed_length, double bed_porosity, double particle_diameter,
*/
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_105py_simulate_packed_bed, 0, __pyx_mstate_global->__pyx_n_u_py_simulate_packed_bed, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[75])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_simulate_packed_bed, __pyx_t_2) < 0) __PYX_ERR(0, 1448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1534
 * 							  double bed_height, double bed_porosity, double bubble_fraction,
 * 							  double particle_diameter, double catalyst_density,
 * 							  double time_span, double dt, int max_len=1000):             # <<<<<<<<<<<<<<
 * 	"""Simulate fluidized bed reactor using original complex C++ implementation with full parameter exposure"""
 * 
*/
  __pyx_t_2 = __Pyx_PyLong_From_int(((int)0x3E8)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pyroxa/pybindings.pyx":1530
 * 		free(pressure_out)
 * 
 * def py_simulate_fluidized_bed(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 							  prod_idx, prod_nu, prod_off, conc0, double gas_velocity,
 * 							  double bed_height, double bed_porosity, double bubble_fraction,
*/
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_107py_simulate_fluidized_bed, 0, __pyx_mstate_global->__pyx_n_u_py_simulate_fluidized_bed, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[76])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_simulate_fluidized_bed, __pyx_t_2) < 0) __PYX_ERR(0, 1530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1624
 * 								  prod_idx, prod_nu, prod_off, conc0, double volume,
 * 								  double mixing_intensity, double time_span, double dt,
 * 								  int max_len=1000):             # <<<<<<<<<<<<<<
 * 	"""Simulate homogeneous batch reactor using original complex C++ implementation with full parameter exposure"""
 * 
*/
  __pyx_t_2 = __Pyx_PyLong_From_int(((int)0x3E8)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pyroxa/pybindings.pyx":1621
 * 		free(emulsion_conc_out)
 * 
 * def py_simulate_homogeneous_batch(int N, int M, kf, kr, reac_idx, reac_nu, reac_off,             # <<<<<<<<<<<<<<
 * 								  prod_idx, prod_nu, prod_off, conc0, double volume,
 * 								  double mixing_intensity, double time_span, double dt,
*/
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_109py_simulate_homogeneous_batch, 0, __pyx_mstate_global->__pyx_n_u_py_simulate_homogeneous_batch, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[77])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_simulate_homogeneous_batch, __pyx_t_2) < 0) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1702
 * 		free(mixing_efficiency_out)
 * 
 * def py_simulate_multi_reactor_adaptive(reactor_config, feed_conditions, control_strategy=None):             # <<<<<<<<<<<<<<
 * 	"""Simulate multi-reactor system with adaptive control"""
 * 	import numpy as np
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_111py_simulate_multi_reactor_adaptive, 0, __pyx_mstate_global->__pyx_n_u_py_simulate_multi_reactor_adapti, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[78])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_mstate_global->__pyx_tuple[7]);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_simulate_multi_reactor_adapti, __pyx_t_2) < 0) __PYX_ERR(0, 1702, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1727
 * 
 * # BATCH 13: Energy analysis and statistical methods
 * def py_calculate_energy_balance(int N, int M, conc, reaction_rates,             # <<<<<<<<<<<<<<
 * 								enthalpies_formation, heat_capacities, double T):
 * 	"""Calculate energy balance using original complex C++ implementation with full parameter exposure"""
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_113py_calculate_energy_balance, 0, __pyx_mstate_global->__pyx_n_u_py_calculate_energy_balance, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[79])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_calculate_energy_balance, __pyx_t_2) < 0) __PYX_ERR(0, 1727, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1772
 * def py_monte_carlo_simulation(int N, int M, int nsamples, kf_mean, kr_mean, kf_std, kr_std,
 * 							  reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off,
 * 							  conc0, double time_span, double dt, int nthreads=1):             # <<<<<<<<<<<<<<
 * 	"""Monte Carlo simulation using original complex C++ implementation with full parameter exposure"""
 * 
*/
  __pyx_t_2 = __Pyx_PyLong_From_int(((int)1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pyroxa/pybindings.pyx":1770
 * 		free(cp_arr)
 * 
 * def py_monte_carlo_simulation(int N, int M, int nsamples, kf_mean, kr_mean, kf_std, kr_std,             # <<<<<<<<<<<<<<
 * 							  reac_idx, reac_nu, reac_off, prod_idx, prod_nu, prod_off,
 * 							  conc0, double time_span, double dt, int nthreads=1):
*/
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_115py_monte_carlo_simulation, 0, __pyx_mstate_global->__pyx_n_u_py_monte_carlo_simulation, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[80])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_monte_carlo_simulation, __pyx_t_2) < 0) __PYX_ERR(0, 1770, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1856
 * 		free(statistics_output)
 * 
 * def py_residence_time_distribution(flow_rates, volumes, n_tanks):             # <<<<<<<<<<<<<<
 * 	"""Calculate residence time distribution for tank series"""
 * 	import numpy as np
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_117py_residence_time_distribution, 0, __pyx_mstate_global->__pyx_n_u_py_residence_time_distribution, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[81])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_residence_time_distribution, __pyx_t_2) < 0) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1886
 * 
 * # BATCH 14: Final functions
 * def py_catalyst_deactivation_model(initial_activity, deactivation_constant, time, temperature, partial_pressure_poison):             # <<<<<<<<<<<<<<
 * 	"""Model catalyst deactivation over time"""
 * 	import numpy as np
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_119py_catalyst_deactivation_model, 0, __pyx_mstate_global->__pyx_n_u_py_catalyst_deactivation_model, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[82])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_catalyst_deactivation_model, __pyx_t_2) < 0) __PYX_ERR(0, 1886, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1915
 * 	}
 * 
 * def py_process_scale_up(lab_scale_volume, pilot_scale_volume, lab_conditions):             # <<<<<<<<<<<<<<
 * 	"""Scale up process from lab to pilot scale"""
 * 	import numpy as np
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6pyroxa_11_pybindings_121py_process_scale_up, 0, __pyx_mstate_global->__pyx_n_u_py_process_scale_up, NULL, __pyx_mstate_global->__pyx_n_u_pyroxa__pybindings, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[83])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_py_process_scale_up, __pyx_t_2) < 0) __PYX_ERR(0, 1915, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyroxa/pybindings.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # cython: language_level=3
 * 
*/
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_mstate->__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init pyroxa._pybindings", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyroxa._pybindings");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #else
  return __pyx_m;
  #endif
}
/* #### Code section: pystring_table ### */

typedef struct {
    const char *s;
#if 179 <= 65535
    const unsigned short n;
#elif 179 / 2 < INT_MAX
    const unsigned int n;
#elif 179 / 2 < LONG_MAX
    const unsigned long n;
#else
    const Py_ssize_t n;
#endif
#if 1 <= 31
    const unsigned int encoding : 5;
#elif 1 <= 255
    const unsigned char encoding;
#elif 1 <= 65535
    const unsigned short encoding;
#else
    const Py_ssize_t encoding;
#endif
    const unsigned int is_unicode : 1;
    const unsigned int intern : 1;
} __Pyx_StringTabEntry;
static const char * const __pyx_string_tab_encodings[] = { 0 };
static const __Pyx_StringTabEntry __pyx_string_tab[] = {
  {__pyx_k_, sizeof(__pyx_k_), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_ */
  {__pyx_k_A, sizeof(__pyx_k_A), 0, 1, 1}, /* PyObject cname: __pyx_n_u_A */
  {__pyx_k_A0, sizeof(__pyx_k_A0), 0, 1, 1}, /* PyObject cname: __pyx_n_u_A0 */
  {__pyx_k_A_c, sizeof(__pyx_k_A_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_A_c */
  {__pyx_k_A_inv, sizeof(__pyx_k_A_inv), 0, 1, 1}, /* PyObject cname: __pyx_n_u_A_inv */
  {__pyx_k_A_inv_c, sizeof(__pyx_k_A_inv_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_A_inv_c */
  {__pyx_k_A_list, sizeof(__pyx_k_A_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_A_list */
  {__pyx_k_A_must_be_a_square_matrix, sizeof(__pyx_k_A_must_be_a_square_matrix), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_A_must_be_a_square_matrix */
  {__pyx_k_A_out, sizeof(__pyx_k_A_out), 0, 1, 1}, /* PyObject cname: __pyx_n_u_A_out */
  {__pyx_k_Analytical_consecutive_first_ord, sizeof(__pyx_k_Analytical_consecutive_first_ord), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Analytical_consecutive_first_ord */
  {__pyx_k_Analytical_first_order_solution, sizeof(__pyx_k_Analytical_first_order_solution), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Analytical_first_order_solution */
  {__pyx_k_Analytical_reversible_first_orde, sizeof(__pyx_k_Analytical_reversible_first_orde), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Analytical_reversible_first_orde */
  {__pyx_k_Aout, sizeof(__pyx_k_Aout), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Aout */
  {__pyx_k_B, sizeof(__pyx_k_B), 0, 1, 1}, /* PyObject cname: __pyx_n_u_B */
  {__pyx_k_B0, sizeof(__pyx_k_B0), 0, 1, 1}, /* PyObject cname: __pyx_n_u_B0 */
  {__pyx_k_B_c, sizeof(__pyx_k_B_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_B_c */
  {__pyx_k_B_list, sizeof(__pyx_k_B_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_B_list */
  {__pyx_k_B_out, sizeof(__pyx_k_B_out), 0, 1, 1}, /* PyObject cname: __pyx_n_u_B_out */
  {__pyx_k_Bout, sizeof(__pyx_k_Bout), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Bout */
  {__pyx_k_C, sizeof(__pyx_k_C), 0, 1, 1}, /* PyObject cname: __pyx_n_u_C */
  {__pyx_k_C_c, sizeof(__pyx_k_C_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_C_c */
  {__pyx_k_C_list, sizeof(__pyx_k_C_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_C_list */
  {__pyx_k_C_out, sizeof(__pyx_k_C_out), 0, 1, 1}, /* PyObject cname: __pyx_n_u_C_out */
  {__pyx_k_Consider_enhanced_mixing_at_larg, sizeof(__pyx_k_Consider_enhanced_mixing_at_larg), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Consider_enhanced_mixing_at_larg */
  {__pyx_k_Ea, sizeof(__pyx_k_Ea), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Ea */
  {__pyx_k_Ea_f, sizeof(__pyx_k_Ea_f), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Ea_f */
  {__pyx_k_Ea_f_c, sizeof(__pyx_k_Ea_f_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Ea_f_c */
  {__pyx_k_Ea_r, sizeof(__pyx_k_Ea_r), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Ea_r */
  {__pyx_k_Ea_r_c, sizeof(__pyx_k_Ea_r_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Ea_r_c */
  {__pyx_k_Empty_concentration_data, sizeof(__pyx_k_Empty_concentration_data), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Empty_concentration_data */
  {__pyx_k_Energy_balance_calculation_faile, sizeof(__pyx_k_Energy_balance_calculation_faile), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Energy_balance_calculation_faile */
  {__pyx_k_HAS_NUMPY, sizeof(__pyx_k_HAS_NUMPY), 0, 1, 1}, /* PyObject cname: __pyx_n_u_HAS_NUMPY */
  {__pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ImportError */
  {__pyx_k_Input_must_be_a_square_matrix, sizeof(__pyx_k_Input_must_be_a_square_matrix), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Input_must_be_a_square_matrix */
  {__pyx_k_Inputs_must_be_2D_matrices, sizeof(__pyx_k_Inputs_must_be_2D_matrices), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Inputs_must_be_2D_matrices */
  {__pyx_k_K_A, sizeof(__pyx_k_K_A), 0, 1, 1}, /* PyObject cname: __pyx_n_u_K_A */
  {__pyx_k_K_B, sizeof(__pyx_k_K_B), 0, 1, 1}, /* PyObject cname: __pyx_n_u_K_B */
  {__pyx_k_Kd, sizeof(__pyx_k_Kd), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Kd */
  {__pyx_k_Ki, sizeof(__pyx_k_Ki), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Ki */
  {__pyx_k_Km, sizeof(__pyx_k_Km), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Km */
  {__pyx_k_Kp, sizeof(__pyx_k_Kp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Kp */
  {__pyx_k_Linear_system_solve_failed_matri, sizeof(__pyx_k_Linear_system_solve_failed_matri), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Linear_system_solve_failed_matri */
  {__pyx_k_M, sizeof(__pyx_k_M), 0, 1, 1}, /* PyObject cname: __pyx_n_u_M */
  {__pyx_k_Matrix_dimensions_incompatible_f, sizeof(__pyx_k_Matrix_dimensions_incompatible_f), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Matrix_dimensions_incompatible_f */
  {__pyx_k_Matrix_inversion_failed_matrix_m, sizeof(__pyx_k_Matrix_inversion_failed_matrix_m), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Matrix_inversion_failed_matrix_m */
  {__pyx_k_Matrix_multiplication_failed, sizeof(__pyx_k_Matrix_multiplication_failed), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Matrix_multiplication_failed */
  {__pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_MemoryError */
  {__pyx_k_Monitor_for_scale_up_effects, sizeof(__pyx_k_Monitor_for_scale_up_effects), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Monitor_for_scale_up_effects */
  {__pyx_k_Monte_Carlo_simulation_failed, sizeof(__pyx_k_Monte_Carlo_simulation_failed), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Monte_Carlo_simulation_failed */
  {__pyx_k_MultiReactor, sizeof(__pyx_k_MultiReactor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_MultiReactor */
  {__pyx_k_MultiReactor___reduce_cython, sizeof(__pyx_k_MultiReactor___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_MultiReactor___reduce_cython */
  {__pyx_k_MultiReactor___setstate_cython, sizeof(__pyx_k_MultiReactor___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_MultiReactor___setstate_cython */
  {__pyx_k_MultiReactor__dcdt, sizeof(__pyx_k_MultiReactor__dcdt), 0, 1, 1}, /* PyObject cname: __pyx_n_u_MultiReactor__dcdt */
  {__pyx_k_MultiReactor_run, sizeof(__pyx_k_MultiReactor_run), 0, 1, 1}, /* PyObject cname: __pyx_n_u_MultiReactor_run */
  {__pyx_k_MultiReactor_step, sizeof(__pyx_k_MultiReactor_step), 0, 1, 1}, /* PyObject cname: __pyx_n_u_MultiReactor_step */
  {__pyx_k_N, sizeof(__pyx_k_N), 0, 1, 1}, /* PyObject cname: __pyx_n_u_N */
  {__pyx_k_Note_that_Cython_is_deliberately, sizeof(__pyx_k_Note_that_Cython_is_deliberately), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Note_that_Cython_is_deliberately */
  {__pyx_k_P, sizeof(__pyx_k_P), 0, 1, 1}, /* PyObject cname: __pyx_n_u_P */
  {__pyx_k_Pc, sizeof(__pyx_k_Pc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Pc */
  {__pyx_k_Pr, sizeof(__pyx_k_Pr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Pr */
  {__pyx_k_R, sizeof(__pyx_k_R), 0, 1, 1}, /* PyObject cname: __pyx_n_u_R */
  {__pyx_k_Re, sizeof(__pyx_k_Re), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Re */
  {__pyx_k_Reaction, sizeof(__pyx_k_Reaction), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Reaction */
  {__pyx_k_ReactionMulti, sizeof(__pyx_k_ReactionMulti), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ReactionMulti */
  {__pyx_k_ReactionMulti___reduce_cython, sizeof(__pyx_k_ReactionMulti___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ReactionMulti___reduce_cython */
  {__pyx_k_ReactionMulti___setstate_cython, sizeof(__pyx_k_ReactionMulti___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ReactionMulti___setstate_cython */
  {__pyx_k_ReactionMulti_rate, sizeof(__pyx_k_ReactionMulti_rate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ReactionMulti_rate */
  {__pyx_k_Reaction___reduce_cython, sizeof(__pyx_k_Reaction___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Reaction___reduce_cython */
  {__pyx_k_Reaction___setstate_cython, sizeof(__pyx_k_Reaction___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Reaction___setstate_cython */
  {__pyx_k_Reaction_rate, sizeof(__pyx_k_Reaction_rate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Reaction_rate */
  {__pyx_k_Reactor, sizeof(__pyx_k_Reactor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Reactor */
  {__pyx_k_Reactor___reduce_cython, sizeof(__pyx_k_Reactor___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Reactor___reduce_cython */
  {__pyx_k_Reactor___setstate_cython, sizeof(__pyx_k_Reactor___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Reactor___setstate_cython */
  {__pyx_k_Reactor_run, sizeof(__pyx_k_Reactor_run), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Reactor_run */
  {__pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_RuntimeError */
  {__pyx_k_Sc, sizeof(__pyx_k_Sc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Sc */
  {__pyx_k_Simulation_failed, sizeof(__pyx_k_Simulation_failed), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Simulation_failed */
  {__pyx_k_T, sizeof(__pyx_k_T), 0, 1, 1}, /* PyObject cname: __pyx_n_u_T */
  {__pyx_k_T_ref, sizeof(__pyx_k_T_ref), 0, 1, 1}, /* PyObject cname: __pyx_n_u_T_ref */
  {__pyx_k_Tc, sizeof(__pyx_k_Tc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Tc */
  {__pyx_k_Thermodynamics, sizeof(__pyx_k_Thermodynamics), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Thermodynamics */
  {__pyx_k_Thermodynamics___reduce_cython, sizeof(__pyx_k_Thermodynamics___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Thermodynamics___reduce_cython */
  {__pyx_k_Thermodynamics___setstate_cython, sizeof(__pyx_k_Thermodynamics___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Thermodynamics___setstate_cython */
  {__pyx_k_Thermodynamics_enthalpy, sizeof(__pyx_k_Thermodynamics_enthalpy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Thermodynamics_enthalpy */
  {__pyx_k_Thermodynamics_entropy, sizeof(__pyx_k_Thermodynamics_entropy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Thermodynamics_entropy */
  {__pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_TypeError */
  {__pyx_k_V, sizeof(__pyx_k_V), 0, 1, 1}, /* PyObject cname: __pyx_n_u_V */
  {__pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ValueError */
  {__pyx_k_Verify_similar_residence_time_di, sizeof(__pyx_k_Verify_similar_residence_time_di), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Verify_similar_residence_time_di */
  {__pyx_k_Vmax, sizeof(__pyx_k_Vmax), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Vmax */
  {__pyx_k_aarr, sizeof(__pyx_k_aarr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_aarr */
  {__pyx_k_activation_energy, sizeof(__pyx_k_activation_energy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_activation_energy */
  {__pyx_k_add_note, sizeof(__pyx_k_add_note), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_add_note */
  {__pyx_k_allocation_failed, sizeof(__pyx_k_allocation_failed), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_allocation_failed */
  {__pyx_k_allocation_failed_for_coeffs, sizeof(__pyx_k_allocation_failed_for_coeffs), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_allocation_failed_for_coeffs */
  {__pyx_k_allocation_failed_for_conc0, sizeof(__pyx_k_allocation_failed_for_conc0), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_allocation_failed_for_conc0 */
  {__pyx_k_allocation_failed_for_kf_kr, sizeof(__pyx_k_allocation_failed_for_kf_kr), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_allocation_failed_for_kf_kr */
  {__pyx_k_allocation_failed_for_output_buf, sizeof(__pyx_k_allocation_failed_for_output_buf), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_allocation_failed_for_output_buf */
  {__pyx_k_allocation_failed_for_products, sizeof(__pyx_k_allocation_failed_for_products), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_allocation_failed_for_products */
  {__pyx_k_allocation_failed_for_reactants, sizeof(__pyx_k_allocation_failed_for_reactants), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_allocation_failed_for_reactants */
  {__pyx_k_area_scale, sizeof(__pyx_k_area_scale), 0, 1, 1}, /* PyObject cname: __pyx_n_u_area_scale */
  {__pyx_k_array, sizeof(__pyx_k_array), 0, 1, 1}, /* PyObject cname: __pyx_n_u_array */
  {__pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 1, 1}, /* PyObject cname: __pyx_n_u_asyncio_coroutines */
  {__pyx_k_b, sizeof(__pyx_k_b), 0, 1, 1}, /* PyObject cname: __pyx_n_u_b */
  {__pyx_k_b_c, sizeof(__pyx_k_b_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_b_c */
  {__pyx_k_b_must_be_a_vector_with_length_e, sizeof(__pyx_k_b_must_be_a_vector_with_length_e), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_b_must_be_a_vector_with_length_e */
  {__pyx_k_bed_height, sizeof(__pyx_k_bed_height), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bed_height */
  {__pyx_k_bed_length, sizeof(__pyx_k_bed_length), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bed_length */
  {__pyx_k_bed_porosity, sizeof(__pyx_k_bed_porosity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bed_porosity */
  {__pyx_k_bounds, sizeof(__pyx_k_bounds), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bounds */
  {__pyx_k_bubble_conc_out, sizeof(__pyx_k_bubble_conc_out), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bubble_conc_out */
  {__pyx_k_bubble_concentrations, sizeof(__pyx_k_bubble_concentrations), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bubble_concentrations */
  {__pyx_k_bubble_fraction, sizeof(__pyx_k_bubble_fraction), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bubble_fraction */
  {__pyx_k_bubble_matrix, sizeof(__pyx_k_bubble_matrix), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bubble_matrix */
  {__pyx_k_bubble_t, sizeof(__pyx_k_bubble_t), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bubble_t */
  {__pyx_k_c_coeffs, sizeof(__pyx_k_c_coeffs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_coeffs */
  {__pyx_k_c_conc0, sizeof(__pyx_k_c_conc0), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_conc0 */
  {__pyx_k_c_prod_idx, sizeof(__pyx_k_c_prod_idx), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_prod_idx */
  {__pyx_k_c_prod_nu, sizeof(__pyx_k_c_prod_nu), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_prod_nu */
  {__pyx_k_c_prod_off, sizeof(__pyx_k_c_prod_off), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_prod_off */
  {__pyx_k_c_reac_idx, sizeof(__pyx_k_c_reac_idx), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_reac_idx */
  {__pyx_k_c_reac_nu, sizeof(__pyx_k_c_reac_nu), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_reac_nu */
  {__pyx_k_c_reac_off, sizeof(__pyx_k_c_reac_off), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_reac_off */
  {__pyx_k_carr, sizeof(__pyx_k_carr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_carr */
  {__pyx_k_catalyst_density, sizeof(__pyx_k_catalyst_density), 0, 1, 1}, /* PyObject cname: __pyx_n_u_catalyst_density */
  {__pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 1, 1}, /* PyObject cname: __pyx_n_u_class_getitem */
  {__pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cline_in_traceback */
  {__pyx_k_close, sizeof(__pyx_k_close), 0, 1, 1}, /* PyObject cname: __pyx_n_u_close */
  {__pyx_k_coeffs, sizeof(__pyx_k_coeffs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_coeffs */
  {__pyx_k_conc, sizeof(__pyx_k_conc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_conc */
  {__pyx_k_conc0, sizeof(__pyx_k_conc0), 0, 1, 1}, /* PyObject cname: __pyx_n_u_conc0 */
  {__pyx_k_conc0_arr, sizeof(__pyx_k_conc0_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_conc0_arr */
  {__pyx_k_conc0_py, sizeof(__pyx_k_conc0_py), 0, 1, 1}, /* PyObject cname: __pyx_n_u_conc0_py */
  {__pyx_k_conc_A, sizeof(__pyx_k_conc_A), 0, 1, 1}, /* PyObject cname: __pyx_n_u_conc_A */
  {__pyx_k_conc_B, sizeof(__pyx_k_conc_B), 0, 1, 1}, /* PyObject cname: __pyx_n_u_conc_B */
  {__pyx_k_conc_arr, sizeof(__pyx_k_conc_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_conc_arr */
  {__pyx_k_conc_matrix, sizeof(__pyx_k_conc_matrix), 0, 1, 1}, /* PyObject cname: __pyx_n_u_conc_matrix */
  {__pyx_k_conc_out_flat, sizeof(__pyx_k_conc_out_flat), 0, 1, 1}, /* PyObject cname: __pyx_n_u_conc_out_flat */
  {__pyx_k_conc_t, sizeof(__pyx_k_conc_t), 0, 1, 1}, /* PyObject cname: __pyx_n_u_conc_t */
  {__pyx_k_conc_traj, sizeof(__pyx_k_conc_traj), 0, 1, 1}, /* PyObject cname: __pyx_n_u_conc_traj */
  {__pyx_k_concentration, sizeof(__pyx_k_concentration), 0, 1, 1}, /* PyObject cname: __pyx_n_u_concentration */
  {__pyx_k_concentrations, sizeof(__pyx_k_concentrations), 0, 1, 1}, /* PyObject cname: __pyx_n_u_concentrations */
  {__pyx_k_concs, sizeof(__pyx_k_concs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_concs */
  {__pyx_k_constriction_factor, sizeof(__pyx_k_constriction_factor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_constriction_factor */
  {__pyx_k_control_actions, sizeof(__pyx_k_control_actions), 0, 1, 1}, /* PyObject cname: __pyx_n_u_control_actions */
  {__pyx_k_control_bounds, sizeof(__pyx_k_control_bounds), 0, 1, 1}, /* PyObject cname: __pyx_n_u_control_bounds */
  {__pyx_k_control_strategy, sizeof(__pyx_k_control_strategy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_control_strategy */
  {__pyx_k_convergence, sizeof(__pyx_k_convergence), 0, 1, 1}, /* PyObject cname: __pyx_n_u_convergence */
  {__pyx_k_conversion, sizeof(__pyx_k_conversion), 0, 1, 1}, /* PyObject cname: __pyx_n_u_conversion */
  {__pyx_k_cp, sizeof(__pyx_k_cp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cp */
  {__pyx_k_cp_arr, sizeof(__pyx_k_cp_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cp_arr */
  {__pyx_k_ctypes, sizeof(__pyx_k_ctypes), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ctypes */
  {__pyx_k_current_activity, sizeof(__pyx_k_current_activity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_current_activity */
  {__pyx_k_current_concentrations, sizeof(__pyx_k_current_concentrations), 0, 1, 1}, /* PyObject cname: __pyx_n_u_current_concentrations */
  {__pyx_k_current_state, sizeof(__pyx_k_current_state), 0, 1, 1}, /* PyObject cname: __pyx_n_u_current_state */
  {__pyx_k_data, sizeof(__pyx_k_data), 0, 1, 1}, /* PyObject cname: __pyx_n_u_data */
  {__pyx_k_data_c, sizeof(__pyx_k_data_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_data_c */
  {__pyx_k_dcdt, sizeof(__pyx_k_dcdt), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dcdt */
  {__pyx_k_deactivation_constant, sizeof(__pyx_k_deactivation_constant), 0, 1, 1}, /* PyObject cname: __pyx_n_u_deactivation_constant */
  {__pyx_k_deactivation_rate, sizeof(__pyx_k_deactivation_rate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_deactivation_rate */
  {__pyx_k_delta_G, sizeof(__pyx_k_delta_G), 0, 1, 1}, /* PyObject cname: __pyx_n_u_delta_G */
  {__pyx_k_density, sizeof(__pyx_k_density), 0, 1, 1}, /* PyObject cname: __pyx_n_u_density */
  {__pyx_k_dimensionless_variance, sizeof(__pyx_k_dimensionless_variance), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dimensionless_variance */
  {__pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_disable */
  {__pyx_k_distribution, sizeof(__pyx_k_distribution), 0, 1, 1}, /* PyObject cname: __pyx_n_u_distribution */
  {__pyx_k_dt, sizeof(__pyx_k_dt), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dt */
  {__pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype */
  {__pyx_k_dydt, sizeof(__pyx_k_dydt), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dydt */
  {__pyx_k_econ_coeffs, sizeof(__pyx_k_econ_coeffs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_econ_coeffs */
  {__pyx_k_economic_coefficients, sizeof(__pyx_k_economic_coefficients), 0, 1, 1}, /* PyObject cname: __pyx_n_u_economic_coefficients */
  {__pyx_k_effective_kd, sizeof(__pyx_k_effective_kd), 0, 1, 1}, /* PyObject cname: __pyx_n_u_effective_kd */
  {__pyx_k_effectiveness_factor, sizeof(__pyx_k_effectiveness_factor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_effectiveness_factor */
  {__pyx_k_eigenval, sizeof(__pyx_k_eigenval), 0, 1, 1}, /* PyObject cname: __pyx_n_u_eigenval */
  {__pyx_k_eigenvalues, sizeof(__pyx_k_eigenvalues), 0, 1, 1}, /* PyObject cname: __pyx_n_u_eigenvalues */
  {__pyx_k_empty, sizeof(__pyx_k_empty), 0, 1, 1}, /* PyObject cname: __pyx_n_u_empty */
  {__pyx_k_emulsion_conc_out, sizeof(__pyx_k_emulsion_conc_out), 0, 1, 1}, /* PyObject cname: __pyx_n_u_emulsion_conc_out */
  {__pyx_k_emulsion_concentrations, sizeof(__pyx_k_emulsion_concentrations), 0, 1, 1}, /* PyObject cname: __pyx_n_u_emulsion_concentrations */
  {__pyx_k_emulsion_matrix, sizeof(__pyx_k_emulsion_matrix), 0, 1, 1}, /* PyObject cname: __pyx_n_u_emulsion_matrix */
  {__pyx_k_emulsion_t, sizeof(__pyx_k_emulsion_t), 0, 1, 1}, /* PyObject cname: __pyx_n_u_emulsion_t */
  {__pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_enable */
  {__pyx_k_enthalpies_arr, sizeof(__pyx_k_enthalpies_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_enthalpies_arr */
  {__pyx_k_enthalpies_formation, sizeof(__pyx_k_enthalpies_formation), 0, 1, 1}, /* PyObject cname: __pyx_n_u_enthalpies_formation */
  {__pyx_k_enthalpy, sizeof(__pyx_k_enthalpy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_enthalpy */
  {__pyx_k_entropy, sizeof(__pyx_k_entropy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_entropy */
  {__pyx_k_error, sizeof(__pyx_k_error), 0, 1, 1}, /* PyObject cname: __pyx_n_u_error */
  {__pyx_k_ev, sizeof(__pyx_k_ev), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ev */
  {__pyx_k_exp, sizeof(__pyx_k_exp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_exp */
  {__pyx_k_exp_c, sizeof(__pyx_k_exp_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_exp_c */
  {__pyx_k_experimental, sizeof(__pyx_k_experimental), 0, 1, 1}, /* PyObject cname: __pyx_n_u_experimental */
  {__pyx_k_experimental_data, sizeof(__pyx_k_experimental_data), 0, 1, 1}, /* PyObject cname: __pyx_n_u_experimental_data */
  {__pyx_k_feed_conditions, sizeof(__pyx_k_feed_conditions), 0, 1, 1}, /* PyObject cname: __pyx_n_u_feed_conditions */
  {__pyx_k_float64, sizeof(__pyx_k_float64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_float64 */
  {__pyx_k_flow_rate, sizeof(__pyx_k_flow_rate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_flow_rate */
  {__pyx_k_flow_rate_adjust, sizeof(__pyx_k_flow_rate_adjust), 0, 1, 1}, /* PyObject cname: __pyx_n_u_flow_rate_adjust */
  {__pyx_k_flow_rates, sizeof(__pyx_k_flow_rates), 0, 1, 1}, /* PyObject cname: __pyx_n_u_flow_rates */
  {__pyx_k_func, sizeof(__pyx_k_func), 0, 1, 1}, /* PyObject cname: __pyx_n_u_func */
  {__pyx_k_gas_constant, sizeof(__pyx_k_gas_constant), 0, 1, 1}, /* PyObject cname: __pyx_n_u_gas_constant */
  {__pyx_k_gas_velocity, sizeof(__pyx_k_gas_velocity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_gas_velocity */
  {__pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_gc */
  {__pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_genexpr */
  {__pyx_k_geometry_factor, sizeof(__pyx_k_geometry_factor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_geometry_factor */
  {__pyx_k_get, sizeof(__pyx_k_get), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get */
  {__pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_getstate */
  {__pyx_k_heat_capacities, sizeof(__pyx_k_heat_capacities), 0, 1, 1}, /* PyObject cname: __pyx_n_u_heat_capacities */
  {__pyx_k_heat_generation, sizeof(__pyx_k_heat_generation), 0, 1, 1}, /* PyObject cname: __pyx_n_u_heat_generation */
  {__pyx_k_heat_generation_val, sizeof(__pyx_k_heat_generation_val), 0, 1, 1}, /* PyObject cname: __pyx_n_u_heat_generation_val */
  {__pyx_k_heat_transfer, sizeof(__pyx_k_heat_transfer), 0, 1, 1}, /* PyObject cname: __pyx_n_u_heat_transfer */
  {__pyx_k_heat_transfer_coeff, sizeof(__pyx_k_heat_transfer_coeff), 0, 1, 1}, /* PyObject cname: __pyx_n_u_heat_transfer_coeff */
  {__pyx_k_horizon, sizeof(__pyx_k_horizon), 0, 1, 1}, /* PyObject cname: __pyx_n_u_horizon */
  {__pyx_k_i, sizeof(__pyx_k_i), 0, 1, 1}, /* PyObject cname: __pyx_n_u_i */
  {__pyx_k_index, sizeof(__pyx_k_index), 0, 1, 1}, /* PyObject cname: __pyx_n_u_index */
  {__pyx_k_inhibitor_conc, sizeof(__pyx_k_inhibitor_conc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_inhibitor_conc */
  {__pyx_k_initial, sizeof(__pyx_k_initial), 0, 1, 1}, /* PyObject cname: __pyx_n_u_initial */
  {__pyx_k_initial_activity, sizeof(__pyx_k_initial_activity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_initial_activity */
  {__pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 1, 1}, /* PyObject cname: __pyx_n_u_initializing */
  {__pyx_k_integral_term, sizeof(__pyx_k_integral_term), 0, 1, 1}, /* PyObject cname: __pyx_n_u_integral_term */
  {__pyx_k_is_conserved, sizeof(__pyx_k_is_conserved), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_conserved */
  {__pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_coroutine */
  {__pyx_k_is_stable, sizeof(__pyx_k_is_stable), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_stable */
  {__pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_isenabled */
  {__pyx_k_items, sizeof(__pyx_k_items), 0, 1, 1}, /* PyObject cname: __pyx_n_u_items */
  {__pyx_k_j, sizeof(__pyx_k_j), 0, 1, 1}, /* PyObject cname: __pyx_n_u_j */
  {__pyx_k_jacobian, sizeof(__pyx_k_jacobian), 0, 1, 1}, /* PyObject cname: __pyx_n_u_jacobian */
  {__pyx_k_k, sizeof(__pyx_k_k), 0, 1, 1}, /* PyObject cname: __pyx_n_u_k */
  {__pyx_k_k1, sizeof(__pyx_k_k1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_k1 */
  {__pyx_k_k2, sizeof(__pyx_k_k2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_k2 */
  {__pyx_k_k3, sizeof(__pyx_k_k3), 0, 1, 1}, /* PyObject cname: __pyx_n_u_k3 */
  {__pyx_k_k4, sizeof(__pyx_k_k4), 0, 1, 1}, /* PyObject cname: __pyx_n_u_k4 */
  {__pyx_k_kf, sizeof(__pyx_k_kf), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kf */
  {__pyx_k_kf_arr, sizeof(__pyx_k_kf_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kf_arr */
  {__pyx_k_kf_c, sizeof(__pyx_k_kf_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kf_c */
  {__pyx_k_kf_mean, sizeof(__pyx_k_kf_mean), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kf_mean */
  {__pyx_k_kf_mean_arr, sizeof(__pyx_k_kf_mean_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kf_mean_arr */
  {__pyx_k_kf_out, sizeof(__pyx_k_kf_out), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kf_out */
  {__pyx_k_kf_out_c, sizeof(__pyx_k_kf_out_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kf_out_c */
  {__pyx_k_kf_ptr, sizeof(__pyx_k_kf_ptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kf_ptr */
  {__pyx_k_kf_ref, sizeof(__pyx_k_kf_ref), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kf_ref */
  {__pyx_k_kf_ref_c, sizeof(__pyx_k_kf_ref_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kf_ref_c */
  {__pyx_k_kf_std, sizeof(__pyx_k_kf_std), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kf_std */
  {__pyx_k_kf_std_arr, sizeof(__pyx_k_kf_std_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kf_std_arr */
  {__pyx_k_kr, sizeof(__pyx_k_kr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kr */
  {__pyx_k_kr_arr, sizeof(__pyx_k_kr_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kr_arr */
  {__pyx_k_kr_c, sizeof(__pyx_k_kr_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kr_c */
  {__pyx_k_kr_mean, sizeof(__pyx_k_kr_mean), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kr_mean */
  {__pyx_k_kr_mean_arr, sizeof(__pyx_k_kr_mean_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kr_mean_arr */
  {__pyx_k_kr_out, sizeof(__pyx_k_kr_out), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kr_out */
  {__pyx_k_kr_out_c, sizeof(__pyx_k_kr_out_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kr_out_c */
  {__pyx_k_kr_ptr, sizeof(__pyx_k_kr_ptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kr_ptr */
  {__pyx_k_kr_ref, sizeof(__pyx_k_kr_ref), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kr_ref */
  {__pyx_k_kr_ref_c, sizeof(__pyx_k_kr_ref_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kr_ref_c */
  {__pyx_k_kr_std, sizeof(__pyx_k_kr_std), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kr_std */
  {__pyx_k_kr_std_arr, sizeof(__pyx_k_kr_std_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kr_std_arr */
  {__pyx_k_lab_conditions, sizeof(__pyx_k_lab_conditions), 0, 1, 1}, /* PyObject cname: __pyx_n_u_lab_conditions */
  {__pyx_k_lab_scale_volume, sizeof(__pyx_k_lab_scale_volume), 0, 1, 1}, /* PyObject cname: __pyx_n_u_lab_scale_volume */
  {__pyx_k_length_scale, sizeof(__pyx_k_length_scale), 0, 1, 1}, /* PyObject cname: __pyx_n_u_length_scale */
  {__pyx_k_light_intensity, sizeof(__pyx_k_light_intensity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_light_intensity */
  {__pyx_k_log, sizeof(__pyx_k_log), 0, 1, 1}, /* PyObject cname: __pyx_n_u_log */
  {__pyx_k_m, sizeof(__pyx_k_m), 0, 1, 1}, /* PyObject cname: __pyx_n_u_m */
  {__pyx_k_main, sizeof(__pyx_k_main), 0, 1, 1}, /* PyObject cname: __pyx_n_u_main */
  {__pyx_k_mass_balance, sizeof(__pyx_k_mass_balance), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mass_balance */
  {__pyx_k_mass_balance_list, sizeof(__pyx_k_mass_balance_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mass_balance_list */
  {__pyx_k_mass_transfer, sizeof(__pyx_k_mass_transfer), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mass_transfer */
  {__pyx_k_max, sizeof(__pyx_k_max), 0, 1, 1}, /* PyObject cname: __pyx_n_u_max */
  {__pyx_k_max_len, sizeof(__pyx_k_max_len), 0, 1, 1}, /* PyObject cname: __pyx_n_u_max_len */
  {__pyx_k_max_list, sizeof(__pyx_k_max_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_max_list */
  {__pyx_k_max_violation, sizeof(__pyx_k_max_violation), 0, 1, 1}, /* PyObject cname: __pyx_n_u_max_violation */
  {__pyx_k_mean, sizeof(__pyx_k_mean), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mean */
  {__pyx_k_mean_list, sizeof(__pyx_k_mean_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mean_list */
  {__pyx_k_mean_residence_time, sizeof(__pyx_k_mean_residence_time), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mean_residence_time */
  {__pyx_k_mean_residence_times, sizeof(__pyx_k_mean_residence_times), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mean_residence_times */
  {__pyx_k_min, sizeof(__pyx_k_min), 0, 1, 1}, /* PyObject cname: __pyx_n_u_min */
  {__pyx_k_min_list, sizeof(__pyx_k_min_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_min_list */
  {__pyx_k_mixing_efficiency, sizeof(__pyx_k_mixing_efficiency), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mixing_efficiency */
  {__pyx_k_mixing_efficiency_out, sizeof(__pyx_k_mixing_efficiency_out), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mixing_efficiency_out */
  {__pyx_k_mixing_intensity, sizeof(__pyx_k_mixing_intensity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mixing_intensity */
  {__pyx_k_mixing_time, sizeof(__pyx_k_mixing_time), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mixing_time */
  {__pyx_k_module, sizeof(__pyx_k_module), 0, 1, 1}, /* PyObject cname: __pyx_n_u_module */
  {__pyx_k_molar_absorptivity, sizeof(__pyx_k_molar_absorptivity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_molar_absorptivity */
  {__pyx_k_molecular_diff, sizeof(__pyx_k_molecular_diff), 0, 1, 1}, /* PyObject cname: __pyx_n_u_molecular_diff */
  {__pyx_k_multi_reactor_C_simulation_faile, sizeof(__pyx_k_multi_reactor_C_simulation_faile), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_multi_reactor_C_simulation_faile */
  {__pyx_k_n, sizeof(__pyx_k_n), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n */
  {__pyx_k_n_bootstrap, sizeof(__pyx_k_n_bootstrap), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n_bootstrap */
  {__pyx_k_n_controls, sizeof(__pyx_k_n_controls), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n_controls */
  {__pyx_k_n_data, sizeof(__pyx_k_n_data), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n_data */
  {__pyx_k_n_folds, sizeof(__pyx_k_n_folds), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n_folds */
  {__pyx_k_n_known, sizeof(__pyx_k_n_known), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n_known */
  {__pyx_k_n_params, sizeof(__pyx_k_n_params), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n_params */
  {__pyx_k_n_points, sizeof(__pyx_k_n_points), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n_points */
  {__pyx_k_n_reactions, sizeof(__pyx_k_n_reactions), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n_reactions */
  {__pyx_k_n_reactors, sizeof(__pyx_k_n_reactors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n_reactors */
  {__pyx_k_n_samples, sizeof(__pyx_k_n_samples), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n_samples */
  {__pyx_k_n_species, sizeof(__pyx_k_n_species), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n_species */
  {__pyx_k_n_tanks, sizeof(__pyx_k_n_tanks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n_tanks */
  {__pyx_k_name, sizeof(__pyx_k_name), 0, 1, 1}, /* PyObject cname: __pyx_n_u_name */
  {__pyx_k_ndata, sizeof(__pyx_k_ndata), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ndata */
  {__pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ndim */
  {__pyx_k_next, sizeof(__pyx_k_next), 0, 1, 1}, /* PyObject cname: __pyx_n_u_next */
  {__pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_no_default___reduce___due_to_non */
  {__pyx_k_np, sizeof(__pyx_k_np), 0, 1, 1}, /* PyObject cname: __pyx_n_u_np */
  {__pyx_k_nparams, sizeof(__pyx_k_nparams), 0, 1, 1}, /* PyObject cname: __pyx_n_u_nparams */
  {__pyx_k_npoints, sizeof(__pyx_k_npoints), 0, 1, 1}, /* PyObject cname: __pyx_n_u_npoints */
  {__pyx_k_npts, sizeof(__pyx_k_npts), 0, 1, 1}, /* PyObject cname: __pyx_n_u_npts */
  {__pyx_k_nsamples, sizeof(__pyx_k_nsamples), 0, 1, 1}, /* PyObject cname: __pyx_n_u_nsamples */
  {__pyx_k_nseg, sizeof(__pyx_k_nseg), 0, 1, 1}, /* PyObject cname: __pyx_n_u_nseg */
  {__pyx_k_nsteps, sizeof(__pyx_k_nsteps), 0, 1, 1}, /* PyObject cname: __pyx_n_u_nsteps */
  {__pyx_k_nthreads, sizeof(__pyx_k_nthreads), 0, 1, 1}, /* PyObject cname: __pyx_n_u_nthreads */
  {__pyx_k_nu, sizeof(__pyx_k_nu), 0, 1, 1}, /* PyObject cname: __pyx_n_u_nu */
  {__pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_numpy */
  {__pyx_k_numpy__core_multiarray_failed_to, sizeof(__pyx_k_numpy__core_multiarray_failed_to), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_numpy__core_multiarray_failed_to */
  {__pyx_k_numpy__core_umath_failed_to_impo, sizeof(__pyx_k_numpy__core_umath_failed_to_impo), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_numpy__core_umath_failed_to_impo */
  {__pyx_k_omega, sizeof(__pyx_k_omega), 0, 1, 1}, /* PyObject cname: __pyx_n_u_omega */
  {__pyx_k_optimal_controls, sizeof(__pyx_k_optimal_controls), 0, 1, 1}, /* PyObject cname: __pyx_n_u_optimal_controls */
  {__pyx_k_optimal_settings, sizeof(__pyx_k_optimal_settings), 0, 1, 1}, /* PyObject cname: __pyx_n_u_optimal_settings */
  {__pyx_k_overall_conversion, sizeof(__pyx_k_overall_conversion), 0, 1, 1}, /* PyObject cname: __pyx_n_u_overall_conversion */
  {__pyx_k_overall_mean_tau, sizeof(__pyx_k_overall_mean_tau), 0, 1, 1}, /* PyObject cname: __pyx_n_u_overall_mean_tau */
  {__pyx_k_p, sizeof(__pyx_k_p), 0, 1, 1}, /* PyObject cname: __pyx_n_u_p */
  {__pyx_k_param_distribution, sizeof(__pyx_k_param_distribution), 0, 1, 1}, /* PyObject cname: __pyx_n_u_param_distribution */
  {__pyx_k_param_samples, sizeof(__pyx_k_param_samples), 0, 1, 1}, /* PyObject cname: __pyx_n_u_param_samples */
  {__pyx_k_parameter_distribution, sizeof(__pyx_k_parameter_distribution), 0, 1, 1}, /* PyObject cname: __pyx_n_u_parameter_distribution */
  {__pyx_k_parameters, sizeof(__pyx_k_parameters), 0, 1, 1}, /* PyObject cname: __pyx_n_u_parameters */
  {__pyx_k_params, sizeof(__pyx_k_params), 0, 1, 1}, /* PyObject cname: __pyx_n_u_params */
  {__pyx_k_params_c, sizeof(__pyx_k_params_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_params_c */
  {__pyx_k_partial_pressure_poison, sizeof(__pyx_k_partial_pressure_poison), 0, 1, 1}, /* PyObject cname: __pyx_n_u_partial_pressure_poison */
  {__pyx_k_particle_diameter, sizeof(__pyx_k_particle_diameter), 0, 1, 1}, /* PyObject cname: __pyx_n_u_particle_diameter */
  {__pyx_k_path_length, sizeof(__pyx_k_path_length), 0, 1, 1}, /* PyObject cname: __pyx_n_u_path_length */
  {__pyx_k_pilot_conditions, sizeof(__pyx_k_pilot_conditions), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pilot_conditions */
  {__pyx_k_pilot_scale_volume, sizeof(__pyx_k_pilot_scale_volume), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pilot_scale_volume */
  {__pyx_k_poison_factor, sizeof(__pyx_k_poison_factor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_poison_factor */
  {__pyx_k_pop, sizeof(__pyx_k_pop), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pop */
  {__pyx_k_porosity, sizeof(__pyx_k_porosity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_porosity */
  {__pyx_k_power_scale, sizeof(__pyx_k_power_scale), 0, 1, 1}, /* PyObject cname: __pyx_n_u_power_scale */
  {__pyx_k_pre_exponential, sizeof(__pyx_k_pre_exponential), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pre_exponential */
  {__pyx_k_pred_c, sizeof(__pyx_k_pred_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pred_c */
  {__pyx_k_predicted, sizeof(__pyx_k_predicted), 0, 1, 1}, /* PyObject cname: __pyx_n_u_predicted */
  {__pyx_k_predicted_profit, sizeof(__pyx_k_predicted_profit), 0, 1, 1}, /* PyObject cname: __pyx_n_u_predicted_profit */
  {__pyx_k_pressure, sizeof(__pyx_k_pressure), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pressure */
  {__pyx_k_pressure_drop, sizeof(__pyx_k_pressure_drop), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pressure_drop */
  {__pyx_k_pressure_out, sizeof(__pyx_k_pressure_out), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pressure_out */
  {__pyx_k_pressure_out_list, sizeof(__pyx_k_pressure_out_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pressure_out_list */
  {__pyx_k_previous_error, sizeof(__pyx_k_previous_error), 0, 1, 1}, /* PyObject cname: __pyx_n_u_previous_error */
  {__pyx_k_process_variable, sizeof(__pyx_k_process_variable), 0, 1, 1}, /* PyObject cname: __pyx_n_u_process_variable */
  {__pyx_k_prod_idx, sizeof(__pyx_k_prod_idx), 0, 1, 1}, /* PyObject cname: __pyx_n_u_prod_idx */
  {__pyx_k_prod_idx_arr, sizeof(__pyx_k_prod_idx_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_prod_idx_arr */
  {__pyx_k_prod_idx_list, sizeof(__pyx_k_prod_idx_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_prod_idx_list */
  {__pyx_k_prod_nu, sizeof(__pyx_k_prod_nu), 0, 1, 1}, /* PyObject cname: __pyx_n_u_prod_nu */
  {__pyx_k_prod_nu_arr, sizeof(__pyx_k_prod_nu_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_prod_nu_arr */
  {__pyx_k_prod_nu_list, sizeof(__pyx_k_prod_nu_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_prod_nu_list */
  {__pyx_k_prod_off, sizeof(__pyx_k_prod_off), 0, 1, 1}, /* PyObject cname: __pyx_n_u_prod_off */
  {__pyx_k_prod_off_arr, sizeof(__pyx_k_prod_off_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_prod_off_arr */
  {__pyx_k_products, sizeof(__pyx_k_products), 0, 1, 1}, /* PyObject cname: __pyx_n_u_products */
  {__pyx_k_py_analytical_consecutive_first, sizeof(__pyx_k_py_analytical_consecutive_first), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_analytical_consecutive_first */
  {__pyx_k_py_analytical_first_order, sizeof(__pyx_k_py_analytical_first_order), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_analytical_first_order */
  {__pyx_k_py_analytical_reversible_first_o, sizeof(__pyx_k_py_analytical_reversible_first_o), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_analytical_reversible_first_o */
  {__pyx_k_py_arrhenius_rate, sizeof(__pyx_k_py_arrhenius_rate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_arrhenius_rate */
  {__pyx_k_py_autocatalytic_rate, sizeof(__pyx_k_py_autocatalytic_rate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_autocatalytic_rate */
  {__pyx_k_py_bootstrap_uncertainty, sizeof(__pyx_k_py_bootstrap_uncertainty), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_bootstrap_uncertainty */
  {__pyx_k_py_calculate_aic, sizeof(__pyx_k_py_calculate_aic), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_calculate_aic */
  {__pyx_k_py_calculate_energy_balance, sizeof(__pyx_k_py_calculate_energy_balance), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_calculate_energy_balance */
  {__pyx_k_py_calculate_jacobian, sizeof(__pyx_k_py_calculate_jacobian), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_calculate_jacobian */
  {__pyx_k_py_calculate_objective_function, sizeof(__pyx_k_py_calculate_objective_function), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_calculate_objective_function */
  {__pyx_k_py_calculate_r_squared, sizeof(__pyx_k_py_calculate_r_squared), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_calculate_r_squared */
  {__pyx_k_py_calculate_rate_constants, sizeof(__pyx_k_py_calculate_rate_constants), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_calculate_rate_constants */
  {__pyx_k_py_calculate_rmse, sizeof(__pyx_k_py_calculate_rmse), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_calculate_rmse */
  {__pyx_k_py_calculate_sensitivity, sizeof(__pyx_k_py_calculate_sensitivity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_calculate_sensitivity */
  {__pyx_k_py_catalyst_deactivation_model, sizeof(__pyx_k_py_catalyst_deactivation_model), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_catalyst_deactivation_model */
  {__pyx_k_py_check_mass_conservation, sizeof(__pyx_k_py_check_mass_conservation), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_check_mass_conservation */
  {__pyx_k_py_check_mass_conservation_local, sizeof(__pyx_k_py_check_mass_conservation_local), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_check_mass_conservation_local */
  {__pyx_k_py_competitive_inhibition_rate, sizeof(__pyx_k_py_competitive_inhibition_rate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_competitive_inhibition_rate */
  {__pyx_k_py_cross_validation_score, sizeof(__pyx_k_py_cross_validation_score), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_cross_validation_score */
  {__pyx_k_py_cubic_spline_interpolate, sizeof(__pyx_k_py_cubic_spline_interpolate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_cubic_spline_interpolate */
  {__pyx_k_py_effective_diffusivity, sizeof(__pyx_k_py_effective_diffusivity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_effective_diffusivity */
  {__pyx_k_py_enthalpy_c, sizeof(__pyx_k_py_enthalpy_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_enthalpy_c */
  {__pyx_k_py_enthalpy_nasa, sizeof(__pyx_k_py_enthalpy_nasa), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_enthalpy_nasa */
  {__pyx_k_py_entropy_c, sizeof(__pyx_k_py_entropy_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_entropy_c */
  {__pyx_k_py_entropy_nasa, sizeof(__pyx_k_py_entropy_nasa), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_entropy_nasa */
  {__pyx_k_py_equilibrium_constant, sizeof(__pyx_k_py_equilibrium_constant), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_equilibrium_constant */
  {__pyx_k_py_fugacity_coefficient, sizeof(__pyx_k_py_fugacity_coefficient), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_fugacity_coefficient */
  {__pyx_k_py_gibbs_free_energy, sizeof(__pyx_k_py_gibbs_free_energy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_gibbs_free_energy */
  {__pyx_k_py_heat_capacity_nasa, sizeof(__pyx_k_py_heat_capacity_nasa), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_heat_capacity_nasa */
  {__pyx_k_py_heat_transfer_correlation, sizeof(__pyx_k_py_heat_transfer_correlation), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_heat_transfer_correlation */
  {__pyx_k_py_kriging_interpolation, sizeof(__pyx_k_py_kriging_interpolation), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_kriging_interpolation */
  {__pyx_k_py_langmuir_hinshelwood_rate, sizeof(__pyx_k_py_langmuir_hinshelwood_rate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_langmuir_hinshelwood_rate */
  {__pyx_k_py_linear_interpolate, sizeof(__pyx_k_py_linear_interpolate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_linear_interpolate */
  {__pyx_k_py_mass_transfer_correlation, sizeof(__pyx_k_py_mass_transfer_correlation), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_mass_transfer_correlation */
  {__pyx_k_py_matrix_invert, sizeof(__pyx_k_py_matrix_invert), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_matrix_invert */
  {__pyx_k_py_matrix_multiply, sizeof(__pyx_k_py_matrix_multiply), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_matrix_multiply */
  {__pyx_k_py_michaelis_menten_rate, sizeof(__pyx_k_py_michaelis_menten_rate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_michaelis_menten_rate */
  {__pyx_k_py_monte_carlo_simulation, sizeof(__pyx_k_py_monte_carlo_simulation), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_monte_carlo_simulation */
  {__pyx_k_py_mpc_controller, sizeof(__pyx_k_py_mpc_controller), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_mpc_controller */
  {__pyx_k_py_photochemical_rate, sizeof(__pyx_k_py_photochemical_rate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_photochemical_rate */
  {__pyx_k_py_pid_controller, sizeof(__pyx_k_py_pid_controller), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_pid_controller */
  {__pyx_k_py_pressure_drop_ergun, sizeof(__pyx_k_py_pressure_drop_ergun), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_pressure_drop_ergun */
  {__pyx_k_py_pressure_peng_robinson, sizeof(__pyx_k_py_pressure_peng_robinson), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_pressure_peng_robinson */
  {__pyx_k_py_process_scale_up, sizeof(__pyx_k_py_process_scale_up), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_process_scale_up */
  {__pyx_k_py_real_time_optimization, sizeof(__pyx_k_py_real_time_optimization), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_real_time_optimization */
  {__pyx_k_py_residence_time_distribution, sizeof(__pyx_k_py_residence_time_distribution), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_residence_time_distribution */
  {__pyx_k_py_residence_time_distribution_l, sizeof(__pyx_k_py_residence_time_distribution_l), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_residence_time_distribution_l */
  {__pyx_k_py_simulate_fluidized_bed, sizeof(__pyx_k_py_simulate_fluidized_bed), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_simulate_fluidized_bed */
  {__pyx_k_py_simulate_homogeneous_batch, sizeof(__pyx_k_py_simulate_homogeneous_batch), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_simulate_homogeneous_batch */
  {__pyx_k_py_simulate_multi_reactor_adapti, sizeof(__pyx_k_py_simulate_multi_reactor_adapti), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_simulate_multi_reactor_adapti */
  {__pyx_k_py_simulate_packed_bed, sizeof(__pyx_k_py_simulate_packed_bed), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_simulate_packed_bed */
  {__pyx_k_py_solve_linear_system, sizeof(__pyx_k_py_solve_linear_system), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_solve_linear_system */
  {__pyx_k_py_stability_analysis, sizeof(__pyx_k_py_stability_analysis), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_stability_analysis */
  {__pyx_k_py_stability_analysis_locals_gen, sizeof(__pyx_k_py_stability_analysis_locals_gen), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_stability_analysis_locals_gen */
  {__pyx_k_py_times, sizeof(__pyx_k_py_times), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_times */
  {__pyx_k_pyroxa__pybindings, sizeof(__pyx_k_pyroxa__pybindings), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pyroxa__pybindings */
  {__pyx_k_pyroxa_pybindings_pyx, sizeof(__pyx_k_pyroxa_pybindings_pyx), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_pyroxa_pybindings_pyx */
  {__pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pyx_state */
  {__pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pyx_vtable */
  {__pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 1, 1}, /* PyObject cname: __pyx_n_u_qualname */
  {__pyx_k_quantum_yield, sizeof(__pyx_k_quantum_yield), 0, 1, 1}, /* PyObject cname: __pyx_n_u_quantum_yield */
  {__pyx_k_r, sizeof(__pyx_k_r), 0, 1, 1}, /* PyObject cname: __pyx_n_u_r */
  {__pyx_k_range, sizeof(__pyx_k_range), 0, 1, 1}, /* PyObject cname: __pyx_n_u_range */
  {__pyx_k_rate, sizeof(__pyx_k_rate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_rate */
  {__pyx_k_rates, sizeof(__pyx_k_rates), 0, 1, 1}, /* PyObject cname: __pyx_n_u_rates */
  {__pyx_k_rates_arr, sizeof(__pyx_k_rates_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_rates_arr */
  {__pyx_k_reac_idx, sizeof(__pyx_k_reac_idx), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reac_idx */
  {__pyx_k_reac_idx_arr, sizeof(__pyx_k_reac_idx_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reac_idx_arr */
  {__pyx_k_reac_idx_list, sizeof(__pyx_k_reac_idx_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reac_idx_list */
  {__pyx_k_reac_nu, sizeof(__pyx_k_reac_nu), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reac_nu */
  {__pyx_k_reac_nu_arr, sizeof(__pyx_k_reac_nu_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reac_nu_arr */
  {__pyx_k_reac_nu_list, sizeof(__pyx_k_reac_nu_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reac_nu_list */
  {__pyx_k_reac_off, sizeof(__pyx_k_reac_off), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reac_off */
  {__pyx_k_reac_off_arr, sizeof(__pyx_k_reac_off_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reac_off_arr */
  {__pyx_k_reactants, sizeof(__pyx_k_reactants), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reactants */
  {__pyx_k_reaction, sizeof(__pyx_k_reaction), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reaction */
  {__pyx_k_reaction_network, sizeof(__pyx_k_reaction_network), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reaction_network */
  {__pyx_k_reaction_rates, sizeof(__pyx_k_reaction_rates), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reaction_rates */
  {__pyx_k_reactions, sizeof(__pyx_k_reactions), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reactions */
  {__pyx_k_reactor, sizeof(__pyx_k_reactor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reactor */
  {__pyx_k_reactor_config, sizeof(__pyx_k_reactor_config), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reactor_config */
  {__pyx_k_reactor_id, sizeof(__pyx_k_reactor_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reactor_id */
  {__pyx_k_reactor_output, sizeof(__pyx_k_reactor_output), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reactor_output */
  {__pyx_k_reactor_outputs, sizeof(__pyx_k_reactor_outputs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reactor_outputs */
  {__pyx_k_recommendations, sizeof(__pyx_k_recommendations), 0, 1, 1}, /* PyObject cname: __pyx_n_u_recommendations */
  {__pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce */
  {__pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce_cython */
  {__pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce_ex */
  {__pyx_k_remaining_lifetime, sizeof(__pyx_k_remaining_lifetime), 0, 1, 1}, /* PyObject cname: __pyx_n_u_remaining_lifetime */
  {__pyx_k_residence_time, sizeof(__pyx_k_residence_time), 0, 1, 1}, /* PyObject cname: __pyx_n_u_residence_time */
  {__pyx_k_result, sizeof(__pyx_k_result), 0, 1, 1}, /* PyObject cname: __pyx_n_u_result */
  {__pyx_k_round, sizeof(__pyx_k_round), 0, 1, 1}, /* PyObject cname: __pyx_n_u_round */
  {__pyx_k_run, sizeof(__pyx_k_run), 0, 1, 1}, /* PyObject cname: __pyx_n_u_run */
  {__pyx_k_run_simulation_cpp, sizeof(__pyx_k_run_simulation_cpp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_run_simulation_cpp */
  {__pyx_k_rxn, sizeof(__pyx_k_rxn), 0, 1, 1}, /* PyObject cname: __pyx_n_u_rxn */
  {__pyx_k_rxns, sizeof(__pyx_k_rxns), 0, 1, 1}, /* PyObject cname: __pyx_n_u_rxns */
  {__pyx_k_s, sizeof(__pyx_k_s), 0, 1, 1}, /* PyObject cname: __pyx_n_u_s */
  {__pyx_k_scale_factor, sizeof(__pyx_k_scale_factor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_scale_factor */
  {__pyx_k_self, sizeof(__pyx_k_self), 0, 1, 1}, /* PyObject cname: __pyx_n_u_self */
  {__pyx_k_send, sizeof(__pyx_k_send), 0, 1, 1}, /* PyObject cname: __pyx_n_u_send */
  {__pyx_k_sensitivity_matrix, sizeof(__pyx_k_sensitivity_matrix), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sensitivity_matrix */
  {__pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 1, 1}, /* PyObject cname: __pyx_n_u_set_name */
  {__pyx_k_setpoint, sizeof(__pyx_k_setpoint), 0, 1, 1}, /* PyObject cname: __pyx_n_u_setpoint */
  {__pyx_k_setpoints, sizeof(__pyx_k_setpoints), 0, 1, 1}, /* PyObject cname: __pyx_n_u_setpoints */
  {__pyx_k_setpts, sizeof(__pyx_k_setpts), 0, 1, 1}, /* PyObject cname: __pyx_n_u_setpts */
  {__pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_setstate */
  {__pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_setstate_cython */
  {__pyx_k_shape, sizeof(__pyx_k_shape), 0, 1, 1}, /* PyObject cname: __pyx_n_u_shape */
  {__pyx_k_sim, sizeof(__pyx_k_sim), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sim */
  {__pyx_k_sim_c, sizeof(__pyx_k_sim_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sim_c */
  {__pyx_k_simulated_data, sizeof(__pyx_k_simulated_data), 0, 1, 1}, /* PyObject cname: __pyx_n_u_simulated_data */
  {__pyx_k_simulation_failed_or_insufficien, sizeof(__pyx_k_simulation_failed_or_insufficien), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_simulation_failed_or_insufficien */
  {__pyx_k_spec, sizeof(__pyx_k_spec), 0, 1, 1}, /* PyObject cname: __pyx_n_u_spec */
  {__pyx_k_spec_2, sizeof(__pyx_k_spec_2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_spec_2 */
  {__pyx_k_spec_must_be_a_dict, sizeof(__pyx_k_spec_must_be_a_dict), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_spec_must_be_a_dict */
  {__pyx_k_species, sizeof(__pyx_k_species), 0, 1, 1}, /* PyObject cname: __pyx_n_u_species */
  {__pyx_k_state, sizeof(__pyx_k_state), 0, 1, 1}, /* PyObject cname: __pyx_n_u_state */
  {__pyx_k_statistics, sizeof(__pyx_k_statistics), 0, 1, 1}, /* PyObject cname: __pyx_n_u_statistics */
  {__pyx_k_statistics_output, sizeof(__pyx_k_statistics_output), 0, 1, 1}, /* PyObject cname: __pyx_n_u_statistics_output */
  {__pyx_k_std, sizeof(__pyx_k_std), 0, 1, 1}, /* PyObject cname: __pyx_n_u_std */
  {__pyx_k_std_list, sizeof(__pyx_k_std_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_std_list */
  {__pyx_k_steady_state, sizeof(__pyx_k_steady_state), 0, 1, 1}, /* PyObject cname: __pyx_n_u_steady_state */
  {__pyx_k_step, sizeof(__pyx_k_step), 0, 1, 1}, /* PyObject cname: __pyx_n_u_step */
  {__pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_stringsource */
  {__pyx_k_substrate_conc, sizeof(__pyx_k_substrate_conc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_substrate_conc */
  {__pyx_k_success, sizeof(__pyx_k_success), 0, 1, 1}, /* PyObject cname: __pyx_n_u_success */
  {__pyx_k_sum, sizeof(__pyx_k_sum), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sum */
  {__pyx_k_t, sizeof(__pyx_k_t), 0, 1, 1}, /* PyObject cname: __pyx_n_u_t */
  {__pyx_k_tank_residence_times, sizeof(__pyx_k_tank_residence_times), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tank_residence_times */
  {__pyx_k_tarr, sizeof(__pyx_k_tarr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tarr */
  {__pyx_k_tau, sizeof(__pyx_k_tau), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tau */
  {__pyx_k_temp_factor, sizeof(__pyx_k_temp_factor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_temp_factor */
  {__pyx_k_temperature, sizeof(__pyx_k_temperature), 0, 1, 1}, /* PyObject cname: __pyx_n_u_temperature */
  {__pyx_k_temperature_adjust, sizeof(__pyx_k_temperature_adjust), 0, 1, 1}, /* PyObject cname: __pyx_n_u_temperature_adjust */
  {__pyx_k_temperature_factor, sizeof(__pyx_k_temperature_factor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_temperature_factor */
  {__pyx_k_test, sizeof(__pyx_k_test), 0, 1, 1}, /* PyObject cname: __pyx_n_u_test */
  {__pyx_k_throw, sizeof(__pyx_k_throw), 0, 1, 1}, /* PyObject cname: __pyx_n_u_throw */
  {__pyx_k_time, sizeof(__pyx_k_time), 0, 1, 1}, /* PyObject cname: __pyx_n_u_time */
  {__pyx_k_time_span, sizeof(__pyx_k_time_span), 0, 1, 1}, /* PyObject cname: __pyx_n_u_time_span */
  {__pyx_k_time_step, sizeof(__pyx_k_time_step), 0, 1, 1}, /* PyObject cname: __pyx_n_u_time_step */
  {__pyx_k_times, sizeof(__pyx_k_times), 0, 1, 1}, /* PyObject cname: __pyx_n_u_times */
  {__pyx_k_times_buf, sizeof(__pyx_k_times_buf), 0, 1, 1}, /* PyObject cname: __pyx_n_u_times_buf */
  {__pyx_k_times_list, sizeof(__pyx_k_times_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_times_list */
  {__pyx_k_times_out, sizeof(__pyx_k_times_out), 0, 1, 1}, /* PyObject cname: __pyx_n_u_times_out */
  {__pyx_k_times_py, sizeof(__pyx_k_times_py), 0, 1, 1}, /* PyObject cname: __pyx_n_u_times_py */
  {__pyx_k_tolerance, sizeof(__pyx_k_tolerance), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tolerance */
  {__pyx_k_tolist, sizeof(__pyx_k_tolist), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tolist */
  {__pyx_k_tortuosity, sizeof(__pyx_k_tortuosity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tortuosity */
  {__pyx_k_total_flow, sizeof(__pyx_k_total_flow), 0, 1, 1}, /* PyObject cname: __pyx_n_u_total_flow */
  {__pyx_k_total_prod, sizeof(__pyx_k_total_prod), 0, 1, 1}, /* PyObject cname: __pyx_n_u_total_prod */
  {__pyx_k_total_reac, sizeof(__pyx_k_total_reac), 0, 1, 1}, /* PyObject cname: __pyx_n_u_total_reac */
  {__pyx_k_total_volume, sizeof(__pyx_k_total_volume), 0, 1, 1}, /* PyObject cname: __pyx_n_u_total_volume */
  {__pyx_k_traj, sizeof(__pyx_k_traj), 0, 1, 1}, /* PyObject cname: __pyx_n_u_traj */
  {__pyx_k_value, sizeof(__pyx_k_value), 0, 1, 1}, /* PyObject cname: __pyx_n_u_value */
  {__pyx_k_var_params_c, sizeof(__pyx_k_var_params_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_var_params_c */
  {__pyx_k_variance, sizeof(__pyx_k_variance), 0, 1, 1}, /* PyObject cname: __pyx_n_u_variance */
  {__pyx_k_variogram_params, sizeof(__pyx_k_variogram_params), 0, 1, 1}, /* PyObject cname: __pyx_n_u_variogram_params */
  {__pyx_k_velocity, sizeof(__pyx_k_velocity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_velocity */
  {__pyx_k_viscosity, sizeof(__pyx_k_viscosity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_viscosity */
  {__pyx_k_volume, sizeof(__pyx_k_volume), 0, 1, 1}, /* PyObject cname: __pyx_n_u_volume */
  {__pyx_k_volumes, sizeof(__pyx_k_volumes), 0, 1, 1}, /* PyObject cname: __pyx_n_u_volumes */
  {__pyx_k_weight_c, sizeof(__pyx_k_weight_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_weight_c */
  {__pyx_k_weights, sizeof(__pyx_k_weights), 0, 1, 1}, /* PyObject cname: __pyx_n_u_weights */
  {__pyx_k_written, sizeof(__pyx_k_written), 0, 1, 1}, /* PyObject cname: __pyx_n_u_written */
  {__pyx_k_x, sizeof(__pyx_k_x), 0, 1, 1}, /* PyObject cname: __pyx_n_u_x */
  {__pyx_k_x_c, sizeof(__pyx_k_x_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_x_c */
  {__pyx_k_x_data, sizeof(__pyx_k_x_data), 0, 1, 1}, /* PyObject cname: __pyx_n_u_x_data */
  {__pyx_k_x_data_c, sizeof(__pyx_k_x_data_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_x_data_c */
  {__pyx_k_x_known, sizeof(__pyx_k_x_known), 0, 1, 1}, /* PyObject cname: __pyx_n_u_x_known */
  {__pyx_k_x_known_c, sizeof(__pyx_k_x_known_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_x_known_c */
  {__pyx_k_x_new, sizeof(__pyx_k_x_new), 0, 1, 1}, /* PyObject cname: __pyx_n_u_x_new */
  {__pyx_k_x_new_c, sizeof(__pyx_k_x_new_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_x_new_c */
  {__pyx_k_x_new_list, sizeof(__pyx_k_x_new_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_x_new_list */
  {__pyx_k_y, sizeof(__pyx_k_y), 0, 1, 1}, /* PyObject cname: __pyx_n_u_y */
  {__pyx_k_y0, sizeof(__pyx_k_y0), 0, 1, 1}, /* PyObject cname: __pyx_n_u_y0 */
  {__pyx_k_y1, sizeof(__pyx_k_y1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_y1 */
  {__pyx_k_y2, sizeof(__pyx_k_y2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_y2 */
  {__pyx_k_y3, sizeof(__pyx_k_y3), 0, 1, 1}, /* PyObject cname: __pyx_n_u_y3 */
  {__pyx_k_y_data, sizeof(__pyx_k_y_data), 0, 1, 1}, /* PyObject cname: __pyx_n_u_y_data */
  {__pyx_k_y_data_c, sizeof(__pyx_k_y_data_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_y_data_c */
  {__pyx_k_y_known, sizeof(__pyx_k_y_known), 0, 1, 1}, /* PyObject cname: __pyx_n_u_y_known */
  {__pyx_k_y_known_c, sizeof(__pyx_k_y_known_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_y_known_c */
  {__pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 1, 1}, /* PyObject cname: __pyx_n_u_zeros */
  {0, 0, 0, 0, 0}
};
/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names);

/* #### Code section: cached_builtins ### */

static int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_range); if (!__pyx_builtin_range) __PYX_ERR(0, 352, __pyx_L1_error)
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_round); if (!__pyx_builtin_round) __PYX_ERR(0, 358, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 396, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 400, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 948, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_max); if (!__pyx_builtin_max) __PYX_ERR(0, 969, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 1870, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1010, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pyroxa/pybindings.pyx":465
 * 				raise MemoryError('allocation failed for kf/kr')
 * 			for i in range(M):
 * 				kf_ptr[i] = float(rxns[i].get('kf', 1.0))             # <<<<<<<<<<<<<<
 * 				kr_ptr[i] = float(rxns[i].get('kr', 0.0))
 * 		else:
*/
  __pyx_mstate_global->__pyx_tuple[0] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_kf, __pyx_mstate_global->__pyx_float_1_0); if (unlikely(!__pyx_mstate_global->__pyx_tuple[0])) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[0]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[0]);

  /* "pyroxa/pybindings.pyx":466
 * 			for i in range(M):
 * 				kf_ptr[i] = float(rxns[i].get('kf', 1.0))
 * 				kr_ptr[i] = float(rxns[i].get('kr', 0.0))             # <<<<<<<<<<<<<<
 * 		else:
 * 			kf_ptr = <double*>0
*/
  __pyx_mstate_global->__pyx_tuple[1] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_kr, __pyx_mstate_global->__pyx_float_0_0); if (unlikely(!__pyx_mstate_global->__pyx_tuple[1])) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[1]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[1]);

  /* "pyroxa/pybindings.pyx":541
 * 			c_conc0 = <double*>0
 * 		# output buffers
 * 		nsteps = int(round(float(sim.get('time_span', 10.0)) / float(sim.get('time_step', 0.01))))             # <<<<<<<<<<<<<<
 * 		npts = nsteps + 1
 * 		max_len = npts
*/
  __pyx_mstate_global->__pyx_tuple[2] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_time_span, __pyx_mstate_global->__pyx_float_10_0); if (unlikely(!__pyx_mstate_global->__pyx_tuple[2])) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[2]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[2]);
  __pyx_mstate_global->__pyx_tuple[3] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_time_step, __pyx_mstate_global->__pyx_float_0_01); if (unlikely(!__pyx_mstate_global->__pyx_tuple[3])) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[3]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[3]);

  /* "pyroxa/pybindings.pyx":582
 * 	else:
 * 		kf = float(reaction.get('kf', 1.0))
 * 		kr = float(reaction.get('kr', 0.5))             # <<<<<<<<<<<<<<
 * 		conc = initial.get('conc', {})
 * 		A0 = float(conc.get('A', 1.0))
*/
  __pyx_mstate_global->__pyx_tuple[4] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_kr, __pyx_mstate_global->__pyx_float_0_5); if (unlikely(!__pyx_mstate_global->__pyx_tuple[4])) __PYX_ERR(0, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[4]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[4]);

  /* "pyroxa/pybindings.pyx":584
 * 		kr = float(reaction.get('kr', 0.5))
 * 		conc = initial.get('conc', {})
 * 		A0 = float(conc.get('A', 1.0))             # <<<<<<<<<<<<<<
 * 		B0 = float(conc.get('B', 0.0))
 * 		time_span = float(sim.get('time_span', 10.0))
*/
  __pyx_mstate_global->__pyx_tuple[5] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_A, __pyx_mstate_global->__pyx_float_1_0); if (unlikely(!__pyx_mstate_global->__pyx_tuple[5])) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[5]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[5]);

  /* "pyroxa/pybindings.pyx":585
 * 		conc = initial.get('conc', {})
 * 		A0 = float(conc.get('A', 1.0))
 * 		B0 = float(conc.get('B', 0.0))             # <<<<<<<<<<<<<<
 * 		time_span = float(sim.get('time_span', 10.0))
 * 		dt = float(sim.get('time_step', 0.01))
*/
  __pyx_mstate_global->__pyx_tuple[6] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_n_u_B, __pyx_mstate_global->__pyx_float_0_0); if (unlikely(!__pyx_mstate_global->__pyx_tuple[6])) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[6]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[6]);

  /* "pyroxa/pybindings.pyx":926
 * 
 * # BATCH 8: Simple utility and optimization functions
 * def py_calculate_objective_function(experimental_data, simulated_data, weights=None):             # <<<<<<<<<<<<<<
 * 	"""Calculate objective function (sum of squared residuals) for optimization"""
 * 	cdef int ndata = len(experimental_data)
*/
  __pyx_mstate_global->__pyx_tuple[7] = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[7])) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[7]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[7]);

  /* "pyroxa/pybindings.pyx":945
 * 		free(weight_c)
 * 
 * def py_check_mass_conservation(concentrations, tolerance=1e-6):             # <<<<<<<<<<<<<<
 * 	"""Check mass conservation during simulation"""
 * 	if not concentrations or len(concentrations) == 0:
*/
  __pyx_mstate_global->__pyx_tuple[8] = PyTuple_Pack(1, ((PyObject*)__pyx_mstate_global->__pyx_float_1eneg_6)); if (unlikely(!__pyx_mstate_global->__pyx_tuple[8])) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[8]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[8]);

  /* "pyroxa/pybindings.pyx":1304
 * 	return jacobian.tolist()
 * 
 * def py_stability_analysis(steady_state, n_species, temperature=298.15, pressure=101325.0):             # <<<<<<<<<<<<<<
 * 	"""Perform stability analysis around steady state"""
 * 	import numpy as np
*/
  __pyx_mstate_global->__pyx_tuple[9] = PyTuple_Pack(2, ((PyObject*)__pyx_mstate_global->__pyx_float_298_15), ((PyObject*)__pyx_mstate_global->__pyx_float_101325_0)); if (unlikely(!__pyx_mstate_global->__pyx_tuple[9])) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[9]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[9]);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __pyx_mstate->__pyx_umethod_PyDict_Type_pop.type = (PyObject*)&PyDict_Type;
  __pyx_mstate->__pyx_umethod_PyDict_Type_pop.method_name = &__pyx_mstate->__pyx_n_u_pop;
  if (__Pyx_InitStrings(__pyx_string_tab, __pyx_mstate->__pyx_string_tab, __pyx_string_tab_encodings) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_mstate->__pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_mstate->__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_mstate->__pyx_float_0_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_0_2 = PyFloat_FromDouble(0.2); if (unlikely(!__pyx_mstate->__pyx_float_0_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_mstate->__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_0_7 = PyFloat_FromDouble(0.7); if (unlikely(!__pyx_mstate->__pyx_float_0_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_0_9 = PyFloat_FromDouble(0.9); if (unlikely(!__pyx_mstate->__pyx_float_0_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_mstate->__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_2_0 = PyFloat_FromDouble(2.0); if (unlikely(!__pyx_mstate->__pyx_float_2_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_0_01 = PyFloat_FromDouble(0.01); if (unlikely(!__pyx_mstate->__pyx_float_0_01)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_0_05 = PyFloat_FromDouble(0.05); if (unlikely(!__pyx_mstate->__pyx_float_0_05)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_0_15 = PyFloat_FromDouble(0.15); if (unlikely(!__pyx_mstate->__pyx_float_0_15)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_10_0 = PyFloat_FromDouble(10.0); if (unlikely(!__pyx_mstate->__pyx_float_10_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_1eneg_6 = PyFloat_FromDouble(1e-6); if (unlikely(!__pyx_mstate->__pyx_float_1eneg_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_8_314 = PyFloat_FromDouble(8.314); if (unlikely(!__pyx_mstate->__pyx_float_8_314)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_298_15 = PyFloat_FromDouble(298.15); if (unlikely(!__pyx_mstate->__pyx_float_298_15)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_101325_0 = PyFloat_FromDouble(101325.0); if (unlikely(!__pyx_mstate->__pyx_float_101325_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_float_neg_1_0 = PyFloat_FromDouble(-1.0); if (unlikely(!__pyx_mstate->__pyx_float_neg_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_0 = PyLong_FromLong(0); if (unlikely(!__pyx_mstate->__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_1 = PyLong_FromLong(1); if (unlikely(!__pyx_mstate->__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_2 = PyLong_FromLong(2); if (unlikely(!__pyx_mstate->__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_10 = PyLong_FromLong(10); if (unlikely(!__pyx_mstate->__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_50 = PyLong_FromLong(50); if (unlikely(!__pyx_mstate->__pyx_int_50)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_neg_5000 = PyLong_FromLong(-5000); if (unlikely(!__pyx_mstate->__pyx_int_neg_5000)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_codeobjects ### */
\
        typedef struct {
            unsigned int argcount : 5;
            unsigned int num_posonly_args : 1;
            unsigned int num_kwonly_args : 1;
            unsigned int nlocals : 6;
            unsigned int flags : 10;
            unsigned int first_line : 11;
            unsigned int line_table_length : 16;
        } __Pyx_PyCode_New_function_description;
/* NewCodeObj.proto */
static PyObject* __Pyx_PyCode_New(
        const __Pyx_PyCode_New_function_description descr,
        PyObject * const *varnames,
        PyObject *filename,
        PyObject *funcname,
        const char *line_table,
        PyObject *tuple_dedup_map
);


static int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate) {
  PyObject* tuple_dedup_map = PyDict_New();
  if (unlikely(!tuple_dedup_map)) return -1;
  {
    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR), 969, 2};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_x};
    __pyx_mstate_global->__pyx_codeobj_tab[0] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_genexpr, __pyx_k_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[0])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR), 1315, 2};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_ev};
    __pyx_mstate_global->__pyx_codeobj_tab[1] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_genexpr, __pyx_k_A_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[1])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR), 1870, 2};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[2] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_genexpr, __pyx_k_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[2])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR), 1871, 2};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[3] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_genexpr, __pyx_k_A_3, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[3])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {0, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR), 1875, 2};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_tau};
    __pyx_mstate_global->__pyx_codeobj_tab[4] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_genexpr, __pyx_k_1_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[4])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 266, 15};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_T};
    __pyx_mstate_global->__pyx_codeobj_tab[5] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_enthalpy, __pyx_k_1D_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[5])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 269, 15};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_T};
    __pyx_mstate_global->__pyx_codeobj_tab[6] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_entropy, __pyx_k_4uA, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[6])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[7] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[7])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[8] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[8])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 281, 23};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B};
    __pyx_mstate_global->__pyx_codeobj_tab[9] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_rate, __pyx_k_T_2Rt4r, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[9])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[10] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[10])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[11] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[11])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 297, 151};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_conc};
    __pyx_mstate_global->__pyx_codeobj_tab[12] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_rate, __pyx_k_e6_ZvQ_AQ_Qa_d_Q_Cq_e6_YfA_AQ_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[12])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[13] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[13])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[14] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[14])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 330, 111};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_conc};
    __pyx_mstate_global->__pyx_codeobj_tab[15] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_dcdt, __pyx_k_s_1_gT_U_1_uF_ZvQ_Qc_3b_uF_YfA, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[15])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 14, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 343, 268};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_dt, __pyx_mstate->__pyx_n_u_y0, __pyx_mstate->__pyx_n_u_k1, __pyx_mstate->__pyx_n_u_y1, __pyx_mstate->__pyx_n_u_k2, __pyx_mstate->__pyx_n_u_y2, __pyx_mstate->__pyx_n_u_k3, __pyx_mstate->__pyx_n_u_y3, __pyx_mstate->__pyx_n_u_k4, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[16] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_step, __pyx_k_t1_t6_q_3b_Bc_2Qc_U_q_1A_t6_q_3, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[16])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 357, 96};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_time_span, __pyx_mstate->__pyx_n_u_dt, __pyx_mstate->__pyx_n_u_nsteps, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_times, __pyx_mstate->__pyx_n_u_traj};
    __pyx_mstate_global->__pyx_codeobj_tab[17] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_run, __pyx_k_E_az_1_1_at1_e5_uAQ_r_2S_wat1D, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[17])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[18] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[18])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[19] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[19])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 15, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 385, 388};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_nsteps, __pyx_mstate->__pyx_n_u_npts, __pyx_mstate->__pyx_n_u_max_len, __pyx_mstate->__pyx_n_u_times, __pyx_mstate->__pyx_n_u_Aout, __pyx_mstate->__pyx_n_u_Bout, __pyx_mstate->__pyx_n_u_written, __pyx_mstate->__pyx_n_u_tarr, __pyx_mstate->__pyx_n_u_aarr, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_py_times, __pyx_mstate->__pyx_n_u_traj, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[20] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_run, __pyx_k_E_at_b_A_1_Q_y_axr_ivQhb_ivQhb, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[20])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[21] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[21])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[22] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[22])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 59, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 420, 1716};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_spec, __pyx_mstate->__pyx_n_u_N, __pyx_mstate->__pyx_n_u_M, __pyx_mstate->__pyx_n_u_nsteps, __pyx_mstate->__pyx_n_u_npts, __pyx_mstate->__pyx_n_u_max_len, __pyx_mstate->__pyx_n_u_written, __pyx_mstate->__pyx_n_u_kf_ptr, __pyx_mstate->__pyx_n_u_kr_ptr, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_total_reac, __pyx_mstate->__pyx_n_u_total_prod, __pyx_mstate->__pyx_n_u_c_reac_idx, __pyx_mstate->__pyx_n_u_c_reac_nu, __pyx_mstate->__pyx_n_u_c_reac_off, __pyx_mstate->__pyx_n_u_c_prod_idx, __pyx_mstate->__pyx_n_u_c_prod_nu, __pyx_mstate->__pyx_n_u_c_prod_off, __pyx_mstate->__pyx_n_u_c_conc0, __pyx_mstate->__pyx_n_u_times_buf, __pyx_mstate->__pyx_n_u_conc_out_flat, __pyx_mstate->__pyx_n_u_reaction, __pyx_mstate->__pyx_n_u_initial, __pyx_mstate->__pyx_n_u_sim, __pyx_mstate->__pyx_n_u_species, __pyx_mstate->__pyx_n_u_rxns, __pyx_mstate->__pyx_n_u_reac_idx_list, __pyx_mstate->__pyx_n_u_reac_nu_list, __pyx_mstate->__pyx_n_u_reac_off, __pyx_mstate->__pyx_n_u_prod_idx_list, __pyx_mstate->__pyx_n_u_prod_nu_list, __pyx_mstate->__pyx_n_u_prod_off, __pyx_mstate->__pyx_n_u_r, __pyx_mstate->__pyx_n_u_reactants, __pyx_mstate->__pyx_n_u_products, __pyx_mstate->__pyx_n_u_s, __pyx_mstate->__pyx_n_u_nu, __pyx_mstate->__pyx_n_u_kf_c, __pyx_mstate->__pyx_n_u_kr_c, __pyx_mstate->__pyx_n_u_ctypes, __pyx_mstate->__pyx_n_u_conc0_py, __pyx_mstate->__pyx_n_u_tarr, __pyx_mstate->__pyx_n_u_carr, __pyx_mstate->__pyx_n_u_j, __pyx_mstate->__pyx_n_u_times_py, __pyx_mstate->__pyx_n_u_traj, __pyx_mstate->__pyx_n_u_kf, __pyx_mstate->__pyx_n_u_kr, __pyx_mstate->__pyx_n_u_conc, __pyx_mstate->__pyx_n_u_A0, __pyx_mstate->__pyx_n_u_B0, __pyx_mstate->__pyx_n_u_time_span, __pyx_mstate->__pyx_n_u_dt, __pyx_mstate->__pyx_n_u_rxn, __pyx_mstate->__pyx_n_u_reactor, __pyx_mstate->__pyx_n_u_s, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_j};
    __pyx_mstate_global->__pyx_codeobj_tab[23] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_run_simulation_cpp, __pyx_k_0_D_6_D_A_4t1Kq_t4q_q_Jc_d_c_D, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[23])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 598, 16};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_enthalpy, __pyx_mstate->__pyx_n_u_entropy, __pyx_mstate->__pyx_n_u_T};
    __pyx_mstate_global->__pyx_codeobj_tab[24] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_gibbs_free_energy, __pyx_k_IQ, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[24])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 602, 14};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_delta_G, __pyx_mstate->__pyx_n_u_T};
    __pyx_mstate_global->__pyx_codeobj_tab[25] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_equilibrium_constant, __pyx_k_AYa, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[25])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 606, 20};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_Ea, __pyx_mstate->__pyx_n_u_T, __pyx_mstate->__pyx_n_u_R};
    __pyx_mstate_global->__pyx_codeobj_tab[26] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_arrhenius_rate, __pyx_k_5Q_as_c, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[26])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {6, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 610, 22};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_n, __pyx_mstate->__pyx_n_u_V, __pyx_mstate->__pyx_n_u_T, __pyx_mstate->__pyx_n_u_Tc, __pyx_mstate->__pyx_n_u_Pc, __pyx_mstate->__pyx_n_u_omega};
    __pyx_mstate_global->__pyx_codeobj_tab[27] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_pressure_peng_robinson, __pyx_k_as_S_D, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[27])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 614, 20};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_P, __pyx_mstate->__pyx_n_u_T, __pyx_mstate->__pyx_n_u_Tc, __pyx_mstate->__pyx_n_u_Pc, __pyx_mstate->__pyx_n_u_omega};
    __pyx_mstate_global->__pyx_codeobj_tab[28] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_fugacity_coefficient, __pyx_k_AS_4t1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[28])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 619, 20};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_k, __pyx_mstate->__pyx_n_u_K_A, __pyx_mstate->__pyx_n_u_K_B, __pyx_mstate->__pyx_n_u_conc_A, __pyx_mstate->__pyx_n_u_conc_B};
    __pyx_mstate_global->__pyx_codeobj_tab[29] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_langmuir_hinshelwood_rate, __pyx_k_U_xq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[29])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 623, 25};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_quantum_yield, __pyx_mstate->__pyx_n_u_molar_absorptivity, __pyx_mstate->__pyx_n_u_path_length, __pyx_mstate->__pyx_n_u_light_intensity, __pyx_mstate->__pyx_n_u_concentration};
    __pyx_mstate_global->__pyx_codeobj_tab[30] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_photochemical_rate, __pyx_k_mK, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[30])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 629, 21};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_k, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B, __pyx_mstate->__pyx_n_u_temperature};
    __pyx_mstate_global->__pyx_codeobj_tab[31] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_autocatalytic_rate, __pyx_k_8_3c_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[31])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 633, 16};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_Vmax, __pyx_mstate->__pyx_n_u_Km, __pyx_mstate->__pyx_n_u_substrate_conc};
    __pyx_mstate_global->__pyx_codeobj_tab[32] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_michaelis_menten_rate, __pyx_k_QfD, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[32])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 637, 24};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_Vmax, __pyx_mstate->__pyx_n_u_Km, __pyx_mstate->__pyx_n_u_substrate_conc, __pyx_mstate->__pyx_n_u_inhibitor_conc, __pyx_mstate->__pyx_n_u_Ki};
    __pyx_mstate_global->__pyx_codeobj_tab[33] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_competitive_inhibition_rate, __pyx_k_1F_Na, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[33])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 642, 96};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_T, __pyx_mstate->__pyx_n_u_coeffs, __pyx_mstate->__pyx_n_u_c_coeffs, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_result};
    __pyx_mstate_global->__pyx_codeobj_tab[34] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_heat_capacity_nasa, __pyx_k_2Q_D_1A_e5_1E_q_b_Qm1_Qc_aq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[34])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 655, 95};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_T, __pyx_mstate->__pyx_n_u_coeffs, __pyx_mstate->__pyx_n_u_c_coeffs, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_result};
    __pyx_mstate_global->__pyx_codeobj_tab[35] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_enthalpy_nasa, __pyx_k_2Q_D_1A_e5_1E_q_b_Qm1_A_aq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[35])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 668, 95};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_T, __pyx_mstate->__pyx_n_u_coeffs, __pyx_mstate->__pyx_n_u_c_coeffs, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_result};
    __pyx_mstate_global->__pyx_codeobj_tab[36] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_entropy_nasa, __pyx_k_2Q_D_1A_e5_1E_q_b_Qm1_q_1_aq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[36])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 681, 16};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_Re, __pyx_mstate->__pyx_n_u_Sc, __pyx_mstate->__pyx_n_u_geometry_factor};
    __pyx_mstate_global->__pyx_codeobj_tab[37] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_mass_transfer_correlation, __pyx_k_d, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[37])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 685, 16};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_Re, __pyx_mstate->__pyx_n_u_Pr, __pyx_mstate->__pyx_n_u_geometry_factor};
    __pyx_mstate_global->__pyx_codeobj_tab[38] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_heat_transfer_correlation, __pyx_k_d, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[38])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 689, 21};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_molecular_diff, __pyx_mstate->__pyx_n_u_porosity, __pyx_mstate->__pyx_n_u_tortuosity, __pyx_mstate->__pyx_n_u_constriction_factor};
    __pyx_mstate_global->__pyx_codeobj_tab[39] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_effective_diffusivity, __pyx_k_Q_j_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[39])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {6, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 694, 25};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_velocity, __pyx_mstate->__pyx_n_u_density, __pyx_mstate->__pyx_n_u_viscosity, __pyx_mstate->__pyx_n_u_particle_diameter, __pyx_mstate->__pyx_n_u_bed_porosity, __pyx_mstate->__pyx_n_u_bed_length};
    __pyx_mstate_global->__pyx_codeobj_tab[40] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_pressure_drop_ergun, __pyx_k_1Jiq_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[40])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {6, 0, 0, 8, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 700, 43};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_setpoint, __pyx_mstate->__pyx_n_u_process_variable, __pyx_mstate->__pyx_n_u_dt, __pyx_mstate->__pyx_n_u_Kp, __pyx_mstate->__pyx_n_u_Ki, __pyx_mstate->__pyx_n_u_Kd, __pyx_mstate->__pyx_n_u_integral_term, __pyx_mstate->__pyx_n_u_previous_error};
    __pyx_mstate_global->__pyx_codeobj_tab[41] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_pid_controller, __pyx_k_Q_a_az_34t4q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[41])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 709, 16};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_enthalpy, __pyx_mstate->__pyx_n_u_entropy, __pyx_mstate->__pyx_n_u_temperature};
    __pyx_mstate_global->__pyx_codeobj_tab[42] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_gibbs_free_energy, __pyx_k_IQ, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[42])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 713, 14};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_delta_G, __pyx_mstate->__pyx_n_u_temperature};
    __pyx_mstate_global->__pyx_codeobj_tab[43] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_equilibrium_constant, __pyx_k_AYa, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[43])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 717, 23};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_pre_exponential, __pyx_mstate->__pyx_n_u_activation_energy, __pyx_mstate->__pyx_n_u_temperature, __pyx_mstate->__pyx_n_u_gas_constant};
    __pyx_mstate_global->__pyx_codeobj_tab[44] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_arrhenius_rate, __pyx_k_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[44])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {6, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 721, 22};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_n, __pyx_mstate->__pyx_n_u_V, __pyx_mstate->__pyx_n_u_T, __pyx_mstate->__pyx_n_u_Tc, __pyx_mstate->__pyx_n_u_Pc, __pyx_mstate->__pyx_n_u_omega};
    __pyx_mstate_global->__pyx_codeobj_tab[45] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_pressure_peng_robinson, __pyx_k_as_S_D, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[45])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 725, 20};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_P, __pyx_mstate->__pyx_n_u_T, __pyx_mstate->__pyx_n_u_Tc, __pyx_mstate->__pyx_n_u_Pc, __pyx_mstate->__pyx_n_u_omega};
    __pyx_mstate_global->__pyx_codeobj_tab[46] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_fugacity_coefficient, __pyx_k_AS_4t1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[46])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 729, 20};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_k, __pyx_mstate->__pyx_n_u_K_A, __pyx_mstate->__pyx_n_u_K_B, __pyx_mstate->__pyx_n_u_conc_A, __pyx_mstate->__pyx_n_u_conc_B};
    __pyx_mstate_global->__pyx_codeobj_tab[47] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_langmuir_hinshelwood_rate, __pyx_k_U_xq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[47])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 733, 25};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_quantum_yield, __pyx_mstate->__pyx_n_u_molar_absorptivity, __pyx_mstate->__pyx_n_u_path_length, __pyx_mstate->__pyx_n_u_light_intensity, __pyx_mstate->__pyx_n_u_concentration};
    __pyx_mstate_global->__pyx_codeobj_tab[48] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_photochemical_rate, __pyx_k_mK, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[48])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 739, 111};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_x, __pyx_mstate->__pyx_n_u_x_data, __pyx_mstate->__pyx_n_u_y_data, __pyx_mstate->__pyx_n_u_n, __pyx_mstate->__pyx_n_u_x_data_c, __pyx_mstate->__pyx_n_u_y_data_c, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[49] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_linear_interpolate, __pyx_k_c_2Q_2Q_e5_1E_q_1E_q_1Cz_1_aq_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[49])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 755, 111};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_x, __pyx_mstate->__pyx_n_u_x_data, __pyx_mstate->__pyx_n_u_y_data, __pyx_mstate->__pyx_n_u_n, __pyx_mstate->__pyx_n_u_x_data_c, __pyx_mstate->__pyx_n_u_y_data_c, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[50] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_cubic_spline_interpolate, __pyx_k_c_2Q_2Q_e5_1E_q_1E_q_Zz_aq_aq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[50])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 771, 109};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_experimental, __pyx_mstate->__pyx_n_u_predicted, __pyx_mstate->__pyx_n_u_n, __pyx_mstate->__pyx_n_u_exp_c, __pyx_mstate->__pyx_n_u_pred_c, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[51] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_calculate_r_squared, __pyx_k_c_ivQb_y_ar_1_e5_l_1_y_AWHA_aq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[51])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 787, 108};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_experimental, __pyx_mstate->__pyx_n_u_predicted, __pyx_mstate->__pyx_n_u_n, __pyx_mstate->__pyx_n_u_exp_c, __pyx_mstate->__pyx_n_u_pred_c, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[52] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_calculate_rmse, __pyx_k_c_ivQb_y_ar_1_e5_l_1_y_q_xq_aq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[52])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 803, 110};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_experimental, __pyx_mstate->__pyx_n_u_predicted, __pyx_mstate->__pyx_n_u_nparams, __pyx_mstate->__pyx_n_u_ndata, __pyx_mstate->__pyx_n_u_exp_c, __pyx_mstate->__pyx_n_u_pred_c, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[53] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_calculate_aic, __pyx_k_Qa_ivQfBa_y_avRq_e5_l_1_y_awhgQ, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[53])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 820, 16};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_Vmax, __pyx_mstate->__pyx_n_u_Km, __pyx_mstate->__pyx_n_u_substrate_conc};
    __pyx_mstate_global->__pyx_codeobj_tab[54] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_michaelis_menten_rate, __pyx_k_QfD, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[54])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 824, 24};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_Vmax, __pyx_mstate->__pyx_n_u_Km, __pyx_mstate->__pyx_n_u_substrate_conc, __pyx_mstate->__pyx_n_u_inhibitor_conc, __pyx_mstate->__pyx_n_u_Ki};
    __pyx_mstate_global->__pyx_codeobj_tab[55] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_competitive_inhibition_rate, __pyx_k_1F_Na, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[55])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 830, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_cp, __pyx_mstate->__pyx_n_u_T};
    __pyx_mstate_global->__pyx_codeobj_tab[56] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_enthalpy_c, __pyx_k_4q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[56])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 834, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_cp, __pyx_mstate->__pyx_n_u_T};
    __pyx_mstate_global->__pyx_codeobj_tab[57] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_entropy_c, __pyx_k_a_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[57])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 15, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 839, 202};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_k, __pyx_mstate->__pyx_n_u_A0, __pyx_mstate->__pyx_n_u_time_span, __pyx_mstate->__pyx_n_u_dt, __pyx_mstate->__pyx_n_u_max_len, __pyx_mstate->__pyx_n_u_times, __pyx_mstate->__pyx_n_u_A_out, __pyx_mstate->__pyx_n_u_B_out, __pyx_mstate->__pyx_n_u_written, __pyx_mstate->__pyx_n_u_times_list, __pyx_mstate->__pyx_n_u_A_list, __pyx_mstate->__pyx_n_u_B_list, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[58] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_analytical_first_order, __pyx_k_PPQ_ivQhb_ivQhb_ivQhb_3d_T_wa_X, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[58])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {7, 0, 0, 17, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 865, 206};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_kf, __pyx_mstate->__pyx_n_u_kr, __pyx_mstate->__pyx_n_u_A0, __pyx_mstate->__pyx_n_u_B0, __pyx_mstate->__pyx_n_u_time_span, __pyx_mstate->__pyx_n_u_dt, __pyx_mstate->__pyx_n_u_max_len, __pyx_mstate->__pyx_n_u_times, __pyx_mstate->__pyx_n_u_A_out, __pyx_mstate->__pyx_n_u_B_out, __pyx_mstate->__pyx_n_u_written, __pyx_mstate->__pyx_n_u_times_list, __pyx_mstate->__pyx_n_u_A_list, __pyx_mstate->__pyx_n_u_B_list, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[59] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_analytical_reversible_first_o, __pyx_k_ivQhb_ivQhb_ivQhb_Qd_d_k_gWA_XR, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[59])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {6, 0, 0, 19, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 893, 254};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_k1, __pyx_mstate->__pyx_n_u_k2, __pyx_mstate->__pyx_n_u_A0, __pyx_mstate->__pyx_n_u_time_span, __pyx_mstate->__pyx_n_u_dt, __pyx_mstate->__pyx_n_u_max_len, __pyx_mstate->__pyx_n_u_times, __pyx_mstate->__pyx_n_u_A_out, __pyx_mstate->__pyx_n_u_B_out, __pyx_mstate->__pyx_n_u_C_out, __pyx_mstate->__pyx_n_u_written, __pyx_mstate->__pyx_n_u_times_list, __pyx_mstate->__pyx_n_u_A_list, __pyx_mstate->__pyx_n_u_B_list, __pyx_mstate->__pyx_n_u_C_list, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[60] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_analytical_consecutive_first, __pyx_k_ivQhb_ivQhb_ivQhb_ivQhb_at4t_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[60])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 8, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 926, 154};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_experimental_data, __pyx_mstate->__pyx_n_u_simulated_data, __pyx_mstate->__pyx_n_u_weights, __pyx_mstate->__pyx_n_u_ndata, __pyx_mstate->__pyx_n_u_exp_c, __pyx_mstate->__pyx_n_u_sim_c, __pyx_mstate->__pyx_n_u_weight_c, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[61] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_calculate_objective_function, __pyx_k_Gq_Qa_ivQfBa_ivQfBa_r_e5_q_nAQ, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[61])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 13, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 945, 223};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_concentrations, __pyx_mstate->__pyx_n_u_tolerance, __pyx_mstate->__pyx_n_u_N, __pyx_mstate->__pyx_n_u_npoints, __pyx_mstate->__pyx_n_u_conc_traj, __pyx_mstate->__pyx_n_u_mass_balance, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_j, __pyx_mstate->__pyx_n_u_result, __pyx_mstate->__pyx_n_u_mass_balance_list, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_genexpr, __pyx_mstate->__pyx_n_u_genexpr};
    __pyx_mstate_global->__pyx_codeobj_tab[62] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_check_mass_conservation, __pyx_k_q_D_s_Q_c_1_c_Cq_6_Bhb_YfAXRq_e, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[62])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {6, 0, 0, 18, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 975, 295};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_kf_ref, __pyx_mstate->__pyx_n_u_kr_ref, __pyx_mstate->__pyx_n_u_Ea_f, __pyx_mstate->__pyx_n_u_Ea_r, __pyx_mstate->__pyx_n_u_T, __pyx_mstate->__pyx_n_u_T_ref, __pyx_mstate->__pyx_n_u_M, __pyx_mstate->__pyx_n_u_kf_ref_c, __pyx_mstate->__pyx_n_u_kr_ref_c, __pyx_mstate->__pyx_n_u_Ea_f_c, __pyx_mstate->__pyx_n_u_Ea_r_c, __pyx_mstate->__pyx_n_u_kf_out_c, __pyx_mstate->__pyx_n_u_kr_out_c, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_kf_out, __pyx_mstate->__pyx_n_u_kr_out, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[63] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_calculate_rate_constants, __pyx_k_Fa_c_2Q_2Q_y_ar_1_y_ar_1_2Q_2Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[63])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 8, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1012, 136};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_data, __pyx_mstate->__pyx_n_u_parameters, __pyx_mstate->__pyx_n_u_n_folds, __pyx_mstate->__pyx_n_u_n_data, __pyx_mstate->__pyx_n_u_n_params, __pyx_mstate->__pyx_n_u_data_c, __pyx_mstate->__pyx_n_u_params_c, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[64] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_cross_validation_score, __pyx_k_0_3aq_S_y_awb_A_e5_t1A_e5_1E_1A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[64])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 12, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1030, 311};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_x_new, __pyx_mstate->__pyx_n_u_x_known, __pyx_mstate->__pyx_n_u_y_known, __pyx_mstate->__pyx_n_u_variogram_params, __pyx_mstate->__pyx_n_u_n_known, __pyx_mstate->__pyx_n_u_x_new_list, __pyx_mstate->__pyx_n_u_x_new_c, __pyx_mstate->__pyx_n_u_x_known_c, __pyx_mstate->__pyx_n_u_y_known_c, __pyx_mstate->__pyx_n_u_var_params_c, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_result};
    __pyx_mstate_global->__pyx_codeobj_tab[65] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_kriging_interpolation, __pyx_k_6a_Cq_JaxuA_q_Qa_t1A_S_Qe5_q_1L, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[65])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 13, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1071, 261};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_data, __pyx_mstate->__pyx_n_u_parameters, __pyx_mstate->__pyx_n_u_n_bootstrap, __pyx_mstate->__pyx_n_u_n_data, __pyx_mstate->__pyx_n_u_n_params, __pyx_mstate->__pyx_n_u_data_c, __pyx_mstate->__pyx_n_u_params_c, __pyx_mstate->__pyx_n_u_param_distribution, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_result, __pyx_mstate->__pyx_n_u_distribution, __pyx_mstate->__pyx_n_u_param_samples, __pyx_mstate->__pyx_n_u_j};
    __pyx_mstate_global->__pyx_codeobj_tab[66] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_bootstrap_uncertainty, __pyx_k_q_3aq_S_y_awb_A_9F_9Bl_A_e5_t1A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[66])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 13, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1107, 395};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B, __pyx_mstate->__pyx_n_u_np, __pyx_mstate->__pyx_n_u_m, __pyx_mstate->__pyx_n_u_n, __pyx_mstate->__pyx_n_u_p, __pyx_mstate->__pyx_n_u_A_c, __pyx_mstate->__pyx_n_u_B_c, __pyx_mstate->__pyx_n_u_C_c, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_j, __pyx_mstate->__pyx_n_u_result, __pyx_mstate->__pyx_n_u_C};
    __pyx_mstate_global->__pyx_codeobj_tab[67] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_matrix_multiply, __pyx_k_RvQa_RvQa_AV3b_1F_Q_1_avQa_avQa, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[67])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 9, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1153, 265};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_np, __pyx_mstate->__pyx_n_u_n, __pyx_mstate->__pyx_n_u_A_c, __pyx_mstate->__pyx_n_u_A_inv_c, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_j, __pyx_mstate->__pyx_n_u_result, __pyx_mstate->__pyx_n_u_A_inv};
    __pyx_mstate_global->__pyx_codeobj_tab[68] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_matrix_invert, __pyx_k_RvQa_AV3b_1F_3c_1_avQa_IV1Bb_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[68])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 12, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1187, 307};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_b, __pyx_mstate->__pyx_n_u_np, __pyx_mstate->__pyx_n_u_n, __pyx_mstate->__pyx_n_u_A_c, __pyx_mstate->__pyx_n_u_b_c, __pyx_mstate->__pyx_n_u_x_c, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_j, __pyx_mstate->__pyx_n_u_result, __pyx_mstate->__pyx_n_u_x, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[69] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_solve_linear_system, __pyx_k_RvQa_RvQa_AV3b_1F_3c_1_AV3b_3as, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[69])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 9, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1224, 91};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_params, __pyx_mstate->__pyx_n_u_concentrations, __pyx_mstate->__pyx_n_u_rates, __pyx_mstate->__pyx_n_u_n_params, __pyx_mstate->__pyx_n_u_n_species, __pyx_mstate->__pyx_n_u_np, __pyx_mstate->__pyx_n_u_sensitivity_matrix, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_j};
    __pyx_mstate_global->__pyx_codeobj_tab[70] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_calculate_sensitivity, __pyx_k_b_b_U_q_e5_Qc_nAS_q_2V1Cr, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[70])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1287, 138};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_y, __pyx_mstate->__pyx_n_u_dydt, __pyx_mstate->__pyx_n_u_n_species, __pyx_mstate->__pyx_n_u_np, __pyx_mstate->__pyx_n_u_jacobian, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_j};
    __pyx_mstate_global->__pyx_codeobj_tab[71] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_calculate_jacobian, __pyx_k_BfBk_U_q_e5_b_1_AS_Qd_3b_S_q_AS, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[71])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 11, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1304, 87};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_steady_state, __pyx_mstate->__pyx_n_u_n_species, __pyx_mstate->__pyx_n_u_temperature, __pyx_mstate->__pyx_n_u_pressure, __pyx_mstate->__pyx_n_u_np, __pyx_mstate->__pyx_n_u_eigenvalues, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_eigenval, __pyx_mstate->__pyx_n_u_is_stable, __pyx_mstate->__pyx_n_u_genexpr, __pyx_mstate->__pyx_n_u_genexpr};
    __pyx_mstate_global->__pyx_codeobj_tab[72] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_stability_analysis, __pyx_k_33Gq_q_U_q_Ql_3b_Ba_WAQ_A_q_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[72])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 23, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1324, 610};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_current_state, __pyx_mstate->__pyx_n_u_setpoints, __pyx_mstate->__pyx_n_u_control_bounds, __pyx_mstate->__pyx_n_u_reaction_network, __pyx_mstate->__pyx_n_u_horizon, __pyx_mstate->__pyx_n_u_N, __pyx_mstate->__pyx_n_u_M, __pyx_mstate->__pyx_n_u_state, __pyx_mstate->__pyx_n_u_setpts, __pyx_mstate->__pyx_n_u_bounds, __pyx_mstate->__pyx_n_u_kf, __pyx_mstate->__pyx_n_u_kr, __pyx_mstate->__pyx_n_u_optimal_controls, __pyx_mstate->__pyx_n_u_reac_idx, __pyx_mstate->__pyx_n_u_reac_nu, __pyx_mstate->__pyx_n_u_reac_off, __pyx_mstate->__pyx_n_u_prod_idx, __pyx_mstate->__pyx_n_u_prod_nu, __pyx_mstate->__pyx_n_u_prod_off, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_result, __pyx_mstate->__pyx_n_u_control_actions, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[73] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_mpc_controller, __pyx_k_RRS_S_S_Qm1_ivQb_y_ar_1_y_ar_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[73])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 24, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1378, 656};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_current_concentrations, __pyx_mstate->__pyx_n_u_economic_coefficients, __pyx_mstate->__pyx_n_u_control_bounds, __pyx_mstate->__pyx_n_u_reaction_network, __pyx_mstate->__pyx_n_u_N, __pyx_mstate->__pyx_n_u_M, __pyx_mstate->__pyx_n_u_n_controls, __pyx_mstate->__pyx_n_u_concs, __pyx_mstate->__pyx_n_u_econ_coeffs, __pyx_mstate->__pyx_n_u_bounds, __pyx_mstate->__pyx_n_u_kf, __pyx_mstate->__pyx_n_u_kr, __pyx_mstate->__pyx_n_u_optimal_controls, __pyx_mstate->__pyx_n_u_predicted_profit, __pyx_mstate->__pyx_n_u_reac_idx, __pyx_mstate->__pyx_n_u_reac_nu, __pyx_mstate->__pyx_n_u_reac_off, __pyx_mstate->__pyx_n_u_prod_idx, __pyx_mstate->__pyx_n_u_prod_nu, __pyx_mstate->__pyx_n_u_prod_off, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_result, __pyx_mstate->__pyx_n_u_optimal_settings, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[74] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_real_time_optimization, __pyx_k_S_S_Qm1_c_ivQb_IV1Bb_y_ar_b_9F, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[74])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {21, 0, 0, 43, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1448, 743};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_N, __pyx_mstate->__pyx_n_u_M, __pyx_mstate->__pyx_n_u_nseg, __pyx_mstate->__pyx_n_u_kf, __pyx_mstate->__pyx_n_u_kr, __pyx_mstate->__pyx_n_u_reac_idx, __pyx_mstate->__pyx_n_u_reac_nu, __pyx_mstate->__pyx_n_u_reac_off, __pyx_mstate->__pyx_n_u_prod_idx, __pyx_mstate->__pyx_n_u_prod_nu, __pyx_mstate->__pyx_n_u_prod_off, __pyx_mstate->__pyx_n_u_conc0, __pyx_mstate->__pyx_n_u_flow_rate, __pyx_mstate->__pyx_n_u_bed_length, __pyx_mstate->__pyx_n_u_bed_porosity, __pyx_mstate->__pyx_n_u_particle_diameter, __pyx_mstate->__pyx_n_u_catalyst_density, __pyx_mstate->__pyx_n_u_effectiveness_factor, __pyx_mstate->__pyx_n_u_time_span, __pyx_mstate->__pyx_n_u_dt, __pyx_mstate->__pyx_n_u_max_len, __pyx_mstate->__pyx_n_u_kf_arr, __pyx_mstate->__pyx_n_u_kr_arr, __pyx_mstate->__pyx_n_u_reac_idx_arr, __pyx_mstate->__pyx_n_u_reac_nu_arr, __pyx_mstate->__pyx_n_u_reac_off_arr, __pyx_mstate->__pyx_n_u_prod_idx_arr, __pyx_mstate->__pyx_n_u_prod_nu_arr, __pyx_mstate->__pyx_n_u_prod_off_arr, __pyx_mstate->__pyx_n_u_conc0_arr, __pyx_mstate->__pyx_n_u_times, __pyx_mstate->__pyx_n_u_conc_out_flat, __pyx_mstate->__pyx_n_u_pressure_out, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_result, __pyx_mstate->__pyx_n_u_times_out, __pyx_mstate->__pyx_n_u_conc_matrix, __pyx_mstate->__pyx_n_u_t, __pyx_mstate->__pyx_n_u_conc_t, __pyx_mstate->__pyx_n_u_pressure_out_list, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[75] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_simulate_packed_bed, __pyx_k_y_ar_1_y_ar_1_as_Rq_IV1Cq_1_as, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[75])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {20, 0, 0, 47, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1530, 846};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_N, __pyx_mstate->__pyx_n_u_M, __pyx_mstate->__pyx_n_u_kf, __pyx_mstate->__pyx_n_u_kr, __pyx_mstate->__pyx_n_u_reac_idx, __pyx_mstate->__pyx_n_u_reac_nu, __pyx_mstate->__pyx_n_u_reac_off, __pyx_mstate->__pyx_n_u_prod_idx, __pyx_mstate->__pyx_n_u_prod_nu, __pyx_mstate->__pyx_n_u_prod_off, __pyx_mstate->__pyx_n_u_conc0, __pyx_mstate->__pyx_n_u_gas_velocity, __pyx_mstate->__pyx_n_u_bed_height, __pyx_mstate->__pyx_n_u_bed_porosity, __pyx_mstate->__pyx_n_u_bubble_fraction, __pyx_mstate->__pyx_n_u_particle_diameter, __pyx_mstate->__pyx_n_u_catalyst_density, __pyx_mstate->__pyx_n_u_time_span, __pyx_mstate->__pyx_n_u_dt, __pyx_mstate->__pyx_n_u_max_len, __pyx_mstate->__pyx_n_u_kf_arr, __pyx_mstate->__pyx_n_u_kr_arr, __pyx_mstate->__pyx_n_u_reac_idx_arr, __pyx_mstate->__pyx_n_u_reac_nu_arr, __pyx_mstate->__pyx_n_u_reac_off_arr, __pyx_mstate->__pyx_n_u_prod_idx_arr, __pyx_mstate->__pyx_n_u_prod_nu_arr, __pyx_mstate->__pyx_n_u_prod_off_arr, __pyx_mstate->__pyx_n_u_conc0_arr, __pyx_mstate->__pyx_n_u_times, __pyx_mstate->__pyx_n_u_conc_out_flat, __pyx_mstate->__pyx_n_u_bubble_conc_out, __pyx_mstate->__pyx_n_u_emulsion_conc_out, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_result, __pyx_mstate->__pyx_n_u_times_out, __pyx_mstate->__pyx_n_u_conc_matrix, __pyx_mstate->__pyx_n_u_bubble_matrix, __pyx_mstate->__pyx_n_u_emulsion_matrix, __pyx_mstate->__pyx_n_u_t, __pyx_mstate->__pyx_n_u_conc_t, __pyx_mstate->__pyx_n_u_bubble_t, __pyx_mstate->__pyx_n_u_emulsion_t, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[76] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_simulate_fluidized_bed, __pyx_k_y_ar_1_y_ar_1_as_Rq_IV1Cq_1_as_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[76])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {16, 0, 0, 38, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1621, 734};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_N, __pyx_mstate->__pyx_n_u_M, __pyx_mstate->__pyx_n_u_kf, __pyx_mstate->__pyx_n_u_kr, __pyx_mstate->__pyx_n_u_reac_idx, __pyx_mstate->__pyx_n_u_reac_nu, __pyx_mstate->__pyx_n_u_reac_off, __pyx_mstate->__pyx_n_u_prod_idx, __pyx_mstate->__pyx_n_u_prod_nu, __pyx_mstate->__pyx_n_u_prod_off, __pyx_mstate->__pyx_n_u_conc0, __pyx_mstate->__pyx_n_u_volume, __pyx_mstate->__pyx_n_u_mixing_intensity, __pyx_mstate->__pyx_n_u_time_span, __pyx_mstate->__pyx_n_u_dt, __pyx_mstate->__pyx_n_u_max_len, __pyx_mstate->__pyx_n_u_kf_arr, __pyx_mstate->__pyx_n_u_kr_arr, __pyx_mstate->__pyx_n_u_reac_idx_arr, __pyx_mstate->__pyx_n_u_reac_nu_arr, __pyx_mstate->__pyx_n_u_reac_off_arr, __pyx_mstate->__pyx_n_u_prod_idx_arr, __pyx_mstate->__pyx_n_u_prod_nu_arr, __pyx_mstate->__pyx_n_u_prod_off_arr, __pyx_mstate->__pyx_n_u_conc0_arr, __pyx_mstate->__pyx_n_u_times, __pyx_mstate->__pyx_n_u_conc_out_flat, __pyx_mstate->__pyx_n_u_mixing_efficiency_out, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_result, __pyx_mstate->__pyx_n_u_times_out, __pyx_mstate->__pyx_n_u_conc_matrix, __pyx_mstate->__pyx_n_u_mixing_efficiency, __pyx_mstate->__pyx_n_u_t, __pyx_mstate->__pyx_n_u_conc_t, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[77] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_simulate_homogeneous_batch, __pyx_k_y_ar_1_y_ar_1_as_Rq_IV1Cq_1_as_3, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[77])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 8, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1702, 161};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_reactor_config, __pyx_mstate->__pyx_n_u_feed_conditions, __pyx_mstate->__pyx_n_u_control_strategy, __pyx_mstate->__pyx_n_u_np, __pyx_mstate->__pyx_n_u_n_reactors, __pyx_mstate->__pyx_n_u_reactor_outputs, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_reactor_output};
    __pyx_mstate_global->__pyx_codeobj_tab[78] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_simulate_multi_reactor_adapti, __pyx_k_H_c_Zq0_1_1_U_q_2Q_Rr_1_2Rq_Qd, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[78])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {7, 0, 0, 18, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1727, 328};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_N, __pyx_mstate->__pyx_n_u_M, __pyx_mstate->__pyx_n_u_conc, __pyx_mstate->__pyx_n_u_reaction_rates, __pyx_mstate->__pyx_n_u_enthalpies_formation, __pyx_mstate->__pyx_n_u_heat_capacities, __pyx_mstate->__pyx_n_u_T, __pyx_mstate->__pyx_n_u_conc_arr, __pyx_mstate->__pyx_n_u_rates_arr, __pyx_mstate->__pyx_n_u_enthalpies_arr, __pyx_mstate->__pyx_n_u_cp_arr, __pyx_mstate->__pyx_n_u_heat_generation_val, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_result, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[79] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_calculate_energy_balance, __pyx_k_2Q_6_Ba_y_ar_1_y_ar_1_1_e5_1E_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[79])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {17, 0, 0, 39, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1770, 793};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_N, __pyx_mstate->__pyx_n_u_M, __pyx_mstate->__pyx_n_u_nsamples, __pyx_mstate->__pyx_n_u_kf_mean, __pyx_mstate->__pyx_n_u_kr_mean, __pyx_mstate->__pyx_n_u_kf_std, __pyx_mstate->__pyx_n_u_kr_std, __pyx_mstate->__pyx_n_u_reac_idx, __pyx_mstate->__pyx_n_u_reac_nu, __pyx_mstate->__pyx_n_u_reac_off, __pyx_mstate->__pyx_n_u_prod_idx, __pyx_mstate->__pyx_n_u_prod_nu, __pyx_mstate->__pyx_n_u_prod_off, __pyx_mstate->__pyx_n_u_conc0, __pyx_mstate->__pyx_n_u_time_span, __pyx_mstate->__pyx_n_u_dt, __pyx_mstate->__pyx_n_u_nthreads, __pyx_mstate->__pyx_n_u_kf_mean_arr, __pyx_mstate->__pyx_n_u_kr_mean_arr, __pyx_mstate->__pyx_n_u_kf_std_arr, __pyx_mstate->__pyx_n_u_kr_std_arr, __pyx_mstate->__pyx_n_u_reac_idx_arr, __pyx_mstate->__pyx_n_u_reac_nu_arr, __pyx_mstate->__pyx_n_u_reac_off_arr, __pyx_mstate->__pyx_n_u_prod_idx_arr, __pyx_mstate->__pyx_n_u_prod_nu_arr, __pyx_mstate->__pyx_n_u_prod_off_arr, __pyx_mstate->__pyx_n_u_conc0_arr, __pyx_mstate->__pyx_n_u_statistics_output, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_result, __pyx_mstate->__pyx_n_u_mean_list, __pyx_mstate->__pyx_n_u_std_list, __pyx_mstate->__pyx_n_u_min_list, __pyx_mstate->__pyx_n_u_max_list, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[80] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_monte_carlo_simulation, __pyx_k_IV1Bb_IV1Bb_9F_2Rq_9F_2Rq_as_Rq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[80])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 15, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1856, 164};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_flow_rates, __pyx_mstate->__pyx_n_u_volumes, __pyx_mstate->__pyx_n_u_n_tanks, __pyx_mstate->__pyx_n_u_np, __pyx_mstate->__pyx_n_u_mean_residence_times, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_tau, __pyx_mstate->__pyx_n_u_total_volume, __pyx_mstate->__pyx_n_u_total_flow, __pyx_mstate->__pyx_n_u_overall_mean_tau, __pyx_mstate->__pyx_n_u_variance, __pyx_mstate->__pyx_n_u_genexpr, __pyx_mstate->__pyx_n_u_genexpr, __pyx_mstate->__pyx_n_u_genexpr, __pyx_mstate->__pyx_n_u_genexpr};
    __pyx_mstate_global->__pyx_codeobj_tab[81] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_residence_time_distribution, __pyx_k_U_q_Zq_2Q_Bj_gQa_81_c_A_M_BgQ_C, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[81])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 11, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1886, 137};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_initial_activity, __pyx_mstate->__pyx_n_u_deactivation_constant, __pyx_mstate->__pyx_n_u_time, __pyx_mstate->__pyx_n_u_temperature, __pyx_mstate->__pyx_n_u_partial_pressure_poison, __pyx_mstate->__pyx_n_u_np, __pyx_mstate->__pyx_n_u_temp_factor, __pyx_mstate->__pyx_n_u_poison_factor, __pyx_mstate->__pyx_n_u_effective_kd, __pyx_mstate->__pyx_n_u_current_activity, __pyx_mstate->__pyx_n_u_deactivation_rate};
    __pyx_mstate_global->__pyx_codeobj_tab[82] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_catalyst_deactivation_model, __pyx_k_r_RuCvRq_2S_b_Ba_Rr_Qa_Ba_Qm2Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[82])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 9, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1915, 205};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_lab_scale_volume, __pyx_mstate->__pyx_n_u_pilot_scale_volume, __pyx_mstate->__pyx_n_u_lab_conditions, __pyx_mstate->__pyx_n_u_np, __pyx_mstate->__pyx_n_u_scale_factor, __pyx_mstate->__pyx_n_u_length_scale, __pyx_mstate->__pyx_n_u_area_scale, __pyx_mstate->__pyx_n_u_pilot_conditions, __pyx_mstate->__pyx_n_u_power_scale};
    __pyx_mstate_global->__pyx_codeobj_tab[83] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_pyroxa_pybindings_pyx, __pyx_mstate->__pyx_n_u_py_process_scale_up, __pyx_k_2Q_Cq_l_Qaq_A_q_Rq_aq_QQSST_1_B, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[83])) goto bad;
  }
  Py_DECREF(tuple_dedup_map);
  return 0;
  bad:
  Py_DECREF(tuple_dedup_map);
  return -1;
}
/* #### Code section: init_globals ### */

static int __Pyx_InitGlobals(void) {
  /* PythonCompatibility.init */
  if (likely(__Pyx_init_co_variables() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  /* NumpyImportArray.init */
  /*
 * Cython has automatically inserted a call to _import_array since
 * you didn't include one when you cimported numpy. To disable this
 * add the line
 *   <void>numpy._import_array
 */
#ifdef NPY_FEATURE_VERSION
#ifndef NO_IMPORT_ARRAY
if (unlikely(_import_array() == -1)) {
    PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import "
    "(auto-generated because you didn't call 'numpy.import_array()' after cimporting numpy; "
    "use '<void>numpy._import_array' to disable if you are certain you don't need it).");
}
#endif
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  /* CachedMethodType.init */
  #if CYTHON_COMPILING_IN_LIMITED_API
{
    PyObject *typesModule=NULL;
    typesModule = PyImport_ImportModule("types");
    if (typesModule) {
        __pyx_mstate_global->__Pyx_CachedMethodType = PyObject_GetAttrString(typesModule, "MethodType");
        Py_DECREF(typesModule);
    }
} // error handling follows
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d0000
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
            "name '%U' is not defined", name);
    }
    return result;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C0000
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#elif __PYX_LIMITED_VERSION_HEX > 0x030C0000
    local_value = PyErr_GetRaisedException();
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
#if __PYX_LIMITED_VERSION_HEX > 0x030C0000
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
#else
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
#endif // __PYX_LIMITED_VERSION_HEX > 0x030C0000
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#elif __PYX_LIMITED_VERSION_HEX >= 0x030b0000
    PyErr_SetHandledException(local_value);
    Py_XDECREF(local_value);
    Py_XDECREF(local_type);
    Py_XDECREF(local_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
#if __PYX_LIMITED_VERSION_HEX <= 0x030C0000
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
#endif
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject *const *args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
    PyObject *kwdefs;
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    if (
            co->co_kwonlyargcount == 0 &&
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) != (0)) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
#if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API
  #if PY_VERSION_HEX < 0x03090000
    #define __Pyx_PyVectorcall_Function(callable) _PyVectorcall_Function(callable)
  #elif CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE vectorcallfunc __Pyx_PyVectorcall_Function(PyObject *callable) {
    PyTypeObject *tp = Py_TYPE(callable);
    #if defined(__Pyx_CyFunction_USED)
    if (__Pyx_CyFunction_CheckExact(callable)) {
        return __Pyx_CyFunction_func_vectorcall(callable);
    }
    #endif
    if (!PyType_HasFeature(tp, Py_TPFLAGS_HAVE_VECTORCALL)) {
        return NULL;
    }
    assert(PyCallable_Check(callable));
    Py_ssize_t offset = tp->tp_vectorcall_offset;
    assert(offset > 0);
    vectorcallfunc ptr;
    memcpy(&ptr, (char *) callable + offset, sizeof(ptr));
    return ptr;
}
  #else
    #define __Pyx_PyVectorcall_Function(callable) PyVectorcall_Function(callable)
  #endif
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject *const *args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API
        vectorcallfunc f = __Pyx_PyVectorcall_Function(func);
        if (f) {
            return f(func, args, _nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, _nargs, NULL);
        }
        #elif CYTHON_COMPILING_IN_LIMITED_API && CYTHON_VECTORCALL
        return PyObject_Vectorcall(func, args, _nargs, NULL);
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_mstate_global->__pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* RaiseException */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
#elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}

/* TupleAndListFromArray */
#if !CYTHON_COMPILING_IN_CPYTHON && CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    Py_ssize_t i;
    if (n <= 0) {
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_tuple);
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    for (i = 0; i < n; i++) {
        if (unlikely(__Pyx_PyTuple_SET_ITEM(res, i, src[i]) < 0)) {
            Py_DECREF(res);
            return NULL;
        }
        Py_INCREF(src[i]);
    }
    return res;
}
#elif CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_tuple);
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL ||\
        !(CYTHON_ASSUME_SAFE_SIZE && CYTHON_ASSUME_SAFE_MACROS)
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length, length2;
        int kind;
        void *data1, *data2;
        #if !CYTHON_COMPILING_IN_LIMITED_API
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        #endif
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(length < 0)) return -1;
        #endif
        length2 = __Pyx_PyUnicode_GET_LENGTH(s2);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(length2 < 0)) return -1;
        #endif
        if (length != length2) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    return (equals == Py_EQ);
return_ne:
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = __Pyx_PyTuple_GET_SIZE(kwnames);
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely(n == -1)) return NULL;
    #endif
    for (i = 0; i < n; i++)
    {
        PyObject *namei = __Pyx_PyTuple_GET_ITEM(kwnames, i);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!namei)) return NULL;
        #endif
        if (s == namei) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        PyObject *namei = __Pyx_PyTuple_GET_ITEM(kwnames, i);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!namei)) return NULL;
        #endif
        int eq = __Pyx_PyUnicode_Equals(s, namei, Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs;
    PyObject *dict;
#if !CYTHON_ASSUME_SAFE_SIZE
    nkwargs = PyTuple_Size(kwnames);
    if (unlikely(nkwargs < 0)) return NULL;
#else
    nkwargs = PyTuple_GET_SIZE(kwnames);
#endif
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
#if !CYTHON_ASSUME_SAFE_MACROS
        PyObject *key = PyTuple_GetItem(kwnames, i);
        if (!key) goto bad;
#else
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
#endif
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
}

/* UnpackUnboundCMethod */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030C0000
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *result;
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
#elif CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03090000
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject **args, Py_ssize_t nargs, PyObject *kwnames) {
        return _PyObject_Vectorcall
            (method, args ? args+1 : NULL, nargs ? nargs-1 : 0, kwnames);
}
#else
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *const *args, Py_ssize_t nargs, PyObject *kwnames) {
    return
#if PY_VERSION_HEX < 0x03090000
    _PyObject_Vectorcall
#else
    PyObject_Vectorcall
#endif
        (method, args ? args+1 : NULL, nargs ? (size_t) nargs-1 : 0, kwnames);
}
#endif
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030C0000
     METH_VARARGS | METH_KEYWORDS,
#else
     METH_FASTCALL | METH_KEYWORDS,
#endif
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method, *result=NULL;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    result = method;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if CYTHON_COMPILING_IN_PYPY
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            result = unbound_method;
        }
    }
#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    if (unlikely(target->method)) {
        Py_DECREF(result);
    } else
#endif
    target->method = result;
    return 0;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    int was_initialized = __Pyx_CachedCFunction_GetAndSetInitializing(cfunc);
    if (likely(was_initialized == 2 && cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            return __Pyx_CallCFunctionFast(cfunc, self, args, 2);
        }
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return __Pyx_CallCFunctionFastWithKeywords(cfunc, self, args, 2, NULL);
    }
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    else if (unlikely(was_initialized == 1)) {
        __Pyx_CachedCFunction tmp_cfunc = {
#ifndef __cplusplus
            0
#endif
        };
        tmp_cfunc.type = cfunc->type;
        tmp_cfunc.method_name = cfunc->method_name;
        return __Pyx__CallUnboundCMethod2(&tmp_cfunc, self, arg1, arg2);
    }
#endif
    PyObject *result = __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
    __Pyx_CachedCFunction_SetFinishedInitializing(cfunc);
    return result;
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        PyObject *result = NULL;
        PyObject *args = PyTuple_New(2);
        if (unlikely(!args)) return NULL;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = __Pyx_CallCFunctionWithKeywords(cfunc, self, args, NULL);
        else
            result = __Pyx_CallCFunction(cfunc, self, args);
        Py_DECREF(args);
        return result;
    }
#endif
    {
        PyObject *args[4] = {NULL, self, arg1, arg2};
        return __Pyx_PyObject_FastCall(cfunc->method, args+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
    }
}

/* ParseKeywords */
static int __Pyx_ValidateDuplicatePosArgs(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    const char* function_name)
{
    PyObject ** const *name = argnames;
    while (name != first_kw_arg) {
        PyObject *key = **name;
        int found = PyDict_Contains(kwds, key);
        if (unlikely(found)) {
            if (found == 1) __Pyx_RaiseDoubleKeywordsError(function_name, key);
            goto bad;
        }
        name++;
    }
    return 0;
bad:
    return -1;
}
#if CYTHON_USE_UNICODE_INTERNALS
static CYTHON_INLINE int __Pyx_UnicodeKeywordsEqual(PyObject *s1, PyObject *s2) {
    int kind;
    Py_ssize_t len = PyUnicode_GET_LENGTH(s1);
    if (len != PyUnicode_GET_LENGTH(s2)) return 0;
    kind = PyUnicode_KIND(s1);
    if (kind != PyUnicode_KIND(s2)) return 0;
    const void *data1 = PyUnicode_DATA(s1);
    const void *data2 = PyUnicode_DATA(s2);
    return (memcmp(data1, data2, (size_t) len * (size_t) kind) == 0);
}
#endif
static int __Pyx_MatchKeywordArg_str(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    PyObject ** const *name;
    #if CYTHON_USE_UNICODE_INTERNALS
    Py_hash_t key_hash = ((PyASCIIObject*)key)->hash;
    if (unlikely(key_hash == -1)) {
        key_hash = PyObject_Hash(key);
        if (unlikely(key_hash == -1))
            goto bad;
    }
    #endif
    name = first_kw_arg;
    while (*name) {
        PyObject *name_str = **name;
        #if CYTHON_USE_UNICODE_INTERNALS
        if (key_hash == ((PyASCIIObject*)name_str)->hash && __Pyx_UnicodeKeywordsEqual(name_str, key)) {
            *index_found = (size_t) (name - argnames);
            return 1;
        }
        #else
        #if CYTHON_ASSUME_SAFE_SIZE
        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))
        #endif
        {
            int cmp = PyUnicode_Compare(name_str, key);
            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
            if (cmp == 0) {
                *index_found = (size_t) (name - argnames);
                return 1;
            }
        }
        #endif
        name++;
    }
    name = argnames;
    while (name != first_kw_arg) {
        PyObject *name_str = **name;
        #if CYTHON_USE_UNICODE_INTERNALS
        if (unlikely(key_hash == ((PyASCIIObject*)name_str)->hash)) {
            if (__Pyx_UnicodeKeywordsEqual(name_str, key))
                goto arg_passed_twice;
        }
        #else
        #if CYTHON_ASSUME_SAFE_SIZE
        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))
        #endif
        {
            if (unlikely(name_str == key)) goto arg_passed_twice;
            int cmp = PyUnicode_Compare(name_str, key);
            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
            if (cmp == 0) goto arg_passed_twice;
        }
        #endif
        name++;
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
bad:
    return -1;
}
static int __Pyx_MatchKeywordArg_nostr(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    PyObject ** const *name;
    if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;
    name = first_kw_arg;
    while (*name) {
        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);
        if (cmp == 1) {
            *index_found = (size_t) (name - argnames);
            return 1;
        }
        if (unlikely(cmp == -1)) goto bad;
        name++;
    }
    name = argnames;
    while (name != first_kw_arg) {
        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);
        if (unlikely(cmp != 0)) {
            if (cmp == 1) goto arg_passed_twice;
            else goto bad;
        }
        name++;
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
bad:
    return -1;
}
static CYTHON_INLINE int __Pyx_MatchKeywordArg(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    return likely(PyUnicode_CheckExact(key)) ?
        __Pyx_MatchKeywordArg_str(key, argnames, first_kw_arg, index_found, function_name) :
        __Pyx_MatchKeywordArg_nostr(key, argnames, first_kw_arg, index_found, function_name);
}
static void __Pyx_RejectUnknownKeyword(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    const char *function_name)
{
    Py_ssize_t pos = 0;
    PyObject *key = NULL;
    __Pyx_BEGIN_CRITICAL_SECTION(kwds);
    while (PyDict_Next(kwds, &pos, &key, NULL)) {
        PyObject** const *name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (!*name) {
            #if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
            #endif
            size_t index_found = 0;
            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);
            if (cmp != 1) {
                if (cmp == 0) {
                    PyErr_Format(PyExc_TypeError,
                        "%s() got an unexpected keyword argument '%U'",
                        function_name, key);
                }
                #if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(key);
                #endif
                break;
            }
            #if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(key);
            #endif
        }
    }
    __Pyx_END_CRITICAL_SECTION();
    assert(PyErr_Occurred());
}
static int __Pyx_ParseKeywordDict(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    PyObject** const *name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    Py_ssize_t extracted = 0;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;
#endif
    name = first_kw_arg;
    while (*name && num_kwargs > extracted) {
        PyObject * key = **name;
        PyObject *value;
        int found = 0;
        #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
        found = PyDict_GetItemRef(kwds, key, &value);
        #else
        value = PyDict_GetItemWithError(kwds, key);
        if (value) {
            Py_INCREF(value);
            found = 1;
        } else {
            if (unlikely(PyErr_Occurred())) goto bad;
        }
        #endif
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
            extracted++;
        }
        name++;
    }
    if (num_kwargs > extracted) {
        if (ignore_unknown_kwargs) {
            if (unlikely(__Pyx_ValidateDuplicatePosArgs(kwds, argnames, first_kw_arg, function_name) == -1))
                goto bad;
        } else {
            __Pyx_RejectUnknownKeyword(kwds, argnames, first_kw_arg, function_name);
            goto bad;
        }
    }
    return 0;
bad:
    return -1;
}
static int __Pyx_ParseKeywordDictToDict(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject** const *name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    Py_ssize_t len;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;
#endif
    if (PyDict_Update(kwds2, kwds) < 0) goto bad;
    name = first_kw_arg;
    while (*name) {
        PyObject *key = **name;
        PyObject *value;
#if !CYTHON_COMPILING_IN_LIMITED_API && (PY_VERSION_HEX >= 0x030d00A2 || defined(PyDict_Pop))
        int found = PyDict_Pop(kwds2, key, &value);
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
        }
#elif __PYX_LIMITED_VERSION_HEX >= 0x030d0000
        int found = PyDict_GetItemRef(kwds2, key, &value);
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
            if (unlikely(PyDict_DelItem(kwds2, key) < 0)) goto bad;
        }
#else
    #if CYTHON_COMPILING_IN_CPYTHON
        value = _PyDict_Pop(kwds2, key, kwds2);
    #else
        value = __Pyx_CallUnboundCMethod2(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_pop, kwds2, key, kwds2);
    #endif
        if (value == kwds2) {
            Py_DECREF(value);
        } else {
            if (unlikely(!value)) goto bad;
            values[name-argnames] = value;
        }
#endif
        name++;
    }
    len = PyDict_Size(kwds2);
    if (len > 0) {
        return __Pyx_ValidateDuplicatePosArgs(kwds, argnames, first_kw_arg, function_name);
    } else if (unlikely(len == -1)) {
        goto bad;
    }
    return 0;
bad:
    return -1;
}
static int __Pyx_ParseKeywordsTuple(
    PyObject *kwds,
    PyObject * const *kwvalues,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    PyObject *key = NULL;
    PyObject** const * name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    for (Py_ssize_t pos = 0; pos < num_kwargs; pos++) {
#if CYTHON_AVOID_BORROWED_REFS
        key = __Pyx_PySequence_ITEM(kwds, pos);
#else
        key = __Pyx_PyTuple_GET_ITEM(kwds, pos);
#endif
#if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!key)) goto bad;
#endif
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            PyObject *value = kwvalues[pos];
            values[name-argnames] = __Pyx_NewRef(value);
        } else {
            size_t index_found = 0;
            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);
            if (cmp == 1) {
                PyObject *value = kwvalues[pos];
                values[index_found] = __Pyx_NewRef(value);
            } else {
                if (unlikely(cmp == -1)) goto bad;
                if (kwds2) {
                    PyObject *value = kwvalues[pos];
                    if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                } else if (!ignore_unknown_kwargs) {
                    goto invalid_keyword;
                }
            }
        }
        #if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(key);
        key = NULL;
        #endif
    }
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    goto bad;
bad:
    #if CYTHON_AVOID_BORROWED_REFS
    Py_XDECREF(key);
    #endif
    return -1;
}
static int __Pyx_ParseKeywords(
    PyObject *kwds,
    PyObject * const *kwvalues,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds)))
        return __Pyx_ParseKeywordsTuple(kwds, kwvalues, argnames, kwds2, values, num_pos_args, num_kwargs, function_name, ignore_unknown_kwargs);
    else if (kwds2)
        return __Pyx_ParseKeywordDictToDict(kwds, argnames, kwds2, values, num_pos_args, function_name);
    else
        return __Pyx_ParseKeywordDict(kwds, argnames, values, num_pos_args, num_kwargs, function_name, ignore_unknown_kwargs);
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RejectKeywords */
static void __Pyx_RejectKeywords(const char* function_name, PyObject *kwds) {
    PyObject *key = NULL;
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds))) {
        key = __Pyx_PySequence_ITEM(kwds, 0);
    } else {
        Py_ssize_t pos = 0;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
        if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return;
#endif
        PyDict_Next(kwds, &pos, &key, NULL);
        Py_INCREF(key);
    }
    if (likely(key)) {
        PyErr_Format(PyExc_TypeError,
            "%s() got an unexpected keyword argument '%U'",
            function_name, key);
        Py_DECREF(key);
    }
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetFullyQualifiedName(tp);
    PyErr_Format(PyExc_AttributeError,
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
#if CYTHON_VECTORCALL && (__PYX_LIMITED_VERSION_HEX >= 0x030C0000 || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x03090000))
    PyObject *args[1] = {obj};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_CallNoArg;
    return PyObject_VectorcallMethod(method_name, args, 1 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
#endif
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else {
      Py_ssize_t size = __Pyx_PyTuple_GET_SIZE(t);
 #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely(size < 0)) return;
 #endif
      if (size < index) {
        __Pyx_RaiseNeedMoreValuesError(size);
      } else {
        __Pyx_RaiseTooManyValuesError(index);
      }
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2(
        PyObject* tuple, PyObject** value1, PyObject** value2, int is_tuple, int has_known_size, int decref_tuple) {
    if (likely(is_tuple || PyTuple_Check(tuple))) {
        Py_ssize_t size;
        if (has_known_size) {
            return __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple);
        }
        size = __Pyx_PyTuple_GET_SIZE(tuple);
        if (likely(size == 2)) {
            return __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple);
        }
        if (size >= 0) {
            __Pyx_UnpackTupleError(tuple, 2);
        }
        return -1;
    } else {
        return __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple);
    }
}
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_AVOID_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
    value1 = __Pyx_PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = __Pyx_PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_AVOID_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = __Pyx_PyObject_GetIterNextFunc(iter);
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
#if CYTHON_COMPILING_IN_PYPY
#include <string.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#else
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
#if !CYTHON_COMPILING_IN_PYPY
static CYTHON_INLINE int __Pyx_dict_iter_next_source_is_dict(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem) {
    PyObject *key, *value;
    if (unlikely(orig_length != PyDict_Size(iter_obj))) {
        PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
        return -1;
    }
    if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
        return 0;
    }
    if (pitem) {
        PyObject* tuple = PyTuple_New(2);
        if (unlikely(!tuple)) {
            return -1;
        }
        Py_INCREF(key);
        Py_INCREF(value);
        #if CYTHON_ASSUME_SAFE_MACROS
        PyTuple_SET_ITEM(tuple, 0, key);
        PyTuple_SET_ITEM(tuple, 1, value);
        #else
        if (unlikely(PyTuple_SetItem(tuple, 0, key) < 0)) {
            Py_DECREF(value);
            Py_DECREF(tuple);
            return -1;
        }
        if (unlikely(PyTuple_SetItem(tuple, 1, value) < 0)) {
            Py_DECREF(tuple);
            return -1;
        }
        #endif
        *pitem = tuple;
    } else {
        if (pkey) {
            Py_INCREF(key);
            *pkey = key;
        }
        if (pvalue) {
            Py_INCREF(value);
            *pvalue = value;
        }
    }
    return 1;
}
#endif
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        int result;
#if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_BEGIN_CRITICAL_SECTION(iter_obj);
#endif
        result = __Pyx_dict_iter_next_source_is_dict(iter_obj, orig_length, ppos, pkey, pvalue, pitem);
#if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_END_CRITICAL_SECTION();
#endif
        return result;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        Py_ssize_t tuple_size = __Pyx_PyTuple_GET_SIZE(iter_obj);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(tuple_size < 0)) return -1;
        #endif
        if (unlikely(pos >= tuple_size)) return 0;
        *ppos = pos + 1;
        #if CYTHON_ASSUME_SAFE_MACROS
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        #else
        next_item = PyTuple_GetItem(iter_obj, pos);
        if (unlikely(!next_item)) return -1;
        #endif
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        Py_ssize_t list_size = __Pyx_PyList_GET_SIZE(iter_obj);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(list_size < 0)) return -1;
        #endif
        if (unlikely(pos >= list_size)) return 0;
        *ppos = pos + 1;
        #if CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
        next_item = PyList_GetItemRef(iter_obj, pos);
        if (unlikely(!next_item)) return -1;
        #elif CYTHON_ASSUME_SAFE_MACROS
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
        #else
        next_item = PyList_GetItem(iter_obj, pos);
        if (unlikely(!next_item)) return -1;
        Py_INCREF(next_item);
        #endif
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    PyObject *extra_info = __pyx_mstate_global->__pyx_empty_unicode;
    int from_annotation_subclass = 0;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (!exact) {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    } else if (exact == 2) {
        if (__Pyx_TypeCheck(obj, type)) {
            from_annotation_subclass = 1;
            extra_info = __pyx_mstate_global->__pyx_kp_u_Note_that_Cython_is_deliberately;
        }
    }
    type_name = __Pyx_PyType_GetFullyQualifiedName(type);
    obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")"
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
        "%s%U"
#endif
        , name, type_name, obj_type_name
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
        , (from_annotation_subclass ? ". " : ""), extra_info
#endif
        );
#if __PYX_LIMITED_VERSION_HEX >= 0x030C0000
    if (exact == 2 && from_annotation_subclass) {
        PyObject *res;
        PyObject *vargs[2];
        vargs[0] = PyErr_GetRaisedException();
        vargs[1] = extra_info;
        res = PyObject_VectorcallMethod(__pyx_mstate_global->__pyx_kp_u_add_note, vargs, 2, NULL);
        Py_XDECREF(res);
        PyErr_SetRaisedException(vargs[0]);
    }
#endif
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* pybytes_as_double */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj) {
    PyObject *float_value = PyFloat_FromString(obj);
    if (likely(float_value)) {
        double value = __Pyx_PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
    return (double)-1;
}
static const char* __Pyx__PyBytes_AsDouble_Copy(const char* start, char* buffer, Py_ssize_t length) {
    int last_was_punctuation = 1;
    int parse_error_found = 0;
    Py_ssize_t i;
    for (i=0; i < length; i++) {
        char chr = start[i];
        int is_punctuation = (chr == '_') | (chr == '.') | (chr == 'e') | (chr == 'E');
        *buffer = chr;
        buffer += (chr != '_');
        parse_error_found |= last_was_punctuation & is_punctuation;
        last_was_punctuation = is_punctuation;
    }
    parse_error_found |= last_was_punctuation;
    *buffer = '\0';
    return unlikely(parse_error_found) ? NULL : buffer;
}
static double __Pyx__PyBytes_AsDouble_inf_nan(const char* start, Py_ssize_t length) {
    int matches = 1;
    char sign = start[0];
    int is_signed = (sign == '+') | (sign == '-');
    start += is_signed;
    length -= is_signed;
    switch (start[0]) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            matches &= (start[1] == 'a' || start[1] == 'A');
            matches &= (start[2] == 'n' || start[2] == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            matches &= (start[1] == 'n' || start[1] == 'N');
            matches &= (start[2] == 'f' || start[2] == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            matches &= (start[3] == 'i' || start[3] == 'I');
            matches &= (start[4] == 'n' || start[4] == 'N');
            matches &= (start[5] == 'i' || start[5] == 'I');
            matches &= (start[6] == 't' || start[6] == 'T');
            matches &= (start[7] == 'y' || start[7] == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static CYTHON_INLINE int __Pyx__PyBytes_AsDouble_IsSpace(char ch) {
    return (ch == 0x20) | !((ch < 0x9) | (ch > 0xd));
}
CYTHON_UNUSED static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length) {
    double value;
    Py_ssize_t i, digits;
    const char *last = start + length;
    char *end;
    while (__Pyx__PyBytes_AsDouble_IsSpace(*start))
        start++;
    while (start < last - 1 && __Pyx__PyBytes_AsDouble_IsSpace(last[-1]))
        last--;
    length = last - start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyBytes_AsDouble_inf_nan(start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    digits = 0;
    for (i=0; i < length; digits += start[i++] != '_');
    if (likely(digits == length)) {
        value = PyOS_string_to_double(start, &end, NULL);
    } else if (digits < 40) {
        char number[40];
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((digits + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}

/* pynumber_float */
static CYTHON_INLINE PyObject* __Pyx__PyNumber_Float(PyObject* obj) {
    double val;
    if (PyLong_CheckExact(obj)) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (likely(__Pyx_PyLong_IsCompact(obj))) {
            val = (double) __Pyx_PyLong_CompactValue(obj);
            goto no_error;
        }
#endif
        val = PyLong_AsDouble(obj);
    } else if (PyUnicode_CheckExact(obj)) {
        val = __Pyx_PyUnicode_AsDouble(obj);
    } else if (PyBytes_CheckExact(obj)) {
        val = __Pyx_PyBytes_AsDouble(obj);
    } else if (PyByteArray_CheckExact(obj)) {
        val = __Pyx_PyByteArray_AsDouble(obj);
    } else {
        return PyNumber_Float(obj);
    }
    if (unlikely(val == -1 && PyErr_Occurred())) {
        return NULL;
    }
#if CYTHON_USE_PYLONG_INTERNALS
no_error:
#endif
    return PyFloat_FromDouble(val);
}

/* PyObjectFastCallMethod */
#if !CYTHON_VECTORCALL || PY_VERSION_HEX < 0x03090000
static PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf) {
    PyObject *result;
    PyObject *attr = PyObject_GetAttr(args[0], name);
    if (unlikely(!attr))
        return NULL;
    result = __Pyx_PyObject_FastCall(attr, args+1, nargsf - 1);
    Py_DECREF(attr);
    return result;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS && !CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            return __Pyx_PyList_GetItemRef(o, n);
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyLong_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_mstate_global->__pyx_n_u_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (unlikely(!j)) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            Py_INCREF(v);
#if CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
            PyList_SetItem(o, n, v);
#else
            PyObject* old = PyList_GET_ITEM(o, n);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
#endif
            return 1;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_ass_subscript) {
            int r;
            PyObject *key = PyLong_FromSsize_t(i);
            if (unlikely(!key)) return -1;
            r = mm->mp_ass_subscript(o, key, v);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return sm->sq_ass_item(o, i, v);
        }
    }
#else
    if (is_list || !PyMapping_Check(o))
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyLong_FromSsize_t(i), v);
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        if (!PyErr_Occurred())
            PyErr_SetNone(PyExc_NameError);
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
    PyErr_Clear();
#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    if (unlikely(__Pyx_PyDict_GetItemRef(__pyx_mstate_global->__pyx_d, name, &result) == -1)) PyErr_Clear();
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return result;
    }
#else
    result = _PyDict_GetItem_KnownHash(__pyx_mstate_global->__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectVectorCallKwBuilder */
#if CYTHON_VECTORCALL
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    (void)__Pyx_PyObject_FastCallDict;
    if (__Pyx_PyTuple_SET_ITEM(builder, n, key) != (0)) return -1;
    Py_INCREF(key);
    args[n] = value;
    return 0;
}
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    (void)__Pyx_VectorcallBuilder_AddArgStr;
    if (unlikely(!PyUnicode_Check(key))) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        return -1;
    }
    return __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n);
}
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    PyObject *pyKey = PyUnicode_FromString(key);
    if (!pyKey) return -1;
    return __Pyx_VectorcallBuilder_AddArg(pyKey, value, builder, args, n);
}
#else // CYTHON_VECTORCALL
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, CYTHON_UNUSED PyObject **args, CYTHON_UNUSED int n) {
    if (unlikely(!PyUnicode_Check(key))) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        return -1;
    }
    return PyDict_SetItem(builder, key, value);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    if (PyUnicode_CheckExact(obj)) {
        return __Pyx_PyUnicode_AsDouble(obj);
    } else if (PyBytes_CheckExact(obj)) {
        return __Pyx_PyBytes_AsDouble(obj);
    } else if (PyByteArray_CheckExact(obj)) {
        return __Pyx_PyByteArray_AsDouble(obj);
    } else {
        PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
        float_value = PyNumber_Float(obj);  if ((0)) goto bad;
        (void)__Pyx_PyObject_CallOneArg;
#else
        PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
        if (likely(nb) && likely(nb->nb_float)) {
            float_value = nb->nb_float(obj);
            if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
                __Pyx_TypeName float_value_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(float_value));
                PyErr_Format(PyExc_TypeError,
                    "__float__ returned non-float (type " __Pyx_FMT_TYPENAME ")",
                    float_value_type_name);
                __Pyx_DECREF_TypeName(float_value_type_name);
                Py_DECREF(float_value);
                goto bad;
            }
        } else {
            float_value = __Pyx_PyObject_CallOneArg((PyObject*)&PyFloat_Type, obj);
        }
#endif
        if (likely(float_value)) {
            double value = __Pyx_PyFloat_AS_DOUBLE(float_value);
            Py_DECREF(float_value);
            return value;
        }
    }
bad:
    return (double)-1;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    if (level == -1) {
        const char* package_sep = strchr(__Pyx_MODULE_NAME, '.');
        if (package_sep != (0)) {
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, 1);
            if (unlikely(!module)) {
                if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                    goto bad;
                PyErr_Clear();
            }
        }
        level = 0;
    }
    if (!module) {
        module = PyImport_ImportModuleLevelObject(
            name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, level);
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    return module;
}

/* ImportDottedModule */
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    Py_ssize_t size;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
#if CYTHON_ASSUME_SAFE_SIZE
    size = PyTuple_GET_SIZE(parts_tuple);
#else
    size = PyTuple_Size(parts_tuple);
    if (size < 0) goto bad;
#endif
    if (likely(size == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
        PyExc_ModuleNotFoundError,
        "No module named '%U'", partial_name);
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400) ||\
        CYTHON_COMPILING_IN_GRAAL
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
#if CYTHON_ASSUME_SAFE_SIZE
    nparts = PyTuple_GET_SIZE(parts_tuple);
#else
    nparts = PyTuple_Size(parts_tuple);
    if (nparts < 0) return NULL;
#endif
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = __Pyx_PySequence_ITEM(parts_tuple, i);
        if (!part) return NULL;
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_mstate_global->__pyx_n_u_spec_2);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_mstate_global->__pyx_n_u_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* RaiseUnboundLocalError */
static void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* py_abs */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
#if PY_VERSION_HEX >= 0x030C00A7
    if (likely(__Pyx_PyLong_IsCompact(n))) {
        return PyLong_FromSize_t(__Pyx_PyLong_CompactValueUnsigned(n));
    }
#else
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromUnsignedLong(__Pyx_PyLong_Digits(n)[0]);
    }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            #if PY_VERSION_HEX >= 0x030C00A7
            ((PyLongObject*)copy)->long_value.lv_tag ^= ((PyLongObject*)copy)->long_value.lv_tag & _PyLong_SIGN_MASK;
            #else
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
            #endif
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* pep479 */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen) {
    PyObject *exc, *val, *tb, *cur_exc, *new_exc;
    __Pyx_PyThreadState_declare
    int is_async_stopiteration = 0;
    CYTHON_MAYBE_UNUSED_VAR(in_async_gen);
    __Pyx_PyThreadState_assign
    cur_exc = __Pyx_PyErr_CurrentExceptionType();
    if (likely(!__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopIteration))) {
        if (in_async_gen && unlikely(__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopAsyncIteration))) {
            is_async_stopiteration = 1;
        } else {
            return;
        }
    }
    __Pyx_GetException(&exc, &val, &tb);
    Py_XDECREF(exc);
    Py_XDECREF(tb);
    new_exc = PyObject_CallFunction(PyExc_RuntimeError, "s",
        is_async_stopiteration ? "async generator raised StopAsyncIteration" :
        in_async_gen ? "async generator raised StopIteration" :
        "generator raised StopIteration");
    if (!new_exc) {
        Py_XDECREF(val);
        return;
    }
    PyException_SetCause(new_exc, val); // steals ref to val
    PyErr_SetObject(PyExc_RuntimeError, new_exc);
}

/* PyLongCompare */
static CYTHON_INLINE int __Pyx_PyLong_BoolNeObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 0;
    }
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) != 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 1;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 1;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal != 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = __Pyx_PyFloat_AS_DOUBLE(op1);
        return ((double)a != (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* PyLongBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_Fallback___Pyx_PyLong_AddObjC(PyObject *op1, PyObject *op2, int inplace) {
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject* __Pyx_Unpacked___Pyx_PyLong_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long b = intval;
    long a, x;
#ifdef HAVE_LONG_LONG
    const PY_LONG_LONG llb = intval;
    PY_LONG_LONG lla, llx;
#endif
    if (unlikely(__Pyx_PyLong_IsZero(op1))) {
        return __Pyx_NewRef(op2);
    }
    if (likely(__Pyx_PyLong_IsCompact(op1))) {
        a = __Pyx_PyLong_CompactValue(op1);
    } else {
        const digit* digits = __Pyx_PyLong_Digits(op1);
        const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
        switch (size) {
            case -2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                    a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                    lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                    a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                    lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                    a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                    lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                    a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                    lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                    a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                    lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                    a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                    lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
        }
    }
            x = a + b;
        return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
    long_long:
            llx = lla + llb;
        return PyLong_FromLongLong(llx);
#endif
    return __Pyx_Fallback___Pyx_PyLong_AddObjC(op1, op2, inplace);
    
    
}
#endif
static PyObject* __Pyx_Float___Pyx_PyLong_AddObjC(PyObject *float_val, long intval, int zerodivision_check) {
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long b = intval;
    double a = __Pyx_PyFloat_AS_DOUBLE(float_val);
        double result;
        
        result = ((double)a) + (double)b;
        return PyFloat_FromDouble(result);
}
static CYTHON_INLINE PyObject* __Pyx_PyLong_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        return __Pyx_Unpacked___Pyx_PyLong_AddObjC(op1, op2, intval, inplace, zerodivision_check);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        return __Pyx_Float___Pyx_PyLong_AddObjC(op1, intval, zerodivision_check);
    }
    return __Pyx_Fallback___Pyx_PyLong_AddObjC(op1, op2, inplace);
}
#endif

/* PyLongBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_Fallback___Pyx_PyLong_SubtractObjC(PyObject *op1, PyObject *op2, int inplace) {
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject* __Pyx_Unpacked___Pyx_PyLong_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long b = intval;
    long a, x;
#ifdef HAVE_LONG_LONG
    const PY_LONG_LONG llb = intval;
    PY_LONG_LONG lla, llx;
#endif
    if (unlikely(__Pyx_PyLong_IsZero(op1))) {
        return PyLong_FromLong(-intval);
    }
    if (likely(__Pyx_PyLong_IsCompact(op1))) {
        a = __Pyx_PyLong_CompactValue(op1);
    } else {
        const digit* digits = __Pyx_PyLong_Digits(op1);
        const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
        switch (size) {
            case -2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                    a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                    lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                    a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                    lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                    a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                    lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                    a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                    lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                    a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                    lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                    a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                    lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
        }
    }
            x = a - b;
        return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
    long_long:
            llx = lla - llb;
        return PyLong_FromLongLong(llx);
#endif
    return __Pyx_Fallback___Pyx_PyLong_SubtractObjC(op1, op2, inplace);
    
    
}
#endif
static PyObject* __Pyx_Float___Pyx_PyLong_SubtractObjC(PyObject *float_val, long intval, int zerodivision_check) {
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long b = intval;
    double a = __Pyx_PyFloat_AS_DOUBLE(float_val);
        double result;
        
        result = ((double)a) - (double)b;
        return PyFloat_FromDouble(result);
}
static CYTHON_INLINE PyObject* __Pyx_PyLong_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        return __Pyx_Unpacked___Pyx_PyLong_SubtractObjC(op1, op2, intval, inplace, zerodivision_check);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        return __Pyx_Float___Pyx_PyLong_SubtractObjC(op1, intval, zerodivision_check);
    }
    return __Pyx_Fallback___Pyx_PyLong_SubtractObjC(op1, op2, inplace);
}
#endif

/* PyLongBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_Fallback___Pyx_PyLong_MultiplyCObj(PyObject *op1, PyObject *op2, int inplace) {
    return (inplace ? PyNumber_InPlaceMultiply : PyNumber_Multiply)(op1, op2);
}
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject* __Pyx_Unpacked___Pyx_PyLong_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long a = intval;
    long b, x;
#ifdef HAVE_LONG_LONG
    const PY_LONG_LONG lla = intval;
    PY_LONG_LONG llb, llx;
#endif
    if (unlikely(__Pyx_PyLong_IsZero(op2))) {
        return __Pyx_NewRef(op2);
    }
    if (likely(__Pyx_PyLong_IsCompact(op2))) {
        b = __Pyx_PyLong_CompactValue(op2);
    } else {
        const digit* digits = __Pyx_PyLong_Digits(op2);
        const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op2);
        switch (size) {
            case -2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                    b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                    llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                    b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                    llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                    b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                    llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                    b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                    llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                    b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                    llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                    b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                    llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            default: return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
        }
    }
            CYTHON_UNUSED_VAR(a);
            CYTHON_UNUSED_VAR(b);
            #ifdef HAVE_LONG_LONG
            llb = b;
            goto long_long;
            #else
            return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
            #endif
        return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
    long_long:
            llx = lla * llb;
        return PyLong_FromLongLong(llx);
#endif
    return __Pyx_Fallback___Pyx_PyLong_MultiplyCObj(op1, op2, inplace);
    
    
}
#endif
static PyObject* __Pyx_Float___Pyx_PyLong_MultiplyCObj(PyObject *float_val, long intval, int zerodivision_check) {
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long a = intval;
    double b = __Pyx_PyFloat_AS_DOUBLE(float_val);
        double result;
        
        result = ((double)a) * (double)b;
        return PyFloat_FromDouble(result);
}
static CYTHON_INLINE PyObject* __Pyx_PyLong_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        return __Pyx_Unpacked___Pyx_PyLong_MultiplyCObj(op1, op2, intval, inplace, zerodivision_check);
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        return __Pyx_Float___Pyx_PyLong_MultiplyCObj(op2, intval, zerodivision_check);
    }
    return __Pyx_Fallback___Pyx_PyLong_MultiplyCObj(op1, op2, inplace);
}
#endif

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_AddCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double a = floatval;
    double b, result;
    CYTHON_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    if (likely(PyFloat_CheckExact(op2))) {
        b = __Pyx_PyFloat_AS_DOUBLE(op2);
        
    } else
    if (likely(PyLong_CheckExact(op2))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsZero(op2)) {
            b = 0.0;
            
        } else if (__Pyx_PyLong_IsCompact(op2)) {
            b = (double) __Pyx_PyLong_CompactValue(op2);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op2);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op2);
            switch (size) {
                case -2:
                case 2:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                        b = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -2)
                                b = -b;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                case 3:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                        b = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -3)
                                b = -b;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                case 4:
                    if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                        b = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -4)
                                b = -b;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                default:
        #endif
                    b = PyLong_AsDouble(op2);
                    if (unlikely(b == -1.0 && PyErr_Occurred())) return NULL;
        #if CYTHON_USE_PYLONG_INTERNALS
            }
        }
        #endif
    } else {
        return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
    }
        result = a + b;
        return PyFloat_FromDouble(result);
}
#endif

/* PyLongBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_Fallback___Pyx_PyLong_MultiplyObjC(PyObject *op1, PyObject *op2, int inplace) {
    return (inplace ? PyNumber_InPlaceMultiply : PyNumber_Multiply)(op1, op2);
}
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject* __Pyx_Unpacked___Pyx_PyLong_MultiplyObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long b = intval;
    long a, x;
#ifdef HAVE_LONG_LONG
    const PY_LONG_LONG llb = intval;
    PY_LONG_LONG lla, llx;
#endif
    if (unlikely(__Pyx_PyLong_IsZero(op1))) {
        return __Pyx_NewRef(op1);
    }
    if (likely(__Pyx_PyLong_IsCompact(op1))) {
        a = __Pyx_PyLong_CompactValue(op1);
    } else {
        const digit* digits = __Pyx_PyLong_Digits(op1);
        const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
        switch (size) {
            case -2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                    a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                    lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                    a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                    lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                    a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                    lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                    a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                    lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                    a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                    lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                    a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                    lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            default: return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
        }
    }
            CYTHON_UNUSED_VAR(a);
            CYTHON_UNUSED_VAR(b);
            #ifdef HAVE_LONG_LONG
            lla = a;
            goto long_long;
            #else
            return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
            #endif
        return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
    long_long:
            llx = lla * llb;
        return PyLong_FromLongLong(llx);
#endif
    return __Pyx_Fallback___Pyx_PyLong_MultiplyObjC(op1, op2, inplace);
    
    
}
#endif
static PyObject* __Pyx_Float___Pyx_PyLong_MultiplyObjC(PyObject *float_val, long intval, int zerodivision_check) {
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long b = intval;
    double a = __Pyx_PyFloat_AS_DOUBLE(float_val);
        double result;
        
        result = ((double)a) * (double)b;
        return PyFloat_FromDouble(result);
}
static CYTHON_INLINE PyObject* __Pyx_PyLong_MultiplyObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        return __Pyx_Unpacked___Pyx_PyLong_MultiplyObjC(op1, op2, intval, inplace, zerodivision_check);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        return __Pyx_Float___Pyx_PyLong_MultiplyObjC(op1, intval, zerodivision_check);
    }
    return __Pyx_Fallback___Pyx_PyLong_MultiplyObjC(op1, op2, inplace);
}
#endif

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double a = floatval;
    double b, result;
    CYTHON_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    if (likely(PyFloat_CheckExact(op2))) {
        b = __Pyx_PyFloat_AS_DOUBLE(op2);
        
    } else
    if (likely(PyLong_CheckExact(op2))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsZero(op2)) {
            b = 0.0;
            
        } else if (__Pyx_PyLong_IsCompact(op2)) {
            b = (double) __Pyx_PyLong_CompactValue(op2);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op2);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op2);
            switch (size) {
                case -2:
                case 2:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                        b = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -2)
                                b = -b;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                case 3:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                        b = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -3)
                                b = -b;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                case 4:
                    if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                        b = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -4)
                                b = -b;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                default:
        #endif
                    b = PyLong_AsDouble(op2);
                    if (unlikely(b == -1.0 && PyErr_Occurred())) return NULL;
        #if CYTHON_USE_PYLONG_INTERNALS
            }
        }
        #endif
    } else {
        return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
    }
        result = a - b;
        return PyFloat_FromDouble(result);
}
#endif

/* RaiseClosureNameError */
static void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* PyLongBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_Fallback___Pyx_PyLong_AddCObj(PyObject *op1, PyObject *op2, int inplace) {
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject* __Pyx_Unpacked___Pyx_PyLong_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long a = intval;
    long b, x;
#ifdef HAVE_LONG_LONG
    const PY_LONG_LONG lla = intval;
    PY_LONG_LONG llb, llx;
#endif
    if (unlikely(__Pyx_PyLong_IsZero(op2))) {
        return __Pyx_NewRef(op1);
    }
    if (likely(__Pyx_PyLong_IsCompact(op2))) {
        b = __Pyx_PyLong_CompactValue(op2);
    } else {
        const digit* digits = __Pyx_PyLong_Digits(op2);
        const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op2);
        switch (size) {
            case -2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                    b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                    llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                    b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                    llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                    b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                    llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                    b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                    llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                    b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                    llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                    b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                    llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
        }
    }
            x = a + b;
        return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
    long_long:
            llx = lla + llb;
        return PyLong_FromLongLong(llx);
#endif
    return __Pyx_Fallback___Pyx_PyLong_AddCObj(op1, op2, inplace);
    
    
}
#endif
static PyObject* __Pyx_Float___Pyx_PyLong_AddCObj(PyObject *float_val, long intval, int zerodivision_check) {
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long a = intval;
    double b = __Pyx_PyFloat_AS_DOUBLE(float_val);
        double result;
        
        result = ((double)a) + (double)b;
        return PyFloat_FromDouble(result);
}
static CYTHON_INLINE PyObject* __Pyx_PyLong_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        return __Pyx_Unpacked___Pyx_PyLong_AddCObj(op1, op2, intval, inplace, zerodivision_check);
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        return __Pyx_Float___Pyx_PyLong_AddCObj(op2, intval, zerodivision_check);
    }
    return __Pyx_Fallback___Pyx_PyLong_AddCObj(op1, op2, inplace);
}
#endif

/* DictGetItem */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    if (unlikely(__Pyx_PyDict_GetItemRef(d, key, &value) == 0)) { // no value, no error
        if (unlikely(PyTuple_Check(key))) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args)) {
                PyErr_SetObject(PyExc_KeyError, args);
                Py_DECREF(args);
            }
        } else {
            PyErr_SetObject(PyExc_KeyError, key);
        }
    }
    return value;
}
#endif

/* CallTypeTraverse */
#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)
#else
static int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg) {
    #if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03090000
    if (__Pyx_get_runtime_version() < 0x03090000) return 0;
    #endif
    if (!always_call) {
        PyTypeObject *base = __Pyx_PyObject_GetSlot(o, tp_base, PyTypeObject*);
        unsigned long flags = PyType_GetFlags(base);
        if (flags & Py_TPFLAGS_HEAPTYPE) {
            return 0;
        }
    }
    Py_VISIT((PyObject*)Py_TYPE(o));
    return 0;
}
#endif

/* LimitedApiGetTypeDict */
#if CYTHON_COMPILING_IN_LIMITED_API
static Py_ssize_t __Pyx_GetTypeDictOffset(void) {
    PyObject *tp_dictoffset_o;
    Py_ssize_t tp_dictoffset;
    tp_dictoffset_o = PyObject_GetAttrString((PyObject*)(&PyType_Type), "__dictoffset__");
    if (unlikely(!tp_dictoffset_o)) return -1;
    tp_dictoffset = PyLong_AsSsize_t(tp_dictoffset_o);
    Py_DECREF(tp_dictoffset_o);
    if (unlikely(tp_dictoffset == 0)) {
        PyErr_SetString(
            PyExc_TypeError,
            "'type' doesn't have a dictoffset");
        return -1;
    } else if (unlikely(tp_dictoffset < 0)) {
        PyErr_SetString(
            PyExc_TypeError,
            "'type' has an unexpected negative dictoffset. "
            "Please report this as Cython bug");
        return -1;
    }
    return tp_dictoffset;
}
static PyObject *__Pyx_GetTypeDict(PyTypeObject *tp) {
    static Py_ssize_t tp_dictoffset = 0;
    if (unlikely(tp_dictoffset == 0)) {
        tp_dictoffset = __Pyx_GetTypeDictOffset();
        if (unlikely(tp_dictoffset == -1 && PyErr_Occurred())) {
            tp_dictoffset = 0; // try again next time?
            return NULL;
        }
    }
    return *(PyObject**)((char*)tp + tp_dictoffset);
}
#endif

/* SetItemOnTypeDict */
static int __Pyx__SetItemOnTypeDict(PyTypeObject *tp, PyObject *k, PyObject *v) {
    int result;
    PyObject *tp_dict;
#if CYTHON_COMPILING_IN_LIMITED_API
    tp_dict = __Pyx_GetTypeDict(tp);
    if (unlikely(!tp_dict)) return -1;
#else
    tp_dict = tp->tp_dict;
#endif
    result = PyDict_SetItem(tp_dict, k, v);
    if (likely(!result)) {
        PyType_Modified(tp);
        if (unlikely(PyObject_HasAttr(v, __pyx_mstate_global->__pyx_n_u_set_name))) {
            PyObject *setNameResult = PyObject_CallMethodObjArgs(v, __pyx_mstate_global->__pyx_n_u_set_name,  (PyObject *) tp, k, NULL);
            if (!setNameResult) return -1;
            Py_DECREF(setNameResult);
        }
    }
    return result;
}

/* FixUpExtensionType */
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if __PYX_LIMITED_VERSION_HEX > 0x030900B1
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
    CYTHON_UNUSED_VAR(__Pyx__SetItemOnTypeDict);
#else
    const PyType_Slot *slot = spec->slots;
    int changed = 0;
#if !CYTHON_COMPILING_IN_LIMITED_API
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
#if !CYTHON_COMPILING_IN_CPYTHON
        const
#endif  // !CYTHON_COMPILING_IN_CPYTHON)
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif  // CYTHON_METH_FASTCALL
#if !CYTHON_COMPILING_IN_PYPY
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    int set_item_result = PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr);
                    Py_DECREF(descr);
                    if (unlikely(set_item_result < 0)) {
                        return -1;
                    }
                    changed = 1;
                }
#endif  // !CYTHON_COMPILING_IN_PYPY
            }
            memb++;
        }
    }
#endif  // !CYTHON_COMPILING_IN_LIMITED_API
#if !CYTHON_COMPILING_IN_PYPY
    slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_getset)
        slot++;
    if (slot && slot->slot == Py_tp_getset) {
        PyGetSetDef *getset = (PyGetSetDef*) slot->pfunc;
        while (getset && getset->name) {
            if (getset->name[0] == '_' && getset->name[1] == '_' && strcmp(getset->name, "__module__") == 0) {
                PyObject *descr = PyDescr_NewGetSet(type, getset);
                if (unlikely(!descr))
                    return -1;
                #if CYTHON_COMPILING_IN_LIMITED_API
                PyObject *pyname = PyUnicode_FromString(getset->name);
                if (unlikely(!pyname)) {
                    Py_DECREF(descr);
                    return -1;
                }
                int set_item_result = __Pyx_SetItemOnTypeDict(type, pyname, descr);
                Py_DECREF(pyname);
                #else
                CYTHON_UNUSED_VAR(__Pyx__SetItemOnTypeDict);
                int set_item_result = PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr);
                #endif
                Py_DECREF(descr);
                if (unlikely(set_item_result < 0)) {
                    return -1;
                }
                changed = 1;
            }
            ++getset;
        }
    }
#endif  // !CYTHON_COMPILING_IN_PYPY
    if (changed)
        PyType_Modified(type);
#endif  // PY_VERSION_HEX > 0x030900B1
    return 0;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_SIZE
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (unlikely(n < 0)) return -1;
#endif
    for (i = 1; i < n; i++)
    {
        PyTypeObject *b;
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetFullyQualifiedName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetFullyQualifiedName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !CYTHON_USE_TYPE_SLOTS
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
CYTHON_UNUSED static int __Pyx_PyType_HasMultipleInheritance(PyTypeObject *t) {
    while (t) {
        PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
        if (bases) {
            return 1;
        }
        t = __Pyx_PyType_GetSlot(t, tp_base, PyTypeObject*);
    }
    return 0;
}
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !CYTHON_COMPILING_IN_CPYTHON || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    if (!__Pyx_PyType_HasMultipleInheritance(t)) {
        return PyType_Ready(t);
    }
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400) &&\
                !CYTHON_COMPILING_IN_GRAAL
        gc = PyImport_GetModule(__pyx_mstate_global->__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_mstate_global->__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* DelItemOnTypeDict */
static int __Pyx__DelItemOnTypeDict(PyTypeObject *tp, PyObject *k) {
    int result;
    PyObject *tp_dict;
#if CYTHON_COMPILING_IN_LIMITED_API
    tp_dict = __Pyx_GetTypeDict(tp);
    if (unlikely(!tp_dict)) return -1;
#else
    tp_dict = tp->tp_dict;
#endif
    result = PyDict_DelItem(tp_dict, k);
    if (likely(!result)) PyType_Modified(tp);
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_mstate_global->__pyx_n_u_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_mstate_global->__pyx_n_u_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_mstate_global->__pyx_n_u_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_reduce_cython);
            if (likely(reduce_cython)) {
                ret = __Pyx_SetItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = __Pyx_DelItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_mstate_global->__pyx_n_u_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = __Pyx_SetItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = __Pyx_DelItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetFullyQualifiedName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* SetVTable */
static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_mstate_global->__pyx_n_u_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_mstate_global->__pyx_n_u_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_mstate_global->__pyx_n_u_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_mstate_global->__pyx_n_u_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i=0;
    Py_ssize_t size;
    void** base_vtables;
    __Pyx_TypeName tp_base_name = NULL;
    __Pyx_TypeName base_name = NULL;
    void* unknown = (void*)-1;
    PyObject* bases = __Pyx_PyType_GetSlot(type, tp_bases, PyObject*);
    int base_depth = 0;
    {
        PyTypeObject* base = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
        while (base) {
            base_depth += 1;
            base = __Pyx_PyType_GetSlot(base, tp_base, PyTypeObject*);
        }
    }
    base_vtables = (void**) PyMem_Malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
#if CYTHON_COMPILING_IN_LIMITED_API
    size = PyTuple_Size(bases);
    if (size < 0) goto other_failure;
#else
    size = PyTuple_GET_SIZE(bases);
#endif
    for (i = 1; i < size; i++) {
        PyObject *basei;
        void* base_vtable;
#if CYTHON_AVOID_BORROWED_REFS
        basei = PySequence_GetItem(bases, i);
        if (unlikely(!basei)) goto other_failure;
#elif !CYTHON_ASSUME_SAFE_MACROS
        basei = PyTuple_GetItem(bases, i);
        if (unlikely(!basei)) goto other_failure;
#else
        basei = PyTuple_GET_ITEM(bases, i);
#endif
        base_vtable = __Pyx_GetVtable((PyTypeObject*)basei);
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(basei);
#endif
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = __Pyx_PyType_GetSlot(base, tp_base, PyTypeObject*);
            }
        }
    }
    PyErr_Clear();
    PyMem_Free(base_vtables);
    return 0;
bad:
    {
        PyTypeObject* basei = NULL;
        PyTypeObject* tp_base = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
        tp_base_name = __Pyx_PyType_GetFullyQualifiedName(tp_base);
#if CYTHON_AVOID_BORROWED_REFS
        basei = (PyTypeObject*)PySequence_GetItem(bases, i);
        if (unlikely(!basei)) goto really_bad;
#elif !CYTHON_ASSUME_SAFE_MACROS
        basei = (PyTypeObject*)PyTuple_GetItem(bases, i);
        if (unlikely(!basei)) goto really_bad;
#else
        basei = (PyTypeObject*)PyTuple_GET_ITEM(bases, i);
#endif
        base_name = __Pyx_PyType_GetFullyQualifiedName(basei);
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(basei);
#endif
    }
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
#if CYTHON_AVOID_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
really_bad: // bad has failed!
#endif
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_AVOID_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
other_failure:
#endif
    PyMem_Free(base_vtables);
    return -1;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_1_3
#define __PYX_HAVE_RT_ImportType_3_1_3
static PyTypeObject *__Pyx_ImportType_3_1_3(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_1_3 check_size)
{
    PyObject *result = 0;
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    if (size == 0) {
        return (PyTypeObject *)result;
    }
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_1_3 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_1_3 && (size_t)basicsize > size) {
        if (PyErr_WarnFormat(NULL, 0,
                "%.200s.%.200s size changed, may indicate binary incompatibility. "
                "Expected %zd from C header, got %zd from PyObject",
                module_name, class_name, size, basicsize) < 0) {
            goto bad;
        }
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef(__PYX_ABI_MODULE_NAME);
}

/* dict_setdefault */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value,
                                                       int is_safe_type) {
    PyObject* value;
    CYTHON_MAYBE_UNUSED_VAR(is_safe_type);
#if CYTHON_COMPILING_IN_LIMITED_API
    value = PyObject_CallMethod(d, "setdefault", "OO", key, default_value);
#elif PY_VERSION_HEX >= 0x030d0000
    PyDict_SetDefaultRef(d, key, default_value, &value);
#else
    value = PyDict_SetDefault(d, key, default_value);
    if (unlikely(!value)) return NULL;
    Py_INCREF(value);
#endif
    return value;
}

/* FetchCommonType */
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
static PyObject* __Pyx_PyType_FromMetaclass(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *result = __Pyx_PyType_FromModuleAndSpec(module, spec, bases);
    if (result && metaclass) {
        PyObject *old_tp = (PyObject*)Py_TYPE(result);
    Py_INCREF((PyObject*)metaclass);
#if __PYX_LIMITED_VERSION_HEX >= 0x03090000
        Py_SET_TYPE(result, metaclass);
#else
        result->ob_type = metaclass;
#endif
        Py_DECREF(old_tp);
    }
    return result;
}
#else
#define __Pyx_PyType_FromMetaclass(me, mo, s, b) PyType_FromMetaclass(me, mo, s, b)
#endif
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t expected_basicsize) {
    Py_ssize_t basicsize;
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (expected_basicsize == 0) {
        return 0; // size is inherited, nothing useful to check
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
    if (unlikely(!py_basicsize)) return -1;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = NULL;
    if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) return -1;
#else
    basicsize = ((PyTypeObject*) cached_type)->tp_basicsize;
#endif
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module = NULL, *cached_type = NULL, *abi_module_dict, *new_cached_type, *py_object_name;
    int get_item_ref_result;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    py_object_name = PyUnicode_FromString(object_name);
    if (!py_object_name) return NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) goto done;
    abi_module_dict = PyModule_GetDict(abi_module);
    if (!abi_module_dict) goto done;
    get_item_ref_result = __Pyx_PyDict_GetItemRef(abi_module_dict, py_object_name, &cached_type);
    if (get_item_ref_result == 1) {
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    } else if (unlikely(get_item_ref_result == -1)) {
        goto bad;
    }
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromMetaclass(metaclass, abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    new_cached_type = __Pyx_PyDict_SetDefault(abi_module_dict, py_object_name, cached_type, 1);
    if (unlikely(new_cached_type != cached_type)) {
        if (unlikely(!new_cached_type)) goto bad;
        Py_DECREF(cached_type);
        cached_type = new_cached_type;
        if (__Pyx_VerifyCachedType(
                cached_type,
                object_name,
                spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    } else {
        Py_DECREF(new_cached_type);
    }
done:
    Py_XDECREF(abi_module);
    Py_DECREF(py_object_name);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CommonTypesMetaclass */
static PyObject* __pyx_CommonTypesMetaclass_get_module(CYTHON_UNUSED PyObject *self, CYTHON_UNUSED void* context) {
    return PyUnicode_FromString(__PYX_ABI_MODULE_NAME);
}
static PyGetSetDef __pyx_CommonTypesMetaclass_getset[] = {
    {"__module__", __pyx_CommonTypesMetaclass_get_module, NULL, NULL, NULL},
    {0, 0, 0, 0, 0}
};
static PyType_Slot __pyx_CommonTypesMetaclass_slots[] = {
    {Py_tp_getset, (void *)__pyx_CommonTypesMetaclass_getset},
    {0, 0}
};
static PyType_Spec __pyx_CommonTypesMetaclass_spec = {
    __PYX_TYPE_MODULE_PREFIX "_common_types_metatype",
    0,
    0,
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
    Py_TPFLAGS_DISALLOW_INSTANTIATION |
#endif
    Py_TPFLAGS_DEFAULT,
    __pyx_CommonTypesMetaclass_slots
};
static int __pyx_CommonTypesMetaclass_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    PyObject *bases = PyTuple_Pack(1, &PyType_Type);
    if (unlikely(!bases)) {
        return -1;
    }
    mstate->__pyx_CommonTypesMetaclassType = __Pyx_FetchCommonTypeFromSpec(NULL, module, &__pyx_CommonTypesMetaclass_spec, bases);
    if (unlikely(mstate->__pyx_CommonTypesMetaclassType == NULL)) {
        return -1;
    }
    return 0;
}

/* PyMethodNew */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *result;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    #if __PYX_LIMITED_VERSION_HEX >= 0x030C0000
    {
        PyObject *args[] = {func, self};
        result = PyObject_Vectorcall(__pyx_mstate_global->__Pyx_CachedMethodType, args, 2, NULL);
    }
    #else
    result = PyObject_CallFunctionObjArgs(__pyx_mstate_global->__Pyx_CachedMethodType, func, self, NULL);
    #endif
    return result;
}
#else
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    #if !CYTHON_ASSUME_SAFE_SIZE
    Py_ssize_t nkw = PyDict_Size(kw);
    if (unlikely(nkw == -1)) return NULL;
    #else
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    #endif
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &=
        #if CYTHON_COMPILING_IN_LIMITED_API
            PyType_GetFlags(Py_TYPE(key));
        #else
            Py_TYPE(key)->tp_flags;
        #endif
        Py_INCREF(key);
        Py_INCREF(value);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(PyTuple_SetItem(kwnames, i, key) < 0)) goto cleanup;
        #else
        PyTuple_SET_ITEM(kwnames, i, key);
        #endif
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    Py_ssize_t kw_size =
        likely(kw == NULL) ?
        0 :
#if !CYTHON_ASSUME_SAFE_SIZE
        PyDict_Size(kw);
#else
        PyDict_GET_SIZE(kw);
#endif
    if (kw_size == 0) {
        return vc(func, args, nargs, NULL);
    }
#if !CYTHON_ASSUME_SAFE_SIZE
    else if (unlikely(kw_size == -1)) {
        return NULL;
    }
#endif
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunctionNoMethod(PyObject *func, void (*cfunc)(void)) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void)) {
    if ((PyObject*)Py_TYPE(func) == __pyx_mstate_global->__Pyx_CachedMethodType) {
        int result;
        PyObject *newFunc = PyObject_GetAttr(func, __pyx_mstate_global->__pyx_n_u_func);
        if (unlikely(!newFunc)) {
            PyErr_Clear(); // It's only an optimization, so don't throw an error
            return 0;
        }
        result = __Pyx__IsSameCyOrCFunctionNoMethod(newFunc, cfunc);
        Py_DECREF(newFunc);
        return result;
    }
    return __Pyx__IsSameCyOrCFunctionNoMethod(func, cfunc);
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void)) {
    if (PyMethod_Check(func)) {
        func = PyMethod_GET_FUNCTION(func);
    }
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure) {
    PyObject *result;
    CYTHON_UNUSED_VAR(closure);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_doc_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#else
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    PyObject *result = NULL;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_name_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    PyObject *result;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    Py_INCREF(op->func_qualname);
    result = op->func_qualname;
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    PyObject *result;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_dict_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = NULL;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_defaults_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_kwdefaults_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject *result;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_annotations_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine_value(__pyx_CyFunctionObject *op) {
    int is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
    if (is_coroutine) {
        PyObject *is_coroutine_value, *module, *fromlist, *marker = __pyx_mstate_global->__pyx_n_u_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_mstate_global->__pyx_n_u_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        is_coroutine_value = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(is_coroutine_value)) {
            return is_coroutine_value;
        }
ignore:
        PyErr_Clear();
    }
    return __Pyx_PyBool_FromLong(is_coroutine);
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    PyObject *result;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    result = __Pyx_CyFunction_get_is_coroutine_value(op);
    if (unlikely(!result))
        return NULL;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    if (op->func_is_coroutine) {
        Py_DECREF(result);
        result = __Pyx_NewRef(op->func_is_coroutine);
    } else {
        op->func_is_coroutine = __Pyx_NewRef(result);
    }
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static void __Pyx_CyFunction_raise_argument_count_error(__pyx_CyFunctionObject *func, const char* message, Py_ssize_t size) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_name = __Pyx_CyFunction_get_name(func, NULL);
    if (!py_name) return;
    PyErr_Format(PyExc_TypeError,
        "%.200S() %s (%" CYTHON_FORMAT_SSIZE_T "d given)",
        py_name, message, size);
    Py_DECREF(py_name);
#else
    const char* name = ((PyCFunctionObject*)func)->m_ml->ml_name;
    PyErr_Format(PyExc_TypeError,
        "%.200s() %s (%" CYTHON_FORMAT_SSIZE_T "d given)",
        name, message, size);
#endif
}
static void __Pyx_CyFunction_raise_type_error(__pyx_CyFunctionObject *func, const char* message) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_name = __Pyx_CyFunction_get_name(func, NULL);
    if (!py_name) return;
    PyErr_Format(PyExc_TypeError,
        "%.200S() %s",
        py_name, message);
    Py_DECREF(py_name);
#else
    const char* name = ((PyCFunctionObject*)func)->m_ml->ml_name;
    PyErr_Format(PyExc_TypeError,
        "%.200s() %s",
        name, message);
#endif
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {"func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {"__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {"func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {"__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {"__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {"func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {"__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {"func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {"__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {"func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {"__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {"func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {"__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {"func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {"__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {"__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {"__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {"_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
    {"__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API
    {"__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
    {"__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {"__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    PyObject *result = NULL;
    CYTHON_UNUSED_VAR(args);
    __Pyx_BEGIN_CRITICAL_SECTION(m);
    Py_INCREF(m->func_qualname);
    result = m->func_qualname;
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    Py_CLEAR(m->defaults);
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    {
        int e = __Pyx_call_type_traverse((PyObject*)m, 1, visit, arg);
        if (e) return e;
    }
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    __Pyx_VISIT_CONST(m->func_name);
    __Pyx_VISIT_CONST(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    __Pyx_VISIT_CONST(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    Py_VISIT(m->defaults);
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
    PyObject *repr;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    repr = PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
    __Pyx_END_CRITICAL_SECTION();
    return repr;
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void(*)(void))meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_SIZE
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
            __Pyx_CyFunction_raise_argument_count_error(
                (__pyx_CyFunctionObject*)func,
                "takes no arguments", size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_SIZE
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            __Pyx_CyFunction_raise_argument_count_error(
                (__pyx_CyFunctionObject*)func,
                "takes exactly one argument", size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    __Pyx_CyFunction_raise_type_error(
        (__pyx_CyFunctionObject*)func, "takes no keyword arguments");
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_SIZE
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(argc < 0)) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            __Pyx_CyFunction_raise_type_error(
                cyfunc, "needs an argument");
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(__Pyx_PyTuple_GET_SIZE(kwnames))) {
        __Pyx_CyFunction_raise_type_error(
            cyfunc, "takes no keyword arguments");
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        __Pyx_CyFunction_raise_argument_count_error(
            cyfunc, "takes no arguments", nargs);
        return NULL;
    }
    return meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        __Pyx_CyFunction_raise_argument_count_error(
            cyfunc, "takes exactly one argument", nargs);
        return NULL;
    }
    return meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if CYTHON_METH_FASTCALL
#if defined(Py_TPFLAGS_HAVE_VECTORCALL)
    Py_TPFLAGS_HAVE_VECTORCALL |
#elif defined(_Py_TPFLAGS_HAVE_VECTORCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
#endif // CYTHON_METH_FASTCALL
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
static int __pyx_CyFunction_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    mstate->__pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(
        mstate->__pyx_CommonTypesMetaclassType, module, &__pyx_CyFunctionType_spec, NULL);
    if (unlikely(mstate->__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func, PyTypeObject *defaults_type) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_CallObject((PyObject*)defaults_type, NULL); // _PyObject_New(defaults_type);
    if (unlikely(!m->defaults))
        return NULL;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_mstate_global->__pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_mstate_global->__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_mstate_global->__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __Pyx_BEGIN_CRITICAL_SECTION(*cython_runtime_dict);
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_mstate_global->__pyx_n_u_cline_in_traceback))
        Py_XINCREF(use_cline);
        __Pyx_END_CRITICAL_SECTION();
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_INCREF(use_cline);
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    Py_XDECREF(use_cline);
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static __Pyx_CachedCodeObjectType *__pyx__find_code_object(struct __Pyx_CodeObjectCache *code_cache, int code_line) {
    __Pyx_CachedCodeObjectType* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!code_cache->entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(code_cache->entries, code_cache->count, code_line);
    if (unlikely(pos >= code_cache->count) || unlikely(code_cache->entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = code_cache->entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line) {
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS
    (void)__pyx__find_code_object;
    return NULL; // Most implementation should have atomics. But otherwise, don't make it thread-safe, just miss.
#else
    struct __Pyx_CodeObjectCache *code_cache = &__pyx_mstate_global->__pyx_code_cache;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_nonatomic_int_type old_count = __pyx_atomic_incr_acq_rel(&code_cache->accessor_count);
    if (old_count < 0) {
        __pyx_atomic_decr_acq_rel(&code_cache->accessor_count);
        return NULL;
    }
#endif
    __Pyx_CachedCodeObjectType *result = __pyx__find_code_object(code_cache, code_line);
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_decr_acq_rel(&code_cache->accessor_count);
#endif
    return result;
#endif
}
static void __pyx__insert_code_object(struct __Pyx_CodeObjectCache *code_cache, int code_line, __Pyx_CachedCodeObjectType* code_object)
{
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = code_cache->entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            code_cache->entries = entries;
            code_cache->max_count = 64;
            code_cache->count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(code_cache->entries, code_cache->count, code_line);
    if ((pos < code_cache->count) && unlikely(code_cache->entries[pos].code_line == code_line)) {
        __Pyx_CachedCodeObjectType* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_INCREF(code_object);
        Py_DECREF(tmp);
        return;
    }
    if (code_cache->count == code_cache->max_count) {
        int new_max = code_cache->max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            code_cache->entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        code_cache->entries = entries;
        code_cache->max_count = new_max;
    }
    for (i=code_cache->count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    code_cache->count++;
    Py_INCREF(code_object);
}
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object) {
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS
    (void)__pyx__insert_code_object;
    return; // Most implementation should have atomics. But otherwise, don't make it thread-safe, just fail.
#else
    struct __Pyx_CodeObjectCache *code_cache = &__pyx_mstate_global->__pyx_code_cache;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_nonatomic_int_type expected = 0;
    if (!__pyx_atomic_int_cmp_exchange(&code_cache->accessor_count, &expected, INT_MIN)) {
        return;
    }
#endif
    __pyx__insert_code_object(code_cache, code_line, code_object);
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_sub(&code_cache->accessor_count, INT_MIN);
#endif
#endif
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result = PyObject_Call(replace, __pyx_mstate_global->__pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!code_object) {
        code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
        if (unlikely(!code_object)) goto bad;
        py_py_line = PyLong_FromLong(py_line);
        if (unlikely(!py_py_line)) goto bad;
        py_funcname = PyUnicode_FromString(funcname);
        if (unlikely(!py_funcname)) goto bad;
        dict = PyDict_New();
        if (unlikely(!dict)) goto bad;
        {
            PyObject *old_code_object = code_object;
            code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
            Py_DECREF(old_code_object);
        }
        if (unlikely(!code_object)) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, code_object);
    } else {
        dict = PyDict_New();
    }
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    if (c_line) {
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
    }
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_mstate_global->__pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      return ::std::complex< long double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      return x + y*(__pyx_t_long_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      __pyx_t_long_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_sum_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_diff_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_prod_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsl(b.real) >= fabsl(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                long double r = b.imag / b.real;
                long double s = (long double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_long_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            long double r = b.real / b.imag;
            long double s = (long double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_long_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            long double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_long_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_neg_long__double(__pyx_t_long_double_complex a) {
        __pyx_t_long_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_long__double(__pyx_t_long_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_conj_long__double(__pyx_t_long_double_complex a) {
        __pyx_t_long_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE long double __Pyx_c_abs_long__double(__pyx_t_long_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtl(z.real*z.real + z.imag*z.imag);
          #else
            return hypotl(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_pow_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
            __pyx_t_long_double_complex z;
            long double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    long double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_long__double(a, a);
                    case 3:
                        z = __Pyx_c_prod_long__double(a, a);
                        return __Pyx_c_prod_long__double(z, a);
                    case 4:
                        z = __Pyx_c_prod_long__double(a, a);
                        return __Pyx_c_prod_long__double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powl(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2l(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_long__double(a);
                theta = atan2l(a.imag, a.real);
            }
            lnr = logl(r);
            z_r = expl(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosl(z_theta);
            z.imag = z_r * sinl(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyLong_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyLong_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyLong_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyLong_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (size_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(size_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(size_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        size_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (size_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (size_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (size_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (size_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((size_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((size_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (size_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030d0000
static __Pyx_TypeName
__Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp)
{
    PyObject *module = NULL, *name = NULL, *result = NULL;
    #if __PYX_LIMITED_VERSION_HEX < 0x030b0000
    name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_mstate_global->__pyx_n_u_qualname);
    #else
    name = PyType_GetQualName(tp);
    #endif
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) goto bad;
    module = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_mstate_global->__pyx_n_u_module);
    if (unlikely(module == NULL) || unlikely(!PyUnicode_Check(module))) goto bad;
    if (PyUnicode_CompareWithASCIIString(module, "builtins") == 0) {
        result = name;
        name = NULL;
        goto done;
    }
    result = PyUnicode_FromFormat("%U.%U", module, name);
    if (unlikely(result == NULL)) goto bad;
  done:
    Py_XDECREF(name);
    Py_XDECREF(module);
    return result;
  bad:
    PyErr_Clear();
    if (name) {
        result = name;
        name = NULL;
    } else {
        result = __Pyx_NewRef(__pyx_mstate_global->__pyx_kp_u_);
    }
    goto done;
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* IterNextPlain */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
static PyObject *__Pyx_GetBuiltinNext_LimitedAPI(void) {
    if (unlikely(!__pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache))
        __pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache = __Pyx_GetBuiltinName(__pyx_mstate_global->__pyx_n_u_next);
    return __pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next_Plain(PyObject *iterator) {
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
    PyObject *result;
    PyObject *next = __Pyx_GetBuiltinNext_LimitedAPI();
    if (unlikely(!next)) return NULL;
    result = PyObject_CallFunctionObjArgs(next, iterator, NULL);
    return result;
#else
    (void)__Pyx_GetBuiltinName; // only for early limited API
    iternextfunc iternext = __Pyx_PyObject_GetIterNextFunc(iterator);
    assert(iternext);
    return iternext(iterator);
#endif
}

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallMethod1 */
#if !(CYTHON_VECTORCALL && (__PYX_LIMITED_VERSION_HEX >= 0x030C0000 || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x03090000)))
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
#endif
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
#if CYTHON_VECTORCALL && (__PYX_LIMITED_VERSION_HEX >= 0x030C0000 || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x03090000))
    PyObject *args[2] = {obj, arg};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_Call2Args;
    return PyObject_VectorcallMethod(method_name, args, 2 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
#endif
}

/* ReturnWithStopIteration */
static void __Pyx__ReturnWithStopIteration(PyObject* value, int async);
static CYTHON_INLINE void __Pyx_ReturnWithStopIteration(PyObject* value, int async, int iternext) {
    if (value == Py_None) {
        if (async || !iternext)
            PyErr_SetNone(async ? PyExc_StopAsyncIteration : PyExc_StopIteration);
        return;
    }
    __Pyx__ReturnWithStopIteration(value, async);
}
static void __Pyx__ReturnWithStopIteration(PyObject* value, int async) {
#if CYTHON_COMPILING_IN_CPYTHON
    __Pyx_PyThreadState_declare
#endif
    PyObject *exc;
    PyObject *exc_type = async ? PyExc_StopAsyncIteration : PyExc_StopIteration;
#if CYTHON_COMPILING_IN_CPYTHON
    if ((PY_VERSION_HEX >= (0x030C00A6)) || unlikely(PyTuple_Check(value) || PyExceptionInstance_Check(value))) {
        if (PY_VERSION_HEX >= (0x030e00A1)) {
            exc = __Pyx_PyObject_CallOneArg(exc_type, value);
        } else {
            PyObject *args_tuple = PyTuple_New(1);
            if (unlikely(!args_tuple)) return;
            Py_INCREF(value);
            PyTuple_SET_ITEM(args_tuple, 0, value);
            exc = PyObject_Call(exc_type, args_tuple, NULL);
            Py_DECREF(args_tuple);
        }
        if (unlikely(!exc)) return;
    } else {
        Py_INCREF(value);
        exc = value;
    }
    #if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    #if CYTHON_USE_EXC_INFO_STACK
    if (!__pyx_tstate->exc_info->exc_value)
    #else
    if (!__pyx_tstate->exc_type)
    #endif
    {
        Py_INCREF(exc_type);
        __Pyx_ErrRestore(exc_type, exc, NULL);
        return;
    }
    #endif
#else
    exc = __Pyx_PyObject_CallOneArg(exc_type, value);
    if (unlikely(!exc)) return;
#endif
    PyErr_SetObject(exc_type, exc);
    Py_DECREF(exc);
}

/* CoroutineBase */
#if !CYTHON_COMPILING_IN_LIMITED_API
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6 && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#endif // CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void
__Pyx_Coroutine_Undelegate(__pyx_CoroutineObject *gen) {
#if CYTHON_USE_AM_SEND
    gen->yieldfrom_am_send = NULL;
#endif
    Py_CLEAR(gen->yieldfrom);
}
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    CYTHON_UNUSED_VAR(__pyx_tstate);
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
        else if (likely(__Pyx_IS_TYPE(ev, (PyTypeObject*)PyExc_StopIteration))) {
            #if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL
            value = PyObject_GetAttr(ev, __pyx_mstate_global->__pyx_n_u_value);
            if (unlikely(!value)) goto limited_api_failure;
            #else
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            #endif
            Py_DECREF(ev);
        }
        else if (unlikely(PyTuple_Check(ev))) {
            Py_ssize_t tuple_size = __Pyx_PyTuple_GET_SIZE(ev);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely(tuple_size < 0)) {
                Py_XDECREF(tb);
                Py_DECREF(ev);
                Py_DECREF(et);
                return -1;
            }
            #endif
            if (tuple_size >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#elif CYTHON_ASSUME_SAFE_MACROS
                value = PySequence_ITEM(ev, 0);
#else
                value = PySequence_GetItem(ev, 0);
                if (!value) goto limited_api_failure;
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if CYTHON_COMPILING_IN_LIMITED_API
    value = PyObject_GetAttr(ev, __pyx_mstate_global->__pyx_n_u_value);
#else
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
#endif
    Py_DECREF(ev);
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!value)) return -1;
#endif
    *pvalue = value;
    return 0;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL || !CYTHON_ASSUME_SAFE_MACROS
  limited_api_failure:
    Py_XDECREF(et);
    Py_XDECREF(tb);
    Py_XDECREF(ev);
    return -1;
#endif
}
static CYTHON_INLINE
__Pyx_PySendResult __Pyx_Coroutine_status_from_result(PyObject **retval) {
    if (*retval) {
        return PYGEN_NEXT;
    } else if (likely(__Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, retval) == 0)) {
        return PYGEN_RETURN;
    } else {
        return PYGEN_ERROR;
    }
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_CLEAR(exc_state->exc_value);
#else
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
#endif
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
static void __Pyx_Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    CYTHON_MAYBE_UNUSED_VAR(closing);
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
__Pyx_PySendResult __Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, PyObject **result, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(__Pyx_Coroutine_get_is_running(self));  // Callers should ensure is_running
    if (unlikely(self->resume_label == -1)) {
        __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
        return PYGEN_ERROR;
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_value) {
        #if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        #else
        PyObject *exc_tb;
        #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
        exc_tb = PyException_GetTraceback(exc_state->exc_value);
        #elif PY_VERSION_HEX >= 0x030B00a4
        exc_tb = ((PyBaseExceptionObject*) exc_state->exc_value)->traceback;
        #else
        exc_tb = exc_state->exc_traceback;
        #endif
        if (exc_tb) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
            #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
            Py_DECREF(exc_tb);
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    retval = self->body(self, tstate, value);
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    *result = retval;
    if (self->resume_label == -1) {
        return likely(retval) ? PYGEN_RETURN : PYGEN_ERROR;
    }
    return PYGEN_NEXT;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(exc_state);
#else
    PyObject *exc_tb;
    #if PY_VERSION_HEX >= 0x030B00a4
    if (!exc_state->exc_value) return;
    exc_tb = PyException_GetTraceback(exc_state->exc_value);
    #else
    exc_tb = exc_state->exc_traceback;
    #endif
    if (likely(exc_tb)) {
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
        #if PY_VERSION_HEX >= 0x030B00a4
        Py_DECREF(exc_tb);
        #endif
    }
#endif
}
#define __Pyx_Coroutine_MethodReturnFromResult(gen, result, retval, iternext)\
    ((result) == PYGEN_NEXT ? (retval) : __Pyx__Coroutine_MethodReturnFromResult(gen, result, retval, iternext))
static PyObject *
__Pyx__Coroutine_MethodReturnFromResult(PyObject* gen, __Pyx_PySendResult result, PyObject *retval, int iternext) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if (likely(result == PYGEN_RETURN)) {
        int is_async = 0;
        #ifdef __Pyx_AsyncGen_USED
        is_async = __Pyx_AsyncGen_CheckExact(gen);
        #endif
        __Pyx_ReturnWithStopIteration(retval, is_async, iternext);
        Py_XDECREF(retval);
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
#if PY_VERSION_HEX < 0x030d00A1
            _PyGen_SetStopIterationValue(result);
#else
            if (!PyTuple_Check(result) && !PyExceptionInstance_Check(result)) {
                PyErr_SetObject(PyExc_StopIteration, result);
            } else {
                PyObject *exc = __Pyx_PyObject_CallOneArg(PyExc_StopIteration, result);
                if (likely(exc != NULL)) {
                    PyErr_SetObject(PyExc_StopIteration, exc);
                    Py_DECREF(exc);
                }
            }
#endif
        }
        Py_DECREF(result);
        result = NULL;
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE __Pyx_PySendResult
__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen, PyObject** retval) {
    __Pyx_PySendResult result;
    PyObject *val = NULL;
    assert(__Pyx_Coroutine_get_is_running(gen));
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    result = __Pyx_Coroutine_SendEx(gen, val, retval, 0);
    Py_XDECREF(val);
    return result;
}
#if CYTHON_USE_AM_SEND
static __Pyx_PySendResult
__Pyx_Coroutine_SendToDelegate(__pyx_CoroutineObject *gen, __Pyx_pyiter_sendfunc gen_am_send, PyObject *value, PyObject **retval) {
    PyObject *ret = NULL;
    __Pyx_PySendResult delegate_result, result;
    assert(__Pyx_Coroutine_get_is_running(gen));
    delegate_result = gen_am_send(gen->yieldfrom, value, &ret);
    if (delegate_result == PYGEN_NEXT) {
        assert (ret != NULL);
        *retval = ret;
        return PYGEN_NEXT;
    }
    assert (delegate_result != PYGEN_ERROR || ret == NULL);
    __Pyx_Coroutine_Undelegate(gen);
    result = __Pyx_Coroutine_SendEx(gen, ret, retval, 0);
    Py_XDECREF(ret);
    return result;
}
#endif
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval = NULL;
    __Pyx_PySendResult result = __Pyx_Coroutine_AmSend(self, value, &retval);
    return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 0);
}
static __Pyx_PySendResult
__Pyx_Coroutine_AmSend(PyObject *self, PyObject *value, PyObject **retval) {
    __Pyx_PySendResult result;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        *retval = __Pyx_Coroutine_AlreadyRunningError(gen);
        return PYGEN_ERROR;
    }
    #if CYTHON_USE_AM_SEND
    if (gen->yieldfrom_am_send) {
        result = __Pyx_Coroutine_SendToDelegate(gen, gen->yieldfrom_am_send, value, retval);
    } else
    #endif
    if (gen->yieldfrom) {
        PyObject *yf = gen->yieldfrom;
        PyObject *ret;
      #if !CYTHON_USE_AM_SEND
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
      #endif
        {
            #if !CYTHON_COMPILING_IN_LIMITED_API || __PYX_LIMITED_VERSION_HEX >= 0x03080000
            if (value == Py_None && PyIter_Check(yf))
                ret = __Pyx_PyIter_Next_Plain(yf);
            else
            #endif
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_mstate_global->__pyx_n_u_send, value);
        }
        if (likely(ret)) {
            __Pyx_Coroutine_unset_is_running(gen);
            *retval = ret;
            return PYGEN_NEXT;
        }
        result = __Pyx_Coroutine_FinishDelegation(gen, retval);
    } else {
        result = __Pyx_Coroutine_SendEx(gen, value, retval, 0);
    }
    __Pyx_Coroutine_unset_is_running(gen);
    return result;
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    __Pyx_PySendResult result;
    PyObject *retval = NULL;
    CYTHON_UNUSED_VAR(gen);
    assert(__Pyx_Coroutine_get_is_running(gen));
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        result = __Pyx_Coroutine_Close(yf, &retval);
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        result = __Pyx_Coroutine_Close(yf, &retval);
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        result = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf);
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
        result = PYGEN_RETURN;
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
        result = PYGEN_RETURN;
    } else
    #endif
    {
        PyObject *meth;
        result = PYGEN_RETURN;
        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_mstate_global->__pyx_n_u_close);
        if (unlikely(!meth)) {
            if (unlikely(PyErr_Occurred())) {
                PyErr_WriteUnraisable(yf);
            }
        } else {
            retval = __Pyx_PyObject_CallNoArg(meth);
            Py_DECREF(meth);
            if (unlikely(!retval)) {
                result = PYGEN_ERROR;
            }
        }
    }
    Py_XDECREF(retval);
    return result == PYGEN_ERROR ? -1 : 0;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __Pyx_PySendResult result;
    PyObject *retval = NULL;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    }
    #if CYTHON_USE_AM_SEND
    if (gen->yieldfrom_am_send) {
        result = __Pyx_Coroutine_SendToDelegate(gen, gen->yieldfrom_am_send, Py_None, &retval);
    } else
    #endif
    if (gen->yieldfrom) {
        PyObject *yf = gen->yieldfrom;
        PyObject *ret;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && (PY_VERSION_HEX < 0x030A00A3 || !CYTHON_USE_AM_SEND)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
            ret = __Pyx_PyIter_Next_Plain(yf);
        if (likely(ret)) {
            __Pyx_Coroutine_unset_is_running(gen);
            return ret;
        }
        result = __Pyx_Coroutine_FinishDelegation(gen, &retval);
    } else {
        result = __Pyx_Coroutine_SendEx(gen, Py_None, &retval, 0);
    }
    __Pyx_Coroutine_unset_is_running(gen);
    return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 1);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {
    PyObject *retval = NULL;
    __Pyx_PySendResult result;
    CYTHON_UNUSED_VAR(arg);
    result = __Pyx_Coroutine_Close(self, &retval);
    if (unlikely(result == PYGEN_ERROR))
        return NULL;
    Py_XDECREF(retval);
    Py_RETURN_NONE;
}
static __Pyx_PySendResult
__Pyx_Coroutine_Close(PyObject *self, PyObject **retval) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PySendResult result;
    PyObject *yf;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        *retval = __Pyx_Coroutine_AlreadyRunningError(gen);
        return PYGEN_ERROR;
    }
    yf = gen->yieldfrom;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    result = __Pyx_Coroutine_SendEx(gen, NULL, retval, 1);
    if (result == PYGEN_ERROR) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_Coroutine_unset_is_running(gen);
        if (!__Pyx_PyErr_Occurred()) {
            return PYGEN_RETURN;
        } else if (likely(__Pyx_PyErr_ExceptionMatches2(PyExc_GeneratorExit, PyExc_StopIteration))) {
            __Pyx_PyErr_Clear();
            return PYGEN_RETURN;
        }
        return PYGEN_ERROR;
    } else if (likely(result == PYGEN_RETURN && *retval == Py_None)) {
        __Pyx_Coroutine_unset_is_running(gen);
        return PYGEN_RETURN;
    } else {
        const char *msg;
        Py_DECREF(*retval);
        *retval = NULL;
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
            msg = "async generator ignored GeneratorExit";
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        __Pyx_Coroutine_unset_is_running(gen);
        return PYGEN_ERROR;
    }
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen)))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    yf = gen->yieldfrom;
    if (yf) {
        __Pyx_PySendResult result;
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                goto propagate_exception;
            goto throw_here;
        }
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_mstate_global->__pyx_n_u_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (unlikely(PyErr_Occurred())) {
                    __Pyx_Coroutine_unset_is_running(gen);
                    return NULL;
                }
                __Pyx_Coroutine_Undelegate(gen);
                goto throw_here;
            }
            if (likely(args)) {
                ret = __Pyx_PyObject_Call(meth, args, NULL);
            } else {
                PyObject *cargs[4] = {NULL, typ, val, tb};
                ret = __Pyx_PyObject_FastCall(meth, cargs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
            }
            Py_DECREF(meth);
        }
        Py_DECREF(yf);
        if (ret) {
            __Pyx_Coroutine_unset_is_running(gen);
            return ret;
        }
        result = __Pyx_Coroutine_FinishDelegation(gen, &ret);
        __Pyx_Coroutine_unset_is_running(gen);
        return __Pyx_Coroutine_MethodReturnFromResult(self, result, ret, 0);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
propagate_exception:
    {
        PyObject *retval = NULL;
        __Pyx_PySendResult result = __Pyx_Coroutine_SendEx(gen, NULL, &retval, 0);
        __Pyx_Coroutine_unset_is_running(gen);
        return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 0);
    }
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (unlikely(!PyArg_UnpackTuple(args, "throw", 1, 3, &typ, &val, &tb)))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_VISIT(exc_state->exc_value);
#else
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
#endif
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    {
        int e = __Pyx_call_type_traverse((PyObject*)gen, 1, visit, arg);
        if (e) return e;
    }
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if CYTHON_USE_TP_FINALIZE
        if (unlikely(PyObject_CallFinalizerFromDealloc(self)))
#else
        {
            destructor del = __Pyx_PyObject_GetSlot(gen, tp_del, destructor);
            if (del) del(self);
        }
        if (unlikely(Py_REFCNT(self) > 0))
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    __Pyx_PyHeapTypeObject_GC_Del(gen);
}
#if CYTHON_USE_TP_FINALIZE
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *retval = NULL;
        __Pyx_PySendResult result = __Pyx_Coroutine_Close(self, &retval);
        if (result == PYGEN_ERROR) {
            PyErr_WriteUnraisable(self);
        } else {
            Py_XDECREF(retval);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
}
#endif
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_name;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_name, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_qualname;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_qualname, value);
    return 0;
}
static PyObject *
__Pyx__Coroutine_get_frame(__pyx_CoroutineObject *self)
{
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyObject *frame;
    #if PY_VERSION_HEX >= 0x030d0000
    Py_BEGIN_CRITICAL_SECTION(self);
    #endif
    frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        PyObject *globals = PyDict_New();
        if (unlikely(!globals)) return NULL;
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            globals,                        /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        Py_DECREF(globals);
        if (unlikely(!frame))
            return NULL;
        if (unlikely(self->gi_frame)) {
            Py_DECREF(frame);
            frame = self->gi_frame;
        } else {
            self->gi_frame = frame;
        }
    }
    Py_INCREF(frame);
    #if PY_VERSION_HEX >= 0x030d0000
    Py_END_CRITICAL_SECTION();
    #endif
    return frame;
#else
    CYTHON_UNUSED_VAR(self);
    Py_RETURN_NONE;
#endif
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context) {
    CYTHON_UNUSED_VAR(context);
    PyObject *frame = self->gi_frame;
    if (frame)
        return __Pyx_NewRef(frame);
    return __Pyx__Coroutine_get_frame(self);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->yieldfrom_am_send = NULL;
    #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_LIMITED_API
    gen->gi_exc_state.exc_value = NULL;
    #else
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
    #endif
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}
static char __Pyx_Coroutine_test_and_set_is_running(__pyx_CoroutineObject *gen) {
    char result;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_BEGIN_CRITICAL_SECTION(gen);
    #endif
    result = gen->is_running;
    gen->is_running = 1;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_END_CRITICAL_SECTION();
    #endif
    return result;
}
static void __Pyx_Coroutine_unset_is_running(__pyx_CoroutineObject *gen) {
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_BEGIN_CRITICAL_SECTION(gen);
    #endif
    assert(gen->is_running);
    gen->is_running = 0;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_END_CRITICAL_SECTION();
    #endif
}
static char __Pyx_Coroutine_get_is_running(__pyx_CoroutineObject *gen) {
    char result;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_BEGIN_CRITICAL_SECTION(gen);
    #endif
    result = gen->is_running;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_END_CRITICAL_SECTION();
    #endif
    return result;
}
static PyObject *__Pyx_Coroutine_get_is_running_getter(PyObject *gen, void *closure) {
    CYTHON_UNUSED_VAR(closure);
    char result = __Pyx_Coroutine_get_is_running((__pyx_CoroutineObject*)gen);
    if (result) Py_RETURN_TRUE;
    else Py_RETURN_FALSE;
}
#if __PYX_HAS_PY_AM_SEND == 2
static void __Pyx_SetBackportTypeAmSend(PyTypeObject *type, __Pyx_PyAsyncMethodsStruct *static_amsend_methods, __Pyx_pyiter_sendfunc am_send) {
    Py_ssize_t ptr_offset = (char*)(type->tp_as_async) - (char*)type;
    if (ptr_offset < 0 || ptr_offset > type->tp_basicsize) {
        return;
    }
    memcpy((void*)static_amsend_methods, (void*)(type->tp_as_async), sizeof(*type->tp_as_async));
    static_amsend_methods->am_send = am_send;
    type->tp_as_async = __Pyx_SlotTpAsAsync(static_amsend_methods);
}
#endif
static PyObject *__Pyx_Coroutine_fail_reduce_ex(PyObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    __Pyx_TypeName self_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE((PyObject*)self));
    PyErr_Format(PyExc_TypeError, "cannot pickle '" __Pyx_FMT_TYPENAME "' object",
                         self_type_name);
    __Pyx_DECREF_TypeName(self_type_name);
    return NULL;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {"__reduce_ex__", (PyCFunction) __Pyx_Coroutine_fail_reduce_ex, METH_O, 0},
    {"__reduce__", (PyCFunction) __Pyx_Coroutine_fail_reduce_ex, METH_NOARGS, 0},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {"gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     PyDoc_STR("object being iterated by 'yield from', or None")},
    {"gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {"__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), 0, 0},
    {"__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CoroutineObject, gi_weakreflist), READONLY, 0},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {"__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     PyDoc_STR("name of the generator"), 0},
    {"__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     PyDoc_STR("qualified name of the generator"), 0},
    {"gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     PyDoc_STR("Frame of the generator"), 0},
    {"gi_running", __Pyx_Coroutine_get_is_running_getter, NULL, NULL, NULL},
    {0, 0, 0, 0, 0}
};
static PyType_Slot __pyx_GeneratorType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_Coroutine_dealloc},
    {Py_tp_traverse, (void *)__Pyx_Coroutine_traverse},
    {Py_tp_iter, (void *)PyObject_SelfIter},
    {Py_tp_iternext, (void *)__Pyx_Generator_Next},
    {Py_tp_methods, (void *)__pyx_Generator_methods},
    {Py_tp_members, (void *)__pyx_Generator_memberlist},
    {Py_tp_getset, (void *)__pyx_Generator_getsets},
    {Py_tp_getattro, (void *) PyObject_GenericGetAttr},
#if CYTHON_USE_TP_FINALIZE
    {Py_tp_finalize, (void *)__Pyx_Coroutine_del},
#endif
#if __PYX_HAS_PY_AM_SEND == 1
    {Py_am_send, (void *)__Pyx_Coroutine_AmSend},
#endif
    {0, 0},
};
static PyType_Spec __pyx_GeneratorType_spec = {
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE | __Pyx_TPFLAGS_HAVE_AM_SEND,
    __pyx_GeneratorType_slots
};
#if __PYX_HAS_PY_AM_SEND == 2
static __Pyx_PyAsyncMethodsStruct __pyx_Generator_as_async;
#endif
static int __pyx_Generator_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    mstate->__pyx_GeneratorType = __Pyx_FetchCommonTypeFromSpec(
        mstate->__pyx_CommonTypesMetaclassType, module, &__pyx_GeneratorType_spec, NULL);
    if (unlikely(!mstate->__pyx_GeneratorType)) {
        return -1;
    }
#if __PYX_HAS_PY_AM_SEND == 2
    __Pyx_SetBackportTypeAmSend(mstate->__pyx_GeneratorType, &__pyx_Generator_as_async, &__Pyx_Coroutine_AmSend);
#endif
    return 0;
}
static PyObject *__Pyx_Generator_GetInlinedResult(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *retval = NULL;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    }
    __Pyx_PySendResult result = __Pyx_Coroutine_SendEx(gen, Py_None, &retval, 0);
    __Pyx_Coroutine_unset_is_running(gen);
    (void) result;
    assert (result == PYGEN_RETURN || result == PYGEN_ERROR);
    assert ((result == PYGEN_RETURN && retval != NULL) || (result == PYGEN_ERROR && retval == NULL));
    return retval;
}

/* GetRuntimeVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030b0000
    return Py_Version & ~0xFFUL;
#else
    static unsigned long __Pyx_cached_runtime_version = 0;
    if (__Pyx_cached_runtime_version == 0) {
        const char* rt_version = Py_GetVersion();
        unsigned long version = 0;
        unsigned long factor = 0x01000000UL;
        unsigned int digit = 0;
        int i = 0;
        while (factor) {
            while ('0' <= rt_version[i] && rt_version[i] <= '9') {
                digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
                ++i;
            }
            version += factor * digit;
            if (rt_version[i] != '.')
                break;
            digit = 0;
            factor >>= 8;
            ++i;
        }
        __Pyx_cached_runtime_version = version;
    }
    return __Pyx_cached_runtime_version;
#endif
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* NewCodeObj */
#if CYTHON_COMPILING_IN_LIMITED_API
    static PyObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,
                                       PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                       PyObject *fv, PyObject *cell, PyObject* fn,
                                       PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030b0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030b0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOOOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
#elif PY_VERSION_HEX >= 0x030B0000
  static PyCodeObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,
                                         PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                         PyObject *fv, PyObject *cell, PyObject* fn,
                                         PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, __pyx_mstate_global->__pyx_empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
static PyObject* __Pyx_PyCode_New(
        const __Pyx_PyCode_New_function_description descr,
        PyObject * const *varnames,
        PyObject *filename,
        PyObject *funcname,
        const char *line_table,
        PyObject *tuple_dedup_map
) {
    PyObject *code_obj = NULL, *varnames_tuple_dedup = NULL, *code_bytes = NULL, *line_table_bytes = NULL;
    Py_ssize_t var_count = (Py_ssize_t) descr.nlocals;
    PyObject *varnames_tuple = PyTuple_New(var_count);
    if (unlikely(!varnames_tuple)) return NULL;
    for (Py_ssize_t i=0; i < var_count; i++) {
        Py_INCREF(varnames[i]);
        if (__Pyx_PyTuple_SET_ITEM(varnames_tuple, i, varnames[i]) != (0)) goto done;
    }
    #if CYTHON_COMPILING_IN_LIMITED_API
    varnames_tuple_dedup = PyDict_GetItem(tuple_dedup_map, varnames_tuple);
    if (!varnames_tuple_dedup) {
        if (unlikely(PyDict_SetItem(tuple_dedup_map, varnames_tuple, varnames_tuple) < 0)) goto done;
        varnames_tuple_dedup = varnames_tuple;
    }
    #else
    varnames_tuple_dedup = PyDict_SetDefault(tuple_dedup_map, varnames_tuple, varnames_tuple);
    if (unlikely(!varnames_tuple_dedup)) goto done;
    #endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(varnames_tuple_dedup);
    #endif
    if (__PYX_LIMITED_VERSION_HEX >= (0x030b0000) && line_table != NULL
        && !CYTHON_COMPILING_IN_GRAAL) {
        line_table_bytes = PyBytes_FromStringAndSize(line_table, descr.line_table_length);
        if (unlikely(!line_table_bytes)) goto done;
        Py_ssize_t code_len = (descr.line_table_length * 2 + 4) & ~3;
        code_bytes = PyBytes_FromStringAndSize(NULL, code_len);
        if (unlikely(!code_bytes)) goto done;
        char* c_code_bytes = PyBytes_AsString(code_bytes);
        if (unlikely(!c_code_bytes)) goto done;
        memset(c_code_bytes, 0, (size_t) code_len);
    }
    code_obj = (PyObject*) __Pyx__PyCode_New(
        (int) descr.argcount,
        (int) descr.num_posonly_args,
        (int) descr.num_kwonly_args,
        (int) descr.nlocals,
        0,
        (int) descr.flags,
        code_bytes ? code_bytes : __pyx_mstate_global->__pyx_empty_bytes,
        __pyx_mstate_global->__pyx_empty_tuple,
        __pyx_mstate_global->__pyx_empty_tuple,
        varnames_tuple_dedup,
        __pyx_mstate_global->__pyx_empty_tuple,
        __pyx_mstate_global->__pyx_empty_tuple,
        filename,
        funcname,
        (int) descr.first_line,
        (__PYX_LIMITED_VERSION_HEX >= (0x030b0000) && line_table_bytes) ? line_table_bytes : __pyx_mstate_global->__pyx_empty_bytes
    );
done:
    Py_XDECREF(code_bytes);
    Py_XDECREF(line_table_bytes);
    #if CYTHON_AVOID_BORROWED_REFS
    Py_XDECREF(varnames_tuple_dedup);
    #endif
    Py_DECREF(varnames_tuple);
    return code_obj;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names) {
    while (t->s) {
        PyObject *str;
        if (t->is_unicode) {
            if (t->intern) {
                str = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                str = PyUnicode_Decode(t->s, t->n - 1, encoding_names[t->encoding], NULL);
            } else {
                str = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            str = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        if (!str)
            return -1;
        *target = str;
        if (PyObject_Hash(str) == -1)
            return -1;
        ++t;
        ++target;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    {
        const char* result;
        Py_ssize_t unicode_length;
        CYTHON_MAYBE_UNUSED_VAR(unicode_length); // only for __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        #if __PYX_LIMITED_VERSION_HEX < 0x030A0000
        if (unlikely(PyArg_Parse(o, "s#", &result, length) < 0)) return NULL;
        #else
        result = PyUnicode_AsUTF8AndSize(o, length);
        #endif
        #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        unicode_length = PyUnicode_GetLength(o);
        if (unlikely(unicode_length < 0)) return NULL;
        if (unlikely(unicode_length != *length)) {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
        #endif
        return result;
    }
#else
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
}
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
    if (PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
    if (PyByteArray_Check(o)) {
#if (CYTHON_ASSUME_SAFE_SIZE && CYTHON_ASSUME_SAFE_MACROS) || (CYTHON_COMPILING_IN_PYPY && (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE)))
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
#else
        *length = PyByteArray_Size(o);
        if (*length == -1) return NULL;
        return PyByteArray_AsString(o);
#endif
    } else
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_LongWrongResultType(PyObject* result) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(result));
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
    PyErr_Format(PyExc_TypeError,
                 "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ")",
                 result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  PyObject *res = NULL;
  if (likely(PyLong_Check(x)))
      return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  if (likely(m && m->nb_int)) {
      res = m->nb_int(x);
  }
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
      res = PyNumber_Long(x);
  }
#endif
  if (likely(res)) {
      if (unlikely(!PyLong_CheckExact(res))) {
          return __Pyx_PyNumber_LongWrongResultType(res);
      }
  }
  else if (!PyErr_Occurred()) {
      PyErr_SetString(PyExc_TypeError,
                      "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyLong_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyLong_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b) {
    CYTHON_UNUSED_VAR(b);
    return __Pyx_NewRef(Py_None);
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t ival) {
    return PyLong_FromSize_t(ival);
}


/* MultiPhaseInitModuleState */
#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE
#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)
  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1
#else
  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0
#endif
#endif
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS
#error "Module state with PEP489 requires atomics. Currently that's one of\
 C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics"
#endif
#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
#define __Pyx_ModuleStateLookup_Lock()
#define __Pyx_ModuleStateLookup_Unlock()
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000
static PyMutex __Pyx_ModuleStateLookup_mutex = {0};
#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(__cplusplus) && __cplusplus >= 201103L
#include <mutex>
static std::mutex __Pyx_ModuleStateLookup_mutex;
#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()
#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()
#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)
#include <threads.h>
static mtx_t __Pyx_ModuleStateLookup_mutex;
static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;
static void __Pyx_ModuleStateLookup_initialize_mutex(void) {
    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);
}
#define __Pyx_ModuleStateLookup_Lock()\
  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex);\
  mtx_lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(HAVE_PTHREAD_H)
#include <pthread.h>
static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;
#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(_WIN32)
#include <Windows.h>  // synchapi.h on its own doesn't work
static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;
#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)
#else
#error "No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE.\
 Requires C standard >= C11, or C++ standard >= C++11,\
 or pthreads, or the Windows 32 API, or Python >= 3.13."
#endif
typedef struct {
    int64_t id;
    PyObject *module;
} __Pyx_InterpreterIdAndModule;
typedef struct {
    char interpreter_id_as_index;
    Py_ssize_t count;
    Py_ssize_t allocated;
    __Pyx_InterpreterIdAndModule table[1];
} __Pyx_ModuleStateLookupData;
#define __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE 32
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static __pyx_atomic_int_type __Pyx_ModuleStateLookup_read_counter = 0;
#endif
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static __pyx_atomic_ptr_type __Pyx_ModuleStateLookup_data = 0;
#else
static __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_data = NULL;
#endif
static __Pyx_InterpreterIdAndModule* __Pyx_State_FindModuleStateLookupTableLowerBound(
        __Pyx_InterpreterIdAndModule* table,
        Py_ssize_t count,
        int64_t interpreterId) {
    __Pyx_InterpreterIdAndModule* begin = table;
    __Pyx_InterpreterIdAndModule* end = begin + count;
    if (begin->id == interpreterId) {
        return begin;
    }
    while ((end - begin) > __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {
        __Pyx_InterpreterIdAndModule* halfway = begin + (end - begin)/2;
        if (halfway->id == interpreterId) {
            return halfway;
        }
        if (halfway->id < interpreterId) {
            begin = halfway;
        } else {
            end = halfway;
        }
    }
    for (; begin < end; ++begin) {
        if (begin->id >= interpreterId) return begin;
    }
    return begin;
}
static PyObject *__Pyx_State_FindModule(CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return NULL;
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData* data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);
    {
        __pyx_atomic_incr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
        if (likely(data)) {
            __Pyx_ModuleStateLookupData* new_data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_acquire(&__Pyx_ModuleStateLookup_data);
            if (likely(data == new_data)) {
                goto read_finished;
            }
        }
        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
        __Pyx_ModuleStateLookup_Lock();
        __pyx_atomic_incr_relaxed(&__Pyx_ModuleStateLookup_read_counter);
        data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);
        __Pyx_ModuleStateLookup_Unlock();
    }
  read_finished:;
#else
    __Pyx_ModuleStateLookupData* data = __Pyx_ModuleStateLookup_data;
#endif
    __Pyx_InterpreterIdAndModule* found = NULL;
    if (unlikely(!data)) goto end;
    if (data->interpreter_id_as_index) {
        if (interpreter_id < data->count) {
            found = data->table+interpreter_id;
        }
    } else {
        found = __Pyx_State_FindModuleStateLookupTableLowerBound(
            data->table, data->count, interpreter_id);
    }
  end:
    {
        PyObject *result=NULL;
        if (found && found->id == interpreter_id) {
            result = found->module;
        }
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
#endif
        return result;
    }
}
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static void __Pyx_ModuleStateLookup_wait_until_no_readers(void) {
    while (__pyx_atomic_load(&__Pyx_ModuleStateLookup_read_counter) != 0);
}
#else
#define __Pyx_ModuleStateLookup_wait_until_no_readers()
#endif
static int __Pyx_State_AddModuleInterpIdAsIndex(__Pyx_ModuleStateLookupData **old_data, PyObject* module, int64_t interpreter_id) {
    Py_ssize_t to_allocate = (*old_data)->allocated;
    while (to_allocate <= interpreter_id) {
        if (to_allocate == 0) to_allocate = 1;
        else to_allocate *= 2;
    }
    __Pyx_ModuleStateLookupData *new_data = *old_data;
    if (to_allocate != (*old_data)->allocated) {
         new_data = (__Pyx_ModuleStateLookupData *)realloc(
            *old_data,
            sizeof(__Pyx_ModuleStateLookupData)+(to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));
        if (!new_data) {
            PyErr_NoMemory();
            return -1;
        }
        for (Py_ssize_t i = new_data->allocated; i < to_allocate; ++i) {
            new_data->table[i].id = i;
            new_data->table[i].module = NULL;
        }
        new_data->allocated = to_allocate;
    }
    new_data->table[interpreter_id].module = module;
    if (new_data->count < interpreter_id+1) {
        new_data->count = interpreter_id+1;
    }
    *old_data = new_data;
    return 0;
}
static void __Pyx_State_ConvertFromInterpIdAsIndex(__Pyx_ModuleStateLookupData *data) {
    __Pyx_InterpreterIdAndModule *read = data->table;
    __Pyx_InterpreterIdAndModule *write = data->table;
    __Pyx_InterpreterIdAndModule *end = read + data->count;
    for (; read<end; ++read) {
        if (read->module) {
            write->id = read->id;
            write->module = read->module;
            ++write;
        }
    }
    data->count = write - data->table;
    for (; write<end; ++write) {
        write->id = 0;
        write->module = NULL;
    }
    data->interpreter_id_as_index = 0;
}
static int __Pyx_State_AddModule(PyObject* module, CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return -1;
    int result = 0;
    __Pyx_ModuleStateLookup_Lock();
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData *old_data = (__Pyx_ModuleStateLookupData *)
            __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, 0);
#else
    __Pyx_ModuleStateLookupData *old_data = __Pyx_ModuleStateLookup_data;
#endif
    __Pyx_ModuleStateLookupData *new_data = old_data;
    if (!new_data) {
        new_data = (__Pyx_ModuleStateLookupData *)calloc(1, sizeof(__Pyx_ModuleStateLookupData));
        if (!new_data) {
            result = -1;
            PyErr_NoMemory();
            goto end;
        }
        new_data->allocated = 1;
        new_data->interpreter_id_as_index = 1;
    }
    __Pyx_ModuleStateLookup_wait_until_no_readers();
    if (new_data->interpreter_id_as_index) {
        if (interpreter_id < __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {
            result = __Pyx_State_AddModuleInterpIdAsIndex(&new_data, module, interpreter_id);
            goto end;
        }
        __Pyx_State_ConvertFromInterpIdAsIndex(new_data);
    }
    {
        Py_ssize_t insert_at = 0;
        {
            __Pyx_InterpreterIdAndModule* lower_bound = __Pyx_State_FindModuleStateLookupTableLowerBound(
                new_data->table, new_data->count, interpreter_id);
            assert(lower_bound);
            insert_at = lower_bound - new_data->table;
            if (unlikely(insert_at < new_data->count && lower_bound->id == interpreter_id)) {
                lower_bound->module = module;
                goto end;  // already in table, nothing more to do
            }
        }
        if (new_data->count+1 >= new_data->allocated) {
            Py_ssize_t to_allocate = (new_data->count+1)*2;
            new_data =
                (__Pyx_ModuleStateLookupData*)realloc(
                    new_data,
                    sizeof(__Pyx_ModuleStateLookupData) +
                    (to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));
            if (!new_data) {
                result = -1;
                new_data = old_data;
                PyErr_NoMemory();
                goto end;
            }
            new_data->allocated = to_allocate;
        }
        ++new_data->count;
        int64_t last_id = interpreter_id;
        PyObject *last_module = module;
        for (Py_ssize_t i=insert_at; i<new_data->count; ++i) {
            int64_t current_id = new_data->table[i].id;
            new_data->table[i].id = last_id;
            last_id = current_id;
            PyObject *current_module = new_data->table[i].module;
            new_data->table[i].module = last_module;
            last_module = current_module;
        }
    }
  end:
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, new_data);
#else
    __Pyx_ModuleStateLookup_data = new_data;
#endif
    __Pyx_ModuleStateLookup_Unlock();
    return result;
}
static int __Pyx_State_RemoveModule(CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return -1;
    __Pyx_ModuleStateLookup_Lock();
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData *data = (__Pyx_ModuleStateLookupData *)
            __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, 0);
#else
    __Pyx_ModuleStateLookupData *data = __Pyx_ModuleStateLookup_data;
#endif
    if (data->interpreter_id_as_index) {
        if (interpreter_id < data->count) {
            data->table[interpreter_id].module = NULL;
        }
        goto done;
    }
    {
        __Pyx_ModuleStateLookup_wait_until_no_readers();
        __Pyx_InterpreterIdAndModule* lower_bound = __Pyx_State_FindModuleStateLookupTableLowerBound(
            data->table, data->count, interpreter_id);
        if (!lower_bound) goto done;
        if (lower_bound->id != interpreter_id) goto done;
        __Pyx_InterpreterIdAndModule *end = data->table+data->count;
        for (;lower_bound<end-1; ++lower_bound) {
            lower_bound->id = (lower_bound+1)->id;
            lower_bound->module = (lower_bound+1)->module;
        }
    }
    --data->count;
    if (data->count == 0) {
        free(data);
        data = NULL;
    }
  done:
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, data);
#else
    __Pyx_ModuleStateLookup_data = data;
#endif
    __Pyx_ModuleStateLookup_Unlock();
    return 0;
}
#endif

/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
