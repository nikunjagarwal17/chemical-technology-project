name: Build and test PyroXa

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy cython build pytest
        pip install -e .
    
    - name: Test PyroXa import
      run: |
        python -c "import pyroxa; print(f'PyroXa {pyroxa.get_version()} works!')"
    
    - name: Run basic tests
      run: |
        python -c "
        import pyroxa
        assert hasattr(pyroxa, 'autocatalytic_rate')
        result = pyroxa.autocatalytic_rate(0.1, 2.0, 1.5)
        assert result > 0
        print('âœ… Basic tests passed')
        "

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macOS-11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.2
      env:
        # Try C++ build first, fallback to pure Python if it fails
        CIBW_ENVIRONMENT_LINUX: "PYROXA_PURE_PYTHON=0"
        CIBW_ENVIRONMENT_WINDOWS: "PYROXA_PURE_PYTHON=0"
        CIBW_ENVIRONMENT_MACOS: "PYROXA_PURE_PYTHON=0"
        
        # Fallback to pure Python on build failure
        CIBW_BEFORE_BUILD: |
          pip install --upgrade pip setuptools wheel numpy>=1.19.0 Cython>=3.0.0 || \
          (echo "C++ build failed, trying pure Python" && export PYROXA_PURE_PYTHON=1 && pip install --upgrade pip setuptools wheel numpy>=1.19.0)
        
        CIBW_TEST_COMMAND: "python -c 'import pyroxa; print(f\"PyroXa {pyroxa.get_version()} works!\")'"
        CIBW_TEST_REQUIRES: "numpy"
        
        # Build settings
        CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-*"
        CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux* pp*"
    
    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: pyroxa-wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Build sdist
      run: |
        python -m pip install --upgrade pip build
        python -m build --sdist
    
    - name: Test sdist install
      run: |
        pip install dist/*.tar.gz
        python -c "import pyroxa; print(f'PyroXa {pyroxa.get_version()} from sdist works!')"
    
    - name: Upload sdist
      uses: actions/upload-artifact@v3
      with:
        name: pyroxa-sdist
        path: dist/*.tar.gz

  upload_pypi:
    needs: [test, build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: dist
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.8.10
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: dist/*/
