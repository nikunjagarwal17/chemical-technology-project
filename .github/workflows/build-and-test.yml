name: Build and Test PyroXa

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest numpy
    
    - name: Build PyroXa
      run: |
        echo "Building PyroXa v1.0.0 (Pure Python)..."
        python -m build
    
    - name: Install and test PyroXa
      run: |
        pip install dist/*.whl
        python -c "
        import pyroxa
        print(f'âœ… PyroXa {pyroxa.get_version()} loaded successfully')
        print(f'ðŸ“¦ Functions: {len([x for x in dir(pyroxa) if not x.startswith(\"_\")])}')
        
        # Test key functions
        arr = pyroxa.arrhenius_rate(1e6, 50000, 298)
        auto = pyroxa.autocatalytic_rate(0.1, 2.0, 1.5)
        interp = pyroxa.linear_interpolate(2.5, [1,2,3,4], [2,4,6,8])
        
        print(f'âœ… arrhenius_rate: {arr:.3e}')
        print(f'âœ… autocatalytic_rate: {auto:.3e}')
        print(f'âœ… linear_interpolate: {interp}')
        
        assert abs(arr - 1.72e-3) < 1e-5, 'Arrhenius calculation failed'
        assert abs(auto - 0.3) < 1e-10, 'Autocatalytic calculation failed'
        assert abs(interp - 5.0) < 1e-10, 'Interpolation failed'
        
        print('ðŸŽ‰ All tests passed!')
        "
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pyroxa-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/

  publish:
    name: Publish to PyPI
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build distribution
      run: python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*
