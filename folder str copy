# Project Folder Line Diagram (workflow-focused)

This diagram lists only the folders directly involved in the development, build, test and release workflow and the key files/contents expected in each folder.

project/                      <- repository root
|
|-- pyroxa/            
|   |-- __init__.py           
|   |-- purepy.py             
|   |-- io.py                 
|   |-- pybindings.pyx        
|   `-- (generated) pybindings.cpp 
|
|-- src/                      
|   |-- core.h                
|   `-- core.cpp              
|
|-- docs/                     
|   |-- conf.py
|   |-- index.rst
|   `-- usage.rst
|
|-- build/                    
|   `-- ...                   
|
`-- (root-level files)
    |-- README.md
    |-- PROGRESS.md
    `-- requirements.txt

Notes
- The `pyroxa/` package is the runtime entrypoint; it attempts to load compiled `_pybindings` (if present) and otherwise uses `purepy.py`.
- `src/` implements the C++ core; changes here require updating `pybindings.pyx` and rebuilding the extension.
- `examples/` and `tests/` are the primary artifacts you should open during demos and presentations â€” they are reproducible and require no native build.
- `.github/workflows` contains the CI logic that produces wheels (useful for Part 2/3 demos).

If you'd like this as a printable handout or an SVG diagram for slides, I can convert the ASCII tree into a simple diagram image next.

Short one-line descriptions (appendix):
- `pyroxa/`: package code and public API (pure-Python fallback + Cython sources).
- `src/`: C++ numerical core (performance code, integrators).
- `docs/`: documentation source (Sphinx conf and pages).
- `build/`: local compilation artifacts and temporary files.
- `examples/`: YAML specs and small demo scripts (run these in the demo).
- `tests/`: pytest unit tests proving correctness.
- `README.md`, `PROGRESS.md`, `requirements.txt`: top-level project docs and dependency list.
